<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 1
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 1
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 1
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 1
>>>>>>> parent of cb49844... test


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"tasks.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	pxCurrentTCB
  20              		.bss
  21              		.align	2
  22              		.type	pxCurrentTCB, %object
  23              		.size	pxCurrentTCB, 4
  24              	pxCurrentTCB:
  25 0000 00000000 		.space	4
  26              		.align	2
  27              	pxReadyTasksLists:
  28 0004 00000000 		.space	100
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.align	2
  30              	pxDelayedTaskList:
  31 0068 00000000 		.space	4
  32              		.align	2
  33              	pxOverflowDelayedTaskList:
  34 006c 00000000 		.space	4
  35              		.align	2
  36              	xPendingReadyList:
  37 0070 00000000 		.space	20
  37      00000000 
  37      00000000 
  37      00000000 
  37      00000000 
  38              		.align	2
  39              	xTasksWaitingTermination:
  40 0084 00000000 		.space	20
  40      00000000 
  40      00000000 
  40      00000000 
  40      00000000 
  41              		.align	2
  42              	uxDeletedTasksWaitingCleanUp:
  43 0098 00000000 		.space	4
  44              		.align	2
  45              	xSuspendedTaskList:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 2
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 2
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 2
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 2
>>>>>>> parent of cb49844... test


  46 009c 00000000 		.space	20
  46      00000000 
  46      00000000 
  46      00000000 
  46      00000000 
  47              		.align	2
  48              	uxCurrentNumberOfTasks:
  49 00b0 00000000 		.space	4
  50              		.align	2
  51              	xTickCount:
  52 00b4 00000000 		.space	4
  53              		.align	2
  54              	uxTopReadyPriority:
  55 00b8 00000000 		.space	4
  56              		.align	2
  57              	xSchedulerRunning:
  58 00bc 00000000 		.space	4
  59              		.align	2
  60              	uxPendedTicks:
  61 00c0 00000000 		.space	4
  62              		.align	2
  63              	xYieldPending:
  64 00c4 00000000 		.space	4
  65              		.align	2
  66              	xNumOfOverflows:
  67 00c8 00000000 		.space	4
  68              		.align	2
  69              	uxTaskNumber:
  70 00cc 00000000 		.space	4
  71              		.align	2
  72              	xNextTaskUnblockTime:
  73 00d0 00000000 		.space	4
  74              		.align	2
  75              	xIdleTaskHandle:
  76 00d4 00000000 		.space	4
  77              		.align	2
  78              	uxSchedulerSuspended:
  79 00d8 00000000 		.space	4
  80              		.section	.text.xTaskCreate,"ax",%progbits
  81              		.align	2
  82              		.global	xTaskCreate
  83              		.thumb
  84              		.thumb_func
  85              		.type	xTaskCreate, %function
  86              	xTaskCreate:
  87              	.LFB68:
  88              		.file 1 "..\\..\\FreeRTOS_Source\\tasks.c"
   1:..\..\FreeRTOS_Source/tasks.c **** /*
   2:..\..\FreeRTOS_Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source/tasks.c ****  *
   5:..\..\FreeRTOS_Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source/tasks.c ****  * subject to the following conditions:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 3
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 3
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 3
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 3
>>>>>>> parent of cb49844... test


  11:..\..\FreeRTOS_Source/tasks.c ****  *
  12:..\..\FreeRTOS_Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source/tasks.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source/tasks.c ****  *
  15:..\..\FreeRTOS_Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source/tasks.c ****  *
  22:..\..\FreeRTOS_Source/tasks.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source/tasks.c ****  *
  25:..\..\FreeRTOS_Source/tasks.c ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source/tasks.c ****  */
  27:..\..\FreeRTOS_Source/tasks.c **** 
  28:..\..\FreeRTOS_Source/tasks.c **** /* Standard includes. */
  29:..\..\FreeRTOS_Source/tasks.c **** #include <stdlib.h>
  30:..\..\FreeRTOS_Source/tasks.c **** #include <string.h>
  31:..\..\FreeRTOS_Source/tasks.c **** 
  32:..\..\FreeRTOS_Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:..\..\FreeRTOS_Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:..\..\FreeRTOS_Source/tasks.c **** task.h is included from an application file. */
  35:..\..\FreeRTOS_Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:..\..\FreeRTOS_Source/tasks.c **** 
  37:..\..\FreeRTOS_Source/tasks.c **** /* FreeRTOS includes. */
  38:..\..\FreeRTOS_Source/tasks.c **** #include "FreeRTOS.h"
  39:..\..\FreeRTOS_Source/tasks.c **** #include "task.h"
  40:..\..\FreeRTOS_Source/tasks.c **** #include "timers.h"
  41:..\..\FreeRTOS_Source/tasks.c **** #include "stack_macros.h"
  42:..\..\FreeRTOS_Source/tasks.c **** 
  43:..\..\FreeRTOS_Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:..\..\FreeRTOS_Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:..\..\FreeRTOS_Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:..\..\FreeRTOS_Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:..\..\FreeRTOS_Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:..\..\FreeRTOS_Source/tasks.c **** 
  49:..\..\FreeRTOS_Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:..\..\FreeRTOS_Source/tasks.c **** functions but without including stdio.h here. */
  51:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:..\..\FreeRTOS_Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:..\..\FreeRTOS_Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:..\..\FreeRTOS_Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:..\..\FreeRTOS_Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:..\..\FreeRTOS_Source/tasks.c **** 	#include <stdio.h>
  57:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:..\..\FreeRTOS_Source/tasks.c **** 
  59:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:..\..\FreeRTOS_Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:..\..\FreeRTOS_Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:..\..\FreeRTOS_Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:..\..\FreeRTOS_Source/tasks.c **** #else
  64:..\..\FreeRTOS_Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:..\..\FreeRTOS_Source/tasks.c **** #endif
  66:..\..\FreeRTOS_Source/tasks.c **** 
  67:..\..\FreeRTOS_Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 4
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 4
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 4
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 4
>>>>>>> parent of cb49844... test


  68:..\..\FreeRTOS_Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:..\..\FreeRTOS_Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:..\..\FreeRTOS_Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:..\..\FreeRTOS_Source/tasks.c **** 
  72:..\..\FreeRTOS_Source/tasks.c **** /*
  73:..\..\FreeRTOS_Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:..\..\FreeRTOS_Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:..\..\FreeRTOS_Source/tasks.c ****  */
  76:..\..\FreeRTOS_Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:..\..\FreeRTOS_Source/tasks.c **** 
  78:..\..\FreeRTOS_Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:..\..\FreeRTOS_Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:..\..\FreeRTOS_Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:..\..\FreeRTOS_Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:..\..\FreeRTOS_Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:..\..\FreeRTOS_Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:..\..\FreeRTOS_Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:..\..\FreeRTOS_Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:..\..\FreeRTOS_Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:..\..\FreeRTOS_Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:..\..\FreeRTOS_Source/tasks.c **** made to free the RAM that was allocated statically.
  89:..\..\FreeRTOS_Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
  90:..\..\FreeRTOS_Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:..\..\FreeRTOS_Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:..\..\FreeRTOS_Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:..\..\FreeRTOS_Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:..\..\FreeRTOS_Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:..\..\FreeRTOS_Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:..\..\FreeRTOS_Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:..\..\FreeRTOS_Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:..\..\FreeRTOS_Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:..\..\FreeRTOS_Source/tasks.c **** 
 100:..\..\FreeRTOS_Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:..\..\FreeRTOS_Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:..\..\FreeRTOS_Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:..\..\FreeRTOS_Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:..\..\FreeRTOS_Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:..\..\FreeRTOS_Source/tasks.c **** #else
 106:..\..\FreeRTOS_Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:..\..\FreeRTOS_Source/tasks.c **** #endif
 108:..\..\FreeRTOS_Source/tasks.c **** 
 109:..\..\FreeRTOS_Source/tasks.c **** /*
 110:..\..\FreeRTOS_Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:..\..\FreeRTOS_Source/tasks.c ****  */
 112:..\..\FreeRTOS_Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:..\..\FreeRTOS_Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:..\..\FreeRTOS_Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:..\..\FreeRTOS_Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:..\..\FreeRTOS_Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:..\..\FreeRTOS_Source/tasks.c **** 
 118:..\..\FreeRTOS_Source/tasks.c **** /*
 119:..\..\FreeRTOS_Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:..\..\FreeRTOS_Source/tasks.c ****  * global, rather than file scope.
 121:..\..\FreeRTOS_Source/tasks.c ****  */
 122:..\..\FreeRTOS_Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:..\..\FreeRTOS_Source/tasks.c **** 	#define static
 124:..\..\FreeRTOS_Source/tasks.c **** #endif
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 5
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 5
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 5
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 5
>>>>>>> parent of cb49844... test


 125:..\..\FreeRTOS_Source/tasks.c **** 
 126:..\..\FreeRTOS_Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:..\..\FreeRTOS_Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:..\..\FreeRTOS_Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:..\..\FreeRTOS_Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:..\..\FreeRTOS_Source/tasks.c **** #endif
 131:..\..\FreeRTOS_Source/tasks.c **** 
 132:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:..\..\FreeRTOS_Source/tasks.c **** 
 134:..\..\FreeRTOS_Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:..\..\FreeRTOS_Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:..\..\FreeRTOS_Source/tasks.c **** 	microcontroller architecture. */
 137:..\..\FreeRTOS_Source/tasks.c **** 
 138:..\..\FreeRTOS_Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:..\..\FreeRTOS_Source/tasks.c **** 	state task. */
 140:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:..\..\FreeRTOS_Source/tasks.c **** 	{																									\
 142:..\..\FreeRTOS_Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:..\..\FreeRTOS_Source/tasks.c **** 		{																								\
 144:..\..\FreeRTOS_Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:..\..\FreeRTOS_Source/tasks.c **** 		}																								\
 146:..\..\FreeRTOS_Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 147:..\..\FreeRTOS_Source/tasks.c **** 
 148:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:..\..\FreeRTOS_Source/tasks.c **** 
 150:..\..\FreeRTOS_Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:..\..\FreeRTOS_Source/tasks.c **** 	{																									\
 152:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:..\..\FreeRTOS_Source/tasks.c **** 																										\
 154:..\..\FreeRTOS_Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:..\..\FreeRTOS_Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:..\..\FreeRTOS_Source/tasks.c **** 		{																								\
 157:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:..\..\FreeRTOS_Source/tasks.c **** 			--uxTopPriority;																			\
 159:..\..\FreeRTOS_Source/tasks.c **** 		}																								\
 160:..\..\FreeRTOS_Source/tasks.c **** 																										\
 161:..\..\FreeRTOS_Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:..\..\FreeRTOS_Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:..\..\FreeRTOS_Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:..\..\FreeRTOS_Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:..\..\FreeRTOS_Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:..\..\FreeRTOS_Source/tasks.c **** 
 167:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:..\..\FreeRTOS_Source/tasks.c **** 
 169:..\..\FreeRTOS_Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:..\..\FreeRTOS_Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:..\..\FreeRTOS_Source/tasks.c **** 	being used. */
 172:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:..\..\FreeRTOS_Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:..\..\FreeRTOS_Source/tasks.c **** 
 175:..\..\FreeRTOS_Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:..\..\FreeRTOS_Source/tasks.c **** 
 177:..\..\FreeRTOS_Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:..\..\FreeRTOS_Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:..\..\FreeRTOS_Source/tasks.c **** 	architecture being used. */
 180:..\..\FreeRTOS_Source/tasks.c **** 
 181:..\..\FreeRTOS_Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 6
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 6
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 6
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 6
>>>>>>> parent of cb49844... test


 182:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:..\..\FreeRTOS_Source/tasks.c **** 
 184:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:..\..\FreeRTOS_Source/tasks.c **** 
 186:..\..\FreeRTOS_Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:..\..\FreeRTOS_Source/tasks.c **** 	{																								\
 188:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:..\..\FreeRTOS_Source/tasks.c **** 																									\
 190:..\..\FreeRTOS_Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:..\..\FreeRTOS_Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:..\..\FreeRTOS_Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:..\..\FreeRTOS_Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:..\..\FreeRTOS_Source/tasks.c **** 
 196:..\..\FreeRTOS_Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:..\..\FreeRTOS_Source/tasks.c **** 
 198:..\..\FreeRTOS_Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:..\..\FreeRTOS_Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:..\..\FreeRTOS_Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:..\..\FreeRTOS_Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:..\..\FreeRTOS_Source/tasks.c **** 	{																									\
 203:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 204:..\..\FreeRTOS_Source/tasks.c **** 		{																								\
 205:..\..\FreeRTOS_Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:..\..\FreeRTOS_Source/tasks.c **** 		}																								\
 207:..\..\FreeRTOS_Source/tasks.c **** 	}
 208:..\..\FreeRTOS_Source/tasks.c **** 
 209:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:..\..\FreeRTOS_Source/tasks.c **** 
 211:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 212:..\..\FreeRTOS_Source/tasks.c **** 
 213:..\..\FreeRTOS_Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:..\..\FreeRTOS_Source/tasks.c **** count overflows. */
 215:..\..\FreeRTOS_Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:..\..\FreeRTOS_Source/tasks.c **** {																									\
 217:..\..\FreeRTOS_Source/tasks.c **** 	List_t *pxTemp;																					\
 218:..\..\FreeRTOS_Source/tasks.c **** 																									\
 219:..\..\FreeRTOS_Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:..\..\FreeRTOS_Source/tasks.c **** 																									\
 222:..\..\FreeRTOS_Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:..\..\FreeRTOS_Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:..\..\FreeRTOS_Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:..\..\FreeRTOS_Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:..\..\FreeRTOS_Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:..\..\FreeRTOS_Source/tasks.c **** }
 228:..\..\FreeRTOS_Source/tasks.c **** 
 229:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 230:..\..\FreeRTOS_Source/tasks.c **** 
 231:..\..\FreeRTOS_Source/tasks.c **** /*
 232:..\..\FreeRTOS_Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:..\..\FreeRTOS_Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:..\..\FreeRTOS_Source/tasks.c ****  */
 235:..\..\FreeRTOS_Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:..\..\FreeRTOS_Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:..\..\FreeRTOS_Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:..\..\FreeRTOS_Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 7
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 7
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 7
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 7
>>>>>>> parent of cb49844... test


 239:..\..\FreeRTOS_Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 241:..\..\FreeRTOS_Source/tasks.c **** 
 242:..\..\FreeRTOS_Source/tasks.c **** /*
 243:..\..\FreeRTOS_Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:..\..\FreeRTOS_Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:..\..\FreeRTOS_Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:..\..\FreeRTOS_Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:..\..\FreeRTOS_Source/tasks.c ****  */
 248:..\..\FreeRTOS_Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 249:..\..\FreeRTOS_Source/tasks.c **** 
 250:..\..\FreeRTOS_Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:..\..\FreeRTOS_Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:..\..\FreeRTOS_Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:..\..\FreeRTOS_Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:..\..\FreeRTOS_Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:..\..\FreeRTOS_Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:..\..\FreeRTOS_Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:..\..\FreeRTOS_Source/tasks.c **** to its original value when it is released. */
 258:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:..\..\FreeRTOS_Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:..\..\FreeRTOS_Source/tasks.c **** #else
 261:..\..\FreeRTOS_Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:..\..\FreeRTOS_Source/tasks.c **** #endif
 263:..\..\FreeRTOS_Source/tasks.c **** 
 264:..\..\FreeRTOS_Source/tasks.c **** /*
 265:..\..\FreeRTOS_Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:..\..\FreeRTOS_Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:..\..\FreeRTOS_Source/tasks.c ****  * (the task's run time environment, including register values)
 268:..\..\FreeRTOS_Source/tasks.c ****  */
 269:..\..\FreeRTOS_Source/tasks.c **** typedef struct TaskControlBlock_t
 270:..\..\FreeRTOS_Source/tasks.c **** {
 271:..\..\FreeRTOS_Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:..\..\FreeRTOS_Source/tasks.c **** 
 273:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:..\..\FreeRTOS_Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 276:..\..\FreeRTOS_Source/tasks.c **** 
 277:..\..\FreeRTOS_Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:..\..\FreeRTOS_Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:..\..\FreeRTOS_Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:..\..\FreeRTOS_Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:..\..\FreeRTOS_Source/tasks.c **** 
 283:..\..\FreeRTOS_Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:..\..\FreeRTOS_Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 286:..\..\FreeRTOS_Source/tasks.c **** 
 287:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 290:..\..\FreeRTOS_Source/tasks.c **** 
 291:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 295:..\..\FreeRTOS_Source/tasks.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 8
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 8
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 8
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 8
>>>>>>> parent of cb49844... test


 296:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:..\..\FreeRTOS_Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 300:..\..\FreeRTOS_Source/tasks.c **** 
 301:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:..\..\FreeRTOS_Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 304:..\..\FreeRTOS_Source/tasks.c **** 
 305:..\..\FreeRTOS_Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:..\..\FreeRTOS_Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 308:..\..\FreeRTOS_Source/tasks.c **** 
 309:..\..\FreeRTOS_Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:..\..\FreeRTOS_Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 312:..\..\FreeRTOS_Source/tasks.c **** 
 313:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:..\..\FreeRTOS_Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:..\..\FreeRTOS_Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:..\..\FreeRTOS_Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:..\..\FreeRTOS_Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 318:..\..\FreeRTOS_Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:..\..\FreeRTOS_Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:..\..\FreeRTOS_Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:..\..\FreeRTOS_Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 323:..\..\FreeRTOS_Source/tasks.c **** 
 324:..\..\FreeRTOS_Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:..\..\FreeRTOS_Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:..\..\FreeRTOS_Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 328:..\..\FreeRTOS_Source/tasks.c **** 
 329:..\..\FreeRTOS_Source/tasks.c **** 	/* See the comments above the definition of
 330:..\..\FreeRTOS_Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:..\..\FreeRTOS_Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 332:..\..\FreeRTOS_Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 334:..\..\FreeRTOS_Source/tasks.c **** 
 335:..\..\FreeRTOS_Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:..\..\FreeRTOS_Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 338:..\..\FreeRTOS_Source/tasks.c **** 
 339:..\..\FreeRTOS_Source/tasks.c **** } tskTCB;
 340:..\..\FreeRTOS_Source/tasks.c **** 
 341:..\..\FreeRTOS_Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:..\..\FreeRTOS_Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:..\..\FreeRTOS_Source/tasks.c **** typedef tskTCB TCB_t;
 344:..\..\FreeRTOS_Source/tasks.c **** 
 345:..\..\FreeRTOS_Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:..\..\FreeRTOS_Source/tasks.c **** which static variables must be declared volatile. */
 347:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 348:..\..\FreeRTOS_Source/tasks.c **** 
 349:..\..\FreeRTOS_Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 350:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 351:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 352:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 9
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 9
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 9
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 9
>>>>>>> parent of cb49844... test


 353:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 354:..\..\FreeRTOS_Source/tasks.c **** 
 355:..\..\FreeRTOS_Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 356:..\..\FreeRTOS_Source/tasks.c **** 
 357:..\..\FreeRTOS_Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 358:..\..\FreeRTOS_Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 359:..\..\FreeRTOS_Source/tasks.c **** 
 360:..\..\FreeRTOS_Source/tasks.c **** #endif
 361:..\..\FreeRTOS_Source/tasks.c **** 
 362:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 363:..\..\FreeRTOS_Source/tasks.c **** 
 364:..\..\FreeRTOS_Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 365:..\..\FreeRTOS_Source/tasks.c **** 
 366:..\..\FreeRTOS_Source/tasks.c **** #endif
 367:..\..\FreeRTOS_Source/tasks.c **** 
 368:..\..\FreeRTOS_Source/tasks.c **** /* Other file private variables. --------------------------------*/
 369:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 370:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 371:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 372:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 373:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 374:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 375:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 376:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 377:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 378:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 379:..\..\FreeRTOS_Source/tasks.c **** 
 380:..\..\FreeRTOS_Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 381:..\..\FreeRTOS_Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 382:..\..\FreeRTOS_Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 383:..\..\FreeRTOS_Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 384:..\..\FreeRTOS_Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 385:..\..\FreeRTOS_Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 386:..\..\FreeRTOS_Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 387:..\..\FreeRTOS_Source/tasks.c **** accessed from a critical section. */
 388:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 389:..\..\FreeRTOS_Source/tasks.c **** 
 390:..\..\FreeRTOS_Source/tasks.c **** /*lint -restore */
 391:..\..\FreeRTOS_Source/tasks.c **** 
 392:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 393:..\..\FreeRTOS_Source/tasks.c **** 
 394:..\..\FreeRTOS_Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 395:..\..\FreeRTOS_Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 396:..\..\FreeRTOS_Source/tasks.c **** 
 397:..\..\FreeRTOS_Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 398:..\..\FreeRTOS_Source/tasks.c **** 
 399:..\..\FreeRTOS_Source/tasks.c **** #endif
 400:..\..\FreeRTOS_Source/tasks.c **** 
 401:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 402:..\..\FreeRTOS_Source/tasks.c **** 
 403:..\..\FreeRTOS_Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 404:..\..\FreeRTOS_Source/tasks.c **** 
 405:..\..\FreeRTOS_Source/tasks.c **** #endif
 406:..\..\FreeRTOS_Source/tasks.c **** 
 407:..\..\FreeRTOS_Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 408:..\..\FreeRTOS_Source/tasks.c **** 
 409:..\..\FreeRTOS_Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 10
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 10
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 10
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 10
>>>>>>> parent of cb49844... test


 410:..\..\FreeRTOS_Source/tasks.c **** 
 411:..\..\FreeRTOS_Source/tasks.c **** #endif
 412:..\..\FreeRTOS_Source/tasks.c **** 
 413:..\..\FreeRTOS_Source/tasks.c **** /* File private functions. --------------------------------*/
 414:..\..\FreeRTOS_Source/tasks.c **** 
 415:..\..\FreeRTOS_Source/tasks.c **** /**
 416:..\..\FreeRTOS_Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 417:..\..\FreeRTOS_Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 418:..\..\FreeRTOS_Source/tasks.c ****  * is in any other state.
 419:..\..\FreeRTOS_Source/tasks.c ****  */
 420:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 421:..\..\FreeRTOS_Source/tasks.c **** 
 422:..\..\FreeRTOS_Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 423:..\..\FreeRTOS_Source/tasks.c **** 
 424:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 425:..\..\FreeRTOS_Source/tasks.c **** 
 426:..\..\FreeRTOS_Source/tasks.c **** /*
 427:..\..\FreeRTOS_Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 428:..\..\FreeRTOS_Source/tasks.c ****  * automatically upon the creation of the first task.
 429:..\..\FreeRTOS_Source/tasks.c ****  */
 430:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 431:..\..\FreeRTOS_Source/tasks.c **** 
 432:..\..\FreeRTOS_Source/tasks.c **** /*
 433:..\..\FreeRTOS_Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 434:..\..\FreeRTOS_Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 435:..\..\FreeRTOS_Source/tasks.c ****  * creation of the first user task.
 436:..\..\FreeRTOS_Source/tasks.c ****  *
 437:..\..\FreeRTOS_Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 438:..\..\FreeRTOS_Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 439:..\..\FreeRTOS_Source/tasks.c ****  *
 440:..\..\FreeRTOS_Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 441:..\..\FreeRTOS_Source/tasks.c ****  *
 442:..\..\FreeRTOS_Source/tasks.c ****  */
 443:..\..\FreeRTOS_Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 444:..\..\FreeRTOS_Source/tasks.c **** 
 445:..\..\FreeRTOS_Source/tasks.c **** /*
 446:..\..\FreeRTOS_Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 447:..\..\FreeRTOS_Source/tasks.c ****  * including the stack pointed to by the TCB.
 448:..\..\FreeRTOS_Source/tasks.c ****  *
 449:..\..\FreeRTOS_Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 450:..\..\FreeRTOS_Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 451:..\..\FreeRTOS_Source/tasks.c ****  */
 452:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 453:..\..\FreeRTOS_Source/tasks.c **** 
 454:..\..\FreeRTOS_Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 455:..\..\FreeRTOS_Source/tasks.c **** 
 456:..\..\FreeRTOS_Source/tasks.c **** #endif
 457:..\..\FreeRTOS_Source/tasks.c **** 
 458:..\..\FreeRTOS_Source/tasks.c **** /*
 459:..\..\FreeRTOS_Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 460:..\..\FreeRTOS_Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 461:..\..\FreeRTOS_Source/tasks.c ****  * and its TCB deleted.
 462:..\..\FreeRTOS_Source/tasks.c ****  */
 463:..\..\FreeRTOS_Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 464:..\..\FreeRTOS_Source/tasks.c **** 
 465:..\..\FreeRTOS_Source/tasks.c **** /*
 466:..\..\FreeRTOS_Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 11
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 11
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 11
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 11
>>>>>>> parent of cb49844... test


 467:..\..\FreeRTOS_Source/tasks.c ****  * either the current or the overflow delayed task list.
 468:..\..\FreeRTOS_Source/tasks.c ****  */
 469:..\..\FreeRTOS_Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 470:..\..\FreeRTOS_Source/tasks.c **** 
 471:..\..\FreeRTOS_Source/tasks.c **** /*
 472:..\..\FreeRTOS_Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 473:..\..\FreeRTOS_Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 474:..\..\FreeRTOS_Source/tasks.c ****  * a suspended list, etc.).
 475:..\..\FreeRTOS_Source/tasks.c ****  *
 476:..\..\FreeRTOS_Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 477:..\..\FreeRTOS_Source/tasks.c ****  * NORMAL APPLICATION CODE.
 478:..\..\FreeRTOS_Source/tasks.c ****  */
 479:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 480:..\..\FreeRTOS_Source/tasks.c **** 
 481:..\..\FreeRTOS_Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 482:..\..\FreeRTOS_Source/tasks.c **** 
 483:..\..\FreeRTOS_Source/tasks.c **** #endif
 484:..\..\FreeRTOS_Source/tasks.c **** 
 485:..\..\FreeRTOS_Source/tasks.c **** /*
 486:..\..\FreeRTOS_Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:..\..\FreeRTOS_Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 488:..\..\FreeRTOS_Source/tasks.c ****  */
 489:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:..\..\FreeRTOS_Source/tasks.c **** 
 491:..\..\FreeRTOS_Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 492:..\..\FreeRTOS_Source/tasks.c **** 
 493:..\..\FreeRTOS_Source/tasks.c **** #endif
 494:..\..\FreeRTOS_Source/tasks.c **** 
 495:..\..\FreeRTOS_Source/tasks.c **** /*
 496:..\..\FreeRTOS_Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 497:..\..\FreeRTOS_Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 498:..\..\FreeRTOS_Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 499:..\..\FreeRTOS_Source/tasks.c ****  */
 500:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 501:..\..\FreeRTOS_Source/tasks.c **** 
 502:..\..\FreeRTOS_Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 503:..\..\FreeRTOS_Source/tasks.c **** 
 504:..\..\FreeRTOS_Source/tasks.c **** #endif
 505:..\..\FreeRTOS_Source/tasks.c **** 
 506:..\..\FreeRTOS_Source/tasks.c **** /*
 507:..\..\FreeRTOS_Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 508:..\..\FreeRTOS_Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 509:..\..\FreeRTOS_Source/tasks.c ****  *
 510:..\..\FreeRTOS_Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 511:..\..\FreeRTOS_Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 512:..\..\FreeRTOS_Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 513:..\..\FreeRTOS_Source/tasks.c ****  * set to a value other than 1.
 514:..\..\FreeRTOS_Source/tasks.c ****  */
 515:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 516:..\..\FreeRTOS_Source/tasks.c **** 
 517:..\..\FreeRTOS_Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 518:..\..\FreeRTOS_Source/tasks.c **** 
 519:..\..\FreeRTOS_Source/tasks.c **** #endif
 520:..\..\FreeRTOS_Source/tasks.c **** 
 521:..\..\FreeRTOS_Source/tasks.c **** /*
 522:..\..\FreeRTOS_Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 523:..\..\FreeRTOS_Source/tasks.c ****  * will exit the Blocked state.
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 12
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 12
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 12
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 12
>>>>>>> parent of cb49844... test


 524:..\..\FreeRTOS_Source/tasks.c ****  */
 525:..\..\FreeRTOS_Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 526:..\..\FreeRTOS_Source/tasks.c **** 
 527:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 528:..\..\FreeRTOS_Source/tasks.c **** 
 529:..\..\FreeRTOS_Source/tasks.c **** 	/*
 530:..\..\FreeRTOS_Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 531:..\..\FreeRTOS_Source/tasks.c **** 	 * human readable tables of task information.
 532:..\..\FreeRTOS_Source/tasks.c **** 	 */
 533:..\..\FreeRTOS_Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 534:..\..\FreeRTOS_Source/tasks.c **** 
 535:..\..\FreeRTOS_Source/tasks.c **** #endif
 536:..\..\FreeRTOS_Source/tasks.c **** 
 537:..\..\FreeRTOS_Source/tasks.c **** /*
 538:..\..\FreeRTOS_Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 539:..\..\FreeRTOS_Source/tasks.c ****  * dynamically to fill in the structure's members.
 540:..\..\FreeRTOS_Source/tasks.c ****  */
 541:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 542:..\..\FreeRTOS_Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 543:..\..\FreeRTOS_Source/tasks.c **** 									const uint32_t ulStackDepth,
 544:..\..\FreeRTOS_Source/tasks.c **** 									void * const pvParameters,
 545:..\..\FreeRTOS_Source/tasks.c **** 									UBaseType_t uxPriority,
 546:..\..\FreeRTOS_Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 547:..\..\FreeRTOS_Source/tasks.c **** 									TCB_t *pxNewTCB,
 548:..\..\FreeRTOS_Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 549:..\..\FreeRTOS_Source/tasks.c **** 
 550:..\..\FreeRTOS_Source/tasks.c **** /*
 551:..\..\FreeRTOS_Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 552:..\..\FreeRTOS_Source/tasks.c ****  * under the control of the scheduler.
 553:..\..\FreeRTOS_Source/tasks.c ****  */
 554:..\..\FreeRTOS_Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 555:..\..\FreeRTOS_Source/tasks.c **** 
 556:..\..\FreeRTOS_Source/tasks.c **** /*
 557:..\..\FreeRTOS_Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 558:..\..\FreeRTOS_Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 559:..\..\FreeRTOS_Source/tasks.c ****  * called by the function.
 560:..\..\FreeRTOS_Source/tasks.c ****  */
 561:..\..\FreeRTOS_Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 562:..\..\FreeRTOS_Source/tasks.c **** 
 563:..\..\FreeRTOS_Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 564:..\..\FreeRTOS_Source/tasks.c **** 
 565:..\..\FreeRTOS_Source/tasks.c **** #endif
 566:..\..\FreeRTOS_Source/tasks.c **** 
 567:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 568:..\..\FreeRTOS_Source/tasks.c **** 
 569:..\..\FreeRTOS_Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 570:..\..\FreeRTOS_Source/tasks.c **** 
 571:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 572:..\..\FreeRTOS_Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 573:..\..\FreeRTOS_Source/tasks.c **** 									const uint32_t ulStackDepth,
 574:..\..\FreeRTOS_Source/tasks.c **** 									void * const pvParameters,
 575:..\..\FreeRTOS_Source/tasks.c **** 									UBaseType_t uxPriority,
 576:..\..\FreeRTOS_Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 577:..\..\FreeRTOS_Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 578:..\..\FreeRTOS_Source/tasks.c **** 	{
 579:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 580:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xReturn;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 13
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 13
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 13
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 13
>>>>>>> parent of cb49844... test


 581:..\..\FreeRTOS_Source/tasks.c **** 
 582:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 583:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 584:..\..\FreeRTOS_Source/tasks.c **** 
 585:..\..\FreeRTOS_Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 586:..\..\FreeRTOS_Source/tasks.c **** 		{
 587:..\..\FreeRTOS_Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 588:..\..\FreeRTOS_Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 589:..\..\FreeRTOS_Source/tasks.c **** 			structure. */
 590:..\..\FreeRTOS_Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 591:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 592:..\..\FreeRTOS_Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 593:..\..\FreeRTOS_Source/tasks.c **** 		}
 594:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 595:..\..\FreeRTOS_Source/tasks.c **** 
 596:..\..\FreeRTOS_Source/tasks.c **** 
 597:..\..\FreeRTOS_Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 598:..\..\FreeRTOS_Source/tasks.c **** 		{
 599:..\..\FreeRTOS_Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 600:..\..\FreeRTOS_Source/tasks.c **** 			function - use them. */
 601:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 602:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 603:..\..\FreeRTOS_Source/tasks.c **** 
 604:..\..\FreeRTOS_Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 605:..\..\FreeRTOS_Source/tasks.c **** 			{
 606:..\..\FreeRTOS_Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 607:..\..\FreeRTOS_Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 608:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 609:..\..\FreeRTOS_Source/tasks.c **** 			}
 610:..\..\FreeRTOS_Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 611:..\..\FreeRTOS_Source/tasks.c **** 
 612:..\..\FreeRTOS_Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 613:..\..\FreeRTOS_Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 614:..\..\FreeRTOS_Source/tasks.c **** 		}
 615:..\..\FreeRTOS_Source/tasks.c **** 		else
 616:..\..\FreeRTOS_Source/tasks.c **** 		{
 617:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = NULL;
 618:..\..\FreeRTOS_Source/tasks.c **** 		}
 619:..\..\FreeRTOS_Source/tasks.c **** 
 620:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 621:..\..\FreeRTOS_Source/tasks.c **** 	}
 622:..\..\FreeRTOS_Source/tasks.c **** 
 623:..\..\FreeRTOS_Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 624:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 625:..\..\FreeRTOS_Source/tasks.c **** 
 626:..\..\FreeRTOS_Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 627:..\..\FreeRTOS_Source/tasks.c **** 
 628:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 629:..\..\FreeRTOS_Source/tasks.c **** 	{
 630:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 631:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 632:..\..\FreeRTOS_Source/tasks.c **** 
 633:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 634:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 635:..\..\FreeRTOS_Source/tasks.c **** 
 636:..\..\FreeRTOS_Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 637:..\..\FreeRTOS_Source/tasks.c **** 		{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 14
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 14
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 14
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 14
>>>>>>> parent of cb49844... test


 638:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 639:..\..\FreeRTOS_Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 640:..\..\FreeRTOS_Source/tasks.c **** 			not static allocation is being used. */
 641:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 642:..\..\FreeRTOS_Source/tasks.c **** 
 643:..\..\FreeRTOS_Source/tasks.c **** 			/* Store the stack location in the TCB. */
 644:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 645:..\..\FreeRTOS_Source/tasks.c **** 
 646:..\..\FreeRTOS_Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 647:..\..\FreeRTOS_Source/tasks.c **** 			{
 648:..\..\FreeRTOS_Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 649:..\..\FreeRTOS_Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 650:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 651:..\..\FreeRTOS_Source/tasks.c **** 			}
 652:..\..\FreeRTOS_Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 653:..\..\FreeRTOS_Source/tasks.c **** 
 654:..\..\FreeRTOS_Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 655:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->pcName,
 656:..\..\FreeRTOS_Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 657:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 658:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 659:..\..\FreeRTOS_Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 660:..\..\FreeRTOS_Source/tasks.c **** 									pxTaskDefinition->xRegions );
 661:..\..\FreeRTOS_Source/tasks.c **** 
 662:..\..\FreeRTOS_Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 663:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdPASS;
 664:..\..\FreeRTOS_Source/tasks.c **** 		}
 665:..\..\FreeRTOS_Source/tasks.c **** 
 666:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 667:..\..\FreeRTOS_Source/tasks.c **** 	}
 668:..\..\FreeRTOS_Source/tasks.c **** 
 669:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 670:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 671:..\..\FreeRTOS_Source/tasks.c **** 
 672:..\..\FreeRTOS_Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 673:..\..\FreeRTOS_Source/tasks.c **** 
 674:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 675:..\..\FreeRTOS_Source/tasks.c **** 	{
 676:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 677:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 678:..\..\FreeRTOS_Source/tasks.c **** 
 679:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 680:..\..\FreeRTOS_Source/tasks.c **** 
 681:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 682:..\..\FreeRTOS_Source/tasks.c **** 		{
 683:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 684:..\..\FreeRTOS_Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 685:..\..\FreeRTOS_Source/tasks.c **** 			not static allocation is being used. */
 686:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 687:..\..\FreeRTOS_Source/tasks.c **** 
 688:..\..\FreeRTOS_Source/tasks.c **** 			if( pxNewTCB != NULL )
 689:..\..\FreeRTOS_Source/tasks.c **** 			{
 690:..\..\FreeRTOS_Source/tasks.c **** 				/* Store the stack location in the TCB. */
 691:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 692:..\..\FreeRTOS_Source/tasks.c **** 
 693:..\..\FreeRTOS_Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 694:..\..\FreeRTOS_Source/tasks.c **** 				{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 15
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 15
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 15
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 15
>>>>>>> parent of cb49844... test


 695:..\..\FreeRTOS_Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 696:..\..\FreeRTOS_Source/tasks.c **** 					this task had a statically allocated stack in case it is
 697:..\..\FreeRTOS_Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 698:..\..\FreeRTOS_Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 699:..\..\FreeRTOS_Source/tasks.c **** 				}
 700:..\..\FreeRTOS_Source/tasks.c **** 				#endif
 701:..\..\FreeRTOS_Source/tasks.c **** 
 702:..\..\FreeRTOS_Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 703:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->pcName,
 704:..\..\FreeRTOS_Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 705:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 706:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 707:..\..\FreeRTOS_Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 708:..\..\FreeRTOS_Source/tasks.c **** 										pxTaskDefinition->xRegions );
 709:..\..\FreeRTOS_Source/tasks.c **** 
 710:..\..\FreeRTOS_Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 711:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdPASS;
 712:..\..\FreeRTOS_Source/tasks.c **** 			}
 713:..\..\FreeRTOS_Source/tasks.c **** 		}
 714:..\..\FreeRTOS_Source/tasks.c **** 
 715:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 716:..\..\FreeRTOS_Source/tasks.c **** 	}
 717:..\..\FreeRTOS_Source/tasks.c **** 
 718:..\..\FreeRTOS_Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 719:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 720:..\..\FreeRTOS_Source/tasks.c **** 
 721:..\..\FreeRTOS_Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 722:..\..\FreeRTOS_Source/tasks.c **** 
 723:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 724:..\..\FreeRTOS_Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 725:..\..\FreeRTOS_Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 726:..\..\FreeRTOS_Source/tasks.c **** 							void * const pvParameters,
 727:..\..\FreeRTOS_Source/tasks.c **** 							UBaseType_t uxPriority,
 728:..\..\FreeRTOS_Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 729:..\..\FreeRTOS_Source/tasks.c **** 	{
  89              		.loc 1 729 0
  90              		.cfi_startproc
  91              		@ args = 8, pretend = 0, frame = 32
  92              		@ frame_needed = 1, uses_anonymous_args = 0
  93 0000 80B5     		push	{r7, lr}
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 8CB0     		sub	sp, sp, #48
  98              		.cfi_def_cfa_offset 56
  99 0004 04AF     		add	r7, sp, #16
 100              		.cfi_def_cfa 7, 40
 101 0006 F860     		str	r0, [r7, #12]
 102 0008 B960     		str	r1, [r7, #8]
 103 000a 3B60     		str	r3, [r7]
 104 000c 1346     		mov	r3, r2	@ movhi
 105 000e FB80     		strh	r3, [r7, #6]	@ movhi
 106              	.LBB27:
 730:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNewTCB;
 731:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
 732:..\..\FreeRTOS_Source/tasks.c **** 
 733:..\..\FreeRTOS_Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 16
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 16
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 16
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 16
>>>>>>> parent of cb49844... test


 734:..\..\FreeRTOS_Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 735:..\..\FreeRTOS_Source/tasks.c **** 		the TCB then the stack. */
 736:..\..\FreeRTOS_Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 737:..\..\FreeRTOS_Source/tasks.c **** 		{
 738:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 739:..\..\FreeRTOS_Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 740:..\..\FreeRTOS_Source/tasks.c **** 			allocation is being used. */
 741:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 742:..\..\FreeRTOS_Source/tasks.c **** 
 743:..\..\FreeRTOS_Source/tasks.c **** 			if( pxNewTCB != NULL )
 744:..\..\FreeRTOS_Source/tasks.c **** 			{
 745:..\..\FreeRTOS_Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 746:..\..\FreeRTOS_Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 747:..\..\FreeRTOS_Source/tasks.c **** 				be deleted later if required. */
 748:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 749:..\..\FreeRTOS_Source/tasks.c **** 
 750:..\..\FreeRTOS_Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 751:..\..\FreeRTOS_Source/tasks.c **** 				{
 752:..\..\FreeRTOS_Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 753:..\..\FreeRTOS_Source/tasks.c **** 					vPortFree( pxNewTCB );
 754:..\..\FreeRTOS_Source/tasks.c **** 					pxNewTCB = NULL;
 755:..\..\FreeRTOS_Source/tasks.c **** 				}
 756:..\..\FreeRTOS_Source/tasks.c **** 			}
 757:..\..\FreeRTOS_Source/tasks.c **** 		}
 758:..\..\FreeRTOS_Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 759:..\..\FreeRTOS_Source/tasks.c **** 		{
 760:..\..\FreeRTOS_Source/tasks.c **** 		StackType_t *pxStack;
 761:..\..\FreeRTOS_Source/tasks.c **** 
 762:..\..\FreeRTOS_Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 763:..\..\FreeRTOS_Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 107              		.loc 1 763 0
 108 0010 FB88     		ldrh	r3, [r7, #6]
 109 0012 9B00     		lsls	r3, r3, #2
 110 0014 1846     		mov	r0, r3
 111 0016 FFF7FEFF 		bl	pvPortMalloc
 112 001a 7861     		str	r0, [r7, #20]
 764:..\..\FreeRTOS_Source/tasks.c **** 
 765:..\..\FreeRTOS_Source/tasks.c **** 			if( pxStack != NULL )
 113              		.loc 1 765 0
 114 001c 7B69     		ldr	r3, [r7, #20]
 115 001e 002B     		cmp	r3, #0
 116 0020 0ED0     		beq	.L2
 766:..\..\FreeRTOS_Source/tasks.c **** 			{
 767:..\..\FreeRTOS_Source/tasks.c **** 				/* Allocate space for the TCB. */
 768:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 117              		.loc 1 768 0
 118 0022 5020     		movs	r0, #80
 119 0024 FFF7FEFF 		bl	pvPortMalloc
 120 0028 F861     		str	r0, [r7, #28]
 769:..\..\FreeRTOS_Source/tasks.c **** 
 770:..\..\FreeRTOS_Source/tasks.c **** 				if( pxNewTCB != NULL )
 121              		.loc 1 770 0
 122 002a FB69     		ldr	r3, [r7, #28]
 123 002c 002B     		cmp	r3, #0
 124 002e 03D0     		beq	.L3
 771:..\..\FreeRTOS_Source/tasks.c **** 				{
 772:..\..\FreeRTOS_Source/tasks.c **** 					/* Store the stack location in the TCB. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 17
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 17
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 17
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 17
>>>>>>> parent of cb49844... test


 773:..\..\FreeRTOS_Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 125              		.loc 1 773 0
 126 0030 FB69     		ldr	r3, [r7, #28]
 127 0032 7A69     		ldr	r2, [r7, #20]
 128 0034 1A63     		str	r2, [r3, #48]
 129 0036 05E0     		b	.L5
 130              	.L3:
 774:..\..\FreeRTOS_Source/tasks.c **** 				}
 775:..\..\FreeRTOS_Source/tasks.c **** 				else
 776:..\..\FreeRTOS_Source/tasks.c **** 				{
 777:..\..\FreeRTOS_Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 778:..\..\FreeRTOS_Source/tasks.c **** 					it again. */
 779:..\..\FreeRTOS_Source/tasks.c **** 					vPortFree( pxStack );
 131              		.loc 1 779 0
 132 0038 7869     		ldr	r0, [r7, #20]
 133 003a FFF7FEFF 		bl	vPortFree
 134 003e 01E0     		b	.L5
 135              	.L2:
 780:..\..\FreeRTOS_Source/tasks.c **** 				}
 781:..\..\FreeRTOS_Source/tasks.c **** 			}
 782:..\..\FreeRTOS_Source/tasks.c **** 			else
 783:..\..\FreeRTOS_Source/tasks.c **** 			{
 784:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB = NULL;
 136              		.loc 1 784 0
 137 0040 0023     		movs	r3, #0
 138 0042 FB61     		str	r3, [r7, #28]
 139              	.L5:
 140              	.LBE27:
 785:..\..\FreeRTOS_Source/tasks.c **** 			}
 786:..\..\FreeRTOS_Source/tasks.c **** 		}
 787:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 788:..\..\FreeRTOS_Source/tasks.c **** 
 789:..\..\FreeRTOS_Source/tasks.c **** 		if( pxNewTCB != NULL )
 141              		.loc 1 789 0
 142 0044 FB69     		ldr	r3, [r7, #28]
 143 0046 002B     		cmp	r3, #0
 144 0048 13D0     		beq	.L6
 790:..\..\FreeRTOS_Source/tasks.c **** 		{
 791:..\..\FreeRTOS_Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 792:..\..\FreeRTOS_Source/tasks.c **** 			{
 793:..\..\FreeRTOS_Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 794:..\..\FreeRTOS_Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 795:..\..\FreeRTOS_Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 796:..\..\FreeRTOS_Source/tasks.c **** 			}
 797:..\..\FreeRTOS_Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 798:..\..\FreeRTOS_Source/tasks.c **** 
 799:..\..\FreeRTOS_Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 145              		.loc 1 799 0
 146 004a FA88     		ldrh	r2, [r7, #6]
 147 004c 0023     		movs	r3, #0
 148 004e 0393     		str	r3, [sp, #12]
 149 0050 FB69     		ldr	r3, [r7, #28]
 150 0052 0293     		str	r3, [sp, #8]
 151 0054 FB6A     		ldr	r3, [r7, #44]
 152 0056 0193     		str	r3, [sp, #4]
 153 0058 BB6A     		ldr	r3, [r7, #40]
 154 005a 0093     		str	r3, [sp]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 18
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 18
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 18
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 18
>>>>>>> parent of cb49844... test


 155 005c 3B68     		ldr	r3, [r7]
 156 005e B968     		ldr	r1, [r7, #8]
 157 0060 F868     		ldr	r0, [r7, #12]
 158 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 800:..\..\FreeRTOS_Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 159              		.loc 1 800 0
 160 0066 F869     		ldr	r0, [r7, #28]
 161 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 801:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdPASS;
 162              		.loc 1 801 0
 163 006c 0123     		movs	r3, #1
 164 006e BB61     		str	r3, [r7, #24]
 165 0070 02E0     		b	.L7
 166              	.L6:
 802:..\..\FreeRTOS_Source/tasks.c **** 		}
 803:..\..\FreeRTOS_Source/tasks.c **** 		else
 804:..\..\FreeRTOS_Source/tasks.c **** 		{
 805:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 167              		.loc 1 805 0
 168 0072 4FF0FF33 		mov	r3, #-1
 169 0076 BB61     		str	r3, [r7, #24]
 170              	.L7:
 806:..\..\FreeRTOS_Source/tasks.c **** 		}
 807:..\..\FreeRTOS_Source/tasks.c **** 
 808:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 171              		.loc 1 808 0
 172 0078 BB69     		ldr	r3, [r7, #24]
 809:..\..\FreeRTOS_Source/tasks.c **** 	}
 173              		.loc 1 809 0
 174 007a 1846     		mov	r0, r3
 175 007c 2037     		adds	r7, r7, #32
 176              		.cfi_def_cfa_offset 8
 177 007e BD46     		mov	sp, r7
 178              		.cfi_def_cfa_register 13
 179              		@ sp needed
 180 0080 80BD     		pop	{r7, pc}
 181              		.cfi_endproc
 182              	.LFE68:
 183              		.size	xTaskCreate, .-xTaskCreate
 184 0082 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 185              		.align	2
 186              		.thumb
 187              		.thumb_func
 188              		.type	prvInitialiseNewTask, %function
 189              	prvInitialiseNewTask:
 190              	.LFB69:
 810:..\..\FreeRTOS_Source/tasks.c **** 
 811:..\..\FreeRTOS_Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 812:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
 813:..\..\FreeRTOS_Source/tasks.c **** 
 814:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 815:..\..\FreeRTOS_Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 816:..\..\FreeRTOS_Source/tasks.c **** 									const uint32_t ulStackDepth,
 817:..\..\FreeRTOS_Source/tasks.c **** 									void * const pvParameters,
 818:..\..\FreeRTOS_Source/tasks.c **** 									UBaseType_t uxPriority,
 819:..\..\FreeRTOS_Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 820:..\..\FreeRTOS_Source/tasks.c **** 									TCB_t *pxNewTCB,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 19
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 19
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 19
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 19
>>>>>>> parent of cb49844... test


 821:..\..\FreeRTOS_Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 822:..\..\FreeRTOS_Source/tasks.c **** {
 191              		.loc 1 822 0
 192              		.cfi_startproc
 193              		@ args = 16, pretend = 0, frame = 24
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195 0000 80B5     		push	{r7, lr}
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 7, -8
 198              		.cfi_offset 14, -4
 199 0002 86B0     		sub	sp, sp, #24
 200              		.cfi_def_cfa_offset 32
 201 0004 00AF     		add	r7, sp, #0
 202              		.cfi_def_cfa_register 7
 203 0006 F860     		str	r0, [r7, #12]
 204 0008 B960     		str	r1, [r7, #8]
 205 000a 7A60     		str	r2, [r7, #4]
 206 000c 3B60     		str	r3, [r7]
 823:..\..\FreeRTOS_Source/tasks.c **** StackType_t *pxTopOfStack;
 824:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t x;
 825:..\..\FreeRTOS_Source/tasks.c **** 
 826:..\..\FreeRTOS_Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 827:..\..\FreeRTOS_Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 828:..\..\FreeRTOS_Source/tasks.c **** 		BaseType_t xRunPrivileged;
 829:..\..\FreeRTOS_Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 830:..\..\FreeRTOS_Source/tasks.c **** 		{
 831:..\..\FreeRTOS_Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 832:..\..\FreeRTOS_Source/tasks.c **** 		}
 833:..\..\FreeRTOS_Source/tasks.c **** 		else
 834:..\..\FreeRTOS_Source/tasks.c **** 		{
 835:..\..\FreeRTOS_Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 836:..\..\FreeRTOS_Source/tasks.c **** 		}
 837:..\..\FreeRTOS_Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 838:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 839:..\..\FreeRTOS_Source/tasks.c **** 
 840:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pcName );
 841:..\..\FreeRTOS_Source/tasks.c **** 
 842:..\..\FreeRTOS_Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 843:..\..\FreeRTOS_Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 844:..\..\FreeRTOS_Source/tasks.c **** 	{
 845:..\..\FreeRTOS_Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 846:..\..\FreeRTOS_Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 207              		.loc 1 846 0
 208 000e BB6A     		ldr	r3, [r7, #40]
 209 0010 186B     		ldr	r0, [r3, #48]
 210 0012 7B68     		ldr	r3, [r7, #4]
 211 0014 9B00     		lsls	r3, r3, #2
 212 0016 1A46     		mov	r2, r3
 213 0018 A521     		movs	r1, #165
 214 001a FFF7FEFF 		bl	memset
 847:..\..\FreeRTOS_Source/tasks.c **** 	}
 848:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 849:..\..\FreeRTOS_Source/tasks.c **** 
 850:..\..\FreeRTOS_Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 851:..\..\FreeRTOS_Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 852:..\..\FreeRTOS_Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 853:..\..\FreeRTOS_Source/tasks.c **** 	by the port. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 20
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 20
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 20
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 20
>>>>>>> parent of cb49844... test


 854:..\..\FreeRTOS_Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 855:..\..\FreeRTOS_Source/tasks.c **** 	{
 856:..\..\FreeRTOS_Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 215              		.loc 1 856 0
 216 001e BB6A     		ldr	r3, [r7, #40]
 217 0020 1A6B     		ldr	r2, [r3, #48]
 218 0022 7B68     		ldr	r3, [r7, #4]
 219 0024 03F18043 		add	r3, r3, #1073741824
 220 0028 013B     		subs	r3, r3, #1
 221 002a 9B00     		lsls	r3, r3, #2
 222 002c 1344     		add	r3, r3, r2
 223 002e 3B61     		str	r3, [r7, #16]
 857:..\..\FreeRTOS_Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 224              		.loc 1 857 0
 225 0030 3B69     		ldr	r3, [r7, #16]
 226 0032 23F00703 		bic	r3, r3, #7
 227 0036 3B61     		str	r3, [r7, #16]
 858:..\..\FreeRTOS_Source/tasks.c **** 
 859:..\..\FreeRTOS_Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 860:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 861:..\..\FreeRTOS_Source/tasks.c **** 
 862:..\..\FreeRTOS_Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 863:..\..\FreeRTOS_Source/tasks.c **** 		{
 864:..\..\FreeRTOS_Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 865:..\..\FreeRTOS_Source/tasks.c **** 			debugging. */
 866:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 867:..\..\FreeRTOS_Source/tasks.c **** 		}
 868:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 869:..\..\FreeRTOS_Source/tasks.c **** 	}
 870:..\..\FreeRTOS_Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 871:..\..\FreeRTOS_Source/tasks.c **** 	{
 872:..\..\FreeRTOS_Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 873:..\..\FreeRTOS_Source/tasks.c **** 
 874:..\..\FreeRTOS_Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 875:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 876:..\..\FreeRTOS_Source/tasks.c **** 
 877:..\..\FreeRTOS_Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 878:..\..\FreeRTOS_Source/tasks.c **** 		performed. */
 879:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 880:..\..\FreeRTOS_Source/tasks.c **** 	}
 881:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 882:..\..\FreeRTOS_Source/tasks.c **** 
 883:..\..\FreeRTOS_Source/tasks.c **** 	/* Store the task name in the TCB. */
 884:..\..\FreeRTOS_Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 228              		.loc 1 884 0
 229 0038 0023     		movs	r3, #0
 230 003a 7B61     		str	r3, [r7, #20]
 231 003c 12E0     		b	.L10
 232              	.L13:
 885:..\..\FreeRTOS_Source/tasks.c **** 	{
 886:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 233              		.loc 1 886 0
 234 003e BA68     		ldr	r2, [r7, #8]
 235 0040 7B69     		ldr	r3, [r7, #20]
 236 0042 1344     		add	r3, r3, r2
 237 0044 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 238 0046 BA6A     		ldr	r2, [r7, #40]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 21
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 21
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 21
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 21
>>>>>>> parent of cb49844... test


 239 0048 7B69     		ldr	r3, [r7, #20]
 240 004a 1344     		add	r3, r3, r2
 241 004c 3433     		adds	r3, r3, #52
 242 004e 0A46     		mov	r2, r1
 243 0050 1A70     		strb	r2, [r3]
 887:..\..\FreeRTOS_Source/tasks.c **** 
 888:..\..\FreeRTOS_Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 889:..\..\FreeRTOS_Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 890:..\..\FreeRTOS_Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 891:..\..\FreeRTOS_Source/tasks.c **** 		if( pcName[ x ] == ( char ) 0x00 )
 244              		.loc 1 891 0
 245 0052 BA68     		ldr	r2, [r7, #8]
 246 0054 7B69     		ldr	r3, [r7, #20]
 247 0056 1344     		add	r3, r3, r2
 248 0058 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 249 005a 002B     		cmp	r3, #0
 250 005c 06D0     		beq	.L16
 884:..\..\FreeRTOS_Source/tasks.c **** 	{
 251              		.loc 1 884 0 discriminator 2
 252 005e 7B69     		ldr	r3, [r7, #20]
 253 0060 0133     		adds	r3, r3, #1
 254 0062 7B61     		str	r3, [r7, #20]
 255              	.L10:
 884:..\..\FreeRTOS_Source/tasks.c **** 	{
 256              		.loc 1 884 0 is_stmt 0 discriminator 1
 257 0064 7B69     		ldr	r3, [r7, #20]
 258 0066 0B2B     		cmp	r3, #11
 259 0068 E9D9     		bls	.L13
 260 006a 00E0     		b	.L12
 261              	.L16:
 892:..\..\FreeRTOS_Source/tasks.c **** 		{
 893:..\..\FreeRTOS_Source/tasks.c **** 			break;
 262              		.loc 1 893 0 is_stmt 1
 263 006c 00BF     		nop
 264              	.L12:
 894:..\..\FreeRTOS_Source/tasks.c **** 		}
 895:..\..\FreeRTOS_Source/tasks.c **** 		else
 896:..\..\FreeRTOS_Source/tasks.c **** 		{
 897:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 898:..\..\FreeRTOS_Source/tasks.c **** 		}
 899:..\..\FreeRTOS_Source/tasks.c **** 	}
 900:..\..\FreeRTOS_Source/tasks.c **** 
 901:..\..\FreeRTOS_Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 902:..\..\FreeRTOS_Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 903:..\..\FreeRTOS_Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 265              		.loc 1 903 0
 266 006e BB6A     		ldr	r3, [r7, #40]
 267 0070 0022     		movs	r2, #0
 268 0072 83F83F20 		strb	r2, [r3, #63]
 904:..\..\FreeRTOS_Source/tasks.c **** 
 905:..\..\FreeRTOS_Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 906:..\..\FreeRTOS_Source/tasks.c **** 	remove the privilege bit if one is present. */
 907:..\..\FreeRTOS_Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 269              		.loc 1 907 0
 270 0076 3B6A     		ldr	r3, [r7, #32]
 271 0078 042B     		cmp	r3, #4
 272 007a 01D9     		bls	.L14
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 22
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 22
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 22
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 22
>>>>>>> parent of cb49844... test


 908:..\..\FreeRTOS_Source/tasks.c **** 	{
 909:..\..\FreeRTOS_Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 273              		.loc 1 909 0
 274 007c 0423     		movs	r3, #4
 275 007e 3B62     		str	r3, [r7, #32]
 276              	.L14:
 910:..\..\FreeRTOS_Source/tasks.c **** 	}
 911:..\..\FreeRTOS_Source/tasks.c **** 	else
 912:..\..\FreeRTOS_Source/tasks.c **** 	{
 913:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 914:..\..\FreeRTOS_Source/tasks.c **** 	}
 915:..\..\FreeRTOS_Source/tasks.c **** 
 916:..\..\FreeRTOS_Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 277              		.loc 1 916 0
 278 0080 BB6A     		ldr	r3, [r7, #40]
 279 0082 3A6A     		ldr	r2, [r7, #32]
 280 0084 DA62     		str	r2, [r3, #44]
 917:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 918:..\..\FreeRTOS_Source/tasks.c **** 	{
 919:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 281              		.loc 1 919 0
 282 0086 BB6A     		ldr	r3, [r7, #40]
 283 0088 3A6A     		ldr	r2, [r7, #32]
 284 008a 1A64     		str	r2, [r3, #64]
 920:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 285              		.loc 1 920 0
 286 008c BB6A     		ldr	r3, [r7, #40]
 287 008e 0022     		movs	r2, #0
 288 0090 5A64     		str	r2, [r3, #68]
 921:..\..\FreeRTOS_Source/tasks.c **** 	}
 922:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 923:..\..\FreeRTOS_Source/tasks.c **** 
 924:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 289              		.loc 1 924 0
 290 0092 BB6A     		ldr	r3, [r7, #40]
 291 0094 0433     		adds	r3, r3, #4
 292 0096 1846     		mov	r0, r3
 293 0098 FFF7FEFF 		bl	vListInitialiseItem
 925:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 294              		.loc 1 925 0
 295 009c BB6A     		ldr	r3, [r7, #40]
 296 009e 1833     		adds	r3, r3, #24
 297 00a0 1846     		mov	r0, r3
 298 00a2 FFF7FEFF 		bl	vListInitialiseItem
 926:..\..\FreeRTOS_Source/tasks.c **** 
 927:..\..\FreeRTOS_Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 928:..\..\FreeRTOS_Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 929:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 299              		.loc 1 929 0
 300 00a6 BB6A     		ldr	r3, [r7, #40]
 301 00a8 BA6A     		ldr	r2, [r7, #40]
 302 00aa 1A61     		str	r2, [r3, #16]
 930:..\..\FreeRTOS_Source/tasks.c **** 
 931:..\..\FreeRTOS_Source/tasks.c **** 	/* Event lists are always in priority order. */
 932:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 303              		.loc 1 932 0
 304 00ac 3B6A     		ldr	r3, [r7, #32]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 23
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 23
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 23
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 23
>>>>>>> parent of cb49844... test


 305 00ae C3F10502 		rsb	r2, r3, #5
 306 00b2 BB6A     		ldr	r3, [r7, #40]
 307 00b4 9A61     		str	r2, [r3, #24]
 933:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 308              		.loc 1 933 0
 309 00b6 BB6A     		ldr	r3, [r7, #40]
 310 00b8 BA6A     		ldr	r2, [r7, #40]
 311 00ba 5A62     		str	r2, [r3, #36]
 934:..\..\FreeRTOS_Source/tasks.c **** 
 935:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 936:..\..\FreeRTOS_Source/tasks.c **** 	{
 937:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 938:..\..\FreeRTOS_Source/tasks.c **** 	}
 939:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 940:..\..\FreeRTOS_Source/tasks.c **** 
 941:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 942:..\..\FreeRTOS_Source/tasks.c **** 	{
 943:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 944:..\..\FreeRTOS_Source/tasks.c **** 	}
 945:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 946:..\..\FreeRTOS_Source/tasks.c **** 
 947:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 948:..\..\FreeRTOS_Source/tasks.c **** 	{
 949:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 950:..\..\FreeRTOS_Source/tasks.c **** 	}
 951:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 952:..\..\FreeRTOS_Source/tasks.c **** 
 953:..\..\FreeRTOS_Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 954:..\..\FreeRTOS_Source/tasks.c **** 	{
 955:..\..\FreeRTOS_Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 956:..\..\FreeRTOS_Source/tasks.c **** 	}
 957:..\..\FreeRTOS_Source/tasks.c **** 	#else
 958:..\..\FreeRTOS_Source/tasks.c **** 	{
 959:..\..\FreeRTOS_Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 960:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xRegions;
 961:..\..\FreeRTOS_Source/tasks.c **** 	}
 962:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 963:..\..\FreeRTOS_Source/tasks.c **** 
 964:..\..\FreeRTOS_Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 965:..\..\FreeRTOS_Source/tasks.c **** 	{
 966:..\..\FreeRTOS_Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 967:..\..\FreeRTOS_Source/tasks.c **** 		{
 968:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 969:..\..\FreeRTOS_Source/tasks.c **** 		}
 970:..\..\FreeRTOS_Source/tasks.c **** 	}
 971:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 972:..\..\FreeRTOS_Source/tasks.c **** 
 973:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 974:..\..\FreeRTOS_Source/tasks.c **** 	{
 975:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 312              		.loc 1 975 0
 313 00bc BB6A     		ldr	r3, [r7, #40]
 314 00be 0022     		movs	r2, #0
 315 00c0 9A64     		str	r2, [r3, #72]
 976:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 316              		.loc 1 976 0
 317 00c2 BB6A     		ldr	r3, [r7, #40]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 24
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 24
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 24
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 24
>>>>>>> parent of cb49844... test


 318 00c4 0022     		movs	r2, #0
 319 00c6 83F84C20 		strb	r2, [r3, #76]
 977:..\..\FreeRTOS_Source/tasks.c **** 	}
 978:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 979:..\..\FreeRTOS_Source/tasks.c **** 
 980:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 981:..\..\FreeRTOS_Source/tasks.c **** 	{
 982:..\..\FreeRTOS_Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 983:..\..\FreeRTOS_Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 984:..\..\FreeRTOS_Source/tasks.c **** 	}
 985:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 986:..\..\FreeRTOS_Source/tasks.c **** 
 987:..\..\FreeRTOS_Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 988:..\..\FreeRTOS_Source/tasks.c **** 	{
 989:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 990:..\..\FreeRTOS_Source/tasks.c **** 	}
 991:..\..\FreeRTOS_Source/tasks.c **** 	#endif
 992:..\..\FreeRTOS_Source/tasks.c **** 
 993:..\..\FreeRTOS_Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 994:..\..\FreeRTOS_Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 995:..\..\FreeRTOS_Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 996:..\..\FreeRTOS_Source/tasks.c **** 	the top of stack variable is updated. */
 997:..\..\FreeRTOS_Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 998:..\..\FreeRTOS_Source/tasks.c **** 	{
 999:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1000:..\..\FreeRTOS_Source/tasks.c **** 	}
1001:..\..\FreeRTOS_Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1002:..\..\FreeRTOS_Source/tasks.c **** 	{
1003:..\..\FreeRTOS_Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 320              		.loc 1 1003 0
 321 00ca 3A68     		ldr	r2, [r7]
 322 00cc F968     		ldr	r1, [r7, #12]
 323 00ce 3869     		ldr	r0, [r7, #16]
 324 00d0 FFF7FEFF 		bl	pxPortInitialiseStack
 325 00d4 0246     		mov	r2, r0
 326 00d6 BB6A     		ldr	r3, [r7, #40]
 327 00d8 1A60     		str	r2, [r3]
1004:..\..\FreeRTOS_Source/tasks.c **** 	}
1005:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1006:..\..\FreeRTOS_Source/tasks.c **** 
1007:..\..\FreeRTOS_Source/tasks.c **** 	if( pxCreatedTask != NULL )
 328              		.loc 1 1007 0
 329 00da 7B6A     		ldr	r3, [r7, #36]
 330 00dc 002B     		cmp	r3, #0
 331 00de 02D0     		beq	.L17
1008:..\..\FreeRTOS_Source/tasks.c **** 	{
1009:..\..\FreeRTOS_Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1010:..\..\FreeRTOS_Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1011:..\..\FreeRTOS_Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 332              		.loc 1 1011 0
 333 00e0 7B6A     		ldr	r3, [r7, #36]
 334 00e2 BA6A     		ldr	r2, [r7, #40]
 335 00e4 1A60     		str	r2, [r3]
 336              	.L17:
1012:..\..\FreeRTOS_Source/tasks.c **** 	}
1013:..\..\FreeRTOS_Source/tasks.c **** 	else
1014:..\..\FreeRTOS_Source/tasks.c **** 	{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 25
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 25
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 25
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 25
>>>>>>> parent of cb49844... test


1015:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1016:..\..\FreeRTOS_Source/tasks.c **** 	}
1017:..\..\FreeRTOS_Source/tasks.c **** }
 337              		.loc 1 1017 0
 338 00e6 00BF     		nop
 339 00e8 1837     		adds	r7, r7, #24
 340              		.cfi_def_cfa_offset 8
 341 00ea BD46     		mov	sp, r7
 342              		.cfi_def_cfa_register 13
 343              		@ sp needed
 344 00ec 80BD     		pop	{r7, pc}
 345              		.cfi_endproc
 346              	.LFE69:
 347              		.size	prvInitialiseNewTask, .-prvInitialiseNewTask
 348 00ee 00BF     		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 349              		.align	2
 350              		.thumb
 351              		.thumb_func
 352              		.type	prvAddNewTaskToReadyList, %function
 353              	prvAddNewTaskToReadyList:
 354              	.LFB70:
1018:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1019:..\..\FreeRTOS_Source/tasks.c **** 
1020:..\..\FreeRTOS_Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1021:..\..\FreeRTOS_Source/tasks.c **** {
 355              		.loc 1 1021 0
 356              		.cfi_startproc
 357              		@ args = 0, pretend = 0, frame = 8
 358              		@ frame_needed = 1, uses_anonymous_args = 0
 359 0000 80B5     		push	{r7, lr}
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 7, -8
 362              		.cfi_offset 14, -4
 363 0002 82B0     		sub	sp, sp, #8
 364              		.cfi_def_cfa_offset 16
 365 0004 00AF     		add	r7, sp, #0
 366              		.cfi_def_cfa_register 7
 367 0006 7860     		str	r0, [r7, #4]
1022:..\..\FreeRTOS_Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1023:..\..\FreeRTOS_Source/tasks.c **** 	updated. */
1024:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 368              		.loc 1 1024 0
 369 0008 FFF7FEFF 		bl	vPortEnterCritical
1025:..\..\FreeRTOS_Source/tasks.c **** 	{
1026:..\..\FreeRTOS_Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 370              		.loc 1 1026 0
 371 000c 2A4B     		ldr	r3, .L23
 372 000e 1B68     		ldr	r3, [r3]
 373 0010 0133     		adds	r3, r3, #1
 374 0012 294A     		ldr	r2, .L23
 375 0014 1360     		str	r3, [r2]
1027:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 376              		.loc 1 1027 0
 377 0016 294B     		ldr	r3, .L23+4
 378 0018 1B68     		ldr	r3, [r3]
 379 001a 002B     		cmp	r3, #0
 380 001c 09D1     		bne	.L19
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 26
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 26
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 26
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 26
>>>>>>> parent of cb49844... test


1028:..\..\FreeRTOS_Source/tasks.c **** 		{
1029:..\..\FreeRTOS_Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1030:..\..\FreeRTOS_Source/tasks.c **** 			the suspended state - make this the current task. */
1031:..\..\FreeRTOS_Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 381              		.loc 1 1031 0
 382 001e 274A     		ldr	r2, .L23+4
 383 0020 7B68     		ldr	r3, [r7, #4]
 384 0022 1360     		str	r3, [r2]
1032:..\..\FreeRTOS_Source/tasks.c **** 
1033:..\..\FreeRTOS_Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 385              		.loc 1 1033 0
 386 0024 244B     		ldr	r3, .L23
 387 0026 1B68     		ldr	r3, [r3]
 388 0028 012B     		cmp	r3, #1
 389 002a 10D1     		bne	.L20
1034:..\..\FreeRTOS_Source/tasks.c **** 			{
1035:..\..\FreeRTOS_Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1036:..\..\FreeRTOS_Source/tasks.c **** 				initialisation required.  We will not recover if this call
1037:..\..\FreeRTOS_Source/tasks.c **** 				fails, but we will report the failure. */
1038:..\..\FreeRTOS_Source/tasks.c **** 				prvInitialiseTaskLists();
 390              		.loc 1 1038 0
 391 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 392 0030 0DE0     		b	.L20
 393              	.L19:
1039:..\..\FreeRTOS_Source/tasks.c **** 			}
1040:..\..\FreeRTOS_Source/tasks.c **** 			else
1041:..\..\FreeRTOS_Source/tasks.c **** 			{
1042:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1043:..\..\FreeRTOS_Source/tasks.c **** 			}
1044:..\..\FreeRTOS_Source/tasks.c **** 		}
1045:..\..\FreeRTOS_Source/tasks.c **** 		else
1046:..\..\FreeRTOS_Source/tasks.c **** 		{
1047:..\..\FreeRTOS_Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1048:..\..\FreeRTOS_Source/tasks.c **** 			current task if it is the highest priority task to be created
1049:..\..\FreeRTOS_Source/tasks.c **** 			so far. */
1050:..\..\FreeRTOS_Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 394              		.loc 1 1050 0
 395 0032 234B     		ldr	r3, .L23+8
 396 0034 1B68     		ldr	r3, [r3]
 397 0036 002B     		cmp	r3, #0
 398 0038 09D1     		bne	.L20
1051:..\..\FreeRTOS_Source/tasks.c **** 			{
1052:..\..\FreeRTOS_Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 399              		.loc 1 1052 0
 400 003a 204B     		ldr	r3, .L23+4
 401 003c 1B68     		ldr	r3, [r3]
 402 003e DA6A     		ldr	r2, [r3, #44]
 403 0040 7B68     		ldr	r3, [r7, #4]
 404 0042 DB6A     		ldr	r3, [r3, #44]
 405 0044 9A42     		cmp	r2, r3
 406 0046 02D8     		bhi	.L20
1053:..\..\FreeRTOS_Source/tasks.c **** 				{
1054:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 407              		.loc 1 1054 0
 408 0048 1C4A     		ldr	r2, .L23+4
 409 004a 7B68     		ldr	r3, [r7, #4]
 410 004c 1360     		str	r3, [r2]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 27
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 27
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 27
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 27
>>>>>>> parent of cb49844... test


 411              	.L20:
1055:..\..\FreeRTOS_Source/tasks.c **** 				}
1056:..\..\FreeRTOS_Source/tasks.c **** 				else
1057:..\..\FreeRTOS_Source/tasks.c **** 				{
1058:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1059:..\..\FreeRTOS_Source/tasks.c **** 				}
1060:..\..\FreeRTOS_Source/tasks.c **** 			}
1061:..\..\FreeRTOS_Source/tasks.c **** 			else
1062:..\..\FreeRTOS_Source/tasks.c **** 			{
1063:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1064:..\..\FreeRTOS_Source/tasks.c **** 			}
1065:..\..\FreeRTOS_Source/tasks.c **** 		}
1066:..\..\FreeRTOS_Source/tasks.c **** 
1067:..\..\FreeRTOS_Source/tasks.c **** 		uxTaskNumber++;
 412              		.loc 1 1067 0
 413 004e 1D4B     		ldr	r3, .L23+12
 414 0050 1B68     		ldr	r3, [r3]
 415 0052 0133     		adds	r3, r3, #1
 416 0054 1B4A     		ldr	r2, .L23+12
 417 0056 1360     		str	r3, [r2]
1068:..\..\FreeRTOS_Source/tasks.c **** 
1069:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1070:..\..\FreeRTOS_Source/tasks.c **** 		{
1071:..\..\FreeRTOS_Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1072:..\..\FreeRTOS_Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1073:..\..\FreeRTOS_Source/tasks.c **** 		}
1074:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1075:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1076:..\..\FreeRTOS_Source/tasks.c **** 
1077:..\..\FreeRTOS_Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 418              		.loc 1 1077 0
 419 0058 7B68     		ldr	r3, [r7, #4]
 420 005a DB6A     		ldr	r3, [r3, #44]
 421 005c 0122     		movs	r2, #1
 422 005e 9A40     		lsls	r2, r2, r3
 423 0060 194B     		ldr	r3, .L23+16
 424 0062 1B68     		ldr	r3, [r3]
 425 0064 1343     		orrs	r3, r3, r2
 426 0066 184A     		ldr	r2, .L23+16
 427 0068 1360     		str	r3, [r2]
 428 006a 7B68     		ldr	r3, [r7, #4]
 429 006c DA6A     		ldr	r2, [r3, #44]
 430 006e 1346     		mov	r3, r2
 431 0070 9B00     		lsls	r3, r3, #2
 432 0072 1344     		add	r3, r3, r2
 433 0074 9B00     		lsls	r3, r3, #2
 434 0076 154A     		ldr	r2, .L23+20
 435 0078 1A44     		add	r2, r2, r3
 436 007a 7B68     		ldr	r3, [r7, #4]
 437 007c 0433     		adds	r3, r3, #4
 438 007e 1946     		mov	r1, r3
 439 0080 1046     		mov	r0, r2
 440 0082 FFF7FEFF 		bl	vListInsertEnd
1078:..\..\FreeRTOS_Source/tasks.c **** 
1079:..\..\FreeRTOS_Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1080:..\..\FreeRTOS_Source/tasks.c **** 	}
1081:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 28
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 28
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 28
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 28
>>>>>>> parent of cb49844... test


 441              		.loc 1 1081 0
 442 0086 FFF7FEFF 		bl	vPortExitCritical
1082:..\..\FreeRTOS_Source/tasks.c **** 
1083:..\..\FreeRTOS_Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 443              		.loc 1 1083 0
 444 008a 0D4B     		ldr	r3, .L23+8
 445 008c 1B68     		ldr	r3, [r3]
 446 008e 002B     		cmp	r3, #0
 447 0090 0ED0     		beq	.L22
1084:..\..\FreeRTOS_Source/tasks.c **** 	{
1085:..\..\FreeRTOS_Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1086:..\..\FreeRTOS_Source/tasks.c **** 		then it should run now. */
1087:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 448              		.loc 1 1087 0
 449 0092 0A4B     		ldr	r3, .L23+4
 450 0094 1B68     		ldr	r3, [r3]
 451 0096 DA6A     		ldr	r2, [r3, #44]
 452 0098 7B68     		ldr	r3, [r7, #4]
 453 009a DB6A     		ldr	r3, [r3, #44]
 454 009c 9A42     		cmp	r2, r3
 455 009e 07D2     		bcs	.L22
1088:..\..\FreeRTOS_Source/tasks.c **** 		{
1089:..\..\FreeRTOS_Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 456              		.loc 1 1089 0
 457 00a0 0B4B     		ldr	r3, .L23+24
 458 00a2 4FF08052 		mov	r2, #268435456
 459 00a6 1A60     		str	r2, [r3]
 460              		.syntax unified
 461              	@ 1089 "..\..\FreeRTOS_Source\tasks.c" 1
 462 00a8 BFF34F8F 		dsb
 463              	@ 0 "" 2
 464              	@ 1089 "..\..\FreeRTOS_Source\tasks.c" 1
 465 00ac BFF36F8F 		isb
 466              	@ 0 "" 2
 467              		.thumb
 468              		.syntax unified
 469              	.L22:
1090:..\..\FreeRTOS_Source/tasks.c **** 		}
1091:..\..\FreeRTOS_Source/tasks.c **** 		else
1092:..\..\FreeRTOS_Source/tasks.c **** 		{
1093:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1094:..\..\FreeRTOS_Source/tasks.c **** 		}
1095:..\..\FreeRTOS_Source/tasks.c **** 	}
1096:..\..\FreeRTOS_Source/tasks.c **** 	else
1097:..\..\FreeRTOS_Source/tasks.c **** 	{
1098:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1099:..\..\FreeRTOS_Source/tasks.c **** 	}
1100:..\..\FreeRTOS_Source/tasks.c **** }
 470              		.loc 1 1100 0
 471 00b0 00BF     		nop
 472 00b2 0837     		adds	r7, r7, #8
 473              		.cfi_def_cfa_offset 8
 474 00b4 BD46     		mov	sp, r7
 475              		.cfi_def_cfa_register 13
 476              		@ sp needed
 477 00b6 80BD     		pop	{r7, pc}
 478              	.L24:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 29
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 29
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 29
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 29
>>>>>>> parent of cb49844... test


 479              		.align	2
 480              	.L23:
 481 00b8 B0000000 		.word	uxCurrentNumberOfTasks
 482 00bc 00000000 		.word	pxCurrentTCB
 483 00c0 BC000000 		.word	xSchedulerRunning
 484 00c4 CC000000 		.word	uxTaskNumber
 485 00c8 B8000000 		.word	uxTopReadyPriority
 486 00cc 04000000 		.word	pxReadyTasksLists
 487 00d0 04ED00E0 		.word	-536810236
 488              		.cfi_endproc
 489              	.LFE70:
 490              		.size	prvAddNewTaskToReadyList, .-prvAddNewTaskToReadyList
 491              		.section	.text.vTaskDelete,"ax",%progbits
 492              		.align	2
 493              		.global	vTaskDelete
 494              		.thumb
 495              		.thumb_func
 496              		.type	vTaskDelete, %function
 497              	vTaskDelete:
 498              	.LFB71:
1101:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1102:..\..\FreeRTOS_Source/tasks.c **** 
1103:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1104:..\..\FreeRTOS_Source/tasks.c **** 
1105:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1106:..\..\FreeRTOS_Source/tasks.c **** 	{
 499              		.loc 1 1106 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 16
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503 0000 80B5     		push	{r7, lr}
 504              		.cfi_def_cfa_offset 8
 505              		.cfi_offset 7, -8
 506              		.cfi_offset 14, -4
 507 0002 84B0     		sub	sp, sp, #16
 508              		.cfi_def_cfa_offset 24
 509 0004 00AF     		add	r7, sp, #0
 510              		.cfi_def_cfa_register 7
 511 0006 7860     		str	r0, [r7, #4]
1107:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
1108:..\..\FreeRTOS_Source/tasks.c **** 
1109:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 512              		.loc 1 1109 0
 513 0008 FFF7FEFF 		bl	vPortEnterCritical
1110:..\..\FreeRTOS_Source/tasks.c **** 		{
1111:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1112:..\..\FreeRTOS_Source/tasks.c **** 			being deleted. */
1113:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 514              		.loc 1 1113 0
 515 000c 7B68     		ldr	r3, [r7, #4]
 516 000e 002B     		cmp	r3, #0
 517 0010 02D1     		bne	.L26
 518              		.loc 1 1113 0 is_stmt 0 discriminator 1
 519 0012 314B     		ldr	r3, .L35
 520 0014 1B68     		ldr	r3, [r3]
 521 0016 00E0     		b	.L27
 522              	.L26:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 30
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 30
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 30
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 30
>>>>>>> parent of cb49844... test


 523              		.loc 1 1113 0 discriminator 2
 524 0018 7B68     		ldr	r3, [r7, #4]
 525              	.L27:
 526              		.loc 1 1113 0 discriminator 4
 527 001a FB60     		str	r3, [r7, #12]
1114:..\..\FreeRTOS_Source/tasks.c **** 
1115:..\..\FreeRTOS_Source/tasks.c **** 			/* Remove task from the ready list. */
1116:..\..\FreeRTOS_Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 528              		.loc 1 1116 0 is_stmt 1 discriminator 4
 529 001c FB68     		ldr	r3, [r7, #12]
 530 001e 0433     		adds	r3, r3, #4
 531 0020 1846     		mov	r0, r3
 532 0022 FFF7FEFF 		bl	uxListRemove
 533 0026 0346     		mov	r3, r0
 534 0028 002B     		cmp	r3, #0
 535 002a 15D1     		bne	.L28
1117:..\..\FreeRTOS_Source/tasks.c **** 			{
1118:..\..\FreeRTOS_Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 536              		.loc 1 1118 0
 537 002c FB68     		ldr	r3, [r7, #12]
 538 002e DA6A     		ldr	r2, [r3, #44]
 539 0030 2A49     		ldr	r1, .L35+4
 540 0032 1346     		mov	r3, r2
 541 0034 9B00     		lsls	r3, r3, #2
 542 0036 1344     		add	r3, r3, r2
 543 0038 9B00     		lsls	r3, r3, #2
 544 003a 0B44     		add	r3, r3, r1
 545 003c 1B68     		ldr	r3, [r3]
 546 003e 002B     		cmp	r3, #0
 547 0040 0AD1     		bne	.L28
 548              		.loc 1 1118 0 is_stmt 0 discriminator 1
 549 0042 FB68     		ldr	r3, [r7, #12]
 550 0044 DB6A     		ldr	r3, [r3, #44]
 551 0046 0122     		movs	r2, #1
 552 0048 02FA03F3 		lsl	r3, r2, r3
 553 004c DA43     		mvns	r2, r3
 554 004e 244B     		ldr	r3, .L35+8
 555 0050 1B68     		ldr	r3, [r3]
 556 0052 1340     		ands	r3, r3, r2
 557 0054 224A     		ldr	r2, .L35+8
 558 0056 1360     		str	r3, [r2]
 559              	.L28:
1119:..\..\FreeRTOS_Source/tasks.c **** 			}
1120:..\..\FreeRTOS_Source/tasks.c **** 			else
1121:..\..\FreeRTOS_Source/tasks.c **** 			{
1122:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1123:..\..\FreeRTOS_Source/tasks.c **** 			}
1124:..\..\FreeRTOS_Source/tasks.c **** 
1125:..\..\FreeRTOS_Source/tasks.c **** 			/* Is the task waiting on an event also? */
1126:..\..\FreeRTOS_Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 560              		.loc 1 1126 0 is_stmt 1
 561 0058 FB68     		ldr	r3, [r7, #12]
 562 005a 9B6A     		ldr	r3, [r3, #40]
 563 005c 002B     		cmp	r3, #0
 564 005e 04D0     		beq	.L30
1127:..\..\FreeRTOS_Source/tasks.c **** 			{
1128:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 31
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 31
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 31
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 31
>>>>>>> parent of cb49844... test


 565              		.loc 1 1128 0
 566 0060 FB68     		ldr	r3, [r7, #12]
 567 0062 1833     		adds	r3, r3, #24
 568 0064 1846     		mov	r0, r3
 569 0066 FFF7FEFF 		bl	uxListRemove
 570              	.L30:
1129:..\..\FreeRTOS_Source/tasks.c **** 			}
1130:..\..\FreeRTOS_Source/tasks.c **** 			else
1131:..\..\FreeRTOS_Source/tasks.c **** 			{
1132:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1133:..\..\FreeRTOS_Source/tasks.c **** 			}
1134:..\..\FreeRTOS_Source/tasks.c **** 
1135:..\..\FreeRTOS_Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1136:..\..\FreeRTOS_Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1137:..\..\FreeRTOS_Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1138:..\..\FreeRTOS_Source/tasks.c **** 			not return. */
1139:..\..\FreeRTOS_Source/tasks.c **** 			uxTaskNumber++;
 571              		.loc 1 1139 0
 572 006a 1E4B     		ldr	r3, .L35+12
 573 006c 1B68     		ldr	r3, [r3]
 574 006e 0133     		adds	r3, r3, #1
 575 0070 1C4A     		ldr	r2, .L35+12
 576 0072 1360     		str	r3, [r2]
1140:..\..\FreeRTOS_Source/tasks.c **** 
1141:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 577              		.loc 1 1141 0
 578 0074 184B     		ldr	r3, .L35
 579 0076 1B68     		ldr	r3, [r3]
 580 0078 FA68     		ldr	r2, [r7, #12]
 581 007a 9A42     		cmp	r2, r3
 582 007c 0BD1     		bne	.L31
1142:..\..\FreeRTOS_Source/tasks.c **** 			{
1143:..\..\FreeRTOS_Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1144:..\..\FreeRTOS_Source/tasks.c **** 				task itself, as a context switch to another task is required.
1145:..\..\FreeRTOS_Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1146:..\..\FreeRTOS_Source/tasks.c **** 				check the termination list and free up any memory allocated by
1147:..\..\FreeRTOS_Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1148:..\..\FreeRTOS_Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 583              		.loc 1 1148 0
 584 007e FB68     		ldr	r3, [r7, #12]
 585 0080 0433     		adds	r3, r3, #4
 586 0082 1946     		mov	r1, r3
 587 0084 1848     		ldr	r0, .L35+16
 588 0086 FFF7FEFF 		bl	vListInsertEnd
1149:..\..\FreeRTOS_Source/tasks.c **** 
1150:..\..\FreeRTOS_Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1151:..\..\FreeRTOS_Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1152:..\..\FreeRTOS_Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1153:..\..\FreeRTOS_Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 589              		.loc 1 1153 0
 590 008a 184B     		ldr	r3, .L35+20
 591 008c 1B68     		ldr	r3, [r3]
 592 008e 0133     		adds	r3, r3, #1
 593 0090 164A     		ldr	r2, .L35+20
 594 0092 1360     		str	r3, [r2]
 595 0094 09E0     		b	.L32
 596              	.L31:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 32
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 32
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 32
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 32
>>>>>>> parent of cb49844... test


1154:..\..\FreeRTOS_Source/tasks.c **** 
1155:..\..\FreeRTOS_Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1156:..\..\FreeRTOS_Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1157:..\..\FreeRTOS_Source/tasks.c **** 				after which it is not possible to yield away from this task -
1158:..\..\FreeRTOS_Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1159:..\..\FreeRTOS_Source/tasks.c **** 				required. */
1160:..\..\FreeRTOS_Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1161:..\..\FreeRTOS_Source/tasks.c **** 			}
1162:..\..\FreeRTOS_Source/tasks.c **** 			else
1163:..\..\FreeRTOS_Source/tasks.c **** 			{
1164:..\..\FreeRTOS_Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 597              		.loc 1 1164 0
 598 0096 164B     		ldr	r3, .L35+24
 599 0098 1B68     		ldr	r3, [r3]
 600 009a 013B     		subs	r3, r3, #1
 601 009c 144A     		ldr	r2, .L35+24
 602 009e 1360     		str	r3, [r2]
1165:..\..\FreeRTOS_Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 603              		.loc 1 1165 0
 604 00a0 F868     		ldr	r0, [r7, #12]
 605 00a2 FFF7FEFF 		bl	prvDeleteTCB
1166:..\..\FreeRTOS_Source/tasks.c **** 
1167:..\..\FreeRTOS_Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1168:..\..\FreeRTOS_Source/tasks.c **** 				the task that has just been deleted. */
1169:..\..\FreeRTOS_Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 606              		.loc 1 1169 0
 607 00a6 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 608              	.L32:
1170:..\..\FreeRTOS_Source/tasks.c **** 			}
1171:..\..\FreeRTOS_Source/tasks.c **** 
1172:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1173:..\..\FreeRTOS_Source/tasks.c **** 		}
1174:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 609              		.loc 1 1174 0
 610 00aa FFF7FEFF 		bl	vPortExitCritical
1175:..\..\FreeRTOS_Source/tasks.c **** 
1176:..\..\FreeRTOS_Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1177:..\..\FreeRTOS_Source/tasks.c **** 		been deleted. */
1178:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 611              		.loc 1 1178 0
 612 00ae 114B     		ldr	r3, .L35+28
 613 00b0 1B68     		ldr	r3, [r3]
 614 00b2 002B     		cmp	r3, #0
 615 00b4 0CD0     		beq	.L34
1179:..\..\FreeRTOS_Source/tasks.c **** 		{
1180:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 616              		.loc 1 1180 0
 617 00b6 084B     		ldr	r3, .L35
 618 00b8 1B68     		ldr	r3, [r3]
 619 00ba FA68     		ldr	r2, [r7, #12]
 620 00bc 9A42     		cmp	r2, r3
 621 00be 07D1     		bne	.L34
1181:..\..\FreeRTOS_Source/tasks.c **** 			{
1182:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1183:..\..\FreeRTOS_Source/tasks.c **** 				portYIELD_WITHIN_API();
 622              		.loc 1 1183 0
 623 00c0 0D4B     		ldr	r3, .L35+32
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 33
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 33
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 33
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 33
>>>>>>> parent of cb49844... test


 624 00c2 4FF08052 		mov	r2, #268435456
 625 00c6 1A60     		str	r2, [r3]
 626              		.syntax unified
 627              	@ 1183 "..\..\FreeRTOS_Source\tasks.c" 1
 628 00c8 BFF34F8F 		dsb
 629              	@ 0 "" 2
 630              	@ 1183 "..\..\FreeRTOS_Source\tasks.c" 1
 631 00cc BFF36F8F 		isb
 632              	@ 0 "" 2
 633              		.thumb
 634              		.syntax unified
 635              	.L34:
1184:..\..\FreeRTOS_Source/tasks.c **** 			}
1185:..\..\FreeRTOS_Source/tasks.c **** 			else
1186:..\..\FreeRTOS_Source/tasks.c **** 			{
1187:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1188:..\..\FreeRTOS_Source/tasks.c **** 			}
1189:..\..\FreeRTOS_Source/tasks.c **** 		}
1190:..\..\FreeRTOS_Source/tasks.c **** 	}
 636              		.loc 1 1190 0
 637 00d0 00BF     		nop
 638 00d2 1037     		adds	r7, r7, #16
 639              		.cfi_def_cfa_offset 8
 640 00d4 BD46     		mov	sp, r7
 641              		.cfi_def_cfa_register 13
 642              		@ sp needed
 643 00d6 80BD     		pop	{r7, pc}
 644              	.L36:
 645              		.align	2
 646              	.L35:
 647 00d8 00000000 		.word	pxCurrentTCB
 648 00dc 04000000 		.word	pxReadyTasksLists
 649 00e0 B8000000 		.word	uxTopReadyPriority
 650 00e4 CC000000 		.word	uxTaskNumber
 651 00e8 84000000 		.word	xTasksWaitingTermination
 652 00ec 98000000 		.word	uxDeletedTasksWaitingCleanUp
 653 00f0 B0000000 		.word	uxCurrentNumberOfTasks
 654 00f4 BC000000 		.word	xSchedulerRunning
 655 00f8 04ED00E0 		.word	-536810236
 656              		.cfi_endproc
 657              	.LFE71:
 658              		.size	vTaskDelete, .-vTaskDelete
 659              		.section	.text.vTaskDelayUntil,"ax",%progbits
 660              		.align	2
 661              		.global	vTaskDelayUntil
 662              		.thumb
 663              		.thumb_func
 664              		.type	vTaskDelayUntil, %function
 665              	vTaskDelayUntil:
 666              	.LFB72:
1191:..\..\FreeRTOS_Source/tasks.c **** 
1192:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1193:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1194:..\..\FreeRTOS_Source/tasks.c **** 
1195:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1196:..\..\FreeRTOS_Source/tasks.c **** 
1197:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 34
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 34
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 34
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 34
>>>>>>> parent of cb49844... test


1198:..\..\FreeRTOS_Source/tasks.c **** 	{
 667              		.loc 1 1198 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 24
 670              		@ frame_needed = 1, uses_anonymous_args = 0
 671 0000 80B5     		push	{r7, lr}
 672              		.cfi_def_cfa_offset 8
 673              		.cfi_offset 7, -8
 674              		.cfi_offset 14, -4
 675 0002 86B0     		sub	sp, sp, #24
 676              		.cfi_def_cfa_offset 32
 677 0004 00AF     		add	r7, sp, #0
 678              		.cfi_def_cfa_register 7
 679 0006 7860     		str	r0, [r7, #4]
 680 0008 3960     		str	r1, [r7]
1199:..\..\FreeRTOS_Source/tasks.c **** 	TickType_t xTimeToWake;
1200:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 681              		.loc 1 1200 0
 682 000a 0023     		movs	r3, #0
 683 000c 7B61     		str	r3, [r7, #20]
1201:..\..\FreeRTOS_Source/tasks.c **** 
1202:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1203:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1204:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1205:..\..\FreeRTOS_Source/tasks.c **** 
1206:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
 684              		.loc 1 1206 0
 685 000e FFF7FEFF 		bl	vTaskSuspendAll
 686              	.LBB28:
1207:..\..\FreeRTOS_Source/tasks.c **** 		{
1208:..\..\FreeRTOS_Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1209:..\..\FreeRTOS_Source/tasks.c **** 			block. */
1210:..\..\FreeRTOS_Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 687              		.loc 1 1210 0
 688 0012 214B     		ldr	r3, .L44
 689 0014 1B68     		ldr	r3, [r3]
 690 0016 3B61     		str	r3, [r7, #16]
1211:..\..\FreeRTOS_Source/tasks.c **** 
1212:..\..\FreeRTOS_Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1213:..\..\FreeRTOS_Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 691              		.loc 1 1213 0
 692 0018 7B68     		ldr	r3, [r7, #4]
 693 001a 1A68     		ldr	r2, [r3]
 694 001c 3B68     		ldr	r3, [r7]
 695 001e 1344     		add	r3, r3, r2
 696 0020 FB60     		str	r3, [r7, #12]
1214:..\..\FreeRTOS_Source/tasks.c **** 
1215:..\..\FreeRTOS_Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 697              		.loc 1 1215 0
 698 0022 7B68     		ldr	r3, [r7, #4]
 699 0024 1A68     		ldr	r2, [r3]
 700 0026 3B69     		ldr	r3, [r7, #16]
 701 0028 9A42     		cmp	r2, r3
 702 002a 0BD9     		bls	.L38
1216:..\..\FreeRTOS_Source/tasks.c **** 			{
1217:..\..\FreeRTOS_Source/tasks.c **** 				/* The tick count has overflowed since this function was
1218:..\..\FreeRTOS_Source/tasks.c **** 				lasted called.  In this case the only time we should ever
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 35
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 35
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 35
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 35
>>>>>>> parent of cb49844... test


1219:..\..\FreeRTOS_Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1220:..\..\FreeRTOS_Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1221:..\..\FreeRTOS_Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1222:..\..\FreeRTOS_Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 703              		.loc 1 1222 0
 704 002c 7B68     		ldr	r3, [r7, #4]
 705 002e 1A68     		ldr	r2, [r3]
 706 0030 FB68     		ldr	r3, [r7, #12]
 707 0032 9A42     		cmp	r2, r3
 708 0034 11D9     		bls	.L39
 709              		.loc 1 1222 0 is_stmt 0 discriminator 1
 710 0036 FA68     		ldr	r2, [r7, #12]
 711 0038 3B69     		ldr	r3, [r7, #16]
 712 003a 9A42     		cmp	r2, r3
 713 003c 0DD9     		bls	.L39
1223:..\..\FreeRTOS_Source/tasks.c **** 				{
1224:..\..\FreeRTOS_Source/tasks.c **** 					xShouldDelay = pdTRUE;
 714              		.loc 1 1224 0 is_stmt 1
 715 003e 0123     		movs	r3, #1
 716 0040 7B61     		str	r3, [r7, #20]
 717 0042 0AE0     		b	.L39
 718              	.L38:
1225:..\..\FreeRTOS_Source/tasks.c **** 				}
1226:..\..\FreeRTOS_Source/tasks.c **** 				else
1227:..\..\FreeRTOS_Source/tasks.c **** 				{
1228:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1229:..\..\FreeRTOS_Source/tasks.c **** 				}
1230:..\..\FreeRTOS_Source/tasks.c **** 			}
1231:..\..\FreeRTOS_Source/tasks.c **** 			else
1232:..\..\FreeRTOS_Source/tasks.c **** 			{
1233:..\..\FreeRTOS_Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1234:..\..\FreeRTOS_Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1235:..\..\FreeRTOS_Source/tasks.c **** 				tick time is less than the wake time. */
1236:..\..\FreeRTOS_Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 719              		.loc 1 1236 0
 720 0044 7B68     		ldr	r3, [r7, #4]
 721 0046 1A68     		ldr	r2, [r3]
 722 0048 FB68     		ldr	r3, [r7, #12]
 723 004a 9A42     		cmp	r2, r3
 724 004c 03D8     		bhi	.L40
 725              		.loc 1 1236 0 is_stmt 0 discriminator 1
 726 004e FA68     		ldr	r2, [r7, #12]
 727 0050 3B69     		ldr	r3, [r7, #16]
 728 0052 9A42     		cmp	r2, r3
 729 0054 01D9     		bls	.L39
 730              	.L40:
1237:..\..\FreeRTOS_Source/tasks.c **** 				{
1238:..\..\FreeRTOS_Source/tasks.c **** 					xShouldDelay = pdTRUE;
 731              		.loc 1 1238 0 is_stmt 1
 732 0056 0123     		movs	r3, #1
 733 0058 7B61     		str	r3, [r7, #20]
 734              	.L39:
1239:..\..\FreeRTOS_Source/tasks.c **** 				}
1240:..\..\FreeRTOS_Source/tasks.c **** 				else
1241:..\..\FreeRTOS_Source/tasks.c **** 				{
1242:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1243:..\..\FreeRTOS_Source/tasks.c **** 				}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 36
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 36
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 36
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 36
>>>>>>> parent of cb49844... test


1244:..\..\FreeRTOS_Source/tasks.c **** 			}
1245:..\..\FreeRTOS_Source/tasks.c **** 
1246:..\..\FreeRTOS_Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1247:..\..\FreeRTOS_Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 735              		.loc 1 1247 0
 736 005a 7B68     		ldr	r3, [r7, #4]
 737 005c FA68     		ldr	r2, [r7, #12]
 738 005e 1A60     		str	r2, [r3]
1248:..\..\FreeRTOS_Source/tasks.c **** 
1249:..\..\FreeRTOS_Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 739              		.loc 1 1249 0
 740 0060 7B69     		ldr	r3, [r7, #20]
 741 0062 002B     		cmp	r3, #0
 742 0064 06D0     		beq	.L41
1250:..\..\FreeRTOS_Source/tasks.c **** 			{
1251:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1252:..\..\FreeRTOS_Source/tasks.c **** 
1253:..\..\FreeRTOS_Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1254:..\..\FreeRTOS_Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1255:..\..\FreeRTOS_Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 743              		.loc 1 1255 0
 744 0066 FA68     		ldr	r2, [r7, #12]
 745 0068 3B69     		ldr	r3, [r7, #16]
 746 006a D31A     		subs	r3, r2, r3
 747 006c 0021     		movs	r1, #0
 748 006e 1846     		mov	r0, r3
 749 0070 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 750              	.L41:
 751              	.LBE28:
1256:..\..\FreeRTOS_Source/tasks.c **** 			}
1257:..\..\FreeRTOS_Source/tasks.c **** 			else
1258:..\..\FreeRTOS_Source/tasks.c **** 			{
1259:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1260:..\..\FreeRTOS_Source/tasks.c **** 			}
1261:..\..\FreeRTOS_Source/tasks.c **** 		}
1262:..\..\FreeRTOS_Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 752              		.loc 1 1262 0
 753 0074 FFF7FEFF 		bl	xTaskResumeAll
 754 0078 B860     		str	r0, [r7, #8]
1263:..\..\FreeRTOS_Source/tasks.c **** 
1264:..\..\FreeRTOS_Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1265:..\..\FreeRTOS_Source/tasks.c **** 		have put ourselves to sleep. */
1266:..\..\FreeRTOS_Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 755              		.loc 1 1266 0
 756 007a BB68     		ldr	r3, [r7, #8]
 757 007c 002B     		cmp	r3, #0
 758 007e 07D1     		bne	.L43
1267:..\..\FreeRTOS_Source/tasks.c **** 		{
1268:..\..\FreeRTOS_Source/tasks.c **** 			portYIELD_WITHIN_API();
 759              		.loc 1 1268 0
 760 0080 064B     		ldr	r3, .L44+4
 761 0082 4FF08052 		mov	r2, #268435456
 762 0086 1A60     		str	r2, [r3]
 763              		.syntax unified
 764              	@ 1268 "..\..\FreeRTOS_Source\tasks.c" 1
 765 0088 BFF34F8F 		dsb
 766              	@ 0 "" 2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 37
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 37
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 37
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 37
>>>>>>> parent of cb49844... test


 767              	@ 1268 "..\..\FreeRTOS_Source\tasks.c" 1
 768 008c BFF36F8F 		isb
 769              	@ 0 "" 2
 770              		.thumb
 771              		.syntax unified
 772              	.L43:
1269:..\..\FreeRTOS_Source/tasks.c **** 		}
1270:..\..\FreeRTOS_Source/tasks.c **** 		else
1271:..\..\FreeRTOS_Source/tasks.c **** 		{
1272:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1273:..\..\FreeRTOS_Source/tasks.c **** 		}
1274:..\..\FreeRTOS_Source/tasks.c **** 	}
 773              		.loc 1 1274 0
 774 0090 00BF     		nop
 775 0092 1837     		adds	r7, r7, #24
 776              		.cfi_def_cfa_offset 8
 777 0094 BD46     		mov	sp, r7
 778              		.cfi_def_cfa_register 13
 779              		@ sp needed
 780 0096 80BD     		pop	{r7, pc}
 781              	.L45:
 782              		.align	2
 783              	.L44:
 784 0098 B4000000 		.word	xTickCount
 785 009c 04ED00E0 		.word	-536810236
 786              		.cfi_endproc
 787              	.LFE72:
 788              		.size	vTaskDelayUntil, .-vTaskDelayUntil
 789              		.section	.text.vTaskDelay,"ax",%progbits
 790              		.align	2
 791              		.global	vTaskDelay
 792              		.thumb
 793              		.thumb_func
 794              		.type	vTaskDelay, %function
 795              	vTaskDelay:
 796              	.LFB73:
1275:..\..\FreeRTOS_Source/tasks.c **** 
1276:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1277:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1278:..\..\FreeRTOS_Source/tasks.c **** 
1279:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1280:..\..\FreeRTOS_Source/tasks.c **** 
1281:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1282:..\..\FreeRTOS_Source/tasks.c **** 	{
 797              		.loc 1 1282 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 16
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801 0000 80B5     		push	{r7, lr}
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 84B0     		sub	sp, sp, #16
 806              		.cfi_def_cfa_offset 24
 807 0004 00AF     		add	r7, sp, #0
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 38
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 38
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 38
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 38
>>>>>>> parent of cb49844... test


1283:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 810              		.loc 1 1283 0
 811 0008 0023     		movs	r3, #0
 812 000a FB60     		str	r3, [r7, #12]
1284:..\..\FreeRTOS_Source/tasks.c **** 
1285:..\..\FreeRTOS_Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1286:..\..\FreeRTOS_Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 813              		.loc 1 1286 0
 814 000c 7B68     		ldr	r3, [r7, #4]
 815 000e 002B     		cmp	r3, #0
 816 0010 08D0     		beq	.L47
1287:..\..\FreeRTOS_Source/tasks.c **** 		{
1288:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1289:..\..\FreeRTOS_Source/tasks.c **** 			vTaskSuspendAll();
 817              		.loc 1 1289 0
 818 0012 FFF7FEFF 		bl	vTaskSuspendAll
1290:..\..\FreeRTOS_Source/tasks.c **** 			{
1291:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_DELAY();
1292:..\..\FreeRTOS_Source/tasks.c **** 
1293:..\..\FreeRTOS_Source/tasks.c **** 				/* A task that is removed from the event list while the
1294:..\..\FreeRTOS_Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1295:..\..\FreeRTOS_Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1296:..\..\FreeRTOS_Source/tasks.c **** 				is resumed.
1297:..\..\FreeRTOS_Source/tasks.c **** 
1298:..\..\FreeRTOS_Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1299:..\..\FreeRTOS_Source/tasks.c **** 				executing task. */
1300:..\..\FreeRTOS_Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 819              		.loc 1 1300 0
 820 0016 0021     		movs	r1, #0
 821 0018 7868     		ldr	r0, [r7, #4]
 822 001a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1301:..\..\FreeRTOS_Source/tasks.c **** 			}
1302:..\..\FreeRTOS_Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
 823              		.loc 1 1302 0
 824 001e FFF7FEFF 		bl	xTaskResumeAll
 825 0022 F860     		str	r0, [r7, #12]
 826              	.L47:
1303:..\..\FreeRTOS_Source/tasks.c **** 		}
1304:..\..\FreeRTOS_Source/tasks.c **** 		else
1305:..\..\FreeRTOS_Source/tasks.c **** 		{
1306:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1307:..\..\FreeRTOS_Source/tasks.c **** 		}
1308:..\..\FreeRTOS_Source/tasks.c **** 
1309:..\..\FreeRTOS_Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1310:..\..\FreeRTOS_Source/tasks.c **** 		have put ourselves to sleep. */
1311:..\..\FreeRTOS_Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 827              		.loc 1 1311 0
 828 0024 FB68     		ldr	r3, [r7, #12]
 829 0026 002B     		cmp	r3, #0
 830 0028 07D1     		bne	.L49
1312:..\..\FreeRTOS_Source/tasks.c **** 		{
1313:..\..\FreeRTOS_Source/tasks.c **** 			portYIELD_WITHIN_API();
 831              		.loc 1 1313 0
 832 002a 064B     		ldr	r3, .L50
 833 002c 4FF08052 		mov	r2, #268435456
 834 0030 1A60     		str	r2, [r3]
 835              		.syntax unified
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 39
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 39
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 39
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 39
>>>>>>> parent of cb49844... test


 836              	@ 1313 "..\..\FreeRTOS_Source\tasks.c" 1
 837 0032 BFF34F8F 		dsb
 838              	@ 0 "" 2
 839              	@ 1313 "..\..\FreeRTOS_Source\tasks.c" 1
 840 0036 BFF36F8F 		isb
 841              	@ 0 "" 2
 842              		.thumb
 843              		.syntax unified
 844              	.L49:
1314:..\..\FreeRTOS_Source/tasks.c **** 		}
1315:..\..\FreeRTOS_Source/tasks.c **** 		else
1316:..\..\FreeRTOS_Source/tasks.c **** 		{
1317:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1318:..\..\FreeRTOS_Source/tasks.c **** 		}
1319:..\..\FreeRTOS_Source/tasks.c **** 	}
 845              		.loc 1 1319 0
 846 003a 00BF     		nop
 847 003c 1037     		adds	r7, r7, #16
 848              		.cfi_def_cfa_offset 8
 849 003e BD46     		mov	sp, r7
 850              		.cfi_def_cfa_register 13
 851              		@ sp needed
 852 0040 80BD     		pop	{r7, pc}
 853              	.L51:
 854 0042 00BF     		.align	2
 855              	.L50:
 856 0044 04ED00E0 		.word	-536810236
 857              		.cfi_endproc
 858              	.LFE73:
 859              		.size	vTaskDelay, .-vTaskDelay
 860              		.section	.text.eTaskGetState,"ax",%progbits
 861              		.align	2
 862              		.global	eTaskGetState
 863              		.thumb
 864              		.thumb_func
 865              		.type	eTaskGetState, %function
 866              	eTaskGetState:
 867              	.LFB74:
1320:..\..\FreeRTOS_Source/tasks.c **** 
1321:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1322:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1323:..\..\FreeRTOS_Source/tasks.c **** 
1324:..\..\FreeRTOS_Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1325:..\..\FreeRTOS_Source/tasks.c **** 
1326:..\..\FreeRTOS_Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1327:..\..\FreeRTOS_Source/tasks.c **** 	{
 868              		.loc 1 1327 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 32
 871              		@ frame_needed = 1, uses_anonymous_args = 0
 872 0000 80B5     		push	{r7, lr}
 873              		.cfi_def_cfa_offset 8
 874              		.cfi_offset 7, -8
 875              		.cfi_offset 14, -4
 876 0002 88B0     		sub	sp, sp, #32
 877              		.cfi_def_cfa_offset 40
 878 0004 00AF     		add	r7, sp, #0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 40
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 40
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 40
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 40
>>>>>>> parent of cb49844... test


 879              		.cfi_def_cfa_register 7
 880 0006 7860     		str	r0, [r7, #4]
1328:..\..\FreeRTOS_Source/tasks.c **** 	eTaskState eReturn;
1329:..\..\FreeRTOS_Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1330:..\..\FreeRTOS_Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 881              		.loc 1 1330 0
 882 0008 7B68     		ldr	r3, [r7, #4]
 883 000a BB61     		str	r3, [r7, #24]
1331:..\..\FreeRTOS_Source/tasks.c **** 
1332:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTCB );
1333:..\..\FreeRTOS_Source/tasks.c **** 
1334:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 884              		.loc 1 1334 0
 885 000c 234B     		ldr	r3, .L65
 886 000e 1B68     		ldr	r3, [r3]
 887 0010 BA69     		ldr	r2, [r7, #24]
 888 0012 9A42     		cmp	r2, r3
 889 0014 02D1     		bne	.L53
1335:..\..\FreeRTOS_Source/tasks.c **** 		{
1336:..\..\FreeRTOS_Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1337:..\..\FreeRTOS_Source/tasks.c **** 			eReturn = eRunning;
 890              		.loc 1 1337 0
 891 0016 0023     		movs	r3, #0
 892 0018 FB77     		strb	r3, [r7, #31]
 893 001a 3AE0     		b	.L54
 894              	.L53:
1338:..\..\FreeRTOS_Source/tasks.c **** 		}
1339:..\..\FreeRTOS_Source/tasks.c **** 		else
1340:..\..\FreeRTOS_Source/tasks.c **** 		{
1341:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
 895              		.loc 1 1341 0
 896 001c FFF7FEFF 		bl	vPortEnterCritical
1342:..\..\FreeRTOS_Source/tasks.c **** 			{
1343:..\..\FreeRTOS_Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 897              		.loc 1 1343 0
 898 0020 BB69     		ldr	r3, [r7, #24]
 899 0022 5B69     		ldr	r3, [r3, #20]
 900 0024 7B61     		str	r3, [r7, #20]
1344:..\..\FreeRTOS_Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 901              		.loc 1 1344 0
 902 0026 1E4B     		ldr	r3, .L65+4
 903 0028 1B68     		ldr	r3, [r3]
 904 002a 3B61     		str	r3, [r7, #16]
1345:..\..\FreeRTOS_Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 905              		.loc 1 1345 0
 906 002c 1D4B     		ldr	r3, .L65+8
 907 002e 1B68     		ldr	r3, [r3]
 908 0030 FB60     		str	r3, [r7, #12]
1346:..\..\FreeRTOS_Source/tasks.c **** 			}
1347:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 909              		.loc 1 1347 0
 910 0032 FFF7FEFF 		bl	vPortExitCritical
1348:..\..\FreeRTOS_Source/tasks.c **** 
1349:..\..\FreeRTOS_Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 911              		.loc 1 1349 0
 912 0036 7A69     		ldr	r2, [r7, #20]
 913 0038 3B69     		ldr	r3, [r7, #16]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 41
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 41
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 41
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 41
>>>>>>> parent of cb49844... test


 914 003a 9A42     		cmp	r2, r3
 915 003c 03D0     		beq	.L55
 916              		.loc 1 1349 0 is_stmt 0 discriminator 1
 917 003e 7A69     		ldr	r2, [r7, #20]
 918 0040 FB68     		ldr	r3, [r7, #12]
 919 0042 9A42     		cmp	r2, r3
 920 0044 02D1     		bne	.L56
 921              	.L55:
1350:..\..\FreeRTOS_Source/tasks.c **** 			{
1351:..\..\FreeRTOS_Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1352:..\..\FreeRTOS_Source/tasks.c **** 				lists. */
1353:..\..\FreeRTOS_Source/tasks.c **** 				eReturn = eBlocked;
 922              		.loc 1 1353 0 is_stmt 1
 923 0046 0223     		movs	r3, #2
 924 0048 FB77     		strb	r3, [r7, #31]
 925 004a 22E0     		b	.L54
 926              	.L56:
1354:..\..\FreeRTOS_Source/tasks.c **** 			}
1355:..\..\FreeRTOS_Source/tasks.c **** 
1356:..\..\FreeRTOS_Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1357:..\..\FreeRTOS_Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 927              		.loc 1 1357 0
 928 004c 7B69     		ldr	r3, [r7, #20]
 929 004e 164A     		ldr	r2, .L65+12
 930 0050 9342     		cmp	r3, r2
 931 0052 12D1     		bne	.L57
1358:..\..\FreeRTOS_Source/tasks.c **** 				{
1359:..\..\FreeRTOS_Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1360:..\..\FreeRTOS_Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1361:..\..\FreeRTOS_Source/tasks.c **** 					indefinitely? */
1362:..\..\FreeRTOS_Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 932              		.loc 1 1362 0
 933 0054 BB69     		ldr	r3, [r7, #24]
 934 0056 9B6A     		ldr	r3, [r3, #40]
 935 0058 002B     		cmp	r3, #0
 936 005a 0BD1     		bne	.L58
1363:..\..\FreeRTOS_Source/tasks.c **** 					{
1364:..\..\FreeRTOS_Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1365:..\..\FreeRTOS_Source/tasks.c **** 						{
1366:..\..\FreeRTOS_Source/tasks.c **** 							/* The task does not appear on the event list item of
1367:..\..\FreeRTOS_Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1368:..\..\FreeRTOS_Source/tasks.c **** 							blocked state if it is waiting on its notification
1369:..\..\FreeRTOS_Source/tasks.c **** 							rather than waiting on an object. */
1370:..\..\FreeRTOS_Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 937              		.loc 1 1370 0
 938 005c BB69     		ldr	r3, [r7, #24]
 939 005e 93F84C30 		ldrb	r3, [r3, #76]
 940 0062 DBB2     		uxtb	r3, r3
 941 0064 012B     		cmp	r3, #1
 942 0066 02D1     		bne	.L59
1371:..\..\FreeRTOS_Source/tasks.c **** 							{
1372:..\..\FreeRTOS_Source/tasks.c **** 								eReturn = eBlocked;
 943              		.loc 1 1372 0
 944 0068 0223     		movs	r3, #2
 945 006a FB77     		strb	r3, [r7, #31]
 946 006c 11E0     		b	.L54
 947              	.L59:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 42
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 42
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 42
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 42
>>>>>>> parent of cb49844... test


1373:..\..\FreeRTOS_Source/tasks.c **** 							}
1374:..\..\FreeRTOS_Source/tasks.c **** 							else
1375:..\..\FreeRTOS_Source/tasks.c **** 							{
1376:..\..\FreeRTOS_Source/tasks.c **** 								eReturn = eSuspended;
 948              		.loc 1 1376 0
 949 006e 0323     		movs	r3, #3
 950 0070 FB77     		strb	r3, [r7, #31]
 951 0072 0EE0     		b	.L54
 952              	.L58:
1377:..\..\FreeRTOS_Source/tasks.c **** 							}
1378:..\..\FreeRTOS_Source/tasks.c **** 						}
1379:..\..\FreeRTOS_Source/tasks.c **** 						#else
1380:..\..\FreeRTOS_Source/tasks.c **** 						{
1381:..\..\FreeRTOS_Source/tasks.c **** 							eReturn = eSuspended;
1382:..\..\FreeRTOS_Source/tasks.c **** 						}
1383:..\..\FreeRTOS_Source/tasks.c **** 						#endif
1384:..\..\FreeRTOS_Source/tasks.c **** 					}
1385:..\..\FreeRTOS_Source/tasks.c **** 					else
1386:..\..\FreeRTOS_Source/tasks.c **** 					{
1387:..\..\FreeRTOS_Source/tasks.c **** 						eReturn = eBlocked;
 953              		.loc 1 1387 0
 954 0074 0223     		movs	r3, #2
 955 0076 FB77     		strb	r3, [r7, #31]
 956 0078 0BE0     		b	.L54
 957              	.L57:
1388:..\..\FreeRTOS_Source/tasks.c **** 					}
1389:..\..\FreeRTOS_Source/tasks.c **** 				}
1390:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1391:..\..\FreeRTOS_Source/tasks.c **** 
1392:..\..\FreeRTOS_Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1393:..\..\FreeRTOS_Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 958              		.loc 1 1393 0
 959 007a 7B69     		ldr	r3, [r7, #20]
 960 007c 0B4A     		ldr	r2, .L65+16
 961 007e 9342     		cmp	r3, r2
 962 0080 02D0     		beq	.L62
 963              		.loc 1 1393 0 is_stmt 0 discriminator 1
 964 0082 7B69     		ldr	r3, [r7, #20]
 965 0084 002B     		cmp	r3, #0
 966 0086 02D1     		bne	.L63
 967              	.L62:
1394:..\..\FreeRTOS_Source/tasks.c **** 				{
1395:..\..\FreeRTOS_Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1396:..\..\FreeRTOS_Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1397:..\..\FreeRTOS_Source/tasks.c **** 					all. */
1398:..\..\FreeRTOS_Source/tasks.c **** 					eReturn = eDeleted;
 968              		.loc 1 1398 0 is_stmt 1
 969 0088 0423     		movs	r3, #4
 970 008a FB77     		strb	r3, [r7, #31]
 971 008c 01E0     		b	.L54
 972              	.L63:
1399:..\..\FreeRTOS_Source/tasks.c **** 				}
1400:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1401:..\..\FreeRTOS_Source/tasks.c **** 
1402:..\..\FreeRTOS_Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1403:..\..\FreeRTOS_Source/tasks.c **** 			{
1404:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 43
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 43
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 43
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 43
>>>>>>> parent of cb49844... test


1405:..\..\FreeRTOS_Source/tasks.c **** 				Ready (including pending ready) state. */
1406:..\..\FreeRTOS_Source/tasks.c **** 				eReturn = eReady;
 973              		.loc 1 1406 0
 974 008e 0123     		movs	r3, #1
 975 0090 FB77     		strb	r3, [r7, #31]
 976              	.L54:
1407:..\..\FreeRTOS_Source/tasks.c **** 			}
1408:..\..\FreeRTOS_Source/tasks.c **** 		}
1409:..\..\FreeRTOS_Source/tasks.c **** 
1410:..\..\FreeRTOS_Source/tasks.c **** 		return eReturn;
 977              		.loc 1 1410 0
 978 0092 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1411:..\..\FreeRTOS_Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 979              		.loc 1 1411 0
 980 0094 1846     		mov	r0, r3
 981 0096 2037     		adds	r7, r7, #32
 982              		.cfi_def_cfa_offset 8
 983 0098 BD46     		mov	sp, r7
 984              		.cfi_def_cfa_register 13
 985              		@ sp needed
 986 009a 80BD     		pop	{r7, pc}
 987              	.L66:
 988              		.align	2
 989              	.L65:
 990 009c 00000000 		.word	pxCurrentTCB
 991 00a0 68000000 		.word	pxDelayedTaskList
 992 00a4 6C000000 		.word	pxOverflowDelayedTaskList
 993 00a8 9C000000 		.word	xSuspendedTaskList
 994 00ac 84000000 		.word	xTasksWaitingTermination
 995              		.cfi_endproc
 996              	.LFE74:
 997              		.size	eTaskGetState, .-eTaskGetState
 998              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 999              		.align	2
 1000              		.global	uxTaskPriorityGet
 1001              		.thumb
 1002              		.thumb_func
 1003              		.type	uxTaskPriorityGet, %function
 1004              	uxTaskPriorityGet:
 1005              	.LFB75:
1412:..\..\FreeRTOS_Source/tasks.c **** 
1413:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1414:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1415:..\..\FreeRTOS_Source/tasks.c **** 
1416:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1417:..\..\FreeRTOS_Source/tasks.c **** 
1418:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1419:..\..\FreeRTOS_Source/tasks.c **** 	{
 1006              		.loc 1 1419 0
 1007              		.cfi_startproc
 1008              		@ args = 0, pretend = 0, frame = 16
 1009              		@ frame_needed = 1, uses_anonymous_args = 0
 1010 0000 80B5     		push	{r7, lr}
 1011              		.cfi_def_cfa_offset 8
 1012              		.cfi_offset 7, -8
 1013              		.cfi_offset 14, -4
 1014 0002 84B0     		sub	sp, sp, #16
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 44
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 44
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 44
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 44
>>>>>>> parent of cb49844... test


 1015              		.cfi_def_cfa_offset 24
 1016 0004 00AF     		add	r7, sp, #0
 1017              		.cfi_def_cfa_register 7
 1018 0006 7860     		str	r0, [r7, #4]
1420:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t const *pxTCB;
1421:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn;
1422:..\..\FreeRTOS_Source/tasks.c **** 
1423:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 1019              		.loc 1 1423 0
 1020 0008 FFF7FEFF 		bl	vPortEnterCritical
1424:..\..\FreeRTOS_Source/tasks.c **** 		{
1425:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1426:..\..\FreeRTOS_Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1427:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1021              		.loc 1 1427 0
 1022 000c 7B68     		ldr	r3, [r7, #4]
 1023 000e 002B     		cmp	r3, #0
 1024 0010 02D1     		bne	.L68
 1025              		.loc 1 1427 0 is_stmt 0 discriminator 1
 1026 0012 074B     		ldr	r3, .L71
 1027 0014 1B68     		ldr	r3, [r3]
 1028 0016 00E0     		b	.L69
 1029              	.L68:
 1030              		.loc 1 1427 0 discriminator 2
 1031 0018 7B68     		ldr	r3, [r7, #4]
 1032              	.L69:
 1033              		.loc 1 1427 0 discriminator 4
 1034 001a FB60     		str	r3, [r7, #12]
1428:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1035              		.loc 1 1428 0 is_stmt 1 discriminator 4
 1036 001c FB68     		ldr	r3, [r7, #12]
 1037 001e DB6A     		ldr	r3, [r3, #44]
 1038 0020 BB60     		str	r3, [r7, #8]
1429:..\..\FreeRTOS_Source/tasks.c **** 		}
1430:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 1039              		.loc 1 1430 0 discriminator 4
 1040 0022 FFF7FEFF 		bl	vPortExitCritical
1431:..\..\FreeRTOS_Source/tasks.c **** 
1432:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
 1041              		.loc 1 1432 0 discriminator 4
 1042 0026 BB68     		ldr	r3, [r7, #8]
1433:..\..\FreeRTOS_Source/tasks.c **** 	}
 1043              		.loc 1 1433 0 discriminator 4
 1044 0028 1846     		mov	r0, r3
 1045 002a 1037     		adds	r7, r7, #16
 1046              		.cfi_def_cfa_offset 8
 1047 002c BD46     		mov	sp, r7
 1048              		.cfi_def_cfa_register 13
 1049              		@ sp needed
 1050 002e 80BD     		pop	{r7, pc}
 1051              	.L72:
 1052              		.align	2
 1053              	.L71:
 1054 0030 00000000 		.word	pxCurrentTCB
 1055              		.cfi_endproc
 1056              	.LFE75:
 1057              		.size	uxTaskPriorityGet, .-uxTaskPriorityGet
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 45
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 45
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 45
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 45
>>>>>>> parent of cb49844... test


 1058              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1059              		.align	2
 1060              		.global	uxTaskPriorityGetFromISR
 1061              		.thumb
 1062              		.thumb_func
 1063              		.type	uxTaskPriorityGetFromISR, %function
 1064              	uxTaskPriorityGetFromISR:
 1065              	.LFB76:
1434:..\..\FreeRTOS_Source/tasks.c **** 
1435:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1436:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1437:..\..\FreeRTOS_Source/tasks.c **** 
1438:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1439:..\..\FreeRTOS_Source/tasks.c **** 
1440:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1441:..\..\FreeRTOS_Source/tasks.c **** 	{
 1066              		.loc 1 1441 0
 1067              		.cfi_startproc
 1068              		@ args = 0, pretend = 0, frame = 32
 1069              		@ frame_needed = 1, uses_anonymous_args = 0
 1070              		@ link register save eliminated.
 1071 0000 80B4     		push	{r7}
 1072              		.cfi_def_cfa_offset 4
 1073              		.cfi_offset 7, -4
 1074 0002 89B0     		sub	sp, sp, #36
 1075              		.cfi_def_cfa_offset 40
 1076 0004 00AF     		add	r7, sp, #0
 1077              		.cfi_def_cfa_register 7
 1078 0006 7860     		str	r0, [r7, #4]
 1079              	.LBB29:
 1080              	.LBB30:
 1081              		.file 2 "..\\..\\FreeRTOS_Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 46
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 46
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 46
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 46
>>>>>>> parent of cb49844... test


  26:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 47
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 47
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 47
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 47
>>>>>>> parent of cb49844... test


  83:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
  97:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 48
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 48
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 48
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 48
>>>>>>> parent of cb49844... test


 140:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 154:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 196:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 49
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 49
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 49
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 49
>>>>>>> parent of cb49844... test


 197:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1082              		.loc 2 211 0
 1083              		.syntax unified
 1084              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1085 0008 EFF31182 			mrs r2, basepri											
 1086 000c 4FF0A003 		mov r3, #160												
 1087 0010 83F31188 		msr basepri, r3											
 1088 0014 BFF36F8F 		isb														
 1089 0018 BFF34F8F 		dsb														
 1090              	
 1091              	@ 0 "" 2
 1092              		.thumb
 1093              		.syntax unified
 1094 001c FA60     		str	r2, [r7, #12]
 1095 001e BB60     		str	r3, [r7, #8]
 212:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 1096              		.loc 2 223 0
 1097 0020 FB68     		ldr	r3, [r7, #12]
 1098              	.LBE30:
 1099              	.LBE29:
1442:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t const *pxTCB;
1443:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1444:..\..\FreeRTOS_Source/tasks.c **** 
1445:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1446:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1447:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1448:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1449:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1450:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1451:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1452:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1453:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 50
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 50
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 50
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 50
>>>>>>> parent of cb49844... test


1454:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1455:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1456:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1457:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1458:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1459:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
1460:..\..\FreeRTOS_Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1461:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1462:..\..\FreeRTOS_Source/tasks.c **** 
1463:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1100              		.loc 1 1463 0
 1101 0022 BB61     		str	r3, [r7, #24]
1464:..\..\FreeRTOS_Source/tasks.c **** 		{
1465:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1466:..\..\FreeRTOS_Source/tasks.c **** 			task that is being queried. */
1467:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1102              		.loc 1 1467 0
 1103 0024 7B68     		ldr	r3, [r7, #4]
 1104 0026 002B     		cmp	r3, #0
 1105 0028 02D1     		bne	.L75
 1106              		.loc 1 1467 0 is_stmt 0 discriminator 1
 1107 002a 094B     		ldr	r3, .L78
 1108 002c 1B68     		ldr	r3, [r3]
 1109 002e 00E0     		b	.L76
 1110              	.L75:
 1111              		.loc 1 1467 0 discriminator 2
 1112 0030 7B68     		ldr	r3, [r7, #4]
 1113              	.L76:
 1114              		.loc 1 1467 0 discriminator 4
 1115 0032 7B61     		str	r3, [r7, #20]
1468:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1116              		.loc 1 1468 0 is_stmt 1 discriminator 4
 1117 0034 7B69     		ldr	r3, [r7, #20]
 1118 0036 DB6A     		ldr	r3, [r3, #44]
 1119 0038 3B61     		str	r3, [r7, #16]
 1120 003a BB69     		ldr	r3, [r7, #24]
 1121 003c FB61     		str	r3, [r7, #28]
 1122              	.LBB31:
 1123              	.LBB32:
 224:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 1124              		.loc 2 229 0 discriminator 4
 1125 003e FB69     		ldr	r3, [r7, #28]
 1126              		.syntax unified
 1127              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1128 0040 83F31188 			msr basepri, r3	
 1129              	@ 0 "" 2
 1130              		.thumb
 1131              		.syntax unified
 1132              	.LBE32:
 1133              	.LBE31:
1469:..\..\FreeRTOS_Source/tasks.c **** 		}
1470:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 51
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 51
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 51
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 51
>>>>>>> parent of cb49844... test


1471:..\..\FreeRTOS_Source/tasks.c **** 
1472:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
 1134              		.loc 1 1472 0 discriminator 4
 1135 0044 3B69     		ldr	r3, [r7, #16]
1473:..\..\FreeRTOS_Source/tasks.c **** 	}
 1136              		.loc 1 1473 0 discriminator 4
 1137 0046 1846     		mov	r0, r3
 1138 0048 2437     		adds	r7, r7, #36
 1139              		.cfi_def_cfa_offset 4
 1140 004a BD46     		mov	sp, r7
 1141              		.cfi_def_cfa_register 13
 1142              		@ sp needed
 1143 004c 80BC     		pop	{r7}
 1144              		.cfi_restore 7
 1145              		.cfi_def_cfa_offset 0
 1146 004e 7047     		bx	lr
 1147              	.L79:
 1148              		.align	2
 1149              	.L78:
 1150 0050 00000000 		.word	pxCurrentTCB
 1151              		.cfi_endproc
 1152              	.LFE76:
 1153              		.size	uxTaskPriorityGetFromISR, .-uxTaskPriorityGetFromISR
 1154              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1155              		.align	2
 1156              		.global	vTaskPrioritySet
 1157              		.thumb
 1158              		.thumb_func
 1159              		.type	vTaskPrioritySet, %function
 1160              	vTaskPrioritySet:
 1161              	.LFB77:
1474:..\..\FreeRTOS_Source/tasks.c **** 
1475:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1476:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1477:..\..\FreeRTOS_Source/tasks.c **** 
1478:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1479:..\..\FreeRTOS_Source/tasks.c **** 
1480:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1481:..\..\FreeRTOS_Source/tasks.c **** 	{
 1162              		.loc 1 1481 0
 1163              		.cfi_startproc
 1164              		@ args = 0, pretend = 0, frame = 24
 1165              		@ frame_needed = 1, uses_anonymous_args = 0
 1166 0000 80B5     		push	{r7, lr}
 1167              		.cfi_def_cfa_offset 8
 1168              		.cfi_offset 7, -8
 1169              		.cfi_offset 14, -4
 1170 0002 86B0     		sub	sp, sp, #24
 1171              		.cfi_def_cfa_offset 32
 1172 0004 00AF     		add	r7, sp, #0
 1173              		.cfi_def_cfa_register 7
 1174 0006 7860     		str	r0, [r7, #4]
 1175 0008 3960     		str	r1, [r7]
1482:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
1483:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1484:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1176              		.loc 1 1484 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 52
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 52
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 52
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 52
>>>>>>> parent of cb49844... test


 1177 000a 0023     		movs	r3, #0
 1178 000c 7B61     		str	r3, [r7, #20]
1485:..\..\FreeRTOS_Source/tasks.c **** 
1486:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1487:..\..\FreeRTOS_Source/tasks.c **** 
1488:..\..\FreeRTOS_Source/tasks.c **** 		/* Ensure the new priority is valid. */
1489:..\..\FreeRTOS_Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1179              		.loc 1 1489 0
 1180 000e 3B68     		ldr	r3, [r7]
 1181 0010 042B     		cmp	r3, #4
 1182 0012 01D9     		bls	.L81
1490:..\..\FreeRTOS_Source/tasks.c **** 		{
1491:..\..\FreeRTOS_Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1183              		.loc 1 1491 0
 1184 0014 0423     		movs	r3, #4
 1185 0016 3B60     		str	r3, [r7]
 1186              	.L81:
1492:..\..\FreeRTOS_Source/tasks.c **** 		}
1493:..\..\FreeRTOS_Source/tasks.c **** 		else
1494:..\..\FreeRTOS_Source/tasks.c **** 		{
1495:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1496:..\..\FreeRTOS_Source/tasks.c **** 		}
1497:..\..\FreeRTOS_Source/tasks.c **** 
1498:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 1187              		.loc 1 1498 0
 1188 0018 FFF7FEFF 		bl	vPortEnterCritical
1499:..\..\FreeRTOS_Source/tasks.c **** 		{
1500:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1501:..\..\FreeRTOS_Source/tasks.c **** 			task that is being changed. */
1502:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1189              		.loc 1 1502 0
 1190 001c 7B68     		ldr	r3, [r7, #4]
 1191 001e 002B     		cmp	r3, #0
 1192 0020 02D1     		bne	.L82
 1193              		.loc 1 1502 0 is_stmt 0 discriminator 1
 1194 0022 414B     		ldr	r3, .L91
 1195 0024 1B68     		ldr	r3, [r3]
 1196 0026 00E0     		b	.L83
 1197              	.L82:
 1198              		.loc 1 1502 0 discriminator 2
 1199 0028 7B68     		ldr	r3, [r7, #4]
 1200              	.L83:
 1201              		.loc 1 1502 0 discriminator 4
 1202 002a 3B61     		str	r3, [r7, #16]
1503:..\..\FreeRTOS_Source/tasks.c **** 
1504:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1505:..\..\FreeRTOS_Source/tasks.c **** 
1506:..\..\FreeRTOS_Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1507:..\..\FreeRTOS_Source/tasks.c **** 			{
1508:..\..\FreeRTOS_Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1203              		.loc 1 1508 0 is_stmt 1 discriminator 4
 1204 002c 3B69     		ldr	r3, [r7, #16]
 1205 002e 1B6C     		ldr	r3, [r3, #64]
 1206 0030 FB60     		str	r3, [r7, #12]
1509:..\..\FreeRTOS_Source/tasks.c **** 			}
1510:..\..\FreeRTOS_Source/tasks.c **** 			#else
1511:..\..\FreeRTOS_Source/tasks.c **** 			{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 53
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 53
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 53
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 53
>>>>>>> parent of cb49844... test


1512:..\..\FreeRTOS_Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1513:..\..\FreeRTOS_Source/tasks.c **** 			}
1514:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1515:..\..\FreeRTOS_Source/tasks.c **** 
1516:..\..\FreeRTOS_Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1207              		.loc 1 1516 0 discriminator 4
 1208 0032 FA68     		ldr	r2, [r7, #12]
 1209 0034 3B68     		ldr	r3, [r7]
 1210 0036 9A42     		cmp	r2, r3
 1211 0038 6FD0     		beq	.L84
1517:..\..\FreeRTOS_Source/tasks.c **** 			{
1518:..\..\FreeRTOS_Source/tasks.c **** 				/* The priority change may have readied a task of higher
1519:..\..\FreeRTOS_Source/tasks.c **** 				priority than the calling task. */
1520:..\..\FreeRTOS_Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1212              		.loc 1 1520 0
 1213 003a 3A68     		ldr	r2, [r7]
 1214 003c FB68     		ldr	r3, [r7, #12]
 1215 003e 9A42     		cmp	r2, r3
 1216 0040 0DD9     		bls	.L85
1521:..\..\FreeRTOS_Source/tasks.c **** 				{
1522:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1217              		.loc 1 1522 0
 1218 0042 394B     		ldr	r3, .L91
 1219 0044 1B68     		ldr	r3, [r3]
 1220 0046 3A69     		ldr	r2, [r7, #16]
 1221 0048 9A42     		cmp	r2, r3
 1222 004a 0FD0     		beq	.L86
1523:..\..\FreeRTOS_Source/tasks.c **** 					{
1524:..\..\FreeRTOS_Source/tasks.c **** 						/* The priority of a task other than the currently
1525:..\..\FreeRTOS_Source/tasks.c **** 						running task is being raised.  Is the priority being
1526:..\..\FreeRTOS_Source/tasks.c **** 						raised above that of the running task? */
1527:..\..\FreeRTOS_Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1223              		.loc 1 1527 0
 1224 004c 364B     		ldr	r3, .L91
 1225 004e 1B68     		ldr	r3, [r3]
 1226 0050 DA6A     		ldr	r2, [r3, #44]
 1227 0052 3B68     		ldr	r3, [r7]
 1228 0054 9A42     		cmp	r2, r3
 1229 0056 09D8     		bhi	.L86
1528:..\..\FreeRTOS_Source/tasks.c **** 						{
1529:..\..\FreeRTOS_Source/tasks.c **** 							xYieldRequired = pdTRUE;
 1230              		.loc 1 1529 0
 1231 0058 0123     		movs	r3, #1
 1232 005a 7B61     		str	r3, [r7, #20]
 1233 005c 06E0     		b	.L86
 1234              	.L85:
1530:..\..\FreeRTOS_Source/tasks.c **** 						}
1531:..\..\FreeRTOS_Source/tasks.c **** 						else
1532:..\..\FreeRTOS_Source/tasks.c **** 						{
1533:..\..\FreeRTOS_Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1534:..\..\FreeRTOS_Source/tasks.c **** 						}
1535:..\..\FreeRTOS_Source/tasks.c **** 					}
1536:..\..\FreeRTOS_Source/tasks.c **** 					else
1537:..\..\FreeRTOS_Source/tasks.c **** 					{
1538:..\..\FreeRTOS_Source/tasks.c **** 						/* The priority of the running task is being raised,
1539:..\..\FreeRTOS_Source/tasks.c **** 						but the running task must already be the highest
1540:..\..\FreeRTOS_Source/tasks.c **** 						priority task able to run so no yield is required. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 54
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 54
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 54
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 54
>>>>>>> parent of cb49844... test


1541:..\..\FreeRTOS_Source/tasks.c **** 					}
1542:..\..\FreeRTOS_Source/tasks.c **** 				}
1543:..\..\FreeRTOS_Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1235              		.loc 1 1543 0
 1236 005e 324B     		ldr	r3, .L91
 1237 0060 1B68     		ldr	r3, [r3]
 1238 0062 3A69     		ldr	r2, [r7, #16]
 1239 0064 9A42     		cmp	r2, r3
 1240 0066 01D1     		bne	.L86
1544:..\..\FreeRTOS_Source/tasks.c **** 				{
1545:..\..\FreeRTOS_Source/tasks.c **** 					/* Setting the priority of the running task down means
1546:..\..\FreeRTOS_Source/tasks.c **** 					there may now be another task of higher priority that
1547:..\..\FreeRTOS_Source/tasks.c **** 					is ready to execute. */
1548:..\..\FreeRTOS_Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1241              		.loc 1 1548 0
 1242 0068 0123     		movs	r3, #1
 1243 006a 7B61     		str	r3, [r7, #20]
 1244              	.L86:
1549:..\..\FreeRTOS_Source/tasks.c **** 				}
1550:..\..\FreeRTOS_Source/tasks.c **** 				else
1551:..\..\FreeRTOS_Source/tasks.c **** 				{
1552:..\..\FreeRTOS_Source/tasks.c **** 					/* Setting the priority of any other task down does not
1553:..\..\FreeRTOS_Source/tasks.c **** 					require a yield as the running task must be above the
1554:..\..\FreeRTOS_Source/tasks.c **** 					new priority of the task being modified. */
1555:..\..\FreeRTOS_Source/tasks.c **** 				}
1556:..\..\FreeRTOS_Source/tasks.c **** 
1557:..\..\FreeRTOS_Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1558:..\..\FreeRTOS_Source/tasks.c **** 				before its uxPriority member is changed so the
1559:..\..\FreeRTOS_Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1560:..\..\FreeRTOS_Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1245              		.loc 1 1560 0
 1246 006c 3B69     		ldr	r3, [r7, #16]
 1247 006e DB6A     		ldr	r3, [r3, #44]
 1248 0070 BB60     		str	r3, [r7, #8]
1561:..\..\FreeRTOS_Source/tasks.c **** 
1562:..\..\FreeRTOS_Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1563:..\..\FreeRTOS_Source/tasks.c **** 				{
1564:..\..\FreeRTOS_Source/tasks.c **** 					/* Only change the priority being used if the task is not
1565:..\..\FreeRTOS_Source/tasks.c **** 					currently using an inherited priority. */
1566:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 1249              		.loc 1 1566 0
 1250 0072 3B69     		ldr	r3, [r7, #16]
 1251 0074 1A6C     		ldr	r2, [r3, #64]
 1252 0076 3B69     		ldr	r3, [r7, #16]
 1253 0078 DB6A     		ldr	r3, [r3, #44]
 1254 007a 9A42     		cmp	r2, r3
 1255 007c 02D1     		bne	.L87
1567:..\..\FreeRTOS_Source/tasks.c **** 					{
1568:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1256              		.loc 1 1568 0
 1257 007e 3B69     		ldr	r3, [r7, #16]
 1258 0080 3A68     		ldr	r2, [r7]
 1259 0082 DA62     		str	r2, [r3, #44]
 1260              	.L87:
1569:..\..\FreeRTOS_Source/tasks.c **** 					}
1570:..\..\FreeRTOS_Source/tasks.c **** 					else
1571:..\..\FreeRTOS_Source/tasks.c **** 					{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 55
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 55
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 55
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 55
>>>>>>> parent of cb49844... test


1572:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1573:..\..\FreeRTOS_Source/tasks.c **** 					}
1574:..\..\FreeRTOS_Source/tasks.c **** 
1575:..\..\FreeRTOS_Source/tasks.c **** 					/* The base priority gets set whatever. */
1576:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1261              		.loc 1 1576 0
 1262 0084 3B69     		ldr	r3, [r7, #16]
 1263 0086 3A68     		ldr	r2, [r7]
 1264 0088 1A64     		str	r2, [r3, #64]
1577:..\..\FreeRTOS_Source/tasks.c **** 				}
1578:..\..\FreeRTOS_Source/tasks.c **** 				#else
1579:..\..\FreeRTOS_Source/tasks.c **** 				{
1580:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1581:..\..\FreeRTOS_Source/tasks.c **** 				}
1582:..\..\FreeRTOS_Source/tasks.c **** 				#endif
1583:..\..\FreeRTOS_Source/tasks.c **** 
1584:..\..\FreeRTOS_Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1585:..\..\FreeRTOS_Source/tasks.c **** 				being used for anything else. */
1586:..\..\FreeRTOS_Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1265              		.loc 1 1586 0
 1266 008a 3B69     		ldr	r3, [r7, #16]
 1267 008c 9B69     		ldr	r3, [r3, #24]
 1268 008e 002B     		cmp	r3, #0
 1269 0090 04DB     		blt	.L88
1587:..\..\FreeRTOS_Source/tasks.c **** 				{
1588:..\..\FreeRTOS_Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1270              		.loc 1 1588 0
 1271 0092 3B68     		ldr	r3, [r7]
 1272 0094 C3F10502 		rsb	r2, r3, #5
 1273 0098 3B69     		ldr	r3, [r7, #16]
 1274 009a 9A61     		str	r2, [r3, #24]
 1275              	.L88:
1589:..\..\FreeRTOS_Source/tasks.c **** 				}
1590:..\..\FreeRTOS_Source/tasks.c **** 				else
1591:..\..\FreeRTOS_Source/tasks.c **** 				{
1592:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1593:..\..\FreeRTOS_Source/tasks.c **** 				}
1594:..\..\FreeRTOS_Source/tasks.c **** 
1595:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1596:..\..\FreeRTOS_Source/tasks.c **** 				nothing more than change its priority variable. However, if
1597:..\..\FreeRTOS_Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1598:..\..\FreeRTOS_Source/tasks.c **** 				in the list appropriate to its new priority. */
1599:..\..\FreeRTOS_Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1276              		.loc 1 1599 0
 1277 009c 3B69     		ldr	r3, [r7, #16]
 1278 009e 5969     		ldr	r1, [r3, #20]
 1279 00a0 BA68     		ldr	r2, [r7, #8]
 1280 00a2 1346     		mov	r3, r2
 1281 00a4 9B00     		lsls	r3, r3, #2
 1282 00a6 1344     		add	r3, r3, r2
 1283 00a8 9B00     		lsls	r3, r3, #2
 1284 00aa 204A     		ldr	r2, .L91+4
 1285 00ac 1344     		add	r3, r3, r2
 1286 00ae 9942     		cmp	r1, r3
 1287 00b0 28D1     		bne	.L89
1600:..\..\FreeRTOS_Source/tasks.c **** 				{
1601:..\..\FreeRTOS_Source/tasks.c **** 					/* The task is currently in its ready list - remove before
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 56
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 56
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 56
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 56
>>>>>>> parent of cb49844... test


1602:..\..\FreeRTOS_Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1603:..\..\FreeRTOS_Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1604:..\..\FreeRTOS_Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1288              		.loc 1 1604 0
 1289 00b2 3B69     		ldr	r3, [r7, #16]
 1290 00b4 0433     		adds	r3, r3, #4
 1291 00b6 1846     		mov	r0, r3
 1292 00b8 FFF7FEFF 		bl	uxListRemove
 1293 00bc 0346     		mov	r3, r0
 1294 00be 002B     		cmp	r3, #0
 1295 00c0 09D1     		bne	.L90
1605:..\..\FreeRTOS_Source/tasks.c **** 					{
1606:..\..\FreeRTOS_Source/tasks.c **** 						/* It is known that the task is in its ready list so
1607:..\..\FreeRTOS_Source/tasks.c **** 						there is no need to check again and the port level
1608:..\..\FreeRTOS_Source/tasks.c **** 						reset macro can be called directly. */
1609:..\..\FreeRTOS_Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 1296              		.loc 1 1609 0
 1297 00c2 0122     		movs	r2, #1
 1298 00c4 BB68     		ldr	r3, [r7, #8]
 1299 00c6 02FA03F3 		lsl	r3, r2, r3
 1300 00ca DA43     		mvns	r2, r3
 1301 00cc 184B     		ldr	r3, .L91+8
 1302 00ce 1B68     		ldr	r3, [r3]
 1303 00d0 1340     		ands	r3, r3, r2
 1304 00d2 174A     		ldr	r2, .L91+8
 1305 00d4 1360     		str	r3, [r2]
 1306              	.L90:
1610:..\..\FreeRTOS_Source/tasks.c **** 					}
1611:..\..\FreeRTOS_Source/tasks.c **** 					else
1612:..\..\FreeRTOS_Source/tasks.c **** 					{
1613:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1614:..\..\FreeRTOS_Source/tasks.c **** 					}
1615:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1307              		.loc 1 1615 0
 1308 00d6 3B69     		ldr	r3, [r7, #16]
 1309 00d8 DB6A     		ldr	r3, [r3, #44]
 1310 00da 0122     		movs	r2, #1
 1311 00dc 9A40     		lsls	r2, r2, r3
 1312 00de 144B     		ldr	r3, .L91+8
 1313 00e0 1B68     		ldr	r3, [r3]
 1314 00e2 1343     		orrs	r3, r3, r2
 1315 00e4 124A     		ldr	r2, .L91+8
 1316 00e6 1360     		str	r3, [r2]
 1317 00e8 3B69     		ldr	r3, [r7, #16]
 1318 00ea DA6A     		ldr	r2, [r3, #44]
 1319 00ec 1346     		mov	r3, r2
 1320 00ee 9B00     		lsls	r3, r3, #2
 1321 00f0 1344     		add	r3, r3, r2
 1322 00f2 9B00     		lsls	r3, r3, #2
 1323 00f4 0D4A     		ldr	r2, .L91+4
 1324 00f6 1A44     		add	r2, r2, r3
 1325 00f8 3B69     		ldr	r3, [r7, #16]
 1326 00fa 0433     		adds	r3, r3, #4
 1327 00fc 1946     		mov	r1, r3
 1328 00fe 1046     		mov	r0, r2
 1329 0100 FFF7FEFF 		bl	vListInsertEnd
 1330              	.L89:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 57
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 57
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 57
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 57
>>>>>>> parent of cb49844... test


1616:..\..\FreeRTOS_Source/tasks.c **** 				}
1617:..\..\FreeRTOS_Source/tasks.c **** 				else
1618:..\..\FreeRTOS_Source/tasks.c **** 				{
1619:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1620:..\..\FreeRTOS_Source/tasks.c **** 				}
1621:..\..\FreeRTOS_Source/tasks.c **** 
1622:..\..\FreeRTOS_Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1331              		.loc 1 1622 0
 1332 0104 7B69     		ldr	r3, [r7, #20]
 1333 0106 002B     		cmp	r3, #0
 1334 0108 07D0     		beq	.L84
1623:..\..\FreeRTOS_Source/tasks.c **** 				{
1624:..\..\FreeRTOS_Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1335              		.loc 1 1624 0
 1336 010a 0A4B     		ldr	r3, .L91+12
 1337 010c 4FF08052 		mov	r2, #268435456
 1338 0110 1A60     		str	r2, [r3]
 1339              		.syntax unified
 1340              	@ 1624 "..\..\FreeRTOS_Source\tasks.c" 1
 1341 0112 BFF34F8F 		dsb
 1342              	@ 0 "" 2
 1343              	@ 1624 "..\..\FreeRTOS_Source\tasks.c" 1
 1344 0116 BFF36F8F 		isb
 1345              	@ 0 "" 2
 1346              		.thumb
 1347              		.syntax unified
 1348              	.L84:
1625:..\..\FreeRTOS_Source/tasks.c **** 				}
1626:..\..\FreeRTOS_Source/tasks.c **** 				else
1627:..\..\FreeRTOS_Source/tasks.c **** 				{
1628:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1629:..\..\FreeRTOS_Source/tasks.c **** 				}
1630:..\..\FreeRTOS_Source/tasks.c **** 
1631:..\..\FreeRTOS_Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1632:..\..\FreeRTOS_Source/tasks.c **** 				optimised task selection is not being used. */
1633:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1634:..\..\FreeRTOS_Source/tasks.c **** 			}
1635:..\..\FreeRTOS_Source/tasks.c **** 		}
1636:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 1349              		.loc 1 1636 0
 1350 011a FFF7FEFF 		bl	vPortExitCritical
1637:..\..\FreeRTOS_Source/tasks.c **** 	}
 1351              		.loc 1 1637 0
 1352 011e 00BF     		nop
 1353 0120 1837     		adds	r7, r7, #24
 1354              		.cfi_def_cfa_offset 8
 1355 0122 BD46     		mov	sp, r7
 1356              		.cfi_def_cfa_register 13
 1357              		@ sp needed
 1358 0124 80BD     		pop	{r7, pc}
 1359              	.L92:
 1360 0126 00BF     		.align	2
 1361              	.L91:
 1362 0128 00000000 		.word	pxCurrentTCB
 1363 012c 04000000 		.word	pxReadyTasksLists
 1364 0130 B8000000 		.word	uxTopReadyPriority
 1365 0134 04ED00E0 		.word	-536810236
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 58
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 58
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 58
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 58
>>>>>>> parent of cb49844... test


 1366              		.cfi_endproc
 1367              	.LFE77:
 1368              		.size	vTaskPrioritySet, .-vTaskPrioritySet
 1369              		.section	.text.vTaskSuspend,"ax",%progbits
 1370              		.align	2
 1371              		.global	vTaskSuspend
 1372              		.thumb
 1373              		.thumb_func
 1374              		.type	vTaskSuspend, %function
 1375              	vTaskSuspend:
 1376              	.LFB78:
1638:..\..\FreeRTOS_Source/tasks.c **** 
1639:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1640:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1641:..\..\FreeRTOS_Source/tasks.c **** 
1642:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1643:..\..\FreeRTOS_Source/tasks.c **** 
1644:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1645:..\..\FreeRTOS_Source/tasks.c **** 	{
 1377              		.loc 1 1645 0
 1378              		.cfi_startproc
 1379              		@ args = 0, pretend = 0, frame = 16
 1380              		@ frame_needed = 1, uses_anonymous_args = 0
 1381 0000 80B5     		push	{r7, lr}
 1382              		.cfi_def_cfa_offset 8
 1383              		.cfi_offset 7, -8
 1384              		.cfi_offset 14, -4
 1385 0002 84B0     		sub	sp, sp, #16
 1386              		.cfi_def_cfa_offset 24
 1387 0004 00AF     		add	r7, sp, #0
 1388              		.cfi_def_cfa_register 7
 1389 0006 7860     		str	r0, [r7, #4]
1646:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
1647:..\..\FreeRTOS_Source/tasks.c **** 
1648:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 1390              		.loc 1 1648 0
 1391 0008 FFF7FEFF 		bl	vPortEnterCritical
1649:..\..\FreeRTOS_Source/tasks.c **** 		{
1650:..\..\FreeRTOS_Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1651:..\..\FreeRTOS_Source/tasks.c **** 			being suspended. */
1652:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 1392              		.loc 1 1652 0
 1393 000c 7B68     		ldr	r3, [r7, #4]
 1394 000e 002B     		cmp	r3, #0
 1395 0010 02D1     		bne	.L94
 1396              		.loc 1 1652 0 is_stmt 0 discriminator 1
 1397 0012 354B     		ldr	r3, .L106
 1398 0014 1B68     		ldr	r3, [r3]
 1399 0016 00E0     		b	.L95
 1400              	.L94:
 1401              		.loc 1 1652 0 discriminator 2
 1402 0018 7B68     		ldr	r3, [r7, #4]
 1403              	.L95:
 1404              		.loc 1 1652 0 discriminator 4
 1405 001a FB60     		str	r3, [r7, #12]
1653:..\..\FreeRTOS_Source/tasks.c **** 
1654:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 59
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 59
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 59
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 59
>>>>>>> parent of cb49844... test


1655:..\..\FreeRTOS_Source/tasks.c **** 
1656:..\..\FreeRTOS_Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1657:..\..\FreeRTOS_Source/tasks.c **** 			suspended list. */
1658:..\..\FreeRTOS_Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1406              		.loc 1 1658 0 is_stmt 1 discriminator 4
 1407 001c FB68     		ldr	r3, [r7, #12]
 1408 001e 0433     		adds	r3, r3, #4
 1409 0020 1846     		mov	r0, r3
 1410 0022 FFF7FEFF 		bl	uxListRemove
 1411 0026 0346     		mov	r3, r0
 1412 0028 002B     		cmp	r3, #0
 1413 002a 15D1     		bne	.L96
1659:..\..\FreeRTOS_Source/tasks.c **** 			{
1660:..\..\FreeRTOS_Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 1414              		.loc 1 1660 0
 1415 002c FB68     		ldr	r3, [r7, #12]
 1416 002e DA6A     		ldr	r2, [r3, #44]
 1417 0030 2E49     		ldr	r1, .L106+4
 1418 0032 1346     		mov	r3, r2
 1419 0034 9B00     		lsls	r3, r3, #2
 1420 0036 1344     		add	r3, r3, r2
 1421 0038 9B00     		lsls	r3, r3, #2
 1422 003a 0B44     		add	r3, r3, r1
 1423 003c 1B68     		ldr	r3, [r3]
 1424 003e 002B     		cmp	r3, #0
 1425 0040 0AD1     		bne	.L96
 1426              		.loc 1 1660 0 is_stmt 0 discriminator 1
 1427 0042 FB68     		ldr	r3, [r7, #12]
 1428 0044 DB6A     		ldr	r3, [r3, #44]
 1429 0046 0122     		movs	r2, #1
 1430 0048 02FA03F3 		lsl	r3, r2, r3
 1431 004c DA43     		mvns	r2, r3
 1432 004e 284B     		ldr	r3, .L106+8
 1433 0050 1B68     		ldr	r3, [r3]
 1434 0052 1340     		ands	r3, r3, r2
 1435 0054 264A     		ldr	r2, .L106+8
 1436 0056 1360     		str	r3, [r2]
 1437              	.L96:
1661:..\..\FreeRTOS_Source/tasks.c **** 			}
1662:..\..\FreeRTOS_Source/tasks.c **** 			else
1663:..\..\FreeRTOS_Source/tasks.c **** 			{
1664:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1665:..\..\FreeRTOS_Source/tasks.c **** 			}
1666:..\..\FreeRTOS_Source/tasks.c **** 
1667:..\..\FreeRTOS_Source/tasks.c **** 			/* Is the task waiting on an event also? */
1668:..\..\FreeRTOS_Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1438              		.loc 1 1668 0 is_stmt 1
 1439 0058 FB68     		ldr	r3, [r7, #12]
 1440 005a 9B6A     		ldr	r3, [r3, #40]
 1441 005c 002B     		cmp	r3, #0
 1442 005e 04D0     		beq	.L98
1669:..\..\FreeRTOS_Source/tasks.c **** 			{
1670:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1443              		.loc 1 1670 0
 1444 0060 FB68     		ldr	r3, [r7, #12]
 1445 0062 1833     		adds	r3, r3, #24
 1446 0064 1846     		mov	r0, r3
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 60
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 60
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 60
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 60
>>>>>>> parent of cb49844... test


 1447 0066 FFF7FEFF 		bl	uxListRemove
 1448              	.L98:
1671:..\..\FreeRTOS_Source/tasks.c **** 			}
1672:..\..\FreeRTOS_Source/tasks.c **** 			else
1673:..\..\FreeRTOS_Source/tasks.c **** 			{
1674:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1675:..\..\FreeRTOS_Source/tasks.c **** 			}
1676:..\..\FreeRTOS_Source/tasks.c **** 
1677:..\..\FreeRTOS_Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1449              		.loc 1 1677 0
 1450 006a FB68     		ldr	r3, [r7, #12]
 1451 006c 0433     		adds	r3, r3, #4
 1452 006e 1946     		mov	r1, r3
 1453 0070 2048     		ldr	r0, .L106+12
 1454 0072 FFF7FEFF 		bl	vListInsertEnd
1678:..\..\FreeRTOS_Source/tasks.c **** 
1679:..\..\FreeRTOS_Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1680:..\..\FreeRTOS_Source/tasks.c **** 			{
1681:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1455              		.loc 1 1681 0
 1456 0076 FB68     		ldr	r3, [r7, #12]
 1457 0078 93F84C30 		ldrb	r3, [r3, #76]
 1458 007c DBB2     		uxtb	r3, r3
 1459 007e 012B     		cmp	r3, #1
 1460 0080 03D1     		bne	.L99
1682:..\..\FreeRTOS_Source/tasks.c **** 				{
1683:..\..\FreeRTOS_Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1684:..\..\FreeRTOS_Source/tasks.c **** 					now suspended, so no notification was received. */
1685:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1461              		.loc 1 1685 0
 1462 0082 FB68     		ldr	r3, [r7, #12]
 1463 0084 0022     		movs	r2, #0
 1464 0086 83F84C20 		strb	r2, [r3, #76]
 1465              	.L99:
1686:..\..\FreeRTOS_Source/tasks.c **** 				}
1687:..\..\FreeRTOS_Source/tasks.c **** 			}
1688:..\..\FreeRTOS_Source/tasks.c **** 			#endif
1689:..\..\FreeRTOS_Source/tasks.c **** 		}
1690:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 1466              		.loc 1 1690 0
 1467 008a FFF7FEFF 		bl	vPortExitCritical
1691:..\..\FreeRTOS_Source/tasks.c **** 
1692:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1468              		.loc 1 1692 0
 1469 008e 1A4B     		ldr	r3, .L106+16
 1470 0090 1B68     		ldr	r3, [r3]
 1471 0092 002B     		cmp	r3, #0
 1472 0094 05D0     		beq	.L100
1693:..\..\FreeRTOS_Source/tasks.c **** 		{
1694:..\..\FreeRTOS_Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1695:..\..\FreeRTOS_Source/tasks.c **** 			task that is now in the Suspended state. */
1696:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
 1473              		.loc 1 1696 0
 1474 0096 FFF7FEFF 		bl	vPortEnterCritical
1697:..\..\FreeRTOS_Source/tasks.c **** 			{
1698:..\..\FreeRTOS_Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1475              		.loc 1 1698 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 61
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 61
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 61
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 61
>>>>>>> parent of cb49844... test


 1476 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1699:..\..\FreeRTOS_Source/tasks.c **** 			}
1700:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 1477              		.loc 1 1700 0
 1478 009e FFF7FEFF 		bl	vPortExitCritical
 1479              	.L100:
1701:..\..\FreeRTOS_Source/tasks.c **** 		}
1702:..\..\FreeRTOS_Source/tasks.c **** 		else
1703:..\..\FreeRTOS_Source/tasks.c **** 		{
1704:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1705:..\..\FreeRTOS_Source/tasks.c **** 		}
1706:..\..\FreeRTOS_Source/tasks.c **** 
1707:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1480              		.loc 1 1707 0
 1481 00a2 114B     		ldr	r3, .L106
 1482 00a4 1B68     		ldr	r3, [r3]
 1483 00a6 FA68     		ldr	r2, [r7, #12]
 1484 00a8 9A42     		cmp	r2, r3
 1485 00aa 18D1     		bne	.L105
1708:..\..\FreeRTOS_Source/tasks.c **** 		{
1709:..\..\FreeRTOS_Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1486              		.loc 1 1709 0
 1487 00ac 124B     		ldr	r3, .L106+16
 1488 00ae 1B68     		ldr	r3, [r3]
 1489 00b0 002B     		cmp	r3, #0
 1490 00b2 08D0     		beq	.L102
1710:..\..\FreeRTOS_Source/tasks.c **** 			{
1711:..\..\FreeRTOS_Source/tasks.c **** 				/* The current task has just been suspended. */
1712:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1713:..\..\FreeRTOS_Source/tasks.c **** 				portYIELD_WITHIN_API();
 1491              		.loc 1 1713 0
 1492 00b4 114B     		ldr	r3, .L106+20
 1493 00b6 4FF08052 		mov	r2, #268435456
 1494 00ba 1A60     		str	r2, [r3]
 1495              		.syntax unified
 1496              	@ 1713 "..\..\FreeRTOS_Source\tasks.c" 1
 1497 00bc BFF34F8F 		dsb
 1498              	@ 0 "" 2
 1499              	@ 1713 "..\..\FreeRTOS_Source\tasks.c" 1
 1500 00c0 BFF36F8F 		isb
 1501              	@ 0 "" 2
1714:..\..\FreeRTOS_Source/tasks.c **** 			}
1715:..\..\FreeRTOS_Source/tasks.c **** 			else
1716:..\..\FreeRTOS_Source/tasks.c **** 			{
1717:..\..\FreeRTOS_Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1718:..\..\FreeRTOS_Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1719:..\..\FreeRTOS_Source/tasks.c **** 				must be adjusted to point to a different task. */
1720:..\..\FreeRTOS_Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1721:..\..\FreeRTOS_Source/tasks.c **** 				{
1722:..\..\FreeRTOS_Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1723:..\..\FreeRTOS_Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1724:..\..\FreeRTOS_Source/tasks.c **** 					be set to point to it no matter what its relative priority
1725:..\..\FreeRTOS_Source/tasks.c **** 					is. */
1726:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB = NULL;
1727:..\..\FreeRTOS_Source/tasks.c **** 				}
1728:..\..\FreeRTOS_Source/tasks.c **** 				else
1729:..\..\FreeRTOS_Source/tasks.c **** 				{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 62
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 62
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 62
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 62
>>>>>>> parent of cb49844... test


1730:..\..\FreeRTOS_Source/tasks.c **** 					vTaskSwitchContext();
1731:..\..\FreeRTOS_Source/tasks.c **** 				}
1732:..\..\FreeRTOS_Source/tasks.c **** 			}
1733:..\..\FreeRTOS_Source/tasks.c **** 		}
1734:..\..\FreeRTOS_Source/tasks.c **** 		else
1735:..\..\FreeRTOS_Source/tasks.c **** 		{
1736:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1737:..\..\FreeRTOS_Source/tasks.c **** 		}
1738:..\..\FreeRTOS_Source/tasks.c **** 	}
 1502              		.loc 1 1738 0
 1503              		.thumb
 1504              		.syntax unified
 1505 00c4 0BE0     		b	.L105
 1506              	.L102:
1720:..\..\FreeRTOS_Source/tasks.c **** 				{
 1507              		.loc 1 1720 0
 1508 00c6 0B4B     		ldr	r3, .L106+12
 1509 00c8 1A68     		ldr	r2, [r3]
 1510 00ca 0D4B     		ldr	r3, .L106+24
 1511 00cc 1B68     		ldr	r3, [r3]
 1512 00ce 9A42     		cmp	r2, r3
 1513 00d0 03D1     		bne	.L104
1726:..\..\FreeRTOS_Source/tasks.c **** 				}
 1514              		.loc 1 1726 0
 1515 00d2 054B     		ldr	r3, .L106
 1516 00d4 0022     		movs	r2, #0
 1517 00d6 1A60     		str	r2, [r3]
 1518              		.loc 1 1738 0
 1519 00d8 01E0     		b	.L105
 1520              	.L104:
1730:..\..\FreeRTOS_Source/tasks.c **** 				}
 1521              		.loc 1 1730 0
 1522 00da FFF7FEFF 		bl	vTaskSwitchContext
 1523              	.L105:
 1524              		.loc 1 1738 0
 1525 00de 00BF     		nop
 1526 00e0 1037     		adds	r7, r7, #16
 1527              		.cfi_def_cfa_offset 8
 1528 00e2 BD46     		mov	sp, r7
 1529              		.cfi_def_cfa_register 13
 1530              		@ sp needed
 1531 00e4 80BD     		pop	{r7, pc}
 1532              	.L107:
 1533 00e6 00BF     		.align	2
 1534              	.L106:
 1535 00e8 00000000 		.word	pxCurrentTCB
 1536 00ec 04000000 		.word	pxReadyTasksLists
 1537 00f0 B8000000 		.word	uxTopReadyPriority
 1538 00f4 9C000000 		.word	xSuspendedTaskList
 1539 00f8 BC000000 		.word	xSchedulerRunning
 1540 00fc 04ED00E0 		.word	-536810236
 1541 0100 B0000000 		.word	uxCurrentNumberOfTasks
 1542              		.cfi_endproc
 1543              	.LFE78:
 1544              		.size	vTaskSuspend, .-vTaskSuspend
 1545              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 1546              		.align	2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 63
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 63
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 63
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 63
>>>>>>> parent of cb49844... test


 1547              		.thumb
 1548              		.thumb_func
 1549              		.type	prvTaskIsTaskSuspended, %function
 1550              	prvTaskIsTaskSuspended:
 1551              	.LFB79:
1739:..\..\FreeRTOS_Source/tasks.c **** 
1740:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1741:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1742:..\..\FreeRTOS_Source/tasks.c **** 
1743:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1744:..\..\FreeRTOS_Source/tasks.c **** 
1745:..\..\FreeRTOS_Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1746:..\..\FreeRTOS_Source/tasks.c **** 	{
 1552              		.loc 1 1746 0
 1553              		.cfi_startproc
 1554              		@ args = 0, pretend = 0, frame = 16
 1555              		@ frame_needed = 1, uses_anonymous_args = 0
 1556              		@ link register save eliminated.
 1557 0000 80B4     		push	{r7}
 1558              		.cfi_def_cfa_offset 4
 1559              		.cfi_offset 7, -4
 1560 0002 85B0     		sub	sp, sp, #20
 1561              		.cfi_def_cfa_offset 24
 1562 0004 00AF     		add	r7, sp, #0
 1563              		.cfi_def_cfa_register 7
 1564 0006 7860     		str	r0, [r7, #4]
1747:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 1565              		.loc 1 1747 0
 1566 0008 0023     		movs	r3, #0
 1567 000a FB60     		str	r3, [r7, #12]
1748:..\..\FreeRTOS_Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1568              		.loc 1 1748 0
 1569 000c 7B68     		ldr	r3, [r7, #4]
 1570 000e BB60     		str	r3, [r7, #8]
1749:..\..\FreeRTOS_Source/tasks.c **** 
1750:..\..\FreeRTOS_Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1751:..\..\FreeRTOS_Source/tasks.c **** 		section. */
1752:..\..\FreeRTOS_Source/tasks.c **** 
1753:..\..\FreeRTOS_Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1754:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTask );
1755:..\..\FreeRTOS_Source/tasks.c **** 
1756:..\..\FreeRTOS_Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1757:..\..\FreeRTOS_Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 1571              		.loc 1 1757 0
 1572 0010 BB68     		ldr	r3, [r7, #8]
 1573 0012 5B69     		ldr	r3, [r3, #20]
 1574 0014 094A     		ldr	r2, .L111
 1575 0016 9342     		cmp	r3, r2
 1576 0018 0AD1     		bne	.L109
1758:..\..\FreeRTOS_Source/tasks.c **** 		{
1759:..\..\FreeRTOS_Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1760:..\..\FreeRTOS_Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 1577              		.loc 1 1760 0
 1578 001a BB68     		ldr	r3, [r7, #8]
 1579 001c 9B6A     		ldr	r3, [r3, #40]
 1580 001e 084A     		ldr	r2, .L111+4
 1581 0020 9342     		cmp	r3, r2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 64
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 64
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 64
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 64
>>>>>>> parent of cb49844... test


 1582 0022 05D0     		beq	.L109
1761:..\..\FreeRTOS_Source/tasks.c **** 			{
1762:..\..\FreeRTOS_Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1763:..\..\FreeRTOS_Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1764:..\..\FreeRTOS_Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 1583              		.loc 1 1764 0
 1584 0024 BB68     		ldr	r3, [r7, #8]
 1585 0026 9B6A     		ldr	r3, [r3, #40]
 1586 0028 002B     		cmp	r3, #0
 1587 002a 01D1     		bne	.L109
1765:..\..\FreeRTOS_Source/tasks.c **** 				{
1766:..\..\FreeRTOS_Source/tasks.c **** 					xReturn = pdTRUE;
 1588              		.loc 1 1766 0
 1589 002c 0123     		movs	r3, #1
 1590 002e FB60     		str	r3, [r7, #12]
 1591              	.L109:
1767:..\..\FreeRTOS_Source/tasks.c **** 				}
1768:..\..\FreeRTOS_Source/tasks.c **** 				else
1769:..\..\FreeRTOS_Source/tasks.c **** 				{
1770:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1771:..\..\FreeRTOS_Source/tasks.c **** 				}
1772:..\..\FreeRTOS_Source/tasks.c **** 			}
1773:..\..\FreeRTOS_Source/tasks.c **** 			else
1774:..\..\FreeRTOS_Source/tasks.c **** 			{
1775:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1776:..\..\FreeRTOS_Source/tasks.c **** 			}
1777:..\..\FreeRTOS_Source/tasks.c **** 		}
1778:..\..\FreeRTOS_Source/tasks.c **** 		else
1779:..\..\FreeRTOS_Source/tasks.c **** 		{
1780:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1781:..\..\FreeRTOS_Source/tasks.c **** 		}
1782:..\..\FreeRTOS_Source/tasks.c **** 
1783:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 1592              		.loc 1 1783 0
 1593 0030 FB68     		ldr	r3, [r7, #12]
1784:..\..\FreeRTOS_Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1594              		.loc 1 1784 0
 1595 0032 1846     		mov	r0, r3
 1596 0034 1437     		adds	r7, r7, #20
 1597              		.cfi_def_cfa_offset 4
 1598 0036 BD46     		mov	sp, r7
 1599              		.cfi_def_cfa_register 13
 1600              		@ sp needed
 1601 0038 80BC     		pop	{r7}
 1602              		.cfi_restore 7
 1603              		.cfi_def_cfa_offset 0
 1604 003a 7047     		bx	lr
 1605              	.L112:
 1606              		.align	2
 1607              	.L111:
 1608 003c 9C000000 		.word	xSuspendedTaskList
 1609 0040 70000000 		.word	xPendingReadyList
 1610              		.cfi_endproc
 1611              	.LFE79:
 1612              		.size	prvTaskIsTaskSuspended, .-prvTaskIsTaskSuspended
 1613              		.section	.text.vTaskResume,"ax",%progbits
 1614              		.align	2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 65
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 65
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 65
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 65
>>>>>>> parent of cb49844... test


 1615              		.global	vTaskResume
 1616              		.thumb
 1617              		.thumb_func
 1618              		.type	vTaskResume, %function
 1619              	vTaskResume:
 1620              	.LFB80:
1785:..\..\FreeRTOS_Source/tasks.c **** 
1786:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1787:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1788:..\..\FreeRTOS_Source/tasks.c **** 
1789:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1790:..\..\FreeRTOS_Source/tasks.c **** 
1791:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1792:..\..\FreeRTOS_Source/tasks.c **** 	{
 1621              		.loc 1 1792 0
 1622              		.cfi_startproc
 1623              		@ args = 0, pretend = 0, frame = 16
 1624              		@ frame_needed = 1, uses_anonymous_args = 0
 1625 0000 80B5     		push	{r7, lr}
 1626              		.cfi_def_cfa_offset 8
 1627              		.cfi_offset 7, -8
 1628              		.cfi_offset 14, -4
 1629 0002 84B0     		sub	sp, sp, #16
 1630              		.cfi_def_cfa_offset 24
 1631 0004 00AF     		add	r7, sp, #0
 1632              		.cfi_def_cfa_register 7
 1633 0006 7860     		str	r0, [r7, #4]
1793:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1634              		.loc 1 1793 0
 1635 0008 7B68     		ldr	r3, [r7, #4]
 1636 000a FB60     		str	r3, [r7, #12]
1794:..\..\FreeRTOS_Source/tasks.c **** 
1795:..\..\FreeRTOS_Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1796:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToResume );
1797:..\..\FreeRTOS_Source/tasks.c **** 
1798:..\..\FreeRTOS_Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1799:..\..\FreeRTOS_Source/tasks.c **** 		currently executing task. */
1800:..\..\FreeRTOS_Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 1637              		.loc 1 1800 0
 1638 000c 204B     		ldr	r3, .L117
 1639 000e 1B68     		ldr	r3, [r3]
 1640 0010 FA68     		ldr	r2, [r7, #12]
 1641 0012 9A42     		cmp	r2, r3
 1642 0014 37D0     		beq	.L116
 1643              		.loc 1 1800 0 is_stmt 0 discriminator 1
 1644 0016 FB68     		ldr	r3, [r7, #12]
 1645 0018 002B     		cmp	r3, #0
 1646 001a 34D0     		beq	.L116
1801:..\..\FreeRTOS_Source/tasks.c **** 		{
1802:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
 1647              		.loc 1 1802 0 is_stmt 1
 1648 001c FFF7FEFF 		bl	vPortEnterCritical
1803:..\..\FreeRTOS_Source/tasks.c **** 			{
1804:..\..\FreeRTOS_Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1649              		.loc 1 1804 0
 1650 0020 F868     		ldr	r0, [r7, #12]
 1651 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 66
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 66
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 66
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 66
>>>>>>> parent of cb49844... test


 1652 0026 0346     		mov	r3, r0
 1653 0028 002B     		cmp	r3, #0
 1654 002a 2AD0     		beq	.L115
1805:..\..\FreeRTOS_Source/tasks.c **** 				{
1806:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1807:..\..\FreeRTOS_Source/tasks.c **** 
1808:..\..\FreeRTOS_Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1809:..\..\FreeRTOS_Source/tasks.c **** 					suspended because this is inside a critical section. */
1810:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 1655              		.loc 1 1810 0
 1656 002c FB68     		ldr	r3, [r7, #12]
 1657 002e 0433     		adds	r3, r3, #4
 1658 0030 1846     		mov	r0, r3
 1659 0032 FFF7FEFF 		bl	uxListRemove
1811:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1660              		.loc 1 1811 0
 1661 0036 FB68     		ldr	r3, [r7, #12]
 1662 0038 DB6A     		ldr	r3, [r3, #44]
 1663 003a 0122     		movs	r2, #1
 1664 003c 9A40     		lsls	r2, r2, r3
 1665 003e 154B     		ldr	r3, .L117+4
 1666 0040 1B68     		ldr	r3, [r3]
 1667 0042 1343     		orrs	r3, r3, r2
 1668 0044 134A     		ldr	r2, .L117+4
 1669 0046 1360     		str	r3, [r2]
 1670 0048 FB68     		ldr	r3, [r7, #12]
 1671 004a DA6A     		ldr	r2, [r3, #44]
 1672 004c 1346     		mov	r3, r2
 1673 004e 9B00     		lsls	r3, r3, #2
 1674 0050 1344     		add	r3, r3, r2
 1675 0052 9B00     		lsls	r3, r3, #2
 1676 0054 104A     		ldr	r2, .L117+8
 1677 0056 1A44     		add	r2, r2, r3
 1678 0058 FB68     		ldr	r3, [r7, #12]
 1679 005a 0433     		adds	r3, r3, #4
 1680 005c 1946     		mov	r1, r3
 1681 005e 1046     		mov	r0, r2
 1682 0060 FFF7FEFF 		bl	vListInsertEnd
1812:..\..\FreeRTOS_Source/tasks.c **** 
1813:..\..\FreeRTOS_Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1814:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1683              		.loc 1 1814 0
 1684 0064 FB68     		ldr	r3, [r7, #12]
 1685 0066 DA6A     		ldr	r2, [r3, #44]
 1686 0068 094B     		ldr	r3, .L117
 1687 006a 1B68     		ldr	r3, [r3]
 1688 006c DB6A     		ldr	r3, [r3, #44]
 1689 006e 9A42     		cmp	r2, r3
 1690 0070 07D3     		bcc	.L115
1815:..\..\FreeRTOS_Source/tasks.c **** 					{
1816:..\..\FreeRTOS_Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1817:..\..\FreeRTOS_Source/tasks.c **** 						but will leave the lists in the correct state for the
1818:..\..\FreeRTOS_Source/tasks.c **** 						next yield. */
1819:..\..\FreeRTOS_Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 1691              		.loc 1 1819 0
 1692 0072 0A4B     		ldr	r3, .L117+12
 1693 0074 4FF08052 		mov	r2, #268435456
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 67
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 67
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 67
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 67
>>>>>>> parent of cb49844... test


 1694 0078 1A60     		str	r2, [r3]
 1695              		.syntax unified
 1696              	@ 1819 "..\..\FreeRTOS_Source\tasks.c" 1
 1697 007a BFF34F8F 		dsb
 1698              	@ 0 "" 2
 1699              	@ 1819 "..\..\FreeRTOS_Source\tasks.c" 1
 1700 007e BFF36F8F 		isb
 1701              	@ 0 "" 2
 1702              		.thumb
 1703              		.syntax unified
 1704              	.L115:
1820:..\..\FreeRTOS_Source/tasks.c **** 					}
1821:..\..\FreeRTOS_Source/tasks.c **** 					else
1822:..\..\FreeRTOS_Source/tasks.c **** 					{
1823:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1824:..\..\FreeRTOS_Source/tasks.c **** 					}
1825:..\..\FreeRTOS_Source/tasks.c **** 				}
1826:..\..\FreeRTOS_Source/tasks.c **** 				else
1827:..\..\FreeRTOS_Source/tasks.c **** 				{
1828:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1829:..\..\FreeRTOS_Source/tasks.c **** 				}
1830:..\..\FreeRTOS_Source/tasks.c **** 			}
1831:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 1705              		.loc 1 1831 0
 1706 0082 FFF7FEFF 		bl	vPortExitCritical
 1707              	.L116:
1832:..\..\FreeRTOS_Source/tasks.c **** 		}
1833:..\..\FreeRTOS_Source/tasks.c **** 		else
1834:..\..\FreeRTOS_Source/tasks.c **** 		{
1835:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1836:..\..\FreeRTOS_Source/tasks.c **** 		}
1837:..\..\FreeRTOS_Source/tasks.c **** 	}
 1708              		.loc 1 1837 0
 1709 0086 00BF     		nop
 1710 0088 1037     		adds	r7, r7, #16
 1711              		.cfi_def_cfa_offset 8
 1712 008a BD46     		mov	sp, r7
 1713              		.cfi_def_cfa_register 13
 1714              		@ sp needed
 1715 008c 80BD     		pop	{r7, pc}
 1716              	.L118:
 1717 008e 00BF     		.align	2
 1718              	.L117:
 1719 0090 00000000 		.word	pxCurrentTCB
 1720 0094 B8000000 		.word	uxTopReadyPriority
 1721 0098 04000000 		.word	pxReadyTasksLists
 1722 009c 04ED00E0 		.word	-536810236
 1723              		.cfi_endproc
 1724              	.LFE80:
 1725              		.size	vTaskResume, .-vTaskResume
 1726              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1727              		.align	2
 1728              		.global	xTaskResumeFromISR
 1729              		.thumb
 1730              		.thumb_func
 1731              		.type	xTaskResumeFromISR, %function
 1732              	xTaskResumeFromISR:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 68
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 68
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 68
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 68
>>>>>>> parent of cb49844... test


 1733              	.LFB81:
1838:..\..\FreeRTOS_Source/tasks.c **** 
1839:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1840:..\..\FreeRTOS_Source/tasks.c **** 
1841:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
1842:..\..\FreeRTOS_Source/tasks.c **** 
1843:..\..\FreeRTOS_Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1844:..\..\FreeRTOS_Source/tasks.c **** 
1845:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1846:..\..\FreeRTOS_Source/tasks.c **** 	{
 1734              		.loc 1 1846 0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 32
 1737              		@ frame_needed = 1, uses_anonymous_args = 0
 1738 0000 80B5     		push	{r7, lr}
 1739              		.cfi_def_cfa_offset 8
 1740              		.cfi_offset 7, -8
 1741              		.cfi_offset 14, -4
 1742 0002 88B0     		sub	sp, sp, #32
 1743              		.cfi_def_cfa_offset 40
 1744 0004 00AF     		add	r7, sp, #0
 1745              		.cfi_def_cfa_register 7
 1746 0006 7860     		str	r0, [r7, #4]
1847:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1747              		.loc 1 1847 0
 1748 0008 0023     		movs	r3, #0
 1749 000a FB61     		str	r3, [r7, #28]
1848:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1750              		.loc 1 1848 0
 1751 000c 7B68     		ldr	r3, [r7, #4]
 1752 000e BB61     		str	r3, [r7, #24]
 1753              	.LBB33:
 1754              	.LBB34:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1755              		.loc 2 211 0
 1756              		.syntax unified
 1757              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1758 0010 EFF31182 			mrs r2, basepri											
 1759 0014 4FF0A003 		mov r3, #160												
 1760 0018 83F31188 		msr basepri, r3											
 1761 001c BFF36F8F 		isb														
 1762 0020 BFF34F8F 		dsb														
 1763              	
 1764              	@ 0 "" 2
 1765              		.thumb
 1766              		.syntax unified
 1767 0024 FA60     		str	r2, [r7, #12]
 1768 0026 BB60     		str	r3, [r7, #8]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1769              		.loc 2 223 0
 1770 0028 FB68     		ldr	r3, [r7, #12]
 1771              	.LBE34:
 1772              	.LBE33:
1849:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1850:..\..\FreeRTOS_Source/tasks.c **** 
1851:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToResume );
1852:..\..\FreeRTOS_Source/tasks.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 69
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 69
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 69
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 69
>>>>>>> parent of cb49844... test


1853:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1854:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1855:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1856:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1857:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1858:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1859:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1860:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1861:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1862:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1863:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1864:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1865:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1866:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1867:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
1868:..\..\FreeRTOS_Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1869:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1870:..\..\FreeRTOS_Source/tasks.c **** 
1871:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1773              		.loc 1 1871 0
 1774 002a 3B61     		str	r3, [r7, #16]
1872:..\..\FreeRTOS_Source/tasks.c **** 		{
1873:..\..\FreeRTOS_Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 1775              		.loc 1 1873 0
 1776 002c B869     		ldr	r0, [r7, #24]
 1777 002e FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1778 0032 0346     		mov	r3, r0
 1779 0034 002B     		cmp	r3, #0
 1780 0036 2FD0     		beq	.L121
1874:..\..\FreeRTOS_Source/tasks.c **** 			{
1875:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1876:..\..\FreeRTOS_Source/tasks.c **** 
1877:..\..\FreeRTOS_Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1878:..\..\FreeRTOS_Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 1781              		.loc 1 1878 0
 1782 0038 1C4B     		ldr	r3, .L126
 1783 003a 1B68     		ldr	r3, [r3]
 1784 003c 002B     		cmp	r3, #0
 1785 003e 25D1     		bne	.L122
1879:..\..\FreeRTOS_Source/tasks.c **** 				{
1880:..\..\FreeRTOS_Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1881:..\..\FreeRTOS_Source/tasks.c **** 					suspended list to the ready list directly. */
1882:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 1786              		.loc 1 1882 0
 1787 0040 BB69     		ldr	r3, [r7, #24]
 1788 0042 DA6A     		ldr	r2, [r3, #44]
 1789 0044 1A4B     		ldr	r3, .L126+4
 1790 0046 1B68     		ldr	r3, [r3]
 1791 0048 DB6A     		ldr	r3, [r3, #44]
 1792 004a 9A42     		cmp	r2, r3
 1793 004c 01D3     		bcc	.L123
1883:..\..\FreeRTOS_Source/tasks.c **** 					{
1884:..\..\FreeRTOS_Source/tasks.c **** 						xYieldRequired = pdTRUE;
 1794              		.loc 1 1884 0
 1795 004e 0123     		movs	r3, #1
 1796 0050 FB61     		str	r3, [r7, #28]
 1797              	.L123:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 70
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 70
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 70
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 70
>>>>>>> parent of cb49844... test


1885:..\..\FreeRTOS_Source/tasks.c **** 					}
1886:..\..\FreeRTOS_Source/tasks.c **** 					else
1887:..\..\FreeRTOS_Source/tasks.c **** 					{
1888:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1889:..\..\FreeRTOS_Source/tasks.c **** 					}
1890:..\..\FreeRTOS_Source/tasks.c **** 
1891:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 1798              		.loc 1 1891 0
 1799 0052 BB69     		ldr	r3, [r7, #24]
 1800 0054 0433     		adds	r3, r3, #4
 1801 0056 1846     		mov	r0, r3
 1802 0058 FFF7FEFF 		bl	uxListRemove
1892:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1803              		.loc 1 1892 0
 1804 005c BB69     		ldr	r3, [r7, #24]
 1805 005e DB6A     		ldr	r3, [r3, #44]
 1806 0060 0122     		movs	r2, #1
 1807 0062 9A40     		lsls	r2, r2, r3
 1808 0064 134B     		ldr	r3, .L126+8
 1809 0066 1B68     		ldr	r3, [r3]
 1810 0068 1343     		orrs	r3, r3, r2
 1811 006a 124A     		ldr	r2, .L126+8
 1812 006c 1360     		str	r3, [r2]
 1813 006e BB69     		ldr	r3, [r7, #24]
 1814 0070 DA6A     		ldr	r2, [r3, #44]
 1815 0072 1346     		mov	r3, r2
 1816 0074 9B00     		lsls	r3, r3, #2
 1817 0076 1344     		add	r3, r3, r2
 1818 0078 9B00     		lsls	r3, r3, #2
 1819 007a 0F4A     		ldr	r2, .L126+12
 1820 007c 1A44     		add	r2, r2, r3
 1821 007e BB69     		ldr	r3, [r7, #24]
 1822 0080 0433     		adds	r3, r3, #4
 1823 0082 1946     		mov	r1, r3
 1824 0084 1046     		mov	r0, r2
 1825 0086 FFF7FEFF 		bl	vListInsertEnd
 1826 008a 05E0     		b	.L121
 1827              	.L122:
1893:..\..\FreeRTOS_Source/tasks.c **** 				}
1894:..\..\FreeRTOS_Source/tasks.c **** 				else
1895:..\..\FreeRTOS_Source/tasks.c **** 				{
1896:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1897:..\..\FreeRTOS_Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1898:..\..\FreeRTOS_Source/tasks.c **** 					unsuspended. */
1899:..\..\FreeRTOS_Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 1828              		.loc 1 1899 0
 1829 008c BB69     		ldr	r3, [r7, #24]
 1830 008e 1833     		adds	r3, r3, #24
 1831 0090 1946     		mov	r1, r3
 1832 0092 0A48     		ldr	r0, .L126+16
 1833 0094 FFF7FEFF 		bl	vListInsertEnd
 1834              	.L121:
 1835 0098 3B69     		ldr	r3, [r7, #16]
 1836 009a 7B61     		str	r3, [r7, #20]
 1837              	.LBB35:
 1838              	.LBB36:
 1839              		.loc 2 229 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 71
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 71
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 71
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 71
>>>>>>> parent of cb49844... test


 1840 009c 7B69     		ldr	r3, [r7, #20]
 1841              		.syntax unified
 1842              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1843 009e 83F31188 			msr basepri, r3	
 1844              	@ 0 "" 2
 1845              		.thumb
 1846              		.syntax unified
 1847              	.LBE36:
 1848              	.LBE35:
1900:..\..\FreeRTOS_Source/tasks.c **** 				}
1901:..\..\FreeRTOS_Source/tasks.c **** 			}
1902:..\..\FreeRTOS_Source/tasks.c **** 			else
1903:..\..\FreeRTOS_Source/tasks.c **** 			{
1904:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1905:..\..\FreeRTOS_Source/tasks.c **** 			}
1906:..\..\FreeRTOS_Source/tasks.c **** 		}
1907:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1908:..\..\FreeRTOS_Source/tasks.c **** 
1909:..\..\FreeRTOS_Source/tasks.c **** 		return xYieldRequired;
 1849              		.loc 1 1909 0
 1850 00a2 FB69     		ldr	r3, [r7, #28]
1910:..\..\FreeRTOS_Source/tasks.c **** 	}
 1851              		.loc 1 1910 0
 1852 00a4 1846     		mov	r0, r3
 1853 00a6 2037     		adds	r7, r7, #32
 1854              		.cfi_def_cfa_offset 8
 1855 00a8 BD46     		mov	sp, r7
 1856              		.cfi_def_cfa_register 13
 1857              		@ sp needed
 1858 00aa 80BD     		pop	{r7, pc}
 1859              	.L127:
 1860              		.align	2
 1861              	.L126:
 1862 00ac D8000000 		.word	uxSchedulerSuspended
 1863 00b0 00000000 		.word	pxCurrentTCB
 1864 00b4 B8000000 		.word	uxTopReadyPriority
 1865 00b8 04000000 		.word	pxReadyTasksLists
 1866 00bc 70000000 		.word	xPendingReadyList
 1867              		.cfi_endproc
 1868              	.LFE81:
 1869              		.size	xTaskResumeFromISR, .-xTaskResumeFromISR
 1870              		.section	.rodata
 1871              		.align	2
 1872              	.LC0:
 1873 0000 49444C45 		.ascii	"IDLE\000"
 1873      00
 1874              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1875              		.align	2
 1876              		.global	vTaskStartScheduler
 1877              		.thumb
 1878              		.thumb_func
 1879              		.type	vTaskStartScheduler, %function
 1880              	vTaskStartScheduler:
 1881              	.LFB82:
1911:..\..\FreeRTOS_Source/tasks.c **** 
1912:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1913:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 72
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 72
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 72
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 72
>>>>>>> parent of cb49844... test


1914:..\..\FreeRTOS_Source/tasks.c **** 
1915:..\..\FreeRTOS_Source/tasks.c **** void vTaskStartScheduler( void )
1916:..\..\FreeRTOS_Source/tasks.c **** {
 1882              		.loc 1 1916 0
 1883              		.cfi_startproc
 1884              		@ args = 0, pretend = 0, frame = 8
 1885              		@ frame_needed = 1, uses_anonymous_args = 0
 1886 0000 80B5     		push	{r7, lr}
 1887              		.cfi_def_cfa_offset 8
 1888              		.cfi_offset 7, -8
 1889              		.cfi_offset 14, -4
 1890 0002 84B0     		sub	sp, sp, #16
 1891              		.cfi_def_cfa_offset 24
 1892 0004 02AF     		add	r7, sp, #8
 1893              		.cfi_def_cfa 7, 16
1917:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xReturn;
1918:..\..\FreeRTOS_Source/tasks.c **** 
1919:..\..\FreeRTOS_Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1920:..\..\FreeRTOS_Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1921:..\..\FreeRTOS_Source/tasks.c **** 	{
1922:..\..\FreeRTOS_Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1923:..\..\FreeRTOS_Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1924:..\..\FreeRTOS_Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1925:..\..\FreeRTOS_Source/tasks.c **** 
1926:..\..\FreeRTOS_Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1927:..\..\FreeRTOS_Source/tasks.c **** 		address of the RAM then create the idle task. */
1928:..\..\FreeRTOS_Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1929:..\..\FreeRTOS_Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1930:..\..\FreeRTOS_Source/tasks.c **** 												configIDLE_TASK_NAME,
1931:..\..\FreeRTOS_Source/tasks.c **** 												ulIdleTaskStackSize,
1932:..\..\FreeRTOS_Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1933:..\..\FreeRTOS_Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1934:..\..\FreeRTOS_Source/tasks.c **** 												pxIdleTaskStackBuffer,
1935:..\..\FreeRTOS_Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1936:..\..\FreeRTOS_Source/tasks.c **** 
1937:..\..\FreeRTOS_Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1938:..\..\FreeRTOS_Source/tasks.c **** 		{
1939:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdPASS;
1940:..\..\FreeRTOS_Source/tasks.c **** 		}
1941:..\..\FreeRTOS_Source/tasks.c **** 		else
1942:..\..\FreeRTOS_Source/tasks.c **** 		{
1943:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdFAIL;
1944:..\..\FreeRTOS_Source/tasks.c **** 		}
1945:..\..\FreeRTOS_Source/tasks.c **** 	}
1946:..\..\FreeRTOS_Source/tasks.c **** 	#else
1947:..\..\FreeRTOS_Source/tasks.c **** 	{
1948:..\..\FreeRTOS_Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1949:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
 1894              		.loc 1 1949 0
 1895 0006 134B     		ldr	r3, .L131
 1896 0008 0193     		str	r3, [sp, #4]
 1897 000a 0023     		movs	r3, #0
 1898 000c 0093     		str	r3, [sp]
 1899 000e 0023     		movs	r3, #0
 1900 0010 6422     		movs	r2, #100
 1901 0012 1149     		ldr	r1, .L131+4
 1902 0014 1148     		ldr	r0, .L131+8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 73
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 73
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 73
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 73
>>>>>>> parent of cb49844... test


 1903 0016 FFF7FEFF 		bl	xTaskCreate
 1904 001a 7860     		str	r0, [r7, #4]
1950:..\..\FreeRTOS_Source/tasks.c **** 								configIDLE_TASK_NAME,
1951:..\..\FreeRTOS_Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1952:..\..\FreeRTOS_Source/tasks.c **** 								( void * ) NULL,
1953:..\..\FreeRTOS_Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
1954:..\..\FreeRTOS_Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1955:..\..\FreeRTOS_Source/tasks.c **** 	}
1956:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1957:..\..\FreeRTOS_Source/tasks.c **** 
1958:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1959:..\..\FreeRTOS_Source/tasks.c **** 	{
1960:..\..\FreeRTOS_Source/tasks.c **** 		if( xReturn == pdPASS )
1961:..\..\FreeRTOS_Source/tasks.c **** 		{
1962:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1963:..\..\FreeRTOS_Source/tasks.c **** 		}
1964:..\..\FreeRTOS_Source/tasks.c **** 		else
1965:..\..\FreeRTOS_Source/tasks.c **** 		{
1966:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1967:..\..\FreeRTOS_Source/tasks.c **** 		}
1968:..\..\FreeRTOS_Source/tasks.c **** 	}
1969:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1970:..\..\FreeRTOS_Source/tasks.c **** 
1971:..\..\FreeRTOS_Source/tasks.c **** 	if( xReturn == pdPASS )
 1905              		.loc 1 1971 0
 1906 001c 7B68     		ldr	r3, [r7, #4]
 1907 001e 012B     		cmp	r3, #1
 1908 0020 14D1     		bne	.L130
 1909              	.LBB37:
 1910              	.LBB38:
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1911              		.loc 2 195 0
 1912              		.syntax unified
 1913              	@ 195 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1914 0022 4FF0A003 			mov r3, #160												
 1915 0026 83F31188 		msr basepri, r3											
 1916 002a BFF36F8F 		isb														
 1917 002e BFF34F8F 		dsb														
 1918              	
 1919              	@ 0 "" 2
 1920              		.thumb
 1921              		.syntax unified
 1922 0032 3B60     		str	r3, [r7]
 1923              	.LBE38:
 1924              	.LBE37:
1972:..\..\FreeRTOS_Source/tasks.c **** 	{
1973:..\..\FreeRTOS_Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1974:..\..\FreeRTOS_Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1975:..\..\FreeRTOS_Source/tasks.c **** 		the only macro called by the function. */
1976:..\..\FreeRTOS_Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1977:..\..\FreeRTOS_Source/tasks.c **** 		{
1978:..\..\FreeRTOS_Source/tasks.c **** 			freertos_tasks_c_additions_init();
1979:..\..\FreeRTOS_Source/tasks.c **** 		}
1980:..\..\FreeRTOS_Source/tasks.c **** 		#endif
1981:..\..\FreeRTOS_Source/tasks.c **** 
1982:..\..\FreeRTOS_Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1983:..\..\FreeRTOS_Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 74
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 74
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 74
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 74
>>>>>>> parent of cb49844... test


1984:..\..\FreeRTOS_Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1985:..\..\FreeRTOS_Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1986:..\..\FreeRTOS_Source/tasks.c **** 		starts to run. */
1987:..\..\FreeRTOS_Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1988:..\..\FreeRTOS_Source/tasks.c **** 
1989:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1990:..\..\FreeRTOS_Source/tasks.c **** 		{
1991:..\..\FreeRTOS_Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1992:..\..\FreeRTOS_Source/tasks.c **** 			structure specific to the task that will run first. */
1993:..\..\FreeRTOS_Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1994:..\..\FreeRTOS_Source/tasks.c **** 		}
1995:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1996:..\..\FreeRTOS_Source/tasks.c **** 
1997:..\..\FreeRTOS_Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 1925              		.loc 1 1997 0
 1926 0034 0A4B     		ldr	r3, .L131+12
 1927 0036 4FF0FF32 		mov	r2, #-1
 1928 003a 1A60     		str	r2, [r3]
1998:..\..\FreeRTOS_Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1929              		.loc 1 1998 0
 1930 003c 094B     		ldr	r3, .L131+16
 1931 003e 0122     		movs	r2, #1
 1932 0040 1A60     		str	r2, [r3]
1999:..\..\FreeRTOS_Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1933              		.loc 1 1999 0
 1934 0042 094B     		ldr	r3, .L131+20
 1935 0044 0022     		movs	r2, #0
 1936 0046 1A60     		str	r2, [r3]
2000:..\..\FreeRTOS_Source/tasks.c **** 
2001:..\..\FreeRTOS_Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2002:..\..\FreeRTOS_Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2003:..\..\FreeRTOS_Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2004:..\..\FreeRTOS_Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2005:..\..\FreeRTOS_Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2006:..\..\FreeRTOS_Source/tasks.c **** 		FreeRTOSConfig.h file. */
2007:..\..\FreeRTOS_Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2008:..\..\FreeRTOS_Source/tasks.c **** 
2009:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2010:..\..\FreeRTOS_Source/tasks.c **** 
2011:..\..\FreeRTOS_Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2012:..\..\FreeRTOS_Source/tasks.c **** 		portable interface. */
2013:..\..\FreeRTOS_Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 1937              		.loc 1 2013 0
 1938 0048 FFF7FEFF 		bl	xPortStartScheduler
 1939              	.L130:
2014:..\..\FreeRTOS_Source/tasks.c **** 		{
2015:..\..\FreeRTOS_Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2016:..\..\FreeRTOS_Source/tasks.c **** 			function will not return. */
2017:..\..\FreeRTOS_Source/tasks.c **** 		}
2018:..\..\FreeRTOS_Source/tasks.c **** 		else
2019:..\..\FreeRTOS_Source/tasks.c **** 		{
2020:..\..\FreeRTOS_Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2021:..\..\FreeRTOS_Source/tasks.c **** 		}
2022:..\..\FreeRTOS_Source/tasks.c **** 	}
2023:..\..\FreeRTOS_Source/tasks.c **** 	else
2024:..\..\FreeRTOS_Source/tasks.c **** 	{
2025:..\..\FreeRTOS_Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 75
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 75
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 75
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 75
>>>>>>> parent of cb49844... test


2026:..\..\FreeRTOS_Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2027:..\..\FreeRTOS_Source/tasks.c **** 		or the timer task. */
2028:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2029:..\..\FreeRTOS_Source/tasks.c **** 	}
2030:..\..\FreeRTOS_Source/tasks.c **** 
2031:..\..\FreeRTOS_Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2032:..\..\FreeRTOS_Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2033:..\..\FreeRTOS_Source/tasks.c **** 	( void ) xIdleTaskHandle;
2034:..\..\FreeRTOS_Source/tasks.c **** }
 1940              		.loc 1 2034 0
 1941 004c 00BF     		nop
 1942 004e 0837     		adds	r7, r7, #8
 1943              		.cfi_def_cfa_offset 8
 1944 0050 BD46     		mov	sp, r7
 1945              		.cfi_def_cfa_register 13
 1946              		@ sp needed
 1947 0052 80BD     		pop	{r7, pc}
 1948              	.L132:
 1949              		.align	2
 1950              	.L131:
 1951 0054 D4000000 		.word	xIdleTaskHandle
 1952 0058 00000000 		.word	.LC0
 1953 005c 00000000 		.word	prvIdleTask
 1954 0060 D0000000 		.word	xNextTaskUnblockTime
 1955 0064 BC000000 		.word	xSchedulerRunning
 1956 0068 B4000000 		.word	xTickCount
 1957              		.cfi_endproc
 1958              	.LFE82:
 1959              		.size	vTaskStartScheduler, .-vTaskStartScheduler
 1960              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1961              		.align	2
 1962              		.global	vTaskEndScheduler
 1963              		.thumb
 1964              		.thumb_func
 1965              		.type	vTaskEndScheduler, %function
 1966              	vTaskEndScheduler:
 1967              	.LFB83:
2035:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2036:..\..\FreeRTOS_Source/tasks.c **** 
2037:..\..\FreeRTOS_Source/tasks.c **** void vTaskEndScheduler( void )
2038:..\..\FreeRTOS_Source/tasks.c **** {
 1968              		.loc 1 2038 0
 1969              		.cfi_startproc
 1970              		@ args = 0, pretend = 0, frame = 8
 1971              		@ frame_needed = 1, uses_anonymous_args = 0
 1972 0000 80B5     		push	{r7, lr}
 1973              		.cfi_def_cfa_offset 8
 1974              		.cfi_offset 7, -8
 1975              		.cfi_offset 14, -4
 1976 0002 82B0     		sub	sp, sp, #8
 1977              		.cfi_def_cfa_offset 16
 1978 0004 00AF     		add	r7, sp, #0
 1979              		.cfi_def_cfa_register 7
 1980              	.LBB39:
 1981              	.LBB40:
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1982              		.loc 2 195 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 76
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 76
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 76
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 76
>>>>>>> parent of cb49844... test


 1983              		.syntax unified
 1984              	@ 195 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1985 0006 4FF0A003 			mov r3, #160												
 1986 000a 83F31188 		msr basepri, r3											
 1987 000e BFF36F8F 		isb														
 1988 0012 BFF34F8F 		dsb														
 1989              	
 1990              	@ 0 "" 2
 1991              		.thumb
 1992              		.syntax unified
 1993 0016 7B60     		str	r3, [r7, #4]
 1994              	.LBE40:
 1995              	.LBE39:
2039:..\..\FreeRTOS_Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2040:..\..\FreeRTOS_Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2041:..\..\FreeRTOS_Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2042:..\..\FreeRTOS_Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2043:..\..\FreeRTOS_Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 1996              		.loc 1 2043 0
 1997 0018 044B     		ldr	r3, .L134
 1998 001a 0022     		movs	r2, #0
 1999 001c 1A60     		str	r2, [r3]
2044:..\..\FreeRTOS_Source/tasks.c **** 	vPortEndScheduler();
 2000              		.loc 1 2044 0
 2001 001e FFF7FEFF 		bl	vPortEndScheduler
2045:..\..\FreeRTOS_Source/tasks.c **** }
 2002              		.loc 1 2045 0
 2003 0022 00BF     		nop
 2004 0024 0837     		adds	r7, r7, #8
 2005              		.cfi_def_cfa_offset 8
 2006 0026 BD46     		mov	sp, r7
 2007              		.cfi_def_cfa_register 13
 2008              		@ sp needed
 2009 0028 80BD     		pop	{r7, pc}
 2010              	.L135:
 2011 002a 00BF     		.align	2
 2012              	.L134:
 2013 002c BC000000 		.word	xSchedulerRunning
 2014              		.cfi_endproc
 2015              	.LFE83:
 2016              		.size	vTaskEndScheduler, .-vTaskEndScheduler
 2017              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2018              		.align	2
 2019              		.global	vTaskSuspendAll
 2020              		.thumb
 2021              		.thumb_func
 2022              		.type	vTaskSuspendAll, %function
 2023              	vTaskSuspendAll:
 2024              	.LFB84:
2046:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2047:..\..\FreeRTOS_Source/tasks.c **** 
2048:..\..\FreeRTOS_Source/tasks.c **** void vTaskSuspendAll( void )
2049:..\..\FreeRTOS_Source/tasks.c **** {
 2025              		.loc 1 2049 0
 2026              		.cfi_startproc
 2027              		@ args = 0, pretend = 0, frame = 0
 2028              		@ frame_needed = 1, uses_anonymous_args = 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 77
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 77
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 77
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 77
>>>>>>> parent of cb49844... test


 2029              		@ link register save eliminated.
 2030 0000 80B4     		push	{r7}
 2031              		.cfi_def_cfa_offset 4
 2032              		.cfi_offset 7, -4
 2033 0002 00AF     		add	r7, sp, #0
 2034              		.cfi_def_cfa_register 7
2050:..\..\FreeRTOS_Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2051:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2052:..\..\FreeRTOS_Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2053:..\..\FreeRTOS_Source/tasks.c **** 	http://goo.gl/wu4acr */
2054:..\..\FreeRTOS_Source/tasks.c **** 	++uxSchedulerSuspended;
 2035              		.loc 1 2054 0
 2036 0004 044B     		ldr	r3, .L137
 2037 0006 1B68     		ldr	r3, [r3]
 2038 0008 0133     		adds	r3, r3, #1
 2039 000a 034A     		ldr	r2, .L137
 2040 000c 1360     		str	r3, [r2]
2055:..\..\FreeRTOS_Source/tasks.c **** }
 2041              		.loc 1 2055 0
 2042 000e 00BF     		nop
 2043 0010 BD46     		mov	sp, r7
 2044              		.cfi_def_cfa_register 13
 2045              		@ sp needed
 2046 0012 80BC     		pop	{r7}
 2047              		.cfi_restore 7
 2048              		.cfi_def_cfa_offset 0
 2049 0014 7047     		bx	lr
 2050              	.L138:
 2051 0016 00BF     		.align	2
 2052              	.L137:
 2053 0018 D8000000 		.word	uxSchedulerSuspended
 2054              		.cfi_endproc
 2055              	.LFE84:
 2056              		.size	vTaskSuspendAll, .-vTaskSuspendAll
 2057              		.section	.text.xTaskResumeAll,"ax",%progbits
 2058              		.align	2
 2059              		.global	xTaskResumeAll
 2060              		.thumb
 2061              		.thumb_func
 2062              		.type	xTaskResumeAll, %function
 2063              	xTaskResumeAll:
 2064              	.LFB85:
2056:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2057:..\..\FreeRTOS_Source/tasks.c **** 
2058:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2059:..\..\FreeRTOS_Source/tasks.c **** 
2060:..\..\FreeRTOS_Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2061:..\..\FreeRTOS_Source/tasks.c **** 	{
2062:..\..\FreeRTOS_Source/tasks.c **** 	TickType_t xReturn;
2063:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2064:..\..\FreeRTOS_Source/tasks.c **** 
2065:..\..\FreeRTOS_Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2066:..\..\FreeRTOS_Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2067:..\..\FreeRTOS_Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2068:..\..\FreeRTOS_Source/tasks.c **** 		running. */
2069:..\..\FreeRTOS_Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2070:..\..\FreeRTOS_Source/tasks.c **** 		{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 78
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 78
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 78
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 78
>>>>>>> parent of cb49844... test


2071:..\..\FreeRTOS_Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2072:..\..\FreeRTOS_Source/tasks.c **** 			{
2073:..\..\FreeRTOS_Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2074:..\..\FreeRTOS_Source/tasks.c **** 			}
2075:..\..\FreeRTOS_Source/tasks.c **** 		}
2076:..\..\FreeRTOS_Source/tasks.c **** 		#else
2077:..\..\FreeRTOS_Source/tasks.c **** 		{
2078:..\..\FreeRTOS_Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2079:..\..\FreeRTOS_Source/tasks.c **** 
2080:..\..\FreeRTOS_Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2081:..\..\FreeRTOS_Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2082:..\..\FreeRTOS_Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2083:..\..\FreeRTOS_Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2084:..\..\FreeRTOS_Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2085:..\..\FreeRTOS_Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2086:..\..\FreeRTOS_Source/tasks.c **** 			{
2087:..\..\FreeRTOS_Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2088:..\..\FreeRTOS_Source/tasks.c **** 			}
2089:..\..\FreeRTOS_Source/tasks.c **** 		}
2090:..\..\FreeRTOS_Source/tasks.c **** 		#endif
2091:..\..\FreeRTOS_Source/tasks.c **** 
2092:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2093:..\..\FreeRTOS_Source/tasks.c **** 		{
2094:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = 0;
2095:..\..\FreeRTOS_Source/tasks.c **** 		}
2096:..\..\FreeRTOS_Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2097:..\..\FreeRTOS_Source/tasks.c **** 		{
2098:..\..\FreeRTOS_Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2099:..\..\FreeRTOS_Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2100:..\..\FreeRTOS_Source/tasks.c **** 			processed. */
2101:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = 0;
2102:..\..\FreeRTOS_Source/tasks.c **** 		}
2103:..\..\FreeRTOS_Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2104:..\..\FreeRTOS_Source/tasks.c **** 		{
2105:..\..\FreeRTOS_Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2106:..\..\FreeRTOS_Source/tasks.c **** 			idle priority.  This path can only be reached if
2107:..\..\FreeRTOS_Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2108:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = 0;
2109:..\..\FreeRTOS_Source/tasks.c **** 		}
2110:..\..\FreeRTOS_Source/tasks.c **** 		else
2111:..\..\FreeRTOS_Source/tasks.c **** 		{
2112:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2113:..\..\FreeRTOS_Source/tasks.c **** 		}
2114:..\..\FreeRTOS_Source/tasks.c **** 
2115:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2116:..\..\FreeRTOS_Source/tasks.c **** 	}
2117:..\..\FreeRTOS_Source/tasks.c **** 
2118:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2119:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2120:..\..\FreeRTOS_Source/tasks.c **** 
2121:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2122:..\..\FreeRTOS_Source/tasks.c **** {
 2065              		.loc 1 2122 0
 2066              		.cfi_startproc
 2067              		@ args = 0, pretend = 0, frame = 16
 2068              		@ frame_needed = 1, uses_anonymous_args = 0
 2069 0000 80B5     		push	{r7, lr}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 79
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 79
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 79
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 79
>>>>>>> parent of cb49844... test


 2070              		.cfi_def_cfa_offset 8
 2071              		.cfi_offset 7, -8
 2072              		.cfi_offset 14, -4
 2073 0002 84B0     		sub	sp, sp, #16
 2074              		.cfi_def_cfa_offset 24
 2075 0004 00AF     		add	r7, sp, #0
 2076              		.cfi_def_cfa_register 7
2123:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxTCB = NULL;
 2077              		.loc 1 2123 0
 2078 0006 0023     		movs	r3, #0
 2079 0008 FB60     		str	r3, [r7, #12]
2124:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2080              		.loc 1 2124 0
 2081 000a 0023     		movs	r3, #0
 2082 000c BB60     		str	r3, [r7, #8]
2125:..\..\FreeRTOS_Source/tasks.c **** 
2126:..\..\FreeRTOS_Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2127:..\..\FreeRTOS_Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2128:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2129:..\..\FreeRTOS_Source/tasks.c **** 
2130:..\..\FreeRTOS_Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2131:..\..\FreeRTOS_Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2132:..\..\FreeRTOS_Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2133:..\..\FreeRTOS_Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2134:..\..\FreeRTOS_Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2135:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 2083              		.loc 1 2135 0
 2084 000e FFF7FEFF 		bl	vPortEnterCritical
2136:..\..\FreeRTOS_Source/tasks.c **** 	{
2137:..\..\FreeRTOS_Source/tasks.c **** 		--uxSchedulerSuspended;
 2085              		.loc 1 2137 0
 2086 0012 394B     		ldr	r3, .L148
 2087 0014 1B68     		ldr	r3, [r3]
 2088 0016 013B     		subs	r3, r3, #1
 2089 0018 374A     		ldr	r2, .L148
 2090 001a 1360     		str	r3, [r2]
2138:..\..\FreeRTOS_Source/tasks.c **** 
2139:..\..\FreeRTOS_Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2091              		.loc 1 2139 0
 2092 001c 364B     		ldr	r3, .L148
 2093 001e 1B68     		ldr	r3, [r3]
 2094 0020 002B     		cmp	r3, #0
 2095 0022 61D1     		bne	.L140
2140:..\..\FreeRTOS_Source/tasks.c **** 		{
2141:..\..\FreeRTOS_Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2096              		.loc 1 2141 0
 2097 0024 354B     		ldr	r3, .L148+4
 2098 0026 1B68     		ldr	r3, [r3]
 2099 0028 002B     		cmp	r3, #0
 2100 002a 5DD0     		beq	.L140
2142:..\..\FreeRTOS_Source/tasks.c **** 			{
2143:..\..\FreeRTOS_Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2144:..\..\FreeRTOS_Source/tasks.c **** 				appropriate ready list. */
2145:..\..\FreeRTOS_Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2101              		.loc 1 2145 0
 2102 002c 2EE0     		b	.L141
 2103              	.L142:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 80
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 80
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 80
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 80
>>>>>>> parent of cb49844... test


2146:..\..\FreeRTOS_Source/tasks.c **** 				{
2147:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2104              		.loc 1 2147 0
 2105 002e 344B     		ldr	r3, .L148+8
 2106 0030 DB68     		ldr	r3, [r3, #12]
 2107 0032 DB68     		ldr	r3, [r3, #12]
 2108 0034 FB60     		str	r3, [r7, #12]
2148:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2109              		.loc 1 2148 0
 2110 0036 FB68     		ldr	r3, [r7, #12]
 2111 0038 1833     		adds	r3, r3, #24
 2112 003a 1846     		mov	r0, r3
 2113 003c FFF7FEFF 		bl	uxListRemove
2149:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2114              		.loc 1 2149 0
 2115 0040 FB68     		ldr	r3, [r7, #12]
 2116 0042 0433     		adds	r3, r3, #4
 2117 0044 1846     		mov	r0, r3
 2118 0046 FFF7FEFF 		bl	uxListRemove
2150:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2119              		.loc 1 2150 0
 2120 004a FB68     		ldr	r3, [r7, #12]
 2121 004c DB6A     		ldr	r3, [r3, #44]
 2122 004e 0122     		movs	r2, #1
 2123 0050 9A40     		lsls	r2, r2, r3
 2124 0052 2C4B     		ldr	r3, .L148+12
 2125 0054 1B68     		ldr	r3, [r3]
 2126 0056 1343     		orrs	r3, r3, r2
 2127 0058 2A4A     		ldr	r2, .L148+12
 2128 005a 1360     		str	r3, [r2]
 2129 005c FB68     		ldr	r3, [r7, #12]
 2130 005e DA6A     		ldr	r2, [r3, #44]
 2131 0060 1346     		mov	r3, r2
 2132 0062 9B00     		lsls	r3, r3, #2
 2133 0064 1344     		add	r3, r3, r2
 2134 0066 9B00     		lsls	r3, r3, #2
 2135 0068 274A     		ldr	r2, .L148+16
 2136 006a 1A44     		add	r2, r2, r3
 2137 006c FB68     		ldr	r3, [r7, #12]
 2138 006e 0433     		adds	r3, r3, #4
 2139 0070 1946     		mov	r1, r3
 2140 0072 1046     		mov	r0, r2
 2141 0074 FFF7FEFF 		bl	vListInsertEnd
2151:..\..\FreeRTOS_Source/tasks.c **** 
2152:..\..\FreeRTOS_Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2153:..\..\FreeRTOS_Source/tasks.c **** 					task then a yield must be performed. */
2154:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2142              		.loc 1 2154 0
 2143 0078 FB68     		ldr	r3, [r7, #12]
 2144 007a DA6A     		ldr	r2, [r3, #44]
 2145 007c 234B     		ldr	r3, .L148+20
 2146 007e 1B68     		ldr	r3, [r3]
 2147 0080 DB6A     		ldr	r3, [r3, #44]
 2148 0082 9A42     		cmp	r2, r3
 2149 0084 02D3     		bcc	.L141
2155:..\..\FreeRTOS_Source/tasks.c **** 					{
2156:..\..\FreeRTOS_Source/tasks.c **** 						xYieldPending = pdTRUE;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 81
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 81
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 81
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 81
>>>>>>> parent of cb49844... test


 2150              		.loc 1 2156 0
 2151 0086 224B     		ldr	r3, .L148+24
 2152 0088 0122     		movs	r2, #1
 2153 008a 1A60     		str	r2, [r3]
 2154              	.L141:
2145:..\..\FreeRTOS_Source/tasks.c **** 				{
 2155              		.loc 1 2145 0
 2156 008c 1C4B     		ldr	r3, .L148+8
 2157 008e 1B68     		ldr	r3, [r3]
 2158 0090 002B     		cmp	r3, #0
 2159 0092 CCD1     		bne	.L142
2157:..\..\FreeRTOS_Source/tasks.c **** 					}
2158:..\..\FreeRTOS_Source/tasks.c **** 					else
2159:..\..\FreeRTOS_Source/tasks.c **** 					{
2160:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2161:..\..\FreeRTOS_Source/tasks.c **** 					}
2162:..\..\FreeRTOS_Source/tasks.c **** 				}
2163:..\..\FreeRTOS_Source/tasks.c **** 
2164:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB != NULL )
 2160              		.loc 1 2164 0
 2161 0094 FB68     		ldr	r3, [r7, #12]
 2162 0096 002B     		cmp	r3, #0
 2163 0098 01D0     		beq	.L143
2165:..\..\FreeRTOS_Source/tasks.c **** 				{
2166:..\..\FreeRTOS_Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2167:..\..\FreeRTOS_Source/tasks.c **** 					which may have prevented the next unblock time from being
2168:..\..\FreeRTOS_Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2169:..\..\FreeRTOS_Source/tasks.c **** 					important for low power tickless implementations, where
2170:..\..\FreeRTOS_Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2171:..\..\FreeRTOS_Source/tasks.c **** 					state. */
2172:..\..\FreeRTOS_Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2164              		.loc 1 2172 0
 2165 009a FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2166              	.L143:
 2167              	.LBB41:
2173:..\..\FreeRTOS_Source/tasks.c **** 				}
2174:..\..\FreeRTOS_Source/tasks.c **** 
2175:..\..\FreeRTOS_Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2176:..\..\FreeRTOS_Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2177:..\..\FreeRTOS_Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2178:..\..\FreeRTOS_Source/tasks.c **** 				time. */
2179:..\..\FreeRTOS_Source/tasks.c **** 				{
2180:..\..\FreeRTOS_Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2168              		.loc 1 2180 0
 2169 009e 1D4B     		ldr	r3, .L148+28
 2170 00a0 1B68     		ldr	r3, [r3]
 2171 00a2 7B60     		str	r3, [r7, #4]
2181:..\..\FreeRTOS_Source/tasks.c **** 
2182:..\..\FreeRTOS_Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2172              		.loc 1 2182 0
 2173 00a4 7B68     		ldr	r3, [r7, #4]
 2174 00a6 002B     		cmp	r3, #0
 2175 00a8 10D0     		beq	.L144
 2176              	.L146:
2183:..\..\FreeRTOS_Source/tasks.c **** 					{
2184:..\..\FreeRTOS_Source/tasks.c **** 						do
2185:..\..\FreeRTOS_Source/tasks.c **** 						{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 82
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 82
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 82
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 82
>>>>>>> parent of cb49844... test


2186:..\..\FreeRTOS_Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2177              		.loc 1 2186 0
 2178 00aa FFF7FEFF 		bl	xTaskIncrementTick
 2179 00ae 0346     		mov	r3, r0
 2180 00b0 002B     		cmp	r3, #0
 2181 00b2 02D0     		beq	.L145
2187:..\..\FreeRTOS_Source/tasks.c **** 							{
2188:..\..\FreeRTOS_Source/tasks.c **** 								xYieldPending = pdTRUE;
 2182              		.loc 1 2188 0
 2183 00b4 164B     		ldr	r3, .L148+24
 2184 00b6 0122     		movs	r2, #1
 2185 00b8 1A60     		str	r2, [r3]
 2186              	.L145:
2189:..\..\FreeRTOS_Source/tasks.c **** 							}
2190:..\..\FreeRTOS_Source/tasks.c **** 							else
2191:..\..\FreeRTOS_Source/tasks.c **** 							{
2192:..\..\FreeRTOS_Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2193:..\..\FreeRTOS_Source/tasks.c **** 							}
2194:..\..\FreeRTOS_Source/tasks.c **** 							--uxPendedCounts;
 2187              		.loc 1 2194 0
 2188 00ba 7B68     		ldr	r3, [r7, #4]
 2189 00bc 013B     		subs	r3, r3, #1
 2190 00be 7B60     		str	r3, [r7, #4]
2195:..\..\FreeRTOS_Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2191              		.loc 1 2195 0
 2192 00c0 7B68     		ldr	r3, [r7, #4]
 2193 00c2 002B     		cmp	r3, #0
 2194 00c4 F1D1     		bne	.L146
2196:..\..\FreeRTOS_Source/tasks.c **** 
2197:..\..\FreeRTOS_Source/tasks.c **** 						uxPendedTicks = 0;
 2195              		.loc 1 2197 0
 2196 00c6 134B     		ldr	r3, .L148+28
 2197 00c8 0022     		movs	r2, #0
 2198 00ca 1A60     		str	r2, [r3]
 2199              	.L144:
 2200              	.LBE41:
2198:..\..\FreeRTOS_Source/tasks.c **** 					}
2199:..\..\FreeRTOS_Source/tasks.c **** 					else
2200:..\..\FreeRTOS_Source/tasks.c **** 					{
2201:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2202:..\..\FreeRTOS_Source/tasks.c **** 					}
2203:..\..\FreeRTOS_Source/tasks.c **** 				}
2204:..\..\FreeRTOS_Source/tasks.c **** 
2205:..\..\FreeRTOS_Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2201              		.loc 1 2205 0
 2202 00cc 104B     		ldr	r3, .L148+24
 2203 00ce 1B68     		ldr	r3, [r3]
 2204 00d0 002B     		cmp	r3, #0
 2205 00d2 09D0     		beq	.L140
2206:..\..\FreeRTOS_Source/tasks.c **** 				{
2207:..\..\FreeRTOS_Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2208:..\..\FreeRTOS_Source/tasks.c **** 					{
2209:..\..\FreeRTOS_Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2206              		.loc 1 2209 0
 2207 00d4 0123     		movs	r3, #1
 2208 00d6 BB60     		str	r3, [r7, #8]
2210:..\..\FreeRTOS_Source/tasks.c **** 					}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 83
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 83
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 83
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 83
>>>>>>> parent of cb49844... test


2211:..\..\FreeRTOS_Source/tasks.c **** 					#endif
2212:..\..\FreeRTOS_Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2209              		.loc 1 2212 0
 2210 00d8 0F4B     		ldr	r3, .L148+32
 2211 00da 4FF08052 		mov	r2, #268435456
 2212 00de 1A60     		str	r2, [r3]
 2213              		.syntax unified
 2214              	@ 2212 "..\..\FreeRTOS_Source\tasks.c" 1
 2215 00e0 BFF34F8F 		dsb
 2216              	@ 0 "" 2
 2217              	@ 2212 "..\..\FreeRTOS_Source\tasks.c" 1
 2218 00e4 BFF36F8F 		isb
 2219              	@ 0 "" 2
 2220              		.thumb
 2221              		.syntax unified
 2222              	.L140:
2213:..\..\FreeRTOS_Source/tasks.c **** 				}
2214:..\..\FreeRTOS_Source/tasks.c **** 				else
2215:..\..\FreeRTOS_Source/tasks.c **** 				{
2216:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2217:..\..\FreeRTOS_Source/tasks.c **** 				}
2218:..\..\FreeRTOS_Source/tasks.c **** 			}
2219:..\..\FreeRTOS_Source/tasks.c **** 		}
2220:..\..\FreeRTOS_Source/tasks.c **** 		else
2221:..\..\FreeRTOS_Source/tasks.c **** 		{
2222:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2223:..\..\FreeRTOS_Source/tasks.c **** 		}
2224:..\..\FreeRTOS_Source/tasks.c **** 	}
2225:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
 2223              		.loc 1 2225 0
 2224 00e8 FFF7FEFF 		bl	vPortExitCritical
2226:..\..\FreeRTOS_Source/tasks.c **** 
2227:..\..\FreeRTOS_Source/tasks.c **** 	return xAlreadyYielded;
 2225              		.loc 1 2227 0
 2226 00ec BB68     		ldr	r3, [r7, #8]
2228:..\..\FreeRTOS_Source/tasks.c **** }
 2227              		.loc 1 2228 0
 2228 00ee 1846     		mov	r0, r3
 2229 00f0 1037     		adds	r7, r7, #16
 2230              		.cfi_def_cfa_offset 8
 2231 00f2 BD46     		mov	sp, r7
 2232              		.cfi_def_cfa_register 13
 2233              		@ sp needed
 2234 00f4 80BD     		pop	{r7, pc}
 2235              	.L149:
 2236 00f6 00BF     		.align	2
 2237              	.L148:
 2238 00f8 D8000000 		.word	uxSchedulerSuspended
 2239 00fc B0000000 		.word	uxCurrentNumberOfTasks
 2240 0100 70000000 		.word	xPendingReadyList
 2241 0104 B8000000 		.word	uxTopReadyPriority
 2242 0108 04000000 		.word	pxReadyTasksLists
 2243 010c 00000000 		.word	pxCurrentTCB
 2244 0110 C4000000 		.word	xYieldPending
 2245 0114 C0000000 		.word	uxPendedTicks
 2246 0118 04ED00E0 		.word	-536810236
 2247              		.cfi_endproc
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 84
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 84
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 84
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 84
>>>>>>> parent of cb49844... test


 2248              	.LFE85:
 2249              		.size	xTaskResumeAll, .-xTaskResumeAll
 2250              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2251              		.align	2
 2252              		.global	xTaskGetTickCount
 2253              		.thumb
 2254              		.thumb_func
 2255              		.type	xTaskGetTickCount, %function
 2256              	xTaskGetTickCount:
 2257              	.LFB86:
2229:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2230:..\..\FreeRTOS_Source/tasks.c **** 
2231:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2232:..\..\FreeRTOS_Source/tasks.c **** {
 2258              		.loc 1 2232 0
 2259              		.cfi_startproc
 2260              		@ args = 0, pretend = 0, frame = 8
 2261              		@ frame_needed = 1, uses_anonymous_args = 0
 2262              		@ link register save eliminated.
 2263 0000 80B4     		push	{r7}
 2264              		.cfi_def_cfa_offset 4
 2265              		.cfi_offset 7, -4
 2266 0002 83B0     		sub	sp, sp, #12
 2267              		.cfi_def_cfa_offset 16
 2268 0004 00AF     		add	r7, sp, #0
 2269              		.cfi_def_cfa_register 7
2233:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTicks;
2234:..\..\FreeRTOS_Source/tasks.c **** 
2235:..\..\FreeRTOS_Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2236:..\..\FreeRTOS_Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2237:..\..\FreeRTOS_Source/tasks.c **** 	{
2238:..\..\FreeRTOS_Source/tasks.c **** 		xTicks = xTickCount;
 2270              		.loc 1 2238 0
 2271 0006 044B     		ldr	r3, .L152
 2272 0008 1B68     		ldr	r3, [r3]
 2273 000a 7B60     		str	r3, [r7, #4]
2239:..\..\FreeRTOS_Source/tasks.c **** 	}
2240:..\..\FreeRTOS_Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2241:..\..\FreeRTOS_Source/tasks.c **** 
2242:..\..\FreeRTOS_Source/tasks.c **** 	return xTicks;
 2274              		.loc 1 2242 0
 2275 000c 7B68     		ldr	r3, [r7, #4]
2243:..\..\FreeRTOS_Source/tasks.c **** }
 2276              		.loc 1 2243 0
 2277 000e 1846     		mov	r0, r3
 2278 0010 0C37     		adds	r7, r7, #12
 2279              		.cfi_def_cfa_offset 4
 2280 0012 BD46     		mov	sp, r7
 2281              		.cfi_def_cfa_register 13
 2282              		@ sp needed
 2283 0014 80BC     		pop	{r7}
 2284              		.cfi_restore 7
 2285              		.cfi_def_cfa_offset 0
 2286 0016 7047     		bx	lr
 2287              	.L153:
 2288              		.align	2
 2289              	.L152:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 85
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 85
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 85
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 85
>>>>>>> parent of cb49844... test


 2290 0018 B4000000 		.word	xTickCount
 2291              		.cfi_endproc
 2292              	.LFE86:
 2293              		.size	xTaskGetTickCount, .-xTaskGetTickCount
 2294              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2295              		.align	2
 2296              		.global	xTaskGetTickCountFromISR
 2297              		.thumb
 2298              		.thumb_func
 2299              		.type	xTaskGetTickCountFromISR, %function
 2300              	xTaskGetTickCountFromISR:
 2301              	.LFB87:
2244:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2245:..\..\FreeRTOS_Source/tasks.c **** 
2246:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2247:..\..\FreeRTOS_Source/tasks.c **** {
 2302              		.loc 1 2247 0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 8
 2305              		@ frame_needed = 1, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
 2307 0000 80B4     		push	{r7}
 2308              		.cfi_def_cfa_offset 4
 2309              		.cfi_offset 7, -4
 2310 0002 83B0     		sub	sp, sp, #12
 2311              		.cfi_def_cfa_offset 16
 2312 0004 00AF     		add	r7, sp, #0
 2313              		.cfi_def_cfa_register 7
2248:..\..\FreeRTOS_Source/tasks.c **** TickType_t xReturn;
2249:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2250:..\..\FreeRTOS_Source/tasks.c **** 
2251:..\..\FreeRTOS_Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2252:..\..\FreeRTOS_Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2253:..\..\FreeRTOS_Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2254:..\..\FreeRTOS_Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2255:..\..\FreeRTOS_Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2256:..\..\FreeRTOS_Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2257:..\..\FreeRTOS_Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2258:..\..\FreeRTOS_Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2259:..\..\FreeRTOS_Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2260:..\..\FreeRTOS_Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2261:..\..\FreeRTOS_Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2262:..\..\FreeRTOS_Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2263:..\..\FreeRTOS_Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2264:..\..\FreeRTOS_Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2265:..\..\FreeRTOS_Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2266:..\..\FreeRTOS_Source/tasks.c **** 
2267:..\..\FreeRTOS_Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 2314              		.loc 1 2267 0
 2315 0006 0023     		movs	r3, #0
 2316 0008 7B60     		str	r3, [r7, #4]
2268:..\..\FreeRTOS_Source/tasks.c **** 	{
2269:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = xTickCount;
 2317              		.loc 1 2269 0
 2318 000a 044B     		ldr	r3, .L156
 2319 000c 1B68     		ldr	r3, [r3]
 2320 000e 3B60     		str	r3, [r7]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 86
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 86
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 86
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 86
>>>>>>> parent of cb49844... test


2270:..\..\FreeRTOS_Source/tasks.c **** 	}
2271:..\..\FreeRTOS_Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2272:..\..\FreeRTOS_Source/tasks.c **** 
2273:..\..\FreeRTOS_Source/tasks.c **** 	return xReturn;
 2321              		.loc 1 2273 0
 2322 0010 3B68     		ldr	r3, [r7]
2274:..\..\FreeRTOS_Source/tasks.c **** }
 2323              		.loc 1 2274 0
 2324 0012 1846     		mov	r0, r3
 2325 0014 0C37     		adds	r7, r7, #12
 2326              		.cfi_def_cfa_offset 4
 2327 0016 BD46     		mov	sp, r7
 2328              		.cfi_def_cfa_register 13
 2329              		@ sp needed
 2330 0018 80BC     		pop	{r7}
 2331              		.cfi_restore 7
 2332              		.cfi_def_cfa_offset 0
 2333 001a 7047     		bx	lr
 2334              	.L157:
 2335              		.align	2
 2336              	.L156:
 2337 001c B4000000 		.word	xTickCount
 2338              		.cfi_endproc
 2339              	.LFE87:
 2340              		.size	xTaskGetTickCountFromISR, .-xTaskGetTickCountFromISR
 2341              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2342              		.align	2
 2343              		.global	uxTaskGetNumberOfTasks
 2344              		.thumb
 2345              		.thumb_func
 2346              		.type	uxTaskGetNumberOfTasks, %function
 2347              	uxTaskGetNumberOfTasks:
 2348              	.LFB88:
2275:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2276:..\..\FreeRTOS_Source/tasks.c **** 
2277:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2278:..\..\FreeRTOS_Source/tasks.c **** {
 2349              		.loc 1 2278 0
 2350              		.cfi_startproc
 2351              		@ args = 0, pretend = 0, frame = 0
 2352              		@ frame_needed = 1, uses_anonymous_args = 0
 2353              		@ link register save eliminated.
 2354 0000 80B4     		push	{r7}
 2355              		.cfi_def_cfa_offset 4
 2356              		.cfi_offset 7, -4
 2357 0002 00AF     		add	r7, sp, #0
 2358              		.cfi_def_cfa_register 7
2279:..\..\FreeRTOS_Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2280:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t. */
2281:..\..\FreeRTOS_Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 2359              		.loc 1 2281 0
 2360 0004 024B     		ldr	r3, .L160
 2361 0006 1B68     		ldr	r3, [r3]
2282:..\..\FreeRTOS_Source/tasks.c **** }
 2362              		.loc 1 2282 0
 2363 0008 1846     		mov	r0, r3
 2364 000a BD46     		mov	sp, r7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 87
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 87
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 87
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 87
>>>>>>> parent of cb49844... test


 2365              		.cfi_def_cfa_register 13
 2366              		@ sp needed
 2367 000c 80BC     		pop	{r7}
 2368              		.cfi_restore 7
 2369              		.cfi_def_cfa_offset 0
 2370 000e 7047     		bx	lr
 2371              	.L161:
 2372              		.align	2
 2373              	.L160:
 2374 0010 B0000000 		.word	uxCurrentNumberOfTasks
 2375              		.cfi_endproc
 2376              	.LFE88:
 2377              		.size	uxTaskGetNumberOfTasks, .-uxTaskGetNumberOfTasks
 2378              		.section	.text.pcTaskGetName,"ax",%progbits
 2379              		.align	2
 2380              		.global	pcTaskGetName
 2381              		.thumb
 2382              		.thumb_func
 2383              		.type	pcTaskGetName, %function
 2384              	pcTaskGetName:
 2385              	.LFB89:
2283:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2284:..\..\FreeRTOS_Source/tasks.c **** 
2285:..\..\FreeRTOS_Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2286:..\..\FreeRTOS_Source/tasks.c **** {
 2386              		.loc 1 2286 0
 2387              		.cfi_startproc
 2388              		@ args = 0, pretend = 0, frame = 16
 2389              		@ frame_needed = 1, uses_anonymous_args = 0
 2390              		@ link register save eliminated.
 2391 0000 80B4     		push	{r7}
 2392              		.cfi_def_cfa_offset 4
 2393              		.cfi_offset 7, -4
 2394 0002 85B0     		sub	sp, sp, #20
 2395              		.cfi_def_cfa_offset 24
 2396 0004 00AF     		add	r7, sp, #0
 2397              		.cfi_def_cfa_register 7
 2398 0006 7860     		str	r0, [r7, #4]
2287:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxTCB;
2288:..\..\FreeRTOS_Source/tasks.c **** 
2289:..\..\FreeRTOS_Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2290:..\..\FreeRTOS_Source/tasks.c **** 	queried. */
2291:..\..\FreeRTOS_Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 2399              		.loc 1 2291 0
 2400 0008 7B68     		ldr	r3, [r7, #4]
 2401 000a 002B     		cmp	r3, #0
 2402 000c 02D1     		bne	.L163
 2403              		.loc 1 2291 0 is_stmt 0 discriminator 1
 2404 000e 064B     		ldr	r3, .L166
 2405 0010 1B68     		ldr	r3, [r3]
 2406 0012 00E0     		b	.L164
 2407              	.L163:
 2408              		.loc 1 2291 0 discriminator 2
 2409 0014 7B68     		ldr	r3, [r7, #4]
 2410              	.L164:
 2411              		.loc 1 2291 0 discriminator 4
 2412 0016 FB60     		str	r3, [r7, #12]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 88
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 88
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 88
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 88
>>>>>>> parent of cb49844... test


2292:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTCB );
2293:..\..\FreeRTOS_Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2413              		.loc 1 2293 0 is_stmt 1 discriminator 4
 2414 0018 FB68     		ldr	r3, [r7, #12]
 2415 001a 3433     		adds	r3, r3, #52
2294:..\..\FreeRTOS_Source/tasks.c **** }
 2416              		.loc 1 2294 0 discriminator 4
 2417 001c 1846     		mov	r0, r3
 2418 001e 1437     		adds	r7, r7, #20
 2419              		.cfi_def_cfa_offset 4
 2420 0020 BD46     		mov	sp, r7
 2421              		.cfi_def_cfa_register 13
 2422              		@ sp needed
 2423 0022 80BC     		pop	{r7}
 2424              		.cfi_restore 7
 2425              		.cfi_def_cfa_offset 0
 2426 0024 7047     		bx	lr
 2427              	.L167:
 2428 0026 00BF     		.align	2
 2429              	.L166:
 2430 0028 00000000 		.word	pxCurrentTCB
 2431              		.cfi_endproc
 2432              	.LFE89:
 2433              		.size	pcTaskGetName, .-pcTaskGetName
 2434              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2435              		.align	2
 2436              		.global	xTaskIncrementTick
 2437              		.thumb
 2438              		.thumb_func
 2439              		.type	xTaskIncrementTick, %function
 2440              	xTaskIncrementTick:
 2441              	.LFB90:
2295:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2296:..\..\FreeRTOS_Source/tasks.c **** 
2297:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2298:..\..\FreeRTOS_Source/tasks.c **** 
2299:..\..\FreeRTOS_Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2300:..\..\FreeRTOS_Source/tasks.c **** 	{
2301:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2302:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t x;
2303:..\..\FreeRTOS_Source/tasks.c **** 	char cNextChar;
2304:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xBreakLoop;
2305:..\..\FreeRTOS_Source/tasks.c **** 
2306:..\..\FreeRTOS_Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2307:..\..\FreeRTOS_Source/tasks.c **** 
2308:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2309:..\..\FreeRTOS_Source/tasks.c **** 		{
2310:..\..\FreeRTOS_Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2311:..\..\FreeRTOS_Source/tasks.c **** 
2312:..\..\FreeRTOS_Source/tasks.c **** 			do
2313:..\..\FreeRTOS_Source/tasks.c **** 			{
2314:..\..\FreeRTOS_Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2315:..\..\FreeRTOS_Source/tasks.c **** 
2316:..\..\FreeRTOS_Source/tasks.c **** 				/* Check each character in the name looking for a match or
2317:..\..\FreeRTOS_Source/tasks.c **** 				mismatch. */
2318:..\..\FreeRTOS_Source/tasks.c **** 				xBreakLoop = pdFALSE;
2319:..\..\FreeRTOS_Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 89
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 89
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 89
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 89
>>>>>>> parent of cb49844... test


2320:..\..\FreeRTOS_Source/tasks.c **** 				{
2321:..\..\FreeRTOS_Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2322:..\..\FreeRTOS_Source/tasks.c **** 
2323:..\..\FreeRTOS_Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2324:..\..\FreeRTOS_Source/tasks.c **** 					{
2325:..\..\FreeRTOS_Source/tasks.c **** 						/* Characters didn't match. */
2326:..\..\FreeRTOS_Source/tasks.c **** 						xBreakLoop = pdTRUE;
2327:..\..\FreeRTOS_Source/tasks.c **** 					}
2328:..\..\FreeRTOS_Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2329:..\..\FreeRTOS_Source/tasks.c **** 					{
2330:..\..\FreeRTOS_Source/tasks.c **** 						/* Both strings terminated, a match must have been
2331:..\..\FreeRTOS_Source/tasks.c **** 						found. */
2332:..\..\FreeRTOS_Source/tasks.c **** 						pxReturn = pxNextTCB;
2333:..\..\FreeRTOS_Source/tasks.c **** 						xBreakLoop = pdTRUE;
2334:..\..\FreeRTOS_Source/tasks.c **** 					}
2335:..\..\FreeRTOS_Source/tasks.c **** 					else
2336:..\..\FreeRTOS_Source/tasks.c **** 					{
2337:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2338:..\..\FreeRTOS_Source/tasks.c **** 					}
2339:..\..\FreeRTOS_Source/tasks.c **** 
2340:..\..\FreeRTOS_Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2341:..\..\FreeRTOS_Source/tasks.c **** 					{
2342:..\..\FreeRTOS_Source/tasks.c **** 						break;
2343:..\..\FreeRTOS_Source/tasks.c **** 					}
2344:..\..\FreeRTOS_Source/tasks.c **** 				}
2345:..\..\FreeRTOS_Source/tasks.c **** 
2346:..\..\FreeRTOS_Source/tasks.c **** 				if( pxReturn != NULL )
2347:..\..\FreeRTOS_Source/tasks.c **** 				{
2348:..\..\FreeRTOS_Source/tasks.c **** 					/* The handle has been found. */
2349:..\..\FreeRTOS_Source/tasks.c **** 					break;
2350:..\..\FreeRTOS_Source/tasks.c **** 				}
2351:..\..\FreeRTOS_Source/tasks.c **** 
2352:..\..\FreeRTOS_Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2353:..\..\FreeRTOS_Source/tasks.c **** 		}
2354:..\..\FreeRTOS_Source/tasks.c **** 		else
2355:..\..\FreeRTOS_Source/tasks.c **** 		{
2356:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2357:..\..\FreeRTOS_Source/tasks.c **** 		}
2358:..\..\FreeRTOS_Source/tasks.c **** 
2359:..\..\FreeRTOS_Source/tasks.c **** 		return pxReturn;
2360:..\..\FreeRTOS_Source/tasks.c **** 	}
2361:..\..\FreeRTOS_Source/tasks.c **** 
2362:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2363:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2364:..\..\FreeRTOS_Source/tasks.c **** 
2365:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2366:..\..\FreeRTOS_Source/tasks.c **** 
2367:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2368:..\..\FreeRTOS_Source/tasks.c **** 	{
2369:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2370:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t* pxTCB;
2371:..\..\FreeRTOS_Source/tasks.c **** 
2372:..\..\FreeRTOS_Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2373:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2374:..\..\FreeRTOS_Source/tasks.c **** 
2375:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
2376:..\..\FreeRTOS_Source/tasks.c **** 		{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 90
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 90
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 90
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 90
>>>>>>> parent of cb49844... test


2377:..\..\FreeRTOS_Source/tasks.c **** 			/* Search the ready lists. */
2378:..\..\FreeRTOS_Source/tasks.c **** 			do
2379:..\..\FreeRTOS_Source/tasks.c **** 			{
2380:..\..\FreeRTOS_Source/tasks.c **** 				uxQueue--;
2381:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2382:..\..\FreeRTOS_Source/tasks.c **** 
2383:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB != NULL )
2384:..\..\FreeRTOS_Source/tasks.c **** 				{
2385:..\..\FreeRTOS_Source/tasks.c **** 					/* Found the handle. */
2386:..\..\FreeRTOS_Source/tasks.c **** 					break;
2387:..\..\FreeRTOS_Source/tasks.c **** 				}
2388:..\..\FreeRTOS_Source/tasks.c **** 
2389:..\..\FreeRTOS_Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2390:..\..\FreeRTOS_Source/tasks.c **** 
2391:..\..\FreeRTOS_Source/tasks.c **** 			/* Search the delayed lists. */
2392:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == NULL )
2393:..\..\FreeRTOS_Source/tasks.c **** 			{
2394:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2395:..\..\FreeRTOS_Source/tasks.c **** 			}
2396:..\..\FreeRTOS_Source/tasks.c **** 
2397:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == NULL )
2398:..\..\FreeRTOS_Source/tasks.c **** 			{
2399:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2400:..\..\FreeRTOS_Source/tasks.c **** 			}
2401:..\..\FreeRTOS_Source/tasks.c **** 
2402:..\..\FreeRTOS_Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2403:..\..\FreeRTOS_Source/tasks.c **** 			{
2404:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB == NULL )
2405:..\..\FreeRTOS_Source/tasks.c **** 				{
2406:..\..\FreeRTOS_Source/tasks.c **** 					/* Search the suspended list. */
2407:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2408:..\..\FreeRTOS_Source/tasks.c **** 				}
2409:..\..\FreeRTOS_Source/tasks.c **** 			}
2410:..\..\FreeRTOS_Source/tasks.c **** 			#endif
2411:..\..\FreeRTOS_Source/tasks.c **** 
2412:..\..\FreeRTOS_Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2413:..\..\FreeRTOS_Source/tasks.c **** 			{
2414:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB == NULL )
2415:..\..\FreeRTOS_Source/tasks.c **** 				{
2416:..\..\FreeRTOS_Source/tasks.c **** 					/* Search the deleted list. */
2417:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2418:..\..\FreeRTOS_Source/tasks.c **** 				}
2419:..\..\FreeRTOS_Source/tasks.c **** 			}
2420:..\..\FreeRTOS_Source/tasks.c **** 			#endif
2421:..\..\FreeRTOS_Source/tasks.c **** 		}
2422:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xTaskResumeAll();
2423:..\..\FreeRTOS_Source/tasks.c **** 
2424:..\..\FreeRTOS_Source/tasks.c **** 		return pxTCB;
2425:..\..\FreeRTOS_Source/tasks.c **** 	}
2426:..\..\FreeRTOS_Source/tasks.c **** 
2427:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2428:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2429:..\..\FreeRTOS_Source/tasks.c **** 
2430:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2431:..\..\FreeRTOS_Source/tasks.c **** 
2432:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2433:..\..\FreeRTOS_Source/tasks.c **** 	{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 91
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 91
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 91
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 91
>>>>>>> parent of cb49844... test


2434:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2435:..\..\FreeRTOS_Source/tasks.c **** 
2436:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
2437:..\..\FreeRTOS_Source/tasks.c **** 		{
2438:..\..\FreeRTOS_Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2439:..\..\FreeRTOS_Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2440:..\..\FreeRTOS_Source/tasks.c **** 			{
2441:..\..\FreeRTOS_Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2442:..\..\FreeRTOS_Source/tasks.c **** 				task in the Ready state. */
2443:..\..\FreeRTOS_Source/tasks.c **** 				do
2444:..\..\FreeRTOS_Source/tasks.c **** 				{
2445:..\..\FreeRTOS_Source/tasks.c **** 					uxQueue--;
2446:..\..\FreeRTOS_Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2447:..\..\FreeRTOS_Source/tasks.c **** 
2448:..\..\FreeRTOS_Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2449:..\..\FreeRTOS_Source/tasks.c **** 
2450:..\..\FreeRTOS_Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2451:..\..\FreeRTOS_Source/tasks.c **** 				task in the Blocked state. */
2452:..\..\FreeRTOS_Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2453:..\..\FreeRTOS_Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2454:..\..\FreeRTOS_Source/tasks.c **** 
2455:..\..\FreeRTOS_Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2456:..\..\FreeRTOS_Source/tasks.c **** 				{
2457:..\..\FreeRTOS_Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2458:..\..\FreeRTOS_Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2459:..\..\FreeRTOS_Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2460:..\..\FreeRTOS_Source/tasks.c **** 				}
2461:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2462:..\..\FreeRTOS_Source/tasks.c **** 
2463:..\..\FreeRTOS_Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2464:..\..\FreeRTOS_Source/tasks.c **** 				{
2465:..\..\FreeRTOS_Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2466:..\..\FreeRTOS_Source/tasks.c **** 					each task in the Suspended state. */
2467:..\..\FreeRTOS_Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2468:..\..\FreeRTOS_Source/tasks.c **** 				}
2469:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2470:..\..\FreeRTOS_Source/tasks.c **** 
2471:..\..\FreeRTOS_Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2472:..\..\FreeRTOS_Source/tasks.c **** 				{
2473:..\..\FreeRTOS_Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2474:..\..\FreeRTOS_Source/tasks.c **** 					{
2475:..\..\FreeRTOS_Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2476:..\..\FreeRTOS_Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2477:..\..\FreeRTOS_Source/tasks.c **** 						#else
2478:..\..\FreeRTOS_Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2479:..\..\FreeRTOS_Source/tasks.c **** 						#endif
2480:..\..\FreeRTOS_Source/tasks.c **** 					}
2481:..\..\FreeRTOS_Source/tasks.c **** 				}
2482:..\..\FreeRTOS_Source/tasks.c **** 				#else
2483:..\..\FreeRTOS_Source/tasks.c **** 				{
2484:..\..\FreeRTOS_Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2485:..\..\FreeRTOS_Source/tasks.c **** 					{
2486:..\..\FreeRTOS_Source/tasks.c **** 						*pulTotalRunTime = 0;
2487:..\..\FreeRTOS_Source/tasks.c **** 					}
2488:..\..\FreeRTOS_Source/tasks.c **** 				}
2489:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2490:..\..\FreeRTOS_Source/tasks.c **** 			}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 92
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 92
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 92
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 92
>>>>>>> parent of cb49844... test


2491:..\..\FreeRTOS_Source/tasks.c **** 			else
2492:..\..\FreeRTOS_Source/tasks.c **** 			{
2493:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2494:..\..\FreeRTOS_Source/tasks.c **** 			}
2495:..\..\FreeRTOS_Source/tasks.c **** 		}
2496:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xTaskResumeAll();
2497:..\..\FreeRTOS_Source/tasks.c **** 
2498:..\..\FreeRTOS_Source/tasks.c **** 		return uxTask;
2499:..\..\FreeRTOS_Source/tasks.c **** 	}
2500:..\..\FreeRTOS_Source/tasks.c **** 
2501:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2502:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2503:..\..\FreeRTOS_Source/tasks.c **** 
2504:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2505:..\..\FreeRTOS_Source/tasks.c **** 
2506:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2507:..\..\FreeRTOS_Source/tasks.c **** 	{
2508:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2509:..\..\FreeRTOS_Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2510:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2511:..\..\FreeRTOS_Source/tasks.c **** 		return xIdleTaskHandle;
2512:..\..\FreeRTOS_Source/tasks.c **** 	}
2513:..\..\FreeRTOS_Source/tasks.c **** 
2514:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2515:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2516:..\..\FreeRTOS_Source/tasks.c **** 
2517:..\..\FreeRTOS_Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2518:..\..\FreeRTOS_Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2519:..\..\FreeRTOS_Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2520:..\..\FreeRTOS_Source/tasks.c **** 1. */
2521:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2522:..\..\FreeRTOS_Source/tasks.c **** 
2523:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2524:..\..\FreeRTOS_Source/tasks.c **** 	{
2525:..\..\FreeRTOS_Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2526:..\..\FreeRTOS_Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2527:..\..\FreeRTOS_Source/tasks.c **** 		each stepped tick. */
2528:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2529:..\..\FreeRTOS_Source/tasks.c **** 		xTickCount += xTicksToJump;
2530:..\..\FreeRTOS_Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2531:..\..\FreeRTOS_Source/tasks.c **** 	}
2532:..\..\FreeRTOS_Source/tasks.c **** 
2533:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2534:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2535:..\..\FreeRTOS_Source/tasks.c **** 
2536:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2537:..\..\FreeRTOS_Source/tasks.c **** 
2538:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2539:..\..\FreeRTOS_Source/tasks.c **** 	{
2540:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2541:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
2542:..\..\FreeRTOS_Source/tasks.c **** 
2543:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxTCB );
2544:..\..\FreeRTOS_Source/tasks.c **** 
2545:..\..\FreeRTOS_Source/tasks.c **** 		vTaskSuspendAll();
2546:..\..\FreeRTOS_Source/tasks.c **** 		{
2547:..\..\FreeRTOS_Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 93
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 93
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 93
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 93
>>>>>>> parent of cb49844... test


2548:..\..\FreeRTOS_Source/tasks.c **** 			it is actually in the Blocked state. */
2549:..\..\FreeRTOS_Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2550:..\..\FreeRTOS_Source/tasks.c **** 			{
2551:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdPASS;
2552:..\..\FreeRTOS_Source/tasks.c **** 
2553:..\..\FreeRTOS_Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2554:..\..\FreeRTOS_Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2555:..\..\FreeRTOS_Source/tasks.c **** 				scheduler is suspended. */
2556:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2557:..\..\FreeRTOS_Source/tasks.c **** 
2558:..\..\FreeRTOS_Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2559:..\..\FreeRTOS_Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2560:..\..\FreeRTOS_Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2561:..\..\FreeRTOS_Source/tasks.c **** 				is used. */
2562:..\..\FreeRTOS_Source/tasks.c **** 				taskENTER_CRITICAL();
2563:..\..\FreeRTOS_Source/tasks.c **** 				{
2564:..\..\FreeRTOS_Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2565:..\..\FreeRTOS_Source/tasks.c **** 					{
2566:..\..\FreeRTOS_Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2567:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2568:..\..\FreeRTOS_Source/tasks.c **** 					}
2569:..\..\FreeRTOS_Source/tasks.c **** 					else
2570:..\..\FreeRTOS_Source/tasks.c **** 					{
2571:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:..\..\FreeRTOS_Source/tasks.c **** 					}
2573:..\..\FreeRTOS_Source/tasks.c **** 				}
2574:..\..\FreeRTOS_Source/tasks.c **** 				taskEXIT_CRITICAL();
2575:..\..\FreeRTOS_Source/tasks.c **** 
2576:..\..\FreeRTOS_Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2577:..\..\FreeRTOS_Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2578:..\..\FreeRTOS_Source/tasks.c **** 
2579:..\..\FreeRTOS_Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2580:..\..\FreeRTOS_Source/tasks.c **** 				switch if preemption is turned off. */
2581:..\..\FreeRTOS_Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2582:..\..\FreeRTOS_Source/tasks.c **** 				{
2583:..\..\FreeRTOS_Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2584:..\..\FreeRTOS_Source/tasks.c **** 					performed if the unblocked task has a priority that is
2585:..\..\FreeRTOS_Source/tasks.c **** 					equal to or higher than the currently executing task. */
2586:..\..\FreeRTOS_Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2587:..\..\FreeRTOS_Source/tasks.c **** 					{
2588:..\..\FreeRTOS_Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2589:..\..\FreeRTOS_Source/tasks.c **** 						is unsuspended. */
2590:..\..\FreeRTOS_Source/tasks.c **** 						xYieldPending = pdTRUE;
2591:..\..\FreeRTOS_Source/tasks.c **** 					}
2592:..\..\FreeRTOS_Source/tasks.c **** 					else
2593:..\..\FreeRTOS_Source/tasks.c **** 					{
2594:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2595:..\..\FreeRTOS_Source/tasks.c **** 					}
2596:..\..\FreeRTOS_Source/tasks.c **** 				}
2597:..\..\FreeRTOS_Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2598:..\..\FreeRTOS_Source/tasks.c **** 			}
2599:..\..\FreeRTOS_Source/tasks.c **** 			else
2600:..\..\FreeRTOS_Source/tasks.c **** 			{
2601:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFAIL;
2602:..\..\FreeRTOS_Source/tasks.c **** 			}
2603:..\..\FreeRTOS_Source/tasks.c **** 		}
2604:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xTaskResumeAll();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 94
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 94
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 94
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 94
>>>>>>> parent of cb49844... test


2605:..\..\FreeRTOS_Source/tasks.c **** 
2606:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2607:..\..\FreeRTOS_Source/tasks.c **** 	}
2608:..\..\FreeRTOS_Source/tasks.c **** 
2609:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2610:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
2611:..\..\FreeRTOS_Source/tasks.c **** 
2612:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2613:..\..\FreeRTOS_Source/tasks.c **** {
 2442              		.loc 1 2613 0
 2443              		.cfi_startproc
 2444              		@ args = 0, pretend = 0, frame = 24
 2445              		@ frame_needed = 1, uses_anonymous_args = 0
 2446 0000 80B5     		push	{r7, lr}
 2447              		.cfi_def_cfa_offset 8
 2448              		.cfi_offset 7, -8
 2449              		.cfi_offset 14, -4
 2450 0002 86B0     		sub	sp, sp, #24
 2451              		.cfi_def_cfa_offset 32
 2452 0004 00AF     		add	r7, sp, #0
 2453              		.cfi_def_cfa_register 7
2614:..\..\FreeRTOS_Source/tasks.c **** TCB_t * pxTCB;
2615:..\..\FreeRTOS_Source/tasks.c **** TickType_t xItemValue;
2616:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 2454              		.loc 1 2616 0
 2455 0006 0023     		movs	r3, #0
 2456 0008 7B61     		str	r3, [r7, #20]
2617:..\..\FreeRTOS_Source/tasks.c **** 
2618:..\..\FreeRTOS_Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2619:..\..\FreeRTOS_Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2620:..\..\FreeRTOS_Source/tasks.c **** 	tasks to be unblocked. */
2621:..\..\FreeRTOS_Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2622:..\..\FreeRTOS_Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2457              		.loc 1 2622 0
 2458 000a 464B     		ldr	r3, .L181
 2459 000c 1B68     		ldr	r3, [r3]
 2460 000e 002B     		cmp	r3, #0
 2461 0010 77D1     		bne	.L169
 2462              	.LBB42:
2623:..\..\FreeRTOS_Source/tasks.c **** 	{
2624:..\..\FreeRTOS_Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2625:..\..\FreeRTOS_Source/tasks.c **** 		block. */
2626:..\..\FreeRTOS_Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 2463              		.loc 1 2626 0
 2464 0012 454B     		ldr	r3, .L181+4
 2465 0014 1B68     		ldr	r3, [r3]
 2466 0016 0133     		adds	r3, r3, #1
 2467 0018 3B61     		str	r3, [r7, #16]
2627:..\..\FreeRTOS_Source/tasks.c **** 
2628:..\..\FreeRTOS_Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2629:..\..\FreeRTOS_Source/tasks.c **** 		delayed lists if it wraps to 0. */
2630:..\..\FreeRTOS_Source/tasks.c **** 		xTickCount = xConstTickCount;
 2468              		.loc 1 2630 0
 2469 001a 434A     		ldr	r2, .L181+4
 2470 001c 3B69     		ldr	r3, [r7, #16]
 2471 001e 1360     		str	r3, [r2]
2631:..\..\FreeRTOS_Source/tasks.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 95
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 95
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 95
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 95
>>>>>>> parent of cb49844... test


2632:..\..\FreeRTOS_Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 2472              		.loc 1 2632 0
 2473 0020 3B69     		ldr	r3, [r7, #16]
 2474 0022 002B     		cmp	r3, #0
 2475 0024 10D1     		bne	.L170
 2476              	.LBB43:
2633:..\..\FreeRTOS_Source/tasks.c **** 		{
2634:..\..\FreeRTOS_Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 2477              		.loc 1 2634 0
 2478 0026 414B     		ldr	r3, .L181+8
 2479 0028 1B68     		ldr	r3, [r3]
 2480 002a FB60     		str	r3, [r7, #12]
 2481 002c 404B     		ldr	r3, .L181+12
 2482 002e 1B68     		ldr	r3, [r3]
 2483 0030 3E4A     		ldr	r2, .L181+8
 2484 0032 1360     		str	r3, [r2]
 2485 0034 3E4A     		ldr	r2, .L181+12
 2486 0036 FB68     		ldr	r3, [r7, #12]
 2487 0038 1360     		str	r3, [r2]
 2488 003a 3E4B     		ldr	r3, .L181+16
 2489 003c 1B68     		ldr	r3, [r3]
 2490 003e 0133     		adds	r3, r3, #1
 2491 0040 3C4A     		ldr	r2, .L181+16
 2492 0042 1360     		str	r3, [r2]
 2493 0044 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2494              	.L170:
 2495              	.LBE43:
2635:..\..\FreeRTOS_Source/tasks.c **** 		}
2636:..\..\FreeRTOS_Source/tasks.c **** 		else
2637:..\..\FreeRTOS_Source/tasks.c **** 		{
2638:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2639:..\..\FreeRTOS_Source/tasks.c **** 		}
2640:..\..\FreeRTOS_Source/tasks.c **** 
2641:..\..\FreeRTOS_Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2642:..\..\FreeRTOS_Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2643:..\..\FreeRTOS_Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2644:..\..\FreeRTOS_Source/tasks.c **** 		look any further down the list. */
2645:..\..\FreeRTOS_Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 2496              		.loc 1 2645 0
 2497 0048 3B4B     		ldr	r3, .L181+20
 2498 004a 1B68     		ldr	r3, [r3]
 2499 004c 3A69     		ldr	r2, [r7, #16]
 2500 004e 9A42     		cmp	r2, r3
 2501 0050 48D3     		bcc	.L171
 2502              	.L176:
2646:..\..\FreeRTOS_Source/tasks.c **** 		{
2647:..\..\FreeRTOS_Source/tasks.c **** 			for( ;; )
2648:..\..\FreeRTOS_Source/tasks.c **** 			{
2649:..\..\FreeRTOS_Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 2503              		.loc 1 2649 0
 2504 0052 364B     		ldr	r3, .L181+8
 2505 0054 1B68     		ldr	r3, [r3]
 2506 0056 1B68     		ldr	r3, [r3]
 2507 0058 002B     		cmp	r3, #0
 2508 005a 04D1     		bne	.L172
2650:..\..\FreeRTOS_Source/tasks.c **** 				{
2651:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 96
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 96
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 96
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 96
>>>>>>> parent of cb49844... test


2652:..\..\FreeRTOS_Source/tasks.c **** 					to the maximum possible value so it is extremely
2653:..\..\FreeRTOS_Source/tasks.c **** 					unlikely that the
2654:..\..\FreeRTOS_Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2655:..\..\FreeRTOS_Source/tasks.c **** 					next time through. */
2656:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 2509              		.loc 1 2656 0
 2510 005c 364B     		ldr	r3, .L181+20
 2511 005e 4FF0FF32 		mov	r2, #-1
 2512 0062 1A60     		str	r2, [r3]
2657:..\..\FreeRTOS_Source/tasks.c **** 					break;
 2513              		.loc 1 2657 0
 2514 0064 3EE0     		b	.L171
 2515              	.L172:
2658:..\..\FreeRTOS_Source/tasks.c **** 				}
2659:..\..\FreeRTOS_Source/tasks.c **** 				else
2660:..\..\FreeRTOS_Source/tasks.c **** 				{
2661:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2662:..\..\FreeRTOS_Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2663:..\..\FreeRTOS_Source/tasks.c **** 					at which the task at the head of the delayed list must
2664:..\..\FreeRTOS_Source/tasks.c **** 					be removed from the Blocked state. */
2665:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 2516              		.loc 1 2665 0
 2517 0066 314B     		ldr	r3, .L181+8
 2518 0068 1B68     		ldr	r3, [r3]
 2519 006a DB68     		ldr	r3, [r3, #12]
 2520 006c DB68     		ldr	r3, [r3, #12]
 2521 006e BB60     		str	r3, [r7, #8]
2666:..\..\FreeRTOS_Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2522              		.loc 1 2666 0
 2523 0070 BB68     		ldr	r3, [r7, #8]
 2524 0072 5B68     		ldr	r3, [r3, #4]
 2525 0074 7B60     		str	r3, [r7, #4]
2667:..\..\FreeRTOS_Source/tasks.c **** 
2668:..\..\FreeRTOS_Source/tasks.c **** 					if( xConstTickCount < xItemValue )
 2526              		.loc 1 2668 0
 2527 0076 3A69     		ldr	r2, [r7, #16]
 2528 0078 7B68     		ldr	r3, [r7, #4]
 2529 007a 9A42     		cmp	r2, r3
 2530 007c 03D2     		bcs	.L173
2669:..\..\FreeRTOS_Source/tasks.c **** 					{
2670:..\..\FreeRTOS_Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2671:..\..\FreeRTOS_Source/tasks.c **** 						item value is the time at which the task at the head
2672:..\..\FreeRTOS_Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2673:..\..\FreeRTOS_Source/tasks.c **** 						state -	so record the item value in
2674:..\..\FreeRTOS_Source/tasks.c **** 						xNextTaskUnblockTime. */
2675:..\..\FreeRTOS_Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 2531              		.loc 1 2675 0
 2532 007e 2E4A     		ldr	r2, .L181+20
 2533 0080 7B68     		ldr	r3, [r7, #4]
 2534 0082 1360     		str	r3, [r2]
2676:..\..\FreeRTOS_Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2535              		.loc 1 2676 0
 2536 0084 2EE0     		b	.L171
 2537              	.L173:
2677:..\..\FreeRTOS_Source/tasks.c **** 					}
2678:..\..\FreeRTOS_Source/tasks.c **** 					else
2679:..\..\FreeRTOS_Source/tasks.c **** 					{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 97
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 97
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 97
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 97
>>>>>>> parent of cb49844... test


2680:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2681:..\..\FreeRTOS_Source/tasks.c **** 					}
2682:..\..\FreeRTOS_Source/tasks.c **** 
2683:..\..\FreeRTOS_Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2684:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2538              		.loc 1 2684 0
 2539 0086 BB68     		ldr	r3, [r7, #8]
 2540 0088 0433     		adds	r3, r3, #4
 2541 008a 1846     		mov	r0, r3
 2542 008c FFF7FEFF 		bl	uxListRemove
2685:..\..\FreeRTOS_Source/tasks.c **** 
2686:..\..\FreeRTOS_Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2687:..\..\FreeRTOS_Source/tasks.c **** 					it from the event list. */
2688:..\..\FreeRTOS_Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 2543              		.loc 1 2688 0
 2544 0090 BB68     		ldr	r3, [r7, #8]
 2545 0092 9B6A     		ldr	r3, [r3, #40]
 2546 0094 002B     		cmp	r3, #0
 2547 0096 04D0     		beq	.L174
2689:..\..\FreeRTOS_Source/tasks.c **** 					{
2690:..\..\FreeRTOS_Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2548              		.loc 1 2690 0
 2549 0098 BB68     		ldr	r3, [r7, #8]
 2550 009a 1833     		adds	r3, r3, #24
 2551 009c 1846     		mov	r0, r3
 2552 009e FFF7FEFF 		bl	uxListRemove
 2553              	.L174:
2691:..\..\FreeRTOS_Source/tasks.c **** 					}
2692:..\..\FreeRTOS_Source/tasks.c **** 					else
2693:..\..\FreeRTOS_Source/tasks.c **** 					{
2694:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2695:..\..\FreeRTOS_Source/tasks.c **** 					}
2696:..\..\FreeRTOS_Source/tasks.c **** 
2697:..\..\FreeRTOS_Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2698:..\..\FreeRTOS_Source/tasks.c **** 					list. */
2699:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2554              		.loc 1 2699 0
 2555 00a2 BB68     		ldr	r3, [r7, #8]
 2556 00a4 DB6A     		ldr	r3, [r3, #44]
 2557 00a6 0122     		movs	r2, #1
 2558 00a8 9A40     		lsls	r2, r2, r3
 2559 00aa 244B     		ldr	r3, .L181+24
 2560 00ac 1B68     		ldr	r3, [r3]
 2561 00ae 1343     		orrs	r3, r3, r2
 2562 00b0 224A     		ldr	r2, .L181+24
 2563 00b2 1360     		str	r3, [r2]
 2564 00b4 BB68     		ldr	r3, [r7, #8]
 2565 00b6 DA6A     		ldr	r2, [r3, #44]
 2566 00b8 1346     		mov	r3, r2
 2567 00ba 9B00     		lsls	r3, r3, #2
 2568 00bc 1344     		add	r3, r3, r2
 2569 00be 9B00     		lsls	r3, r3, #2
 2570 00c0 1F4A     		ldr	r2, .L181+28
 2571 00c2 1A44     		add	r2, r2, r3
 2572 00c4 BB68     		ldr	r3, [r7, #8]
 2573 00c6 0433     		adds	r3, r3, #4
 2574 00c8 1946     		mov	r1, r3
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 98
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 98
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 98
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 98
>>>>>>> parent of cb49844... test


 2575 00ca 1046     		mov	r0, r2
 2576 00cc FFF7FEFF 		bl	vListInsertEnd
2700:..\..\FreeRTOS_Source/tasks.c **** 
2701:..\..\FreeRTOS_Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2702:..\..\FreeRTOS_Source/tasks.c **** 					context switch if preemption is turned off. */
2703:..\..\FreeRTOS_Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2704:..\..\FreeRTOS_Source/tasks.c **** 					{
2705:..\..\FreeRTOS_Source/tasks.c **** 						/* Preemption is on, but a context switch should
2706:..\..\FreeRTOS_Source/tasks.c **** 						only be performed if the unblocked task has a
2707:..\..\FreeRTOS_Source/tasks.c **** 						priority that is equal to or higher than the
2708:..\..\FreeRTOS_Source/tasks.c **** 						currently executing task. */
2709:..\..\FreeRTOS_Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2577              		.loc 1 2709 0
 2578 00d0 BB68     		ldr	r3, [r7, #8]
 2579 00d2 DA6A     		ldr	r2, [r3, #44]
 2580 00d4 1B4B     		ldr	r3, .L181+32
 2581 00d6 1B68     		ldr	r3, [r3]
 2582 00d8 DB6A     		ldr	r3, [r3, #44]
 2583 00da 9A42     		cmp	r2, r3
 2584 00dc B9D3     		bcc	.L176
2710:..\..\FreeRTOS_Source/tasks.c **** 						{
2711:..\..\FreeRTOS_Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 2585              		.loc 1 2711 0
 2586 00de 0123     		movs	r3, #1
 2587 00e0 7B61     		str	r3, [r7, #20]
2712:..\..\FreeRTOS_Source/tasks.c **** 						}
2713:..\..\FreeRTOS_Source/tasks.c **** 						else
2714:..\..\FreeRTOS_Source/tasks.c **** 						{
2715:..\..\FreeRTOS_Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2716:..\..\FreeRTOS_Source/tasks.c **** 						}
2717:..\..\FreeRTOS_Source/tasks.c **** 					}
2718:..\..\FreeRTOS_Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2719:..\..\FreeRTOS_Source/tasks.c **** 				}
2720:..\..\FreeRTOS_Source/tasks.c **** 			}
 2588              		.loc 1 2720 0
 2589 00e2 B6E7     		b	.L176
 2590              	.L171:
2721:..\..\FreeRTOS_Source/tasks.c **** 		}
2722:..\..\FreeRTOS_Source/tasks.c **** 
2723:..\..\FreeRTOS_Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2724:..\..\FreeRTOS_Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2725:..\..\FreeRTOS_Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2726:..\..\FreeRTOS_Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2727:..\..\FreeRTOS_Source/tasks.c **** 		{
2728:..\..\FreeRTOS_Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 2591              		.loc 1 2728 0
 2592 00e4 174B     		ldr	r3, .L181+32
 2593 00e6 1B68     		ldr	r3, [r3]
 2594 00e8 DA6A     		ldr	r2, [r3, #44]
 2595 00ea 1549     		ldr	r1, .L181+28
 2596 00ec 1346     		mov	r3, r2
 2597 00ee 9B00     		lsls	r3, r3, #2
 2598 00f0 1344     		add	r3, r3, r2
 2599 00f2 9B00     		lsls	r3, r3, #2
 2600 00f4 0B44     		add	r3, r3, r1
 2601 00f6 1B68     		ldr	r3, [r3]
 2602 00f8 012B     		cmp	r3, #1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 99
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 99
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 99
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 99
>>>>>>> parent of cb49844... test


 2603 00fa 07D9     		bls	.L178
2729:..\..\FreeRTOS_Source/tasks.c **** 			{
2730:..\..\FreeRTOS_Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 2604              		.loc 1 2730 0
 2605 00fc 0123     		movs	r3, #1
 2606 00fe 7B61     		str	r3, [r7, #20]
 2607 0100 04E0     		b	.L178
 2608              	.L169:
 2609              	.LBE42:
2731:..\..\FreeRTOS_Source/tasks.c **** 			}
2732:..\..\FreeRTOS_Source/tasks.c **** 			else
2733:..\..\FreeRTOS_Source/tasks.c **** 			{
2734:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2735:..\..\FreeRTOS_Source/tasks.c **** 			}
2736:..\..\FreeRTOS_Source/tasks.c **** 		}
2737:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2738:..\..\FreeRTOS_Source/tasks.c **** 
2739:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2740:..\..\FreeRTOS_Source/tasks.c **** 		{
2741:..\..\FreeRTOS_Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2742:..\..\FreeRTOS_Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2743:..\..\FreeRTOS_Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2744:..\..\FreeRTOS_Source/tasks.c **** 			{
2745:..\..\FreeRTOS_Source/tasks.c **** 				vApplicationTickHook();
2746:..\..\FreeRTOS_Source/tasks.c **** 			}
2747:..\..\FreeRTOS_Source/tasks.c **** 			else
2748:..\..\FreeRTOS_Source/tasks.c **** 			{
2749:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2750:..\..\FreeRTOS_Source/tasks.c **** 			}
2751:..\..\FreeRTOS_Source/tasks.c **** 		}
2752:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2753:..\..\FreeRTOS_Source/tasks.c **** 	}
2754:..\..\FreeRTOS_Source/tasks.c **** 	else
2755:..\..\FreeRTOS_Source/tasks.c **** 	{
2756:..\..\FreeRTOS_Source/tasks.c **** 		++uxPendedTicks;
 2610              		.loc 1 2756 0
 2611 0102 114B     		ldr	r3, .L181+36
 2612 0104 1B68     		ldr	r3, [r3]
 2613 0106 0133     		adds	r3, r3, #1
 2614 0108 0F4A     		ldr	r2, .L181+36
 2615 010a 1360     		str	r3, [r2]
 2616              	.L178:
2757:..\..\FreeRTOS_Source/tasks.c **** 
2758:..\..\FreeRTOS_Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2759:..\..\FreeRTOS_Source/tasks.c **** 		scheduler is locked. */
2760:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2761:..\..\FreeRTOS_Source/tasks.c **** 		{
2762:..\..\FreeRTOS_Source/tasks.c **** 			vApplicationTickHook();
2763:..\..\FreeRTOS_Source/tasks.c **** 		}
2764:..\..\FreeRTOS_Source/tasks.c **** 		#endif
2765:..\..\FreeRTOS_Source/tasks.c **** 	}
2766:..\..\FreeRTOS_Source/tasks.c **** 
2767:..\..\FreeRTOS_Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2768:..\..\FreeRTOS_Source/tasks.c **** 	{
2769:..\..\FreeRTOS_Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 2617              		.loc 1 2769 0
 2618 010c 0F4B     		ldr	r3, .L181+40
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 100
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 100
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 100
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 100
>>>>>>> parent of cb49844... test


 2619 010e 1B68     		ldr	r3, [r3]
 2620 0110 002B     		cmp	r3, #0
 2621 0112 01D0     		beq	.L179
2770:..\..\FreeRTOS_Source/tasks.c **** 		{
2771:..\..\FreeRTOS_Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 2622              		.loc 1 2771 0
 2623 0114 0123     		movs	r3, #1
 2624 0116 7B61     		str	r3, [r7, #20]
 2625              	.L179:
2772:..\..\FreeRTOS_Source/tasks.c **** 		}
2773:..\..\FreeRTOS_Source/tasks.c **** 		else
2774:..\..\FreeRTOS_Source/tasks.c **** 		{
2775:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2776:..\..\FreeRTOS_Source/tasks.c **** 		}
2777:..\..\FreeRTOS_Source/tasks.c **** 	}
2778:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2779:..\..\FreeRTOS_Source/tasks.c **** 
2780:..\..\FreeRTOS_Source/tasks.c **** 	return xSwitchRequired;
 2626              		.loc 1 2780 0
 2627 0118 7B69     		ldr	r3, [r7, #20]
2781:..\..\FreeRTOS_Source/tasks.c **** }
 2628              		.loc 1 2781 0
 2629 011a 1846     		mov	r0, r3
 2630 011c 1837     		adds	r7, r7, #24
 2631              		.cfi_def_cfa_offset 8
 2632 011e BD46     		mov	sp, r7
 2633              		.cfi_def_cfa_register 13
 2634              		@ sp needed
 2635 0120 80BD     		pop	{r7, pc}
 2636              	.L182:
 2637 0122 00BF     		.align	2
 2638              	.L181:
 2639 0124 D8000000 		.word	uxSchedulerSuspended
 2640 0128 B4000000 		.word	xTickCount
 2641 012c 68000000 		.word	pxDelayedTaskList
 2642 0130 6C000000 		.word	pxOverflowDelayedTaskList
 2643 0134 C8000000 		.word	xNumOfOverflows
 2644 0138 D0000000 		.word	xNextTaskUnblockTime
 2645 013c B8000000 		.word	uxTopReadyPriority
 2646 0140 04000000 		.word	pxReadyTasksLists
 2647 0144 00000000 		.word	pxCurrentTCB
 2648 0148 C0000000 		.word	uxPendedTicks
 2649 014c C4000000 		.word	xYieldPending
 2650              		.cfi_endproc
 2651              	.LFE90:
 2652              		.size	xTaskIncrementTick, .-xTaskIncrementTick
 2653              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2654              		.align	2
 2655              		.global	vTaskSwitchContext
 2656              		.thumb
 2657              		.thumb_func
 2658              		.type	vTaskSwitchContext, %function
 2659              	vTaskSwitchContext:
 2660              	.LFB91:
2782:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2783:..\..\FreeRTOS_Source/tasks.c **** 
2784:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 101
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 101
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 101
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 101
>>>>>>> parent of cb49844... test


2785:..\..\FreeRTOS_Source/tasks.c **** 
2786:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2787:..\..\FreeRTOS_Source/tasks.c **** 	{
2788:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *xTCB;
2789:..\..\FreeRTOS_Source/tasks.c **** 
2790:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2791:..\..\FreeRTOS_Source/tasks.c **** 		getting set. */
2792:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask == NULL )
2793:..\..\FreeRTOS_Source/tasks.c **** 		{
2794:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2795:..\..\FreeRTOS_Source/tasks.c **** 		}
2796:..\..\FreeRTOS_Source/tasks.c **** 		else
2797:..\..\FreeRTOS_Source/tasks.c **** 		{
2798:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = xTask;
2799:..\..\FreeRTOS_Source/tasks.c **** 		}
2800:..\..\FreeRTOS_Source/tasks.c **** 
2801:..\..\FreeRTOS_Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2802:..\..\FreeRTOS_Source/tasks.c **** 		the value can be accessed from an interrupt. */
2803:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
2804:..\..\FreeRTOS_Source/tasks.c **** 		{
2805:..\..\FreeRTOS_Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2806:..\..\FreeRTOS_Source/tasks.c **** 		}
2807:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
2808:..\..\FreeRTOS_Source/tasks.c **** 	}
2809:..\..\FreeRTOS_Source/tasks.c **** 
2810:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2812:..\..\FreeRTOS_Source/tasks.c **** 
2813:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:..\..\FreeRTOS_Source/tasks.c **** 
2815:..\..\FreeRTOS_Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2816:..\..\FreeRTOS_Source/tasks.c **** 	{
2817:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *xTCB;
2818:..\..\FreeRTOS_Source/tasks.c **** 	TaskHookFunction_t xReturn;
2819:..\..\FreeRTOS_Source/tasks.c **** 
2820:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2821:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask == NULL )
2822:..\..\FreeRTOS_Source/tasks.c **** 		{
2823:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:..\..\FreeRTOS_Source/tasks.c **** 		}
2825:..\..\FreeRTOS_Source/tasks.c **** 		else
2826:..\..\FreeRTOS_Source/tasks.c **** 		{
2827:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:..\..\FreeRTOS_Source/tasks.c **** 		}
2829:..\..\FreeRTOS_Source/tasks.c **** 
2830:..\..\FreeRTOS_Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2831:..\..\FreeRTOS_Source/tasks.c **** 		the value can be accessed from an interrupt. */
2832:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
2833:..\..\FreeRTOS_Source/tasks.c **** 		{
2834:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2835:..\..\FreeRTOS_Source/tasks.c **** 		}
2836:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
2837:..\..\FreeRTOS_Source/tasks.c **** 
2838:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2839:..\..\FreeRTOS_Source/tasks.c **** 	}
2840:..\..\FreeRTOS_Source/tasks.c **** 
2841:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 102
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 102
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 102
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 102
>>>>>>> parent of cb49844... test


2842:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2843:..\..\FreeRTOS_Source/tasks.c **** 
2844:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2845:..\..\FreeRTOS_Source/tasks.c **** 
2846:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2847:..\..\FreeRTOS_Source/tasks.c **** 	{
2848:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *xTCB;
2849:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
2850:..\..\FreeRTOS_Source/tasks.c **** 
2851:..\..\FreeRTOS_Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2852:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask == NULL )
2853:..\..\FreeRTOS_Source/tasks.c **** 		{
2854:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2855:..\..\FreeRTOS_Source/tasks.c **** 		}
2856:..\..\FreeRTOS_Source/tasks.c **** 		else
2857:..\..\FreeRTOS_Source/tasks.c **** 		{
2858:..\..\FreeRTOS_Source/tasks.c **** 			xTCB = xTask;
2859:..\..\FreeRTOS_Source/tasks.c **** 		}
2860:..\..\FreeRTOS_Source/tasks.c **** 
2861:..\..\FreeRTOS_Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2862:..\..\FreeRTOS_Source/tasks.c **** 		{
2863:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2864:..\..\FreeRTOS_Source/tasks.c **** 		}
2865:..\..\FreeRTOS_Source/tasks.c **** 		else
2866:..\..\FreeRTOS_Source/tasks.c **** 		{
2867:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdFAIL;
2868:..\..\FreeRTOS_Source/tasks.c **** 		}
2869:..\..\FreeRTOS_Source/tasks.c **** 
2870:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
2871:..\..\FreeRTOS_Source/tasks.c **** 	}
2872:..\..\FreeRTOS_Source/tasks.c **** 
2873:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2874:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2875:..\..\FreeRTOS_Source/tasks.c **** 
2876:..\..\FreeRTOS_Source/tasks.c **** void vTaskSwitchContext( void )
2877:..\..\FreeRTOS_Source/tasks.c **** {
 2661              		.loc 1 2877 0
 2662              		.cfi_startproc
 2663              		@ args = 0, pretend = 0, frame = 24
 2664              		@ frame_needed = 1, uses_anonymous_args = 0
 2665 0000 80B5     		push	{r7, lr}
 2666              		.cfi_def_cfa_offset 8
 2667              		.cfi_offset 7, -8
 2668              		.cfi_offset 14, -4
 2669 0002 86B0     		sub	sp, sp, #24
 2670              		.cfi_def_cfa_offset 32
 2671 0004 00AF     		add	r7, sp, #0
 2672              		.cfi_def_cfa_register 7
2878:..\..\FreeRTOS_Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2673              		.loc 1 2878 0
 2674 0006 2F4B     		ldr	r3, .L191
 2675 0008 1B68     		ldr	r3, [r3]
 2676 000a 002B     		cmp	r3, #0
 2677 000c 03D0     		beq	.L184
2879:..\..\FreeRTOS_Source/tasks.c **** 	{
2880:..\..\FreeRTOS_Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2881:..\..\FreeRTOS_Source/tasks.c **** 		switch. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 103
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 103
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 103
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 103
>>>>>>> parent of cb49844... test


2882:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdTRUE;
 2678              		.loc 1 2882 0
 2679 000e 2E4B     		ldr	r3, .L191+4
 2680 0010 0122     		movs	r2, #1
 2681 0012 1A60     		str	r2, [r3]
2883:..\..\FreeRTOS_Source/tasks.c **** 	}
2884:..\..\FreeRTOS_Source/tasks.c **** 	else
2885:..\..\FreeRTOS_Source/tasks.c **** 	{
2886:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdFALSE;
2887:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2888:..\..\FreeRTOS_Source/tasks.c **** 
2889:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2890:..\..\FreeRTOS_Source/tasks.c **** 		{
2891:..\..\FreeRTOS_Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/count
2892:..\..\FreeRTOS_Source/tasks.c **** 			PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution t
2893:..\..\FreeRTOS_Source/tasks.c **** 
2894:..\..\FreeRTOS_Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2895:..\..\FreeRTOS_Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2896:..\..\FreeRTOS_Source/tasks.c **** 				#else
2897:..\..\FreeRTOS_Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2898:..\..\FreeRTOS_Source/tasks.c **** 				#endif
2899:..\..\FreeRTOS_Source/tasks.c **** 
2900:..\..\FreeRTOS_Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2901:..\..\FreeRTOS_Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2902:..\..\FreeRTOS_Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2903:..\..\FreeRTOS_Source/tasks.c **** 				protection here so count values are only valid until the timer
2904:..\..\FreeRTOS_Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2905:..\..\FreeRTOS_Source/tasks.c **** 				against suspect run time stat counter implementations - which
2906:..\..\FreeRTOS_Source/tasks.c **** 				are provided by the application, not the kernel. */
2907:..\..\FreeRTOS_Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2908:..\..\FreeRTOS_Source/tasks.c **** 				{
2909:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2910:..\..\FreeRTOS_Source/tasks.c **** 				}
2911:..\..\FreeRTOS_Source/tasks.c **** 				else
2912:..\..\FreeRTOS_Source/tasks.c **** 				{
2913:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2914:..\..\FreeRTOS_Source/tasks.c **** 				}
2915:..\..\FreeRTOS_Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2916:..\..\FreeRTOS_Source/tasks.c **** 		}
2917:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2918:..\..\FreeRTOS_Source/tasks.c **** 
2919:..\..\FreeRTOS_Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2920:..\..\FreeRTOS_Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2921:..\..\FreeRTOS_Source/tasks.c **** 
2922:..\..\FreeRTOS_Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2923:..\..\FreeRTOS_Source/tasks.c **** 		optimised asm code. */
2924:..\..\FreeRTOS_Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
2925:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2926:..\..\FreeRTOS_Source/tasks.c **** 
2927:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2928:..\..\FreeRTOS_Source/tasks.c **** 		{
2929:..\..\FreeRTOS_Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2930:..\..\FreeRTOS_Source/tasks.c **** 			structure specific to this task. */
2931:..\..\FreeRTOS_Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2932:..\..\FreeRTOS_Source/tasks.c **** 		}
2933:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2934:..\..\FreeRTOS_Source/tasks.c **** 	}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 104
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 104
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 104
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 104
>>>>>>> parent of cb49844... test


2935:..\..\FreeRTOS_Source/tasks.c **** }
 2682              		.loc 1 2935 0
 2683 0014 51E0     		b	.L190
 2684              	.L184:
2886:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2685              		.loc 1 2886 0
 2686 0016 2C4B     		ldr	r3, .L191+4
 2687 0018 0022     		movs	r2, #0
 2688 001a 1A60     		str	r2, [r3]
 2689              	.LBB44:
2920:..\..\FreeRTOS_Source/tasks.c **** 
 2690              		.loc 1 2920 0
 2691 001c 2B4B     		ldr	r3, .L191+8
 2692 001e 1B68     		ldr	r3, [r3]
 2693 0020 1B6B     		ldr	r3, [r3, #48]
 2694 0022 7B61     		str	r3, [r7, #20]
 2695 0024 4FF0A533 		mov	r3, #-1515870811
 2696 0028 3B61     		str	r3, [r7, #16]
 2697 002a 7B69     		ldr	r3, [r7, #20]
 2698 002c 1A68     		ldr	r2, [r3]
 2699 002e 3B69     		ldr	r3, [r7, #16]
 2700 0030 9A42     		cmp	r2, r3
 2701 0032 11D1     		bne	.L186
2920:..\..\FreeRTOS_Source/tasks.c **** 
 2702              		.loc 1 2920 0 is_stmt 0 discriminator 2
 2703 0034 7B69     		ldr	r3, [r7, #20]
 2704 0036 0433     		adds	r3, r3, #4
 2705 0038 1A68     		ldr	r2, [r3]
 2706 003a 3B69     		ldr	r3, [r7, #16]
 2707 003c 9A42     		cmp	r2, r3
 2708 003e 0BD1     		bne	.L186
2920:..\..\FreeRTOS_Source/tasks.c **** 
 2709              		.loc 1 2920 0 discriminator 4
 2710 0040 7B69     		ldr	r3, [r7, #20]
 2711 0042 0833     		adds	r3, r3, #8
 2712 0044 1A68     		ldr	r2, [r3]
 2713 0046 3B69     		ldr	r3, [r7, #16]
 2714 0048 9A42     		cmp	r2, r3
 2715 004a 05D1     		bne	.L186
2920:..\..\FreeRTOS_Source/tasks.c **** 
 2716              		.loc 1 2920 0 discriminator 6
 2717 004c 7B69     		ldr	r3, [r7, #20]
 2718 004e 0C33     		adds	r3, r3, #12
 2719 0050 1A68     		ldr	r2, [r3]
 2720 0052 3B69     		ldr	r3, [r7, #16]
 2721 0054 9A42     		cmp	r2, r3
 2722 0056 08D0     		beq	.L187
 2723              	.L186:
2920:..\..\FreeRTOS_Source/tasks.c **** 
 2724              		.loc 1 2920 0 discriminator 7
 2725 0058 1C4B     		ldr	r3, .L191+8
 2726 005a 1A68     		ldr	r2, [r3]
 2727 005c 1B4B     		ldr	r3, .L191+8
 2728 005e 1B68     		ldr	r3, [r3]
 2729 0060 3433     		adds	r3, r3, #52
 2730 0062 1946     		mov	r1, r3
 2731 0064 1046     		mov	r0, r2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 105
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 105
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 105
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 105
>>>>>>> parent of cb49844... test


 2732 0066 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2733              	.L187:
 2734              	.LBE44:
 2735              	.LBB45:
2924:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2736              		.loc 1 2924 0 is_stmt 1
 2737 006a 194B     		ldr	r3, .L191+12
 2738 006c 1B68     		ldr	r3, [r3]
 2739 006e 7B60     		str	r3, [r7, #4]
 2740              	.LBB46:
 2741              	.LBB47:
 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 2742              		.loc 2 134 0
 2743 0070 7B68     		ldr	r3, [r7, #4]
 2744              		.syntax unified
 2745              	@ 134 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2746 0072 B3FA83F3 		clz r3, r3
 2747              	@ 0 "" 2
 2748              		.thumb
 2749              		.syntax unified
 2750 0076 FB70     		strb	r3, [r7, #3]
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 2751              		.loc 2 135 0
 2752 0078 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2753              	.LBE47:
 2754              	.LBE46:
2924:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2755              		.loc 1 2924 0
 2756 007a C3F11F03 		rsb	r3, r3, #31
 2757 007e FB60     		str	r3, [r7, #12]
 2758              	.LBB48:
 2759 0080 FA68     		ldr	r2, [r7, #12]
 2760 0082 1346     		mov	r3, r2
 2761 0084 9B00     		lsls	r3, r3, #2
 2762 0086 1344     		add	r3, r3, r2
 2763 0088 9B00     		lsls	r3, r3, #2
 2764 008a 124A     		ldr	r2, .L191+16
 2765 008c 1344     		add	r3, r3, r2
 2766 008e BB60     		str	r3, [r7, #8]
 2767 0090 BB68     		ldr	r3, [r7, #8]
 2768 0092 5B68     		ldr	r3, [r3, #4]
 2769 0094 5A68     		ldr	r2, [r3, #4]
 2770 0096 BB68     		ldr	r3, [r7, #8]
 2771 0098 5A60     		str	r2, [r3, #4]
 2772 009a BB68     		ldr	r3, [r7, #8]
 2773 009c 5A68     		ldr	r2, [r3, #4]
 2774 009e BB68     		ldr	r3, [r7, #8]
 2775 00a0 0833     		adds	r3, r3, #8
 2776 00a2 9A42     		cmp	r2, r3
 2777 00a4 04D1     		bne	.L189
2924:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2778              		.loc 1 2924 0 is_stmt 0 discriminator 1
 2779 00a6 BB68     		ldr	r3, [r7, #8]
 2780 00a8 5B68     		ldr	r3, [r3, #4]
 2781 00aa 5A68     		ldr	r2, [r3, #4]
 2782 00ac BB68     		ldr	r3, [r7, #8]
 2783 00ae 5A60     		str	r2, [r3, #4]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 106
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 106
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 106
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 106
>>>>>>> parent of cb49844... test


 2784              	.L189:
2924:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2785              		.loc 1 2924 0 discriminator 3
 2786 00b0 BB68     		ldr	r3, [r7, #8]
 2787 00b2 5B68     		ldr	r3, [r3, #4]
 2788 00b4 DB68     		ldr	r3, [r3, #12]
 2789 00b6 054A     		ldr	r2, .L191+8
 2790 00b8 1360     		str	r3, [r2]
 2791              	.L190:
 2792              	.LBE48:
 2793              	.LBE45:
 2794              		.loc 1 2935 0 is_stmt 1
 2795 00ba 00BF     		nop
 2796 00bc 1837     		adds	r7, r7, #24
 2797              		.cfi_def_cfa_offset 8
 2798 00be BD46     		mov	sp, r7
 2799              		.cfi_def_cfa_register 13
 2800              		@ sp needed
 2801 00c0 80BD     		pop	{r7, pc}
 2802              	.L192:
 2803 00c2 00BF     		.align	2
 2804              	.L191:
 2805 00c4 D8000000 		.word	uxSchedulerSuspended
 2806 00c8 C4000000 		.word	xYieldPending
 2807 00cc 00000000 		.word	pxCurrentTCB
 2808 00d0 B8000000 		.word	uxTopReadyPriority
 2809 00d4 04000000 		.word	pxReadyTasksLists
 2810              		.cfi_endproc
 2811              	.LFE91:
 2812              		.size	vTaskSwitchContext, .-vTaskSwitchContext
 2813              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2814              		.align	2
 2815              		.global	vTaskPlaceOnEventList
 2816              		.thumb
 2817              		.thumb_func
 2818              		.type	vTaskPlaceOnEventList, %function
 2819              	vTaskPlaceOnEventList:
 2820              	.LFB92:
2936:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2937:..\..\FreeRTOS_Source/tasks.c **** 
2938:..\..\FreeRTOS_Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2939:..\..\FreeRTOS_Source/tasks.c **** {
 2821              		.loc 1 2939 0
 2822              		.cfi_startproc
 2823              		@ args = 0, pretend = 0, frame = 8
 2824              		@ frame_needed = 1, uses_anonymous_args = 0
 2825 0000 80B5     		push	{r7, lr}
 2826              		.cfi_def_cfa_offset 8
 2827              		.cfi_offset 7, -8
 2828              		.cfi_offset 14, -4
 2829 0002 82B0     		sub	sp, sp, #8
 2830              		.cfi_def_cfa_offset 16
 2831 0004 00AF     		add	r7, sp, #0
 2832              		.cfi_def_cfa_register 7
 2833 0006 7860     		str	r0, [r7, #4]
 2834 0008 3960     		str	r1, [r7]
2940:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxEventList );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 107
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 107
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 107
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 107
>>>>>>> parent of cb49844... test


2941:..\..\FreeRTOS_Source/tasks.c **** 
2942:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2943:..\..\FreeRTOS_Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2944:..\..\FreeRTOS_Source/tasks.c **** 
2945:..\..\FreeRTOS_Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2946:..\..\FreeRTOS_Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2947:..\..\FreeRTOS_Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2948:..\..\FreeRTOS_Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2949:..\..\FreeRTOS_Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2835              		.loc 1 2949 0
 2836 000a 074B     		ldr	r3, .L194
 2837 000c 1B68     		ldr	r3, [r3]
 2838 000e 1833     		adds	r3, r3, #24
 2839 0010 1946     		mov	r1, r3
 2840 0012 7868     		ldr	r0, [r7, #4]
 2841 0014 FFF7FEFF 		bl	vListInsert
2950:..\..\FreeRTOS_Source/tasks.c **** 
2951:..\..\FreeRTOS_Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2842              		.loc 1 2951 0
 2843 0018 0121     		movs	r1, #1
 2844 001a 3868     		ldr	r0, [r7]
 2845 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2952:..\..\FreeRTOS_Source/tasks.c **** }
 2846              		.loc 1 2952 0
 2847 0020 00BF     		nop
 2848 0022 0837     		adds	r7, r7, #8
 2849              		.cfi_def_cfa_offset 8
 2850 0024 BD46     		mov	sp, r7
 2851              		.cfi_def_cfa_register 13
 2852              		@ sp needed
 2853 0026 80BD     		pop	{r7, pc}
 2854              	.L195:
 2855              		.align	2
 2856              	.L194:
 2857 0028 00000000 		.word	pxCurrentTCB
 2858              		.cfi_endproc
 2859              	.LFE92:
 2860              		.size	vTaskPlaceOnEventList, .-vTaskPlaceOnEventList
 2861              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2862              		.align	2
 2863              		.global	vTaskPlaceOnUnorderedEventList
 2864              		.thumb
 2865              		.thumb_func
 2866              		.type	vTaskPlaceOnUnorderedEventList, %function
 2867              	vTaskPlaceOnUnorderedEventList:
 2868              	.LFB93:
2953:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2954:..\..\FreeRTOS_Source/tasks.c **** 
2955:..\..\FreeRTOS_Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2956:..\..\FreeRTOS_Source/tasks.c **** {
 2869              		.loc 1 2956 0
 2870              		.cfi_startproc
 2871              		@ args = 0, pretend = 0, frame = 16
 2872              		@ frame_needed = 1, uses_anonymous_args = 0
 2873 0000 80B5     		push	{r7, lr}
 2874              		.cfi_def_cfa_offset 8
 2875              		.cfi_offset 7, -8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 108
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 108
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 108
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 108
>>>>>>> parent of cb49844... test


 2876              		.cfi_offset 14, -4
 2877 0002 84B0     		sub	sp, sp, #16
 2878              		.cfi_def_cfa_offset 24
 2879 0004 00AF     		add	r7, sp, #0
 2880              		.cfi_def_cfa_register 7
 2881 0006 F860     		str	r0, [r7, #12]
 2882 0008 B960     		str	r1, [r7, #8]
 2883 000a 7A60     		str	r2, [r7, #4]
2957:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxEventList );
2958:..\..\FreeRTOS_Source/tasks.c **** 
2959:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2960:..\..\FreeRTOS_Source/tasks.c **** 	the event groups implementation. */
2961:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2962:..\..\FreeRTOS_Source/tasks.c **** 
2963:..\..\FreeRTOS_Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2964:..\..\FreeRTOS_Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2965:..\..\FreeRTOS_Source/tasks.c **** 	task that is not in the Blocked state. */
2966:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 2884              		.loc 1 2966 0
 2885 000c 0A4B     		ldr	r3, .L197
 2886 000e 1B68     		ldr	r3, [r3]
 2887 0010 BA68     		ldr	r2, [r7, #8]
 2888 0012 42F00042 		orr	r2, r2, #-2147483648
 2889 0016 9A61     		str	r2, [r3, #24]
2967:..\..\FreeRTOS_Source/tasks.c **** 
2968:..\..\FreeRTOS_Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2969:..\..\FreeRTOS_Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2970:..\..\FreeRTOS_Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2971:..\..\FreeRTOS_Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2972:..\..\FreeRTOS_Source/tasks.c **** 	the task level). */
2973:..\..\FreeRTOS_Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 2890              		.loc 1 2973 0
 2891 0018 074B     		ldr	r3, .L197
 2892 001a 1B68     		ldr	r3, [r3]
 2893 001c 1833     		adds	r3, r3, #24
 2894 001e 1946     		mov	r1, r3
 2895 0020 F868     		ldr	r0, [r7, #12]
 2896 0022 FFF7FEFF 		bl	vListInsertEnd
2974:..\..\FreeRTOS_Source/tasks.c **** 
2975:..\..\FreeRTOS_Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 2897              		.loc 1 2975 0
 2898 0026 0121     		movs	r1, #1
 2899 0028 7868     		ldr	r0, [r7, #4]
 2900 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
2976:..\..\FreeRTOS_Source/tasks.c **** }
 2901              		.loc 1 2976 0
 2902 002e 00BF     		nop
 2903 0030 1037     		adds	r7, r7, #16
 2904              		.cfi_def_cfa_offset 8
 2905 0032 BD46     		mov	sp, r7
 2906              		.cfi_def_cfa_register 13
 2907              		@ sp needed
 2908 0034 80BD     		pop	{r7, pc}
 2909              	.L198:
 2910 0036 00BF     		.align	2
 2911              	.L197:
 2912 0038 00000000 		.word	pxCurrentTCB
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 109
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 109
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 109
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 109
>>>>>>> parent of cb49844... test


 2913              		.cfi_endproc
 2914              	.LFE93:
 2915              		.size	vTaskPlaceOnUnorderedEventList, .-vTaskPlaceOnUnorderedEventList
 2916              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2917              		.align	2
 2918              		.global	xTaskRemoveFromEventList
 2919              		.thumb
 2920              		.thumb_func
 2921              		.type	xTaskRemoveFromEventList, %function
 2922              	xTaskRemoveFromEventList:
 2923              	.LFB94:
2977:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
2978:..\..\FreeRTOS_Source/tasks.c **** 
2979:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2980:..\..\FreeRTOS_Source/tasks.c **** 
2981:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2982:..\..\FreeRTOS_Source/tasks.c **** 	{
2983:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( pxEventList );
2984:..\..\FreeRTOS_Source/tasks.c **** 
2985:..\..\FreeRTOS_Source/tasks.c **** 		/* This function should not be called by application code hence the
2986:..\..\FreeRTOS_Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2987:..\..\FreeRTOS_Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2988:..\..\FreeRTOS_Source/tasks.c **** 		it should be called with the scheduler suspended. */
2989:..\..\FreeRTOS_Source/tasks.c **** 
2990:..\..\FreeRTOS_Source/tasks.c **** 
2991:..\..\FreeRTOS_Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2992:..\..\FreeRTOS_Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2993:..\..\FreeRTOS_Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2994:..\..\FreeRTOS_Source/tasks.c **** 		can be used in place of vListInsert. */
2995:..\..\FreeRTOS_Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2996:..\..\FreeRTOS_Source/tasks.c **** 
2997:..\..\FreeRTOS_Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2998:..\..\FreeRTOS_Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2999:..\..\FreeRTOS_Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3000:..\..\FreeRTOS_Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3001:..\..\FreeRTOS_Source/tasks.c **** 		{
3002:..\..\FreeRTOS_Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3003:..\..\FreeRTOS_Source/tasks.c **** 		}
3004:..\..\FreeRTOS_Source/tasks.c **** 
3005:..\..\FreeRTOS_Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3006:..\..\FreeRTOS_Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3007:..\..\FreeRTOS_Source/tasks.c **** 	}
3008:..\..\FreeRTOS_Source/tasks.c **** 
3009:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TIMERS */
3010:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3011:..\..\FreeRTOS_Source/tasks.c **** 
3012:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3013:..\..\FreeRTOS_Source/tasks.c **** {
 2924              		.loc 1 3013 0
 2925              		.cfi_startproc
 2926              		@ args = 0, pretend = 0, frame = 16
 2927              		@ frame_needed = 1, uses_anonymous_args = 0
 2928 0000 80B5     		push	{r7, lr}
 2929              		.cfi_def_cfa_offset 8
 2930              		.cfi_offset 7, -8
 2931              		.cfi_offset 14, -4
 2932 0002 84B0     		sub	sp, sp, #16
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 110
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 110
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 110
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 110
>>>>>>> parent of cb49844... test


 2933              		.cfi_def_cfa_offset 24
 2934 0004 00AF     		add	r7, sp, #0
 2935              		.cfi_def_cfa_register 7
 2936 0006 7860     		str	r0, [r7, #4]
3014:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxUnblockedTCB;
3015:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xReturn;
3016:..\..\FreeRTOS_Source/tasks.c **** 
3017:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3018:..\..\FreeRTOS_Source/tasks.c **** 	called from a critical section within an ISR. */
3019:..\..\FreeRTOS_Source/tasks.c **** 
3020:..\..\FreeRTOS_Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3021:..\..\FreeRTOS_Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3022:..\..\FreeRTOS_Source/tasks.c **** 	the delayed list, and add it to the ready list.
3023:..\..\FreeRTOS_Source/tasks.c **** 
3024:..\..\FreeRTOS_Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3025:..\..\FreeRTOS_Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3026:..\..\FreeRTOS_Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3027:..\..\FreeRTOS_Source/tasks.c **** 
3028:..\..\FreeRTOS_Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3029:..\..\FreeRTOS_Source/tasks.c **** 	pxEventList is not empty. */
3030:..\..\FreeRTOS_Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 2937              		.loc 1 3030 0
 2938 0008 7B68     		ldr	r3, [r7, #4]
 2939 000a DB68     		ldr	r3, [r3, #12]
 2940 000c DB68     		ldr	r3, [r3, #12]
 2941 000e BB60     		str	r3, [r7, #8]
3031:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3032:..\..\FreeRTOS_Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2942              		.loc 1 3032 0
 2943 0010 BB68     		ldr	r3, [r7, #8]
 2944 0012 1833     		adds	r3, r3, #24
 2945 0014 1846     		mov	r0, r3
 2946 0016 FFF7FEFF 		bl	uxListRemove
3033:..\..\FreeRTOS_Source/tasks.c **** 
3034:..\..\FreeRTOS_Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2947              		.loc 1 3034 0
 2948 001a 1D4B     		ldr	r3, .L205
 2949 001c 1B68     		ldr	r3, [r3]
 2950 001e 002B     		cmp	r3, #0
 2951 0020 1CD1     		bne	.L200
3035:..\..\FreeRTOS_Source/tasks.c **** 	{
3036:..\..\FreeRTOS_Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 2952              		.loc 1 3036 0
 2953 0022 BB68     		ldr	r3, [r7, #8]
 2954 0024 0433     		adds	r3, r3, #4
 2955 0026 1846     		mov	r0, r3
 2956 0028 FFF7FEFF 		bl	uxListRemove
3037:..\..\FreeRTOS_Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2957              		.loc 1 3037 0
 2958 002c BB68     		ldr	r3, [r7, #8]
 2959 002e DB6A     		ldr	r3, [r3, #44]
 2960 0030 0122     		movs	r2, #1
 2961 0032 9A40     		lsls	r2, r2, r3
 2962 0034 174B     		ldr	r3, .L205+4
 2963 0036 1B68     		ldr	r3, [r3]
 2964 0038 1343     		orrs	r3, r3, r2
 2965 003a 164A     		ldr	r2, .L205+4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 111
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 111
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 111
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 111
>>>>>>> parent of cb49844... test


 2966 003c 1360     		str	r3, [r2]
 2967 003e BB68     		ldr	r3, [r7, #8]
 2968 0040 DA6A     		ldr	r2, [r3, #44]
 2969 0042 1346     		mov	r3, r2
 2970 0044 9B00     		lsls	r3, r3, #2
 2971 0046 1344     		add	r3, r3, r2
 2972 0048 9B00     		lsls	r3, r3, #2
 2973 004a 134A     		ldr	r2, .L205+8
 2974 004c 1A44     		add	r2, r2, r3
 2975 004e BB68     		ldr	r3, [r7, #8]
 2976 0050 0433     		adds	r3, r3, #4
 2977 0052 1946     		mov	r1, r3
 2978 0054 1046     		mov	r0, r2
 2979 0056 FFF7FEFF 		bl	vListInsertEnd
 2980 005a 05E0     		b	.L201
 2981              	.L200:
3038:..\..\FreeRTOS_Source/tasks.c **** 	}
3039:..\..\FreeRTOS_Source/tasks.c **** 	else
3040:..\..\FreeRTOS_Source/tasks.c **** 	{
3041:..\..\FreeRTOS_Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3042:..\..\FreeRTOS_Source/tasks.c **** 		pending until the scheduler is resumed. */
3043:..\..\FreeRTOS_Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 2982              		.loc 1 3043 0
 2983 005c BB68     		ldr	r3, [r7, #8]
 2984 005e 1833     		adds	r3, r3, #24
 2985 0060 1946     		mov	r1, r3
 2986 0062 0E48     		ldr	r0, .L205+12
 2987 0064 FFF7FEFF 		bl	vListInsertEnd
 2988              	.L201:
3044:..\..\FreeRTOS_Source/tasks.c **** 	}
3045:..\..\FreeRTOS_Source/tasks.c **** 
3046:..\..\FreeRTOS_Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 2989              		.loc 1 3046 0
 2990 0068 BB68     		ldr	r3, [r7, #8]
 2991 006a DA6A     		ldr	r2, [r3, #44]
 2992 006c 0C4B     		ldr	r3, .L205+16
 2993 006e 1B68     		ldr	r3, [r3]
 2994 0070 DB6A     		ldr	r3, [r3, #44]
 2995 0072 9A42     		cmp	r2, r3
 2996 0074 05D9     		bls	.L202
3047:..\..\FreeRTOS_Source/tasks.c **** 	{
3048:..\..\FreeRTOS_Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3049:..\..\FreeRTOS_Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3050:..\..\FreeRTOS_Source/tasks.c **** 		it should force a context switch now. */
3051:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = pdTRUE;
 2997              		.loc 1 3051 0
 2998 0076 0123     		movs	r3, #1
 2999 0078 FB60     		str	r3, [r7, #12]
3052:..\..\FreeRTOS_Source/tasks.c **** 
3053:..\..\FreeRTOS_Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3054:..\..\FreeRTOS_Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3055:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdTRUE;
 3000              		.loc 1 3055 0
 3001 007a 0A4B     		ldr	r3, .L205+20
 3002 007c 0122     		movs	r2, #1
 3003 007e 1A60     		str	r2, [r3]
 3004 0080 01E0     		b	.L203
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 112
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 112
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 112
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 112
>>>>>>> parent of cb49844... test


 3005              	.L202:
3056:..\..\FreeRTOS_Source/tasks.c **** 	}
3057:..\..\FreeRTOS_Source/tasks.c **** 	else
3058:..\..\FreeRTOS_Source/tasks.c **** 	{
3059:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = pdFALSE;
 3006              		.loc 1 3059 0
 3007 0082 0023     		movs	r3, #0
 3008 0084 FB60     		str	r3, [r7, #12]
 3009              	.L203:
3060:..\..\FreeRTOS_Source/tasks.c **** 	}
3061:..\..\FreeRTOS_Source/tasks.c **** 
3062:..\..\FreeRTOS_Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3063:..\..\FreeRTOS_Source/tasks.c **** 	{
3064:..\..\FreeRTOS_Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3065:..\..\FreeRTOS_Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3066:..\..\FreeRTOS_Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3067:..\..\FreeRTOS_Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3068:..\..\FreeRTOS_Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3069:..\..\FreeRTOS_Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3070:..\..\FreeRTOS_Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3071:..\..\FreeRTOS_Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3072:..\..\FreeRTOS_Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3073:..\..\FreeRTOS_Source/tasks.c **** 	}
3074:..\..\FreeRTOS_Source/tasks.c **** 	#endif
3075:..\..\FreeRTOS_Source/tasks.c **** 
3076:..\..\FreeRTOS_Source/tasks.c **** 	return xReturn;
 3010              		.loc 1 3076 0
 3011 0086 FB68     		ldr	r3, [r7, #12]
3077:..\..\FreeRTOS_Source/tasks.c **** }
 3012              		.loc 1 3077 0
 3013 0088 1846     		mov	r0, r3
 3014 008a 1037     		adds	r7, r7, #16
 3015              		.cfi_def_cfa_offset 8
 3016 008c BD46     		mov	sp, r7
 3017              		.cfi_def_cfa_register 13
 3018              		@ sp needed
 3019 008e 80BD     		pop	{r7, pc}
 3020              	.L206:
 3021              		.align	2
 3022              	.L205:
 3023 0090 D8000000 		.word	uxSchedulerSuspended
 3024 0094 B8000000 		.word	uxTopReadyPriority
 3025 0098 04000000 		.word	pxReadyTasksLists
 3026 009c 70000000 		.word	xPendingReadyList
 3027 00a0 00000000 		.word	pxCurrentTCB
 3028 00a4 C4000000 		.word	xYieldPending
 3029              		.cfi_endproc
 3030              	.LFE94:
 3031              		.size	xTaskRemoveFromEventList, .-xTaskRemoveFromEventList
 3032              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3033              		.align	2
 3034              		.global	vTaskRemoveFromUnorderedEventList
 3035              		.thumb
 3036              		.thumb_func
 3037              		.type	vTaskRemoveFromUnorderedEventList, %function
 3038              	vTaskRemoveFromUnorderedEventList:
 3039              	.LFB95:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 113
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 113
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 113
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 113
>>>>>>> parent of cb49844... test


3078:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3079:..\..\FreeRTOS_Source/tasks.c **** 
3080:..\..\FreeRTOS_Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3081:..\..\FreeRTOS_Source/tasks.c **** {
 3040              		.loc 1 3081 0
 3041              		.cfi_startproc
 3042              		@ args = 0, pretend = 0, frame = 16
 3043              		@ frame_needed = 1, uses_anonymous_args = 0
 3044 0000 80B5     		push	{r7, lr}
 3045              		.cfi_def_cfa_offset 8
 3046              		.cfi_offset 7, -8
 3047              		.cfi_offset 14, -4
 3048 0002 84B0     		sub	sp, sp, #16
 3049              		.cfi_def_cfa_offset 24
 3050 0004 00AF     		add	r7, sp, #0
 3051              		.cfi_def_cfa_register 7
 3052 0006 7860     		str	r0, [r7, #4]
 3053 0008 3960     		str	r1, [r7]
3082:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxUnblockedTCB;
3083:..\..\FreeRTOS_Source/tasks.c **** 
3084:..\..\FreeRTOS_Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3085:..\..\FreeRTOS_Source/tasks.c **** 	the event flags implementation. */
3086:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3087:..\..\FreeRTOS_Source/tasks.c **** 
3088:..\..\FreeRTOS_Source/tasks.c **** 	/* Store the new item value in the event list. */
3089:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 3054              		.loc 1 3089 0
 3055 000a 3B68     		ldr	r3, [r7]
 3056 000c 43F00042 		orr	r2, r3, #-2147483648
 3057 0010 7B68     		ldr	r3, [r7, #4]
 3058 0012 1A60     		str	r2, [r3]
3090:..\..\FreeRTOS_Source/tasks.c **** 
3091:..\..\FreeRTOS_Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3092:..\..\FreeRTOS_Source/tasks.c **** 	event flags. */
3093:..\..\FreeRTOS_Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 3059              		.loc 1 3093 0
 3060 0014 7B68     		ldr	r3, [r7, #4]
 3061 0016 DB68     		ldr	r3, [r3, #12]
 3062 0018 FB60     		str	r3, [r7, #12]
3094:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3095:..\..\FreeRTOS_Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3063              		.loc 1 3095 0
 3064 001a 7868     		ldr	r0, [r7, #4]
 3065 001c FFF7FEFF 		bl	uxListRemove
3096:..\..\FreeRTOS_Source/tasks.c **** 
3097:..\..\FreeRTOS_Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3098:..\..\FreeRTOS_Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3099:..\..\FreeRTOS_Source/tasks.c **** 	lists. */
3100:..\..\FreeRTOS_Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 3066              		.loc 1 3100 0
 3067 0020 FB68     		ldr	r3, [r7, #12]
 3068 0022 0433     		adds	r3, r3, #4
 3069 0024 1846     		mov	r0, r3
 3070 0026 FFF7FEFF 		bl	uxListRemove
3101:..\..\FreeRTOS_Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3071              		.loc 1 3101 0
 3072 002a FB68     		ldr	r3, [r7, #12]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 114
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 114
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 114
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 114
>>>>>>> parent of cb49844... test


 3073 002c DB6A     		ldr	r3, [r3, #44]
 3074 002e 0122     		movs	r2, #1
 3075 0030 9A40     		lsls	r2, r2, r3
 3076 0032 104B     		ldr	r3, .L210
 3077 0034 1B68     		ldr	r3, [r3]
 3078 0036 1343     		orrs	r3, r3, r2
 3079 0038 0E4A     		ldr	r2, .L210
 3080 003a 1360     		str	r3, [r2]
 3081 003c FB68     		ldr	r3, [r7, #12]
 3082 003e DA6A     		ldr	r2, [r3, #44]
 3083 0040 1346     		mov	r3, r2
 3084 0042 9B00     		lsls	r3, r3, #2
 3085 0044 1344     		add	r3, r3, r2
 3086 0046 9B00     		lsls	r3, r3, #2
 3087 0048 0B4A     		ldr	r2, .L210+4
 3088 004a 1A44     		add	r2, r2, r3
 3089 004c FB68     		ldr	r3, [r7, #12]
 3090 004e 0433     		adds	r3, r3, #4
 3091 0050 1946     		mov	r1, r3
 3092 0052 1046     		mov	r0, r2
 3093 0054 FFF7FEFF 		bl	vListInsertEnd
3102:..\..\FreeRTOS_Source/tasks.c **** 
3103:..\..\FreeRTOS_Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 3094              		.loc 1 3103 0
 3095 0058 FB68     		ldr	r3, [r7, #12]
 3096 005a DA6A     		ldr	r2, [r3, #44]
 3097 005c 074B     		ldr	r3, .L210+8
 3098 005e 1B68     		ldr	r3, [r3]
 3099 0060 DB6A     		ldr	r3, [r3, #44]
 3100 0062 9A42     		cmp	r2, r3
 3101 0064 02D9     		bls	.L209
3104:..\..\FreeRTOS_Source/tasks.c **** 	{
3105:..\..\FreeRTOS_Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3106:..\..\FreeRTOS_Source/tasks.c **** 		a context switch is required.  This function is called with the
3107:..\..\FreeRTOS_Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3108:..\..\FreeRTOS_Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3109:..\..\FreeRTOS_Source/tasks.c **** 		xYieldPending = pdTRUE;
 3102              		.loc 1 3109 0
 3103 0066 064B     		ldr	r3, .L210+12
 3104 0068 0122     		movs	r2, #1
 3105 006a 1A60     		str	r2, [r3]
 3106              	.L209:
3110:..\..\FreeRTOS_Source/tasks.c **** 	}
3111:..\..\FreeRTOS_Source/tasks.c **** }
 3107              		.loc 1 3111 0
 3108 006c 00BF     		nop
 3109 006e 1037     		adds	r7, r7, #16
 3110              		.cfi_def_cfa_offset 8
 3111 0070 BD46     		mov	sp, r7
 3112              		.cfi_def_cfa_register 13
 3113              		@ sp needed
 3114 0072 80BD     		pop	{r7, pc}
 3115              	.L211:
 3116              		.align	2
 3117              	.L210:
 3118 0074 B8000000 		.word	uxTopReadyPriority
 3119 0078 04000000 		.word	pxReadyTasksLists
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 115
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 115
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 115
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 115
>>>>>>> parent of cb49844... test


 3120 007c 00000000 		.word	pxCurrentTCB
 3121 0080 C4000000 		.word	xYieldPending
 3122              		.cfi_endproc
 3123              	.LFE95:
 3124              		.size	vTaskRemoveFromUnorderedEventList, .-vTaskRemoveFromUnorderedEventList
 3125              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3126              		.align	2
 3127              		.global	vTaskSetTimeOutState
 3128              		.thumb
 3129              		.thumb_func
 3130              		.type	vTaskSetTimeOutState, %function
 3131              	vTaskSetTimeOutState:
 3132              	.LFB96:
3112:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3113:..\..\FreeRTOS_Source/tasks.c **** 
3114:..\..\FreeRTOS_Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3115:..\..\FreeRTOS_Source/tasks.c **** {
 3133              		.loc 1 3115 0
 3134              		.cfi_startproc
 3135              		@ args = 0, pretend = 0, frame = 8
 3136              		@ frame_needed = 1, uses_anonymous_args = 0
 3137 0000 80B5     		push	{r7, lr}
 3138              		.cfi_def_cfa_offset 8
 3139              		.cfi_offset 7, -8
 3140              		.cfi_offset 14, -4
 3141 0002 82B0     		sub	sp, sp, #8
 3142              		.cfi_def_cfa_offset 16
 3143 0004 00AF     		add	r7, sp, #0
 3144              		.cfi_def_cfa_register 7
 3145 0006 7860     		str	r0, [r7, #4]
3116:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTimeOut );
3117:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 3146              		.loc 1 3117 0
 3147 0008 FFF7FEFF 		bl	vPortEnterCritical
3118:..\..\FreeRTOS_Source/tasks.c **** 	{
3119:..\..\FreeRTOS_Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 3148              		.loc 1 3119 0
 3149 000c 064B     		ldr	r3, .L213
 3150 000e 1A68     		ldr	r2, [r3]
 3151 0010 7B68     		ldr	r3, [r7, #4]
 3152 0012 1A60     		str	r2, [r3]
3120:..\..\FreeRTOS_Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3153              		.loc 1 3120 0
 3154 0014 054B     		ldr	r3, .L213+4
 3155 0016 1A68     		ldr	r2, [r3]
 3156 0018 7B68     		ldr	r3, [r7, #4]
 3157 001a 5A60     		str	r2, [r3, #4]
3121:..\..\FreeRTOS_Source/tasks.c **** 	}
3122:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
 3158              		.loc 1 3122 0
 3159 001c FFF7FEFF 		bl	vPortExitCritical
3123:..\..\FreeRTOS_Source/tasks.c **** }
 3160              		.loc 1 3123 0
 3161 0020 00BF     		nop
 3162 0022 0837     		adds	r7, r7, #8
 3163              		.cfi_def_cfa_offset 8
 3164 0024 BD46     		mov	sp, r7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 116
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 116
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 116
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 116
>>>>>>> parent of cb49844... test


 3165              		.cfi_def_cfa_register 13
 3166              		@ sp needed
 3167 0026 80BD     		pop	{r7, pc}
 3168              	.L214:
 3169              		.align	2
 3170              	.L213:
 3171 0028 C8000000 		.word	xNumOfOverflows
 3172 002c B4000000 		.word	xTickCount
 3173              		.cfi_endproc
 3174              	.LFE96:
 3175              		.size	vTaskSetTimeOutState, .-vTaskSetTimeOutState
 3176              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3177              		.align	2
 3178              		.global	vTaskInternalSetTimeOutState
 3179              		.thumb
 3180              		.thumb_func
 3181              		.type	vTaskInternalSetTimeOutState, %function
 3182              	vTaskInternalSetTimeOutState:
 3183              	.LFB97:
3124:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3125:..\..\FreeRTOS_Source/tasks.c **** 
3126:..\..\FreeRTOS_Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3127:..\..\FreeRTOS_Source/tasks.c **** {
 3184              		.loc 1 3127 0
 3185              		.cfi_startproc
 3186              		@ args = 0, pretend = 0, frame = 8
 3187              		@ frame_needed = 1, uses_anonymous_args = 0
 3188              		@ link register save eliminated.
 3189 0000 80B4     		push	{r7}
 3190              		.cfi_def_cfa_offset 4
 3191              		.cfi_offset 7, -4
 3192 0002 83B0     		sub	sp, sp, #12
 3193              		.cfi_def_cfa_offset 16
 3194 0004 00AF     		add	r7, sp, #0
 3195              		.cfi_def_cfa_register 7
 3196 0006 7860     		str	r0, [r7, #4]
3128:..\..\FreeRTOS_Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3129:..\..\FreeRTOS_Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3197              		.loc 1 3129 0
 3198 0008 064B     		ldr	r3, .L216
 3199 000a 1A68     		ldr	r2, [r3]
 3200 000c 7B68     		ldr	r3, [r7, #4]
 3201 000e 1A60     		str	r2, [r3]
3130:..\..\FreeRTOS_Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3202              		.loc 1 3130 0
 3203 0010 054B     		ldr	r3, .L216+4
 3204 0012 1A68     		ldr	r2, [r3]
 3205 0014 7B68     		ldr	r3, [r7, #4]
 3206 0016 5A60     		str	r2, [r3, #4]
3131:..\..\FreeRTOS_Source/tasks.c **** }
 3207              		.loc 1 3131 0
 3208 0018 00BF     		nop
 3209 001a 0C37     		adds	r7, r7, #12
 3210              		.cfi_def_cfa_offset 4
 3211 001c BD46     		mov	sp, r7
 3212              		.cfi_def_cfa_register 13
 3213              		@ sp needed
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 117
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 117
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 117
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 117
>>>>>>> parent of cb49844... test


 3214 001e 80BC     		pop	{r7}
 3215              		.cfi_restore 7
 3216              		.cfi_def_cfa_offset 0
 3217 0020 7047     		bx	lr
 3218              	.L217:
 3219 0022 00BF     		.align	2
 3220              	.L216:
 3221 0024 C8000000 		.word	xNumOfOverflows
 3222 0028 B4000000 		.word	xTickCount
 3223              		.cfi_endproc
 3224              	.LFE97:
 3225              		.size	vTaskInternalSetTimeOutState, .-vTaskInternalSetTimeOutState
 3226              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3227              		.align	2
 3228              		.global	xTaskCheckForTimeOut
 3229              		.thumb
 3230              		.thumb_func
 3231              		.type	xTaskCheckForTimeOut, %function
 3232              	xTaskCheckForTimeOut:
 3233              	.LFB98:
3132:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3133:..\..\FreeRTOS_Source/tasks.c **** 
3134:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3135:..\..\FreeRTOS_Source/tasks.c **** {
 3234              		.loc 1 3135 0
 3235              		.cfi_startproc
 3236              		@ args = 0, pretend = 0, frame = 24
 3237              		@ frame_needed = 1, uses_anonymous_args = 0
 3238 0000 80B5     		push	{r7, lr}
 3239              		.cfi_def_cfa_offset 8
 3240              		.cfi_offset 7, -8
 3241              		.cfi_offset 14, -4
 3242 0002 86B0     		sub	sp, sp, #24
 3243              		.cfi_def_cfa_offset 32
 3244 0004 00AF     		add	r7, sp, #0
 3245              		.cfi_def_cfa_register 7
 3246 0006 7860     		str	r0, [r7, #4]
 3247 0008 3960     		str	r1, [r7]
3136:..\..\FreeRTOS_Source/tasks.c **** BaseType_t xReturn;
3137:..\..\FreeRTOS_Source/tasks.c **** 
3138:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTimeOut );
3139:..\..\FreeRTOS_Source/tasks.c **** 	configASSERT( pxTicksToWait );
3140:..\..\FreeRTOS_Source/tasks.c **** 
3141:..\..\FreeRTOS_Source/tasks.c **** 	taskENTER_CRITICAL();
 3248              		.loc 1 3141 0
 3249 000a FFF7FEFF 		bl	vPortEnterCritical
 3250              	.LBB49:
3142:..\..\FreeRTOS_Source/tasks.c **** 	{
3143:..\..\FreeRTOS_Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3144:..\..\FreeRTOS_Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 3251              		.loc 1 3144 0
 3252 000e 1D4B     		ldr	r3, .L224
 3253 0010 1B68     		ldr	r3, [r3]
 3254 0012 3B61     		str	r3, [r7, #16]
3145:..\..\FreeRTOS_Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3255              		.loc 1 3145 0
 3256 0014 7B68     		ldr	r3, [r7, #4]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 118
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 118
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 118
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 118
>>>>>>> parent of cb49844... test


 3257 0016 5B68     		ldr	r3, [r3, #4]
 3258 0018 3A69     		ldr	r2, [r7, #16]
 3259 001a D31A     		subs	r3, r2, r3
 3260 001c FB60     		str	r3, [r7, #12]
3146:..\..\FreeRTOS_Source/tasks.c **** 
3147:..\..\FreeRTOS_Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3148:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3149:..\..\FreeRTOS_Source/tasks.c **** 			{
3150:..\..\FreeRTOS_Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3151:..\..\FreeRTOS_Source/tasks.c **** 				but has the same result. */
3152:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3153:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdTRUE;
3154:..\..\FreeRTOS_Source/tasks.c **** 			}
3155:..\..\FreeRTOS_Source/tasks.c **** 			else
3156:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3157:..\..\FreeRTOS_Source/tasks.c **** 
3158:..\..\FreeRTOS_Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3159:..\..\FreeRTOS_Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 3261              		.loc 1 3159 0
 3262 001e 3B68     		ldr	r3, [r7]
 3263 0020 1B68     		ldr	r3, [r3]
 3264 0022 B3F1FF3F 		cmp	r3, #-1
 3265 0026 02D1     		bne	.L219
3160:..\..\FreeRTOS_Source/tasks.c **** 			{
3161:..\..\FreeRTOS_Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3162:..\..\FreeRTOS_Source/tasks.c **** 				specified is the maximum block time then the task should block
3163:..\..\FreeRTOS_Source/tasks.c **** 				indefinitely, and therefore never time out. */
3164:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFALSE;
 3266              		.loc 1 3164 0
 3267 0028 0023     		movs	r3, #0
 3268 002a 7B61     		str	r3, [r7, #20]
 3269 002c 23E0     		b	.L220
 3270              	.L219:
3165:..\..\FreeRTOS_Source/tasks.c **** 			}
3166:..\..\FreeRTOS_Source/tasks.c **** 			else
3167:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3168:..\..\FreeRTOS_Source/tasks.c **** 
3169:..\..\FreeRTOS_Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 3271              		.loc 1 3169 0
 3272 002e 7B68     		ldr	r3, [r7, #4]
 3273 0030 1A68     		ldr	r2, [r3]
 3274 0032 154B     		ldr	r3, .L224+4
 3275 0034 1B68     		ldr	r3, [r3]
 3276 0036 9A42     		cmp	r2, r3
 3277 0038 07D0     		beq	.L221
 3278              		.loc 1 3169 0 is_stmt 0 discriminator 1
 3279 003a 7B68     		ldr	r3, [r7, #4]
 3280 003c 5A68     		ldr	r2, [r3, #4]
 3281 003e 3B69     		ldr	r3, [r7, #16]
 3282 0040 9A42     		cmp	r2, r3
 3283 0042 02D8     		bhi	.L221
3170:..\..\FreeRTOS_Source/tasks.c **** 		{
3171:..\..\FreeRTOS_Source/tasks.c **** 			/* The tick count is greater than the time at which
3172:..\..\FreeRTOS_Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3173:..\..\FreeRTOS_Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3174:..\..\FreeRTOS_Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3175:..\..\FreeRTOS_Source/tasks.c **** 			was called. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 119
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 119
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 119
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 119
>>>>>>> parent of cb49844... test


3176:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdTRUE;
 3284              		.loc 1 3176 0 is_stmt 1
 3285 0044 0123     		movs	r3, #1
 3286 0046 7B61     		str	r3, [r7, #20]
 3287 0048 15E0     		b	.L220
 3288              	.L221:
3177:..\..\FreeRTOS_Source/tasks.c **** 		}
3178:..\..\FreeRTOS_Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 3289              		.loc 1 3178 0
 3290 004a 3B68     		ldr	r3, [r7]
 3291 004c 1A68     		ldr	r2, [r3]
 3292 004e FB68     		ldr	r3, [r7, #12]
 3293 0050 9A42     		cmp	r2, r3
 3294 0052 0BD9     		bls	.L222
3179:..\..\FreeRTOS_Source/tasks.c **** 		{
3180:..\..\FreeRTOS_Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3181:..\..\FreeRTOS_Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 3295              		.loc 1 3181 0
 3296 0054 3B68     		ldr	r3, [r7]
 3297 0056 1A68     		ldr	r2, [r3]
 3298 0058 FB68     		ldr	r3, [r7, #12]
 3299 005a D21A     		subs	r2, r2, r3
 3300 005c 3B68     		ldr	r3, [r7]
 3301 005e 1A60     		str	r2, [r3]
3182:..\..\FreeRTOS_Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3302              		.loc 1 3182 0
 3303 0060 7868     		ldr	r0, [r7, #4]
 3304 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3183:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdFALSE;
 3305              		.loc 1 3183 0
 3306 0066 0023     		movs	r3, #0
 3307 0068 7B61     		str	r3, [r7, #20]
 3308 006a 04E0     		b	.L220
 3309              	.L222:
3184:..\..\FreeRTOS_Source/tasks.c **** 		}
3185:..\..\FreeRTOS_Source/tasks.c **** 		else
3186:..\..\FreeRTOS_Source/tasks.c **** 		{
3187:..\..\FreeRTOS_Source/tasks.c **** 			*pxTicksToWait = 0;
 3310              		.loc 1 3187 0
 3311 006c 3B68     		ldr	r3, [r7]
 3312 006e 0022     		movs	r2, #0
 3313 0070 1A60     		str	r2, [r3]
3188:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = pdTRUE;
 3314              		.loc 1 3188 0
 3315 0072 0123     		movs	r3, #1
 3316 0074 7B61     		str	r3, [r7, #20]
 3317              	.L220:
 3318              	.LBE49:
3189:..\..\FreeRTOS_Source/tasks.c **** 		}
3190:..\..\FreeRTOS_Source/tasks.c **** 	}
3191:..\..\FreeRTOS_Source/tasks.c **** 	taskEXIT_CRITICAL();
 3319              		.loc 1 3191 0
 3320 0076 FFF7FEFF 		bl	vPortExitCritical
3192:..\..\FreeRTOS_Source/tasks.c **** 
3193:..\..\FreeRTOS_Source/tasks.c **** 	return xReturn;
 3321              		.loc 1 3193 0
 3322 007a 7B69     		ldr	r3, [r7, #20]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 120
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 120
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 120
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 120
>>>>>>> parent of cb49844... test


3194:..\..\FreeRTOS_Source/tasks.c **** }
 3323              		.loc 1 3194 0
 3324 007c 1846     		mov	r0, r3
 3325 007e 1837     		adds	r7, r7, #24
 3326              		.cfi_def_cfa_offset 8
 3327 0080 BD46     		mov	sp, r7
 3328              		.cfi_def_cfa_register 13
 3329              		@ sp needed
 3330 0082 80BD     		pop	{r7, pc}
 3331              	.L225:
 3332              		.align	2
 3333              	.L224:
 3334 0084 B4000000 		.word	xTickCount
 3335 0088 C8000000 		.word	xNumOfOverflows
 3336              		.cfi_endproc
 3337              	.LFE98:
 3338              		.size	xTaskCheckForTimeOut, .-xTaskCheckForTimeOut
 3339              		.section	.text.vTaskMissedYield,"ax",%progbits
 3340              		.align	2
 3341              		.global	vTaskMissedYield
 3342              		.thumb
 3343              		.thumb_func
 3344              		.type	vTaskMissedYield, %function
 3345              	vTaskMissedYield:
 3346              	.LFB99:
3195:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3196:..\..\FreeRTOS_Source/tasks.c **** 
3197:..\..\FreeRTOS_Source/tasks.c **** void vTaskMissedYield( void )
3198:..\..\FreeRTOS_Source/tasks.c **** {
 3347              		.loc 1 3198 0
 3348              		.cfi_startproc
 3349              		@ args = 0, pretend = 0, frame = 0
 3350              		@ frame_needed = 1, uses_anonymous_args = 0
 3351              		@ link register save eliminated.
 3352 0000 80B4     		push	{r7}
 3353              		.cfi_def_cfa_offset 4
 3354              		.cfi_offset 7, -4
 3355 0002 00AF     		add	r7, sp, #0
 3356              		.cfi_def_cfa_register 7
3199:..\..\FreeRTOS_Source/tasks.c **** 	xYieldPending = pdTRUE;
 3357              		.loc 1 3199 0
 3358 0004 034B     		ldr	r3, .L227
 3359 0006 0122     		movs	r2, #1
 3360 0008 1A60     		str	r2, [r3]
3200:..\..\FreeRTOS_Source/tasks.c **** }
 3361              		.loc 1 3200 0
 3362 000a 00BF     		nop
 3363 000c BD46     		mov	sp, r7
 3364              		.cfi_def_cfa_register 13
 3365              		@ sp needed
 3366 000e 80BC     		pop	{r7}
 3367              		.cfi_restore 7
 3368              		.cfi_def_cfa_offset 0
 3369 0010 7047     		bx	lr
 3370              	.L228:
 3371 0012 00BF     		.align	2
 3372              	.L227:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 121
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 121
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 121
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 121
>>>>>>> parent of cb49844... test


 3373 0014 C4000000 		.word	xYieldPending
 3374              		.cfi_endproc
 3375              	.LFE99:
 3376              		.size	vTaskMissedYield, .-vTaskMissedYield
 3377              		.section	.text.prvIdleTask,"ax",%progbits
 3378              		.align	2
 3379              		.thumb
 3380              		.thumb_func
 3381              		.type	prvIdleTask, %function
 3382              	prvIdleTask:
 3383              	.LFB100:
3201:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3202:..\..\FreeRTOS_Source/tasks.c **** 
3203:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3204:..\..\FreeRTOS_Source/tasks.c **** 
3205:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3206:..\..\FreeRTOS_Source/tasks.c **** 	{
3207:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn;
3208:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t const *pxTCB;
3209:..\..\FreeRTOS_Source/tasks.c **** 
3210:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask != NULL )
3211:..\..\FreeRTOS_Source/tasks.c **** 		{
3212:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3213:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3214:..\..\FreeRTOS_Source/tasks.c **** 		}
3215:..\..\FreeRTOS_Source/tasks.c **** 		else
3216:..\..\FreeRTOS_Source/tasks.c **** 		{
3217:..\..\FreeRTOS_Source/tasks.c **** 			uxReturn = 0U;
3218:..\..\FreeRTOS_Source/tasks.c **** 		}
3219:..\..\FreeRTOS_Source/tasks.c **** 
3220:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
3221:..\..\FreeRTOS_Source/tasks.c **** 	}
3222:..\..\FreeRTOS_Source/tasks.c **** 
3223:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3224:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3225:..\..\FreeRTOS_Source/tasks.c **** 
3226:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3227:..\..\FreeRTOS_Source/tasks.c **** 
3228:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3229:..\..\FreeRTOS_Source/tasks.c **** 	{
3230:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
3231:..\..\FreeRTOS_Source/tasks.c **** 
3232:..\..\FreeRTOS_Source/tasks.c **** 		if( xTask != NULL )
3233:..\..\FreeRTOS_Source/tasks.c **** 		{
3234:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3235:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3236:..\..\FreeRTOS_Source/tasks.c **** 		}
3237:..\..\FreeRTOS_Source/tasks.c **** 	}
3238:..\..\FreeRTOS_Source/tasks.c **** 
3239:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3240:..\..\FreeRTOS_Source/tasks.c **** 
3241:..\..\FreeRTOS_Source/tasks.c **** /*
3242:..\..\FreeRTOS_Source/tasks.c ****  * -----------------------------------------------------------
3243:..\..\FreeRTOS_Source/tasks.c ****  * The Idle task.
3244:..\..\FreeRTOS_Source/tasks.c ****  * ----------------------------------------------------------
3245:..\..\FreeRTOS_Source/tasks.c ****  *
3246:..\..\FreeRTOS_Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 122
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 122
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 122
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 122
>>>>>>> parent of cb49844... test


3247:..\..\FreeRTOS_Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3248:..\..\FreeRTOS_Source/tasks.c ****  *
3249:..\..\FreeRTOS_Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3250:..\..\FreeRTOS_Source/tasks.c ****  *
3251:..\..\FreeRTOS_Source/tasks.c ****  */
3252:..\..\FreeRTOS_Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3253:..\..\FreeRTOS_Source/tasks.c **** {
 3384              		.loc 1 3253 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 8
 3387              		@ frame_needed = 1, uses_anonymous_args = 0
 3388 0000 80B5     		push	{r7, lr}
 3389              		.cfi_def_cfa_offset 8
 3390              		.cfi_offset 7, -8
 3391              		.cfi_offset 14, -4
 3392 0002 82B0     		sub	sp, sp, #8
 3393              		.cfi_def_cfa_offset 16
 3394 0004 00AF     		add	r7, sp, #0
 3395              		.cfi_def_cfa_register 7
 3396 0006 7860     		str	r0, [r7, #4]
 3397              	.L230:
3254:..\..\FreeRTOS_Source/tasks.c **** 	/* Stop warnings. */
3255:..\..\FreeRTOS_Source/tasks.c **** 	( void ) pvParameters;
3256:..\..\FreeRTOS_Source/tasks.c **** 
3257:..\..\FreeRTOS_Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3258:..\..\FreeRTOS_Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3259:..\..\FreeRTOS_Source/tasks.c **** 
3260:..\..\FreeRTOS_Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3261:..\..\FreeRTOS_Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3262:..\..\FreeRTOS_Source/tasks.c **** 	any. */
3263:..\..\FreeRTOS_Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3264:..\..\FreeRTOS_Source/tasks.c **** 
3265:..\..\FreeRTOS_Source/tasks.c **** 	for( ;; )
3266:..\..\FreeRTOS_Source/tasks.c **** 	{
3267:..\..\FreeRTOS_Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3268:..\..\FreeRTOS_Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3269:..\..\FreeRTOS_Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 3398              		.loc 1 3269 0 discriminator 1
 3399 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3270:..\..\FreeRTOS_Source/tasks.c **** 
3271:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3272:..\..\FreeRTOS_Source/tasks.c **** 		{
3273:..\..\FreeRTOS_Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3274:..\..\FreeRTOS_Source/tasks.c **** 			see if any other task has become available.  If we are using
3275:..\..\FreeRTOS_Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3276:..\..\FreeRTOS_Source/tasks.c **** 			will automatically get the processor anyway. */
3277:..\..\FreeRTOS_Source/tasks.c **** 			taskYIELD();
3278:..\..\FreeRTOS_Source/tasks.c **** 		}
3279:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3280:..\..\FreeRTOS_Source/tasks.c **** 
3281:..\..\FreeRTOS_Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3282:..\..\FreeRTOS_Source/tasks.c **** 		{
3283:..\..\FreeRTOS_Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3284:..\..\FreeRTOS_Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3285:..\..\FreeRTOS_Source/tasks.c **** 			to run then the idle task should yield before the end of the
3286:..\..\FreeRTOS_Source/tasks.c **** 			timeslice.
3287:..\..\FreeRTOS_Source/tasks.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 123
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 123
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 123
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 123
>>>>>>> parent of cb49844... test


3288:..\..\FreeRTOS_Source/tasks.c **** 			A critical region is not required here as we are just reading from
3289:..\..\FreeRTOS_Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3290:..\..\FreeRTOS_Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3291:..\..\FreeRTOS_Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3292:..\..\FreeRTOS_Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3293:..\..\FreeRTOS_Source/tasks.c **** 			{
3294:..\..\FreeRTOS_Source/tasks.c **** 				taskYIELD();
3295:..\..\FreeRTOS_Source/tasks.c **** 			}
3296:..\..\FreeRTOS_Source/tasks.c **** 			else
3297:..\..\FreeRTOS_Source/tasks.c **** 			{
3298:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3299:..\..\FreeRTOS_Source/tasks.c **** 			}
3300:..\..\FreeRTOS_Source/tasks.c **** 		}
3301:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3302:..\..\FreeRTOS_Source/tasks.c **** 
3303:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3304:..\..\FreeRTOS_Source/tasks.c **** 		{
3305:..\..\FreeRTOS_Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3306:..\..\FreeRTOS_Source/tasks.c **** 
3307:..\..\FreeRTOS_Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3308:..\..\FreeRTOS_Source/tasks.c **** 			allows the application designer to add background functionality
3309:..\..\FreeRTOS_Source/tasks.c **** 			without the overhead of a separate task.
3310:..\..\FreeRTOS_Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3311:..\..\FreeRTOS_Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3312:..\..\FreeRTOS_Source/tasks.c **** 			vApplicationIdleHook();
3313:..\..\FreeRTOS_Source/tasks.c **** 		}
3314:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3315:..\..\FreeRTOS_Source/tasks.c **** 
3316:..\..\FreeRTOS_Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3317:..\..\FreeRTOS_Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3318:..\..\FreeRTOS_Source/tasks.c **** 		user defined low power mode	implementations require
3319:..\..\FreeRTOS_Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3320:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3321:..\..\FreeRTOS_Source/tasks.c **** 		{
3322:..\..\FreeRTOS_Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3323:..\..\FreeRTOS_Source/tasks.c **** 
3324:..\..\FreeRTOS_Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3325:..\..\FreeRTOS_Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3326:..\..\FreeRTOS_Source/tasks.c **** 			test of the expected idle time is performed without the
3327:..\..\FreeRTOS_Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3328:..\..\FreeRTOS_Source/tasks.c **** 			valid. */
3329:..\..\FreeRTOS_Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3330:..\..\FreeRTOS_Source/tasks.c **** 
3331:..\..\FreeRTOS_Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3332:..\..\FreeRTOS_Source/tasks.c **** 			{
3333:..\..\FreeRTOS_Source/tasks.c **** 				vTaskSuspendAll();
3334:..\..\FreeRTOS_Source/tasks.c **** 				{
3335:..\..\FreeRTOS_Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3336:..\..\FreeRTOS_Source/tasks.c **** 					time can be sampled again, and this time its value can
3337:..\..\FreeRTOS_Source/tasks.c **** 					be used. */
3338:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3339:..\..\FreeRTOS_Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3340:..\..\FreeRTOS_Source/tasks.c **** 
3341:..\..\FreeRTOS_Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3342:..\..\FreeRTOS_Source/tasks.c **** 					if the application does not want
3343:..\..\FreeRTOS_Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3344:..\..\FreeRTOS_Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 124
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 124
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 124
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 124
>>>>>>> parent of cb49844... test


3345:..\..\FreeRTOS_Source/tasks.c **** 
3346:..\..\FreeRTOS_Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3347:..\..\FreeRTOS_Source/tasks.c **** 					{
3348:..\..\FreeRTOS_Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3349:..\..\FreeRTOS_Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3350:..\..\FreeRTOS_Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3351:..\..\FreeRTOS_Source/tasks.c **** 					}
3352:..\..\FreeRTOS_Source/tasks.c **** 					else
3353:..\..\FreeRTOS_Source/tasks.c **** 					{
3354:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3355:..\..\FreeRTOS_Source/tasks.c **** 					}
3356:..\..\FreeRTOS_Source/tasks.c **** 				}
3357:..\..\FreeRTOS_Source/tasks.c **** 				( void ) xTaskResumeAll();
3358:..\..\FreeRTOS_Source/tasks.c **** 			}
3359:..\..\FreeRTOS_Source/tasks.c **** 			else
3360:..\..\FreeRTOS_Source/tasks.c **** 			{
3361:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3362:..\..\FreeRTOS_Source/tasks.c **** 			}
3363:..\..\FreeRTOS_Source/tasks.c **** 		}
3364:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3365:..\..\FreeRTOS_Source/tasks.c **** 	}
 3400              		.loc 1 3365 0 discriminator 1
 3401 000c FCE7     		b	.L230
 3402              		.cfi_endproc
 3403              	.LFE100:
 3404              		.size	prvIdleTask, .-prvIdleTask
 3405 000e 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 3406              		.align	2
 3407              		.thumb
 3408              		.thumb_func
 3409              		.type	prvInitialiseTaskLists, %function
 3410              	prvInitialiseTaskLists:
 3411              	.LFB101:
3366:..\..\FreeRTOS_Source/tasks.c **** }
3367:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3368:..\..\FreeRTOS_Source/tasks.c **** 
3369:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3370:..\..\FreeRTOS_Source/tasks.c **** 
3371:..\..\FreeRTOS_Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3372:..\..\FreeRTOS_Source/tasks.c **** 	{
3373:..\..\FreeRTOS_Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3374:..\..\FreeRTOS_Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3375:..\..\FreeRTOS_Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3376:..\..\FreeRTOS_Source/tasks.c **** 
3377:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3378:..\..\FreeRTOS_Source/tasks.c **** 		{
3379:..\..\FreeRTOS_Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3380:..\..\FreeRTOS_Source/tasks.c **** 			eReturn = eAbortSleep;
3381:..\..\FreeRTOS_Source/tasks.c **** 		}
3382:..\..\FreeRTOS_Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3383:..\..\FreeRTOS_Source/tasks.c **** 		{
3384:..\..\FreeRTOS_Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3385:..\..\FreeRTOS_Source/tasks.c **** 			eReturn = eAbortSleep;
3386:..\..\FreeRTOS_Source/tasks.c **** 		}
3387:..\..\FreeRTOS_Source/tasks.c **** 		else
3388:..\..\FreeRTOS_Source/tasks.c **** 		{
3389:..\..\FreeRTOS_Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 125
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 125
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 125
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 125
>>>>>>> parent of cb49844... test


3390:..\..\FreeRTOS_Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3391:..\..\FreeRTOS_Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3392:..\..\FreeRTOS_Source/tasks.c **** 			interrupts. */
3393:..\..\FreeRTOS_Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3394:..\..\FreeRTOS_Source/tasks.c **** 			{
3395:..\..\FreeRTOS_Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3396:..\..\FreeRTOS_Source/tasks.c **** 			}
3397:..\..\FreeRTOS_Source/tasks.c **** 			else
3398:..\..\FreeRTOS_Source/tasks.c **** 			{
3399:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3400:..\..\FreeRTOS_Source/tasks.c **** 			}
3401:..\..\FreeRTOS_Source/tasks.c **** 		}
3402:..\..\FreeRTOS_Source/tasks.c **** 
3403:..\..\FreeRTOS_Source/tasks.c **** 		return eReturn;
3404:..\..\FreeRTOS_Source/tasks.c **** 	}
3405:..\..\FreeRTOS_Source/tasks.c **** 
3406:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3407:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3408:..\..\FreeRTOS_Source/tasks.c **** 
3409:..\..\FreeRTOS_Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3410:..\..\FreeRTOS_Source/tasks.c **** 
3411:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3412:..\..\FreeRTOS_Source/tasks.c **** 	{
3413:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3414:..\..\FreeRTOS_Source/tasks.c **** 
3415:..\..\FreeRTOS_Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3416:..\..\FreeRTOS_Source/tasks.c **** 		{
3417:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3418:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3419:..\..\FreeRTOS_Source/tasks.c **** 		}
3420:..\..\FreeRTOS_Source/tasks.c **** 	}
3421:..\..\FreeRTOS_Source/tasks.c **** 
3422:..\..\FreeRTOS_Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3423:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3424:..\..\FreeRTOS_Source/tasks.c **** 
3425:..\..\FreeRTOS_Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3426:..\..\FreeRTOS_Source/tasks.c **** 
3427:..\..\FreeRTOS_Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3428:..\..\FreeRTOS_Source/tasks.c **** 	{
3429:..\..\FreeRTOS_Source/tasks.c **** 	void *pvReturn = NULL;
3430:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3431:..\..\FreeRTOS_Source/tasks.c **** 
3432:..\..\FreeRTOS_Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3433:..\..\FreeRTOS_Source/tasks.c **** 		{
3434:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3435:..\..\FreeRTOS_Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3436:..\..\FreeRTOS_Source/tasks.c **** 		}
3437:..\..\FreeRTOS_Source/tasks.c **** 		else
3438:..\..\FreeRTOS_Source/tasks.c **** 		{
3439:..\..\FreeRTOS_Source/tasks.c **** 			pvReturn = NULL;
3440:..\..\FreeRTOS_Source/tasks.c **** 		}
3441:..\..\FreeRTOS_Source/tasks.c **** 
3442:..\..\FreeRTOS_Source/tasks.c **** 		return pvReturn;
3443:..\..\FreeRTOS_Source/tasks.c **** 	}
3444:..\..\FreeRTOS_Source/tasks.c **** 
3445:..\..\FreeRTOS_Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3446:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 126
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 126
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 126
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 126
>>>>>>> parent of cb49844... test


3447:..\..\FreeRTOS_Source/tasks.c **** 
3448:..\..\FreeRTOS_Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3449:..\..\FreeRTOS_Source/tasks.c **** 
3450:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3451:..\..\FreeRTOS_Source/tasks.c **** 	{
3452:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3453:..\..\FreeRTOS_Source/tasks.c **** 
3454:..\..\FreeRTOS_Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3455:..\..\FreeRTOS_Source/tasks.c **** 		the calling task. */
3456:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3457:..\..\FreeRTOS_Source/tasks.c **** 
3458:..\..\FreeRTOS_Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3459:..\..\FreeRTOS_Source/tasks.c **** 	}
3460:..\..\FreeRTOS_Source/tasks.c **** 
3461:..\..\FreeRTOS_Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3462:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3463:..\..\FreeRTOS_Source/tasks.c **** 
3464:..\..\FreeRTOS_Source/tasks.c **** static void prvInitialiseTaskLists( void )
3465:..\..\FreeRTOS_Source/tasks.c **** {
 3412              		.loc 1 3465 0
 3413              		.cfi_startproc
 3414              		@ args = 0, pretend = 0, frame = 8
 3415              		@ frame_needed = 1, uses_anonymous_args = 0
 3416 0000 80B5     		push	{r7, lr}
 3417              		.cfi_def_cfa_offset 8
 3418              		.cfi_offset 7, -8
 3419              		.cfi_offset 14, -4
 3420 0002 82B0     		sub	sp, sp, #8
 3421              		.cfi_def_cfa_offset 16
 3422 0004 00AF     		add	r7, sp, #0
 3423              		.cfi_def_cfa_register 7
3466:..\..\FreeRTOS_Source/tasks.c **** UBaseType_t uxPriority;
3467:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;	/*< Delayed tasks. */
3468:..\..\FreeRTOS_Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;	/*< Delayed tasks (two lists are used - one for de
3469:..\..\FreeRTOS_Source/tasks.c **** 
3470:..\..\FreeRTOS_Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 3424              		.loc 1 3470 0
 3425 0006 0023     		movs	r3, #0
 3426 0008 7B60     		str	r3, [r7, #4]
 3427 000a 0CE0     		b	.L232
 3428              	.L233:
3471:..\..\FreeRTOS_Source/tasks.c **** 	{
3472:..\..\FreeRTOS_Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 3429              		.loc 1 3472 0 discriminator 3
 3430 000c 7A68     		ldr	r2, [r7, #4]
 3431 000e 1346     		mov	r3, r2
 3432 0010 9B00     		lsls	r3, r3, #2
 3433 0012 1344     		add	r3, r3, r2
 3434 0014 9B00     		lsls	r3, r3, #2
 3435 0016 124A     		ldr	r2, .L234
 3436 0018 1344     		add	r3, r3, r2
 3437 001a 1846     		mov	r0, r3
 3438 001c FFF7FEFF 		bl	vListInitialise
3470:..\..\FreeRTOS_Source/tasks.c **** 	{
 3439              		.loc 1 3470 0 discriminator 3
 3440 0020 7B68     		ldr	r3, [r7, #4]
 3441 0022 0133     		adds	r3, r3, #1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 127
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 127
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 127
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 127
>>>>>>> parent of cb49844... test


 3442 0024 7B60     		str	r3, [r7, #4]
 3443              	.L232:
3470:..\..\FreeRTOS_Source/tasks.c **** 	{
 3444              		.loc 1 3470 0 is_stmt 0 discriminator 1
 3445 0026 7B68     		ldr	r3, [r7, #4]
 3446 0028 042B     		cmp	r3, #4
 3447 002a EFD9     		bls	.L233
3473:..\..\FreeRTOS_Source/tasks.c **** 	}
3474:..\..\FreeRTOS_Source/tasks.c **** 
3475:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 3448              		.loc 1 3475 0 is_stmt 1
 3449 002c 0D48     		ldr	r0, .L234+4
 3450 002e FFF7FEFF 		bl	vListInitialise
3476:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 3451              		.loc 1 3476 0
 3452 0032 0D48     		ldr	r0, .L234+8
 3453 0034 FFF7FEFF 		bl	vListInitialise
3477:..\..\FreeRTOS_Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 3454              		.loc 1 3477 0
 3455 0038 0C48     		ldr	r0, .L234+12
 3456 003a FFF7FEFF 		bl	vListInitialise
3478:..\..\FreeRTOS_Source/tasks.c **** 
3479:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3480:..\..\FreeRTOS_Source/tasks.c **** 	{
3481:..\..\FreeRTOS_Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 3457              		.loc 1 3481 0
 3458 003e 0C48     		ldr	r0, .L234+16
 3459 0040 FFF7FEFF 		bl	vListInitialise
3482:..\..\FreeRTOS_Source/tasks.c **** 	}
3483:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3484:..\..\FreeRTOS_Source/tasks.c **** 
3485:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3486:..\..\FreeRTOS_Source/tasks.c **** 	{
3487:..\..\FreeRTOS_Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 3460              		.loc 1 3487 0
 3461 0044 0B48     		ldr	r0, .L234+20
 3462 0046 FFF7FEFF 		bl	vListInitialise
3488:..\..\FreeRTOS_Source/tasks.c **** 	}
3489:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3490:..\..\FreeRTOS_Source/tasks.c **** 
3491:..\..\FreeRTOS_Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3492:..\..\FreeRTOS_Source/tasks.c **** 	using list2. */
3493:..\..\FreeRTOS_Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 3463              		.loc 1 3493 0
 3464 004a 0B4B     		ldr	r3, .L234+24
 3465 004c 054A     		ldr	r2, .L234+4
 3466 004e 1A60     		str	r2, [r3]
3494:..\..\FreeRTOS_Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 3467              		.loc 1 3494 0
 3468 0050 0A4B     		ldr	r3, .L234+28
 3469 0052 054A     		ldr	r2, .L234+8
 3470 0054 1A60     		str	r2, [r3]
3495:..\..\FreeRTOS_Source/tasks.c **** }
 3471              		.loc 1 3495 0
 3472 0056 00BF     		nop
 3473 0058 0837     		adds	r7, r7, #8
 3474              		.cfi_def_cfa_offset 8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 128
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 128
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 128
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 128
>>>>>>> parent of cb49844... test


 3475 005a BD46     		mov	sp, r7
 3476              		.cfi_def_cfa_register 13
 3477              		@ sp needed
 3478 005c 80BD     		pop	{r7, pc}
 3479              	.L235:
 3480 005e 00BF     		.align	2
 3481              	.L234:
 3482 0060 04000000 		.word	pxReadyTasksLists
 3483 0064 DC000000 		.word	xDelayedTaskList1.7292
 3484 0068 F0000000 		.word	xDelayedTaskList2.7293
 3485 006c 70000000 		.word	xPendingReadyList
 3486 0070 84000000 		.word	xTasksWaitingTermination
 3487 0074 9C000000 		.word	xSuspendedTaskList
 3488 0078 68000000 		.word	pxDelayedTaskList
 3489 007c 6C000000 		.word	pxOverflowDelayedTaskList
 3490              		.cfi_endproc
 3491              	.LFE101:
 3492              		.size	prvInitialiseTaskLists, .-prvInitialiseTaskLists
 3493              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 3494              		.align	2
 3495              		.thumb
 3496              		.thumb_func
 3497              		.type	prvCheckTasksWaitingTermination, %function
 3498              	prvCheckTasksWaitingTermination:
 3499              	.LFB102:
3496:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3497:..\..\FreeRTOS_Source/tasks.c **** 
3498:..\..\FreeRTOS_Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3499:..\..\FreeRTOS_Source/tasks.c **** {
 3500              		.loc 1 3499 0
 3501              		.cfi_startproc
 3502              		@ args = 0, pretend = 0, frame = 8
 3503              		@ frame_needed = 1, uses_anonymous_args = 0
 3504 0000 80B5     		push	{r7, lr}
 3505              		.cfi_def_cfa_offset 8
 3506              		.cfi_offset 7, -8
 3507              		.cfi_offset 14, -4
 3508 0002 82B0     		sub	sp, sp, #8
 3509              		.cfi_def_cfa_offset 16
 3510 0004 00AF     		add	r7, sp, #0
 3511              		.cfi_def_cfa_register 7
 3512              	.LBB50:
3500:..\..\FreeRTOS_Source/tasks.c **** 
3501:..\..\FreeRTOS_Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3502:..\..\FreeRTOS_Source/tasks.c **** 
3503:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3504:..\..\FreeRTOS_Source/tasks.c **** 	{
3505:..\..\FreeRTOS_Source/tasks.c **** 		TCB_t *pxTCB;
3506:..\..\FreeRTOS_Source/tasks.c **** 
3507:..\..\FreeRTOS_Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3508:..\..\FreeRTOS_Source/tasks.c **** 		being called too often in the idle task. */
3509:..\..\FreeRTOS_Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 3513              		.loc 1 3509 0
 3514 0006 19E0     		b	.L237
 3515              	.L238:
3510:..\..\FreeRTOS_Source/tasks.c **** 		{
3511:..\..\FreeRTOS_Source/tasks.c **** 			taskENTER_CRITICAL();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 129
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 129
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 129
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 129
>>>>>>> parent of cb49844... test


 3516              		.loc 1 3511 0
 3517 0008 FFF7FEFF 		bl	vPortEnterCritical
3512:..\..\FreeRTOS_Source/tasks.c **** 			{
3513:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 3518              		.loc 1 3513 0
 3519 000c 0F4B     		ldr	r3, .L239
 3520 000e DB68     		ldr	r3, [r3, #12]
 3521 0010 DB68     		ldr	r3, [r3, #12]
 3522 0012 7B60     		str	r3, [r7, #4]
3514:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3523              		.loc 1 3514 0
 3524 0014 7B68     		ldr	r3, [r7, #4]
 3525 0016 0433     		adds	r3, r3, #4
 3526 0018 1846     		mov	r0, r3
 3527 001a FFF7FEFF 		bl	uxListRemove
3515:..\..\FreeRTOS_Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 3528              		.loc 1 3515 0
 3529 001e 0C4B     		ldr	r3, .L239+4
 3530 0020 1B68     		ldr	r3, [r3]
 3531 0022 013B     		subs	r3, r3, #1
 3532 0024 0A4A     		ldr	r2, .L239+4
 3533 0026 1360     		str	r3, [r2]
3516:..\..\FreeRTOS_Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 3534              		.loc 1 3516 0
 3535 0028 0A4B     		ldr	r3, .L239+8
 3536 002a 1B68     		ldr	r3, [r3]
 3537 002c 013B     		subs	r3, r3, #1
 3538 002e 094A     		ldr	r2, .L239+8
 3539 0030 1360     		str	r3, [r2]
3517:..\..\FreeRTOS_Source/tasks.c **** 			}
3518:..\..\FreeRTOS_Source/tasks.c **** 			taskEXIT_CRITICAL();
 3540              		.loc 1 3518 0
 3541 0032 FFF7FEFF 		bl	vPortExitCritical
3519:..\..\FreeRTOS_Source/tasks.c **** 
3520:..\..\FreeRTOS_Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 3542              		.loc 1 3520 0
 3543 0036 7868     		ldr	r0, [r7, #4]
 3544 0038 FFF7FEFF 		bl	prvDeleteTCB
 3545              	.L237:
3509:..\..\FreeRTOS_Source/tasks.c **** 		{
 3546              		.loc 1 3509 0
 3547 003c 054B     		ldr	r3, .L239+8
 3548 003e 1B68     		ldr	r3, [r3]
 3549 0040 002B     		cmp	r3, #0
 3550 0042 E1D1     		bne	.L238
 3551              	.LBE50:
3521:..\..\FreeRTOS_Source/tasks.c **** 		}
3522:..\..\FreeRTOS_Source/tasks.c **** 	}
3523:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3524:..\..\FreeRTOS_Source/tasks.c **** }
 3552              		.loc 1 3524 0
 3553 0044 00BF     		nop
 3554 0046 0837     		adds	r7, r7, #8
 3555              		.cfi_def_cfa_offset 8
 3556 0048 BD46     		mov	sp, r7
 3557              		.cfi_def_cfa_register 13
 3558              		@ sp needed
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 130
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 130
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 130
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 130
>>>>>>> parent of cb49844... test


 3559 004a 80BD     		pop	{r7, pc}
 3560              	.L240:
 3561              		.align	2
 3562              	.L239:
 3563 004c 84000000 		.word	xTasksWaitingTermination
 3564 0050 B0000000 		.word	uxCurrentNumberOfTasks
 3565 0054 98000000 		.word	uxDeletedTasksWaitingCleanUp
 3566              		.cfi_endproc
 3567              	.LFE102:
 3568              		.size	prvCheckTasksWaitingTermination, .-prvCheckTasksWaitingTermination
 3569              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 3570              		.align	2
 3571              		.thumb
 3572              		.thumb_func
 3573              		.type	prvTaskCheckFreeStackSpace, %function
 3574              	prvTaskCheckFreeStackSpace:
 3575              	.LFB103:
3525:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3526:..\..\FreeRTOS_Source/tasks.c **** 
3527:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3528:..\..\FreeRTOS_Source/tasks.c **** 
3529:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3530:..\..\FreeRTOS_Source/tasks.c **** 	{
3531:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3532:..\..\FreeRTOS_Source/tasks.c **** 
3533:..\..\FreeRTOS_Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3534:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3535:..\..\FreeRTOS_Source/tasks.c **** 
3536:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3537:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3538:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3539:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3540:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3541:..\..\FreeRTOS_Source/tasks.c **** 
3542:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3543:..\..\FreeRTOS_Source/tasks.c **** 		{
3544:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3545:..\..\FreeRTOS_Source/tasks.c **** 		}
3546:..\..\FreeRTOS_Source/tasks.c **** 		#else
3547:..\..\FreeRTOS_Source/tasks.c **** 		{
3548:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3549:..\..\FreeRTOS_Source/tasks.c **** 		}
3550:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3551:..\..\FreeRTOS_Source/tasks.c **** 
3552:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3553:..\..\FreeRTOS_Source/tasks.c **** 		{
3554:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3555:..\..\FreeRTOS_Source/tasks.c **** 		}
3556:..\..\FreeRTOS_Source/tasks.c **** 		#else
3557:..\..\FreeRTOS_Source/tasks.c **** 		{
3558:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3559:..\..\FreeRTOS_Source/tasks.c **** 		}
3560:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3561:..\..\FreeRTOS_Source/tasks.c **** 
3562:..\..\FreeRTOS_Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3563:..\..\FreeRTOS_Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3564:..\..\FreeRTOS_Source/tasks.c **** 		state is just set to whatever is passed in. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 131
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 131
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 131
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 131
>>>>>>> parent of cb49844... test


3565:..\..\FreeRTOS_Source/tasks.c **** 		if( eState != eInvalid )
3566:..\..\FreeRTOS_Source/tasks.c **** 		{
3567:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3568:..\..\FreeRTOS_Source/tasks.c **** 			{
3569:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3570:..\..\FreeRTOS_Source/tasks.c **** 			}
3571:..\..\FreeRTOS_Source/tasks.c **** 			else
3572:..\..\FreeRTOS_Source/tasks.c **** 			{
3573:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3574:..\..\FreeRTOS_Source/tasks.c **** 
3575:..\..\FreeRTOS_Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3576:..\..\FreeRTOS_Source/tasks.c **** 				{
3577:..\..\FreeRTOS_Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3578:..\..\FreeRTOS_Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3579:..\..\FreeRTOS_Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3580:..\..\FreeRTOS_Source/tasks.c **** 					if( eState == eSuspended )
3581:..\..\FreeRTOS_Source/tasks.c **** 					{
3582:..\..\FreeRTOS_Source/tasks.c **** 						vTaskSuspendAll();
3583:..\..\FreeRTOS_Source/tasks.c **** 						{
3584:..\..\FreeRTOS_Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3585:..\..\FreeRTOS_Source/tasks.c **** 							{
3586:..\..\FreeRTOS_Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3587:..\..\FreeRTOS_Source/tasks.c **** 							}
3588:..\..\FreeRTOS_Source/tasks.c **** 						}
3589:..\..\FreeRTOS_Source/tasks.c **** 						( void ) xTaskResumeAll();
3590:..\..\FreeRTOS_Source/tasks.c **** 					}
3591:..\..\FreeRTOS_Source/tasks.c **** 				}
3592:..\..\FreeRTOS_Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3593:..\..\FreeRTOS_Source/tasks.c **** 			}
3594:..\..\FreeRTOS_Source/tasks.c **** 		}
3595:..\..\FreeRTOS_Source/tasks.c **** 		else
3596:..\..\FreeRTOS_Source/tasks.c **** 		{
3597:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3598:..\..\FreeRTOS_Source/tasks.c **** 		}
3599:..\..\FreeRTOS_Source/tasks.c **** 
3600:..\..\FreeRTOS_Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3601:..\..\FreeRTOS_Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3602:..\..\FreeRTOS_Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3603:..\..\FreeRTOS_Source/tasks.c **** 		{
3604:..\..\FreeRTOS_Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3605:..\..\FreeRTOS_Source/tasks.c **** 			{
3606:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3607:..\..\FreeRTOS_Source/tasks.c **** 			}
3608:..\..\FreeRTOS_Source/tasks.c **** 			#else
3609:..\..\FreeRTOS_Source/tasks.c **** 			{
3610:..\..\FreeRTOS_Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3611:..\..\FreeRTOS_Source/tasks.c **** 			}
3612:..\..\FreeRTOS_Source/tasks.c **** 			#endif
3613:..\..\FreeRTOS_Source/tasks.c **** 		}
3614:..\..\FreeRTOS_Source/tasks.c **** 		else
3615:..\..\FreeRTOS_Source/tasks.c **** 		{
3616:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3617:..\..\FreeRTOS_Source/tasks.c **** 		}
3618:..\..\FreeRTOS_Source/tasks.c **** 	}
3619:..\..\FreeRTOS_Source/tasks.c **** 
3620:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3621:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 132
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 132
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 132
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 132
>>>>>>> parent of cb49844... test


3622:..\..\FreeRTOS_Source/tasks.c **** 
3623:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3624:..\..\FreeRTOS_Source/tasks.c **** 
3625:..\..\FreeRTOS_Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3626:..\..\FreeRTOS_Source/tasks.c **** 	{
3627:..\..\FreeRTOS_Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3628:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTask = 0;
3629:..\..\FreeRTOS_Source/tasks.c **** 
3630:..\..\FreeRTOS_Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3631:..\..\FreeRTOS_Source/tasks.c **** 		{
3632:..\..\FreeRTOS_Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3633:..\..\FreeRTOS_Source/tasks.c **** 
3634:..\..\FreeRTOS_Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3635:..\..\FreeRTOS_Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3636:..\..\FreeRTOS_Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3637:..\..\FreeRTOS_Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3638:..\..\FreeRTOS_Source/tasks.c **** 			do
3639:..\..\FreeRTOS_Source/tasks.c **** 			{
3640:..\..\FreeRTOS_Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3641:..\..\FreeRTOS_Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3642:..\..\FreeRTOS_Source/tasks.c **** 				uxTask++;
3643:..\..\FreeRTOS_Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3644:..\..\FreeRTOS_Source/tasks.c **** 		}
3645:..\..\FreeRTOS_Source/tasks.c **** 		else
3646:..\..\FreeRTOS_Source/tasks.c **** 		{
3647:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3648:..\..\FreeRTOS_Source/tasks.c **** 		}
3649:..\..\FreeRTOS_Source/tasks.c **** 
3650:..\..\FreeRTOS_Source/tasks.c **** 		return uxTask;
3651:..\..\FreeRTOS_Source/tasks.c **** 	}
3652:..\..\FreeRTOS_Source/tasks.c **** 
3653:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3654:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3655:..\..\FreeRTOS_Source/tasks.c **** 
3656:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3657:..\..\FreeRTOS_Source/tasks.c **** 
3658:..\..\FreeRTOS_Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3659:..\..\FreeRTOS_Source/tasks.c **** 	{
 3576              		.loc 1 3659 0
 3577              		.cfi_startproc
 3578              		@ args = 0, pretend = 0, frame = 16
 3579              		@ frame_needed = 1, uses_anonymous_args = 0
 3580              		@ link register save eliminated.
 3581 0000 80B4     		push	{r7}
 3582              		.cfi_def_cfa_offset 4
 3583              		.cfi_offset 7, -4
 3584 0002 85B0     		sub	sp, sp, #20
 3585              		.cfi_def_cfa_offset 24
 3586 0004 00AF     		add	r7, sp, #0
 3587              		.cfi_def_cfa_register 7
 3588 0006 7860     		str	r0, [r7, #4]
3660:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulCount = 0U;
 3589              		.loc 1 3660 0
 3590 0008 0023     		movs	r3, #0
 3591 000a FB60     		str	r3, [r7, #12]
3661:..\..\FreeRTOS_Source/tasks.c **** 
3662:..\..\FreeRTOS_Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 133
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 133
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 133
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 133
>>>>>>> parent of cb49844... test


 3592              		.loc 1 3662 0
 3593 000c 05E0     		b	.L242
 3594              	.L243:
3663:..\..\FreeRTOS_Source/tasks.c **** 		{
3664:..\..\FreeRTOS_Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 3595              		.loc 1 3664 0
 3596 000e 7B68     		ldr	r3, [r7, #4]
 3597 0010 0133     		adds	r3, r3, #1
 3598 0012 7B60     		str	r3, [r7, #4]
3665:..\..\FreeRTOS_Source/tasks.c **** 			ulCount++;
 3599              		.loc 1 3665 0
 3600 0014 FB68     		ldr	r3, [r7, #12]
 3601 0016 0133     		adds	r3, r3, #1
 3602 0018 FB60     		str	r3, [r7, #12]
 3603              	.L242:
3662:..\..\FreeRTOS_Source/tasks.c **** 		{
 3604              		.loc 1 3662 0
 3605 001a 7B68     		ldr	r3, [r7, #4]
 3606 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3607 001e A52B     		cmp	r3, #165
 3608 0020 F5D0     		beq	.L243
3666:..\..\FreeRTOS_Source/tasks.c **** 		}
3667:..\..\FreeRTOS_Source/tasks.c **** 
3668:..\..\FreeRTOS_Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 3609              		.loc 1 3668 0
 3610 0022 FB68     		ldr	r3, [r7, #12]
 3611 0024 9B08     		lsrs	r3, r3, #2
 3612 0026 FB60     		str	r3, [r7, #12]
3669:..\..\FreeRTOS_Source/tasks.c **** 
3670:..\..\FreeRTOS_Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 3613              		.loc 1 3670 0
 3614 0028 FB68     		ldr	r3, [r7, #12]
 3615 002a 9BB2     		uxth	r3, r3
3671:..\..\FreeRTOS_Source/tasks.c **** 	}
 3616              		.loc 1 3671 0
 3617 002c 1846     		mov	r0, r3
 3618 002e 1437     		adds	r7, r7, #20
 3619              		.cfi_def_cfa_offset 4
 3620 0030 BD46     		mov	sp, r7
 3621              		.cfi_def_cfa_register 13
 3622              		@ sp needed
 3623 0032 80BC     		pop	{r7}
 3624              		.cfi_restore 7
 3625              		.cfi_def_cfa_offset 0
 3626 0034 7047     		bx	lr
 3627              		.cfi_endproc
 3628              	.LFE103:
 3629              		.size	prvTaskCheckFreeStackSpace, .-prvTaskCheckFreeStackSpace
 3630 0036 00BF     		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 3631              		.align	2
 3632              		.global	uxTaskGetStackHighWaterMark
 3633              		.thumb
 3634              		.thumb_func
 3635              		.type	uxTaskGetStackHighWaterMark, %function
 3636              	uxTaskGetStackHighWaterMark:
 3637              	.LFB104:
3672:..\..\FreeRTOS_Source/tasks.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 134
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 134
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 134
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 134
>>>>>>> parent of cb49844... test


3673:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3674:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3675:..\..\FreeRTOS_Source/tasks.c **** 
3676:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3677:..\..\FreeRTOS_Source/tasks.c **** 
3678:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3679:..\..\FreeRTOS_Source/tasks.c **** 	{
 3638              		.loc 1 3679 0
 3639              		.cfi_startproc
 3640              		@ args = 0, pretend = 0, frame = 24
 3641              		@ frame_needed = 1, uses_anonymous_args = 0
 3642 0000 80B5     		push	{r7, lr}
 3643              		.cfi_def_cfa_offset 8
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 3646 0002 86B0     		sub	sp, sp, #24
 3647              		.cfi_def_cfa_offset 32
 3648 0004 00AF     		add	r7, sp, #0
 3649              		.cfi_def_cfa_register 7
 3650 0006 7860     		str	r0, [r7, #4]
3680:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
3681:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t *pucEndOfStack;
3682:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxReturn;
3683:..\..\FreeRTOS_Source/tasks.c **** 
3684:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 3651              		.loc 1 3684 0
 3652 0008 7B68     		ldr	r3, [r7, #4]
 3653 000a 002B     		cmp	r3, #0
 3654 000c 02D1     		bne	.L246
 3655              		.loc 1 3684 0 is_stmt 0 discriminator 1
 3656 000e 094B     		ldr	r3, .L249
 3657 0010 1B68     		ldr	r3, [r3]
 3658 0012 00E0     		b	.L247
 3659              	.L246:
 3660              		.loc 1 3684 0 discriminator 2
 3661 0014 7B68     		ldr	r3, [r7, #4]
 3662              	.L247:
 3663              		.loc 1 3684 0 discriminator 4
 3664 0016 7B61     		str	r3, [r7, #20]
3685:..\..\FreeRTOS_Source/tasks.c **** 
3686:..\..\FreeRTOS_Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3687:..\..\FreeRTOS_Source/tasks.c **** 		{
3688:..\..\FreeRTOS_Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 3665              		.loc 1 3688 0 is_stmt 1 discriminator 4
 3666 0018 7B69     		ldr	r3, [r7, #20]
 3667 001a 1B6B     		ldr	r3, [r3, #48]
 3668 001c 3B61     		str	r3, [r7, #16]
3689:..\..\FreeRTOS_Source/tasks.c **** 		}
3690:..\..\FreeRTOS_Source/tasks.c **** 		#else
3691:..\..\FreeRTOS_Source/tasks.c **** 		{
3692:..\..\FreeRTOS_Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3693:..\..\FreeRTOS_Source/tasks.c **** 		}
3694:..\..\FreeRTOS_Source/tasks.c **** 		#endif
3695:..\..\FreeRTOS_Source/tasks.c **** 
3696:..\..\FreeRTOS_Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 3669              		.loc 1 3696 0 discriminator 4
 3670 001e 3869     		ldr	r0, [r7, #16]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 135
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 135
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 135
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 135
>>>>>>> parent of cb49844... test


 3671 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 3672 0024 0346     		mov	r3, r0
 3673 0026 FB60     		str	r3, [r7, #12]
3697:..\..\FreeRTOS_Source/tasks.c **** 
3698:..\..\FreeRTOS_Source/tasks.c **** 		return uxReturn;
 3674              		.loc 1 3698 0 discriminator 4
 3675 0028 FB68     		ldr	r3, [r7, #12]
3699:..\..\FreeRTOS_Source/tasks.c **** 	}
 3676              		.loc 1 3699 0 discriminator 4
 3677 002a 1846     		mov	r0, r3
 3678 002c 1837     		adds	r7, r7, #24
 3679              		.cfi_def_cfa_offset 8
 3680 002e BD46     		mov	sp, r7
 3681              		.cfi_def_cfa_register 13
 3682              		@ sp needed
 3683 0030 80BD     		pop	{r7, pc}
 3684              	.L250:
 3685 0032 00BF     		.align	2
 3686              	.L249:
 3687 0034 00000000 		.word	pxCurrentTCB
 3688              		.cfi_endproc
 3689              	.LFE104:
 3690              		.size	uxTaskGetStackHighWaterMark, .-uxTaskGetStackHighWaterMark
 3691              		.section	.text.prvDeleteTCB,"ax",%progbits
 3692              		.align	2
 3693              		.thumb
 3694              		.thumb_func
 3695              		.type	prvDeleteTCB, %function
 3696              	prvDeleteTCB:
 3697              	.LFB105:
3700:..\..\FreeRTOS_Source/tasks.c **** 
3701:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3702:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3703:..\..\FreeRTOS_Source/tasks.c **** 
3704:..\..\FreeRTOS_Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3705:..\..\FreeRTOS_Source/tasks.c **** 
3706:..\..\FreeRTOS_Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3707:..\..\FreeRTOS_Source/tasks.c **** 	{
 3698              		.loc 1 3707 0
 3699              		.cfi_startproc
 3700              		@ args = 0, pretend = 0, frame = 8
 3701              		@ frame_needed = 1, uses_anonymous_args = 0
 3702 0000 80B5     		push	{r7, lr}
 3703              		.cfi_def_cfa_offset 8
 3704              		.cfi_offset 7, -8
 3705              		.cfi_offset 14, -4
 3706 0002 82B0     		sub	sp, sp, #8
 3707              		.cfi_def_cfa_offset 16
 3708 0004 00AF     		add	r7, sp, #0
 3709              		.cfi_def_cfa_register 7
 3710 0006 7860     		str	r0, [r7, #4]
3708:..\..\FreeRTOS_Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3709:..\..\FreeRTOS_Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3710:..\..\FreeRTOS_Source/tasks.c **** 		want to allocate and clean RAM statically. */
3711:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3712:..\..\FreeRTOS_Source/tasks.c **** 
3713:..\..\FreeRTOS_Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 136
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 136
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 136
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 136
>>>>>>> parent of cb49844... test


3714:..\..\FreeRTOS_Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3715:..\..\FreeRTOS_Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3716:..\..\FreeRTOS_Source/tasks.c **** 		{
3717:..\..\FreeRTOS_Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3718:..\..\FreeRTOS_Source/tasks.c **** 		}
3719:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3720:..\..\FreeRTOS_Source/tasks.c **** 
3721:..\..\FreeRTOS_Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3722:..\..\FreeRTOS_Source/tasks.c **** 		{
3723:..\..\FreeRTOS_Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3724:..\..\FreeRTOS_Source/tasks.c **** 			the stack and TCB. */
3725:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
 3711              		.loc 1 3725 0
 3712 0008 7B68     		ldr	r3, [r7, #4]
 3713 000a 1B6B     		ldr	r3, [r3, #48]
 3714 000c 1846     		mov	r0, r3
 3715 000e FFF7FEFF 		bl	vPortFree
3726:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTCB );
 3716              		.loc 1 3726 0
 3717 0012 7868     		ldr	r0, [r7, #4]
 3718 0014 FFF7FEFF 		bl	vPortFree
3727:..\..\FreeRTOS_Source/tasks.c **** 		}
3728:..\..\FreeRTOS_Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3729:..\..\FreeRTOS_Source/tasks.c **** 		{
3730:..\..\FreeRTOS_Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3731:..\..\FreeRTOS_Source/tasks.c **** 			check what was statically allocated before trying to free the
3732:..\..\FreeRTOS_Source/tasks.c **** 			memory. */
3733:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3734:..\..\FreeRTOS_Source/tasks.c **** 			{
3735:..\..\FreeRTOS_Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3736:..\..\FreeRTOS_Source/tasks.c **** 				must be freed. */
3737:..\..\FreeRTOS_Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3738:..\..\FreeRTOS_Source/tasks.c **** 				vPortFree( pxTCB );
3739:..\..\FreeRTOS_Source/tasks.c **** 			}
3740:..\..\FreeRTOS_Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3741:..\..\FreeRTOS_Source/tasks.c **** 			{
3742:..\..\FreeRTOS_Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3743:..\..\FreeRTOS_Source/tasks.c **** 				only memory that must be freed. */
3744:..\..\FreeRTOS_Source/tasks.c **** 				vPortFree( pxTCB );
3745:..\..\FreeRTOS_Source/tasks.c **** 			}
3746:..\..\FreeRTOS_Source/tasks.c **** 			else
3747:..\..\FreeRTOS_Source/tasks.c **** 			{
3748:..\..\FreeRTOS_Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3749:..\..\FreeRTOS_Source/tasks.c **** 				nothing needs to be freed. */
3750:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3751:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3752:..\..\FreeRTOS_Source/tasks.c **** 			}
3753:..\..\FreeRTOS_Source/tasks.c **** 		}
3754:..\..\FreeRTOS_Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3755:..\..\FreeRTOS_Source/tasks.c **** 	}
 3719              		.loc 1 3755 0
 3720 0018 00BF     		nop
 3721 001a 0837     		adds	r7, r7, #8
 3722              		.cfi_def_cfa_offset 8
 3723 001c BD46     		mov	sp, r7
 3724              		.cfi_def_cfa_register 13
 3725              		@ sp needed
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 137
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 137
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 137
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 137
>>>>>>> parent of cb49844... test


 3726 001e 80BD     		pop	{r7, pc}
 3727              		.cfi_endproc
 3728              	.LFE105:
 3729              		.size	prvDeleteTCB, .-prvDeleteTCB
 3730              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 3731              		.align	2
 3732              		.thumb
 3733              		.thumb_func
 3734              		.type	prvResetNextTaskUnblockTime, %function
 3735              	prvResetNextTaskUnblockTime:
 3736              	.LFB106:
3756:..\..\FreeRTOS_Source/tasks.c **** 
3757:..\..\FreeRTOS_Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3758:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3759:..\..\FreeRTOS_Source/tasks.c **** 
3760:..\..\FreeRTOS_Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3761:..\..\FreeRTOS_Source/tasks.c **** {
 3737              		.loc 1 3761 0
 3738              		.cfi_startproc
 3739              		@ args = 0, pretend = 0, frame = 8
 3740              		@ frame_needed = 1, uses_anonymous_args = 0
 3741              		@ link register save eliminated.
 3742 0000 80B4     		push	{r7}
 3743              		.cfi_def_cfa_offset 4
 3744              		.cfi_offset 7, -4
 3745 0002 83B0     		sub	sp, sp, #12
 3746              		.cfi_def_cfa_offset 16
 3747 0004 00AF     		add	r7, sp, #0
 3748              		.cfi_def_cfa_register 7
3762:..\..\FreeRTOS_Source/tasks.c **** TCB_t *pxTCB;
3763:..\..\FreeRTOS_Source/tasks.c **** 
3764:..\..\FreeRTOS_Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3749              		.loc 1 3764 0
 3750 0006 0C4B     		ldr	r3, .L256
 3751 0008 1B68     		ldr	r3, [r3]
 3752 000a 1B68     		ldr	r3, [r3]
 3753 000c 002B     		cmp	r3, #0
 3754 000e 04D1     		bne	.L253
3765:..\..\FreeRTOS_Source/tasks.c **** 	{
3766:..\..\FreeRTOS_Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3767:..\..\FreeRTOS_Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3768:..\..\FreeRTOS_Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3769:..\..\FreeRTOS_Source/tasks.c **** 		there is an item in the delayed list. */
3770:..\..\FreeRTOS_Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 3755              		.loc 1 3770 0
 3756 0010 0A4B     		ldr	r3, .L256+4
 3757 0012 4FF0FF32 		mov	r2, #-1
 3758 0016 1A60     		str	r2, [r3]
3771:..\..\FreeRTOS_Source/tasks.c **** 	}
3772:..\..\FreeRTOS_Source/tasks.c **** 	else
3773:..\..\FreeRTOS_Source/tasks.c **** 	{
3774:..\..\FreeRTOS_Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3775:..\..\FreeRTOS_Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3776:..\..\FreeRTOS_Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3777:..\..\FreeRTOS_Source/tasks.c **** 		from the Blocked state. */
3778:..\..\FreeRTOS_Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3779:..\..\FreeRTOS_Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 138
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 138
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 138
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 138
>>>>>>> parent of cb49844... test


3780:..\..\FreeRTOS_Source/tasks.c **** 	}
3781:..\..\FreeRTOS_Source/tasks.c **** }
 3759              		.loc 1 3781 0
 3760 0018 08E0     		b	.L255
 3761              	.L253:
3778:..\..\FreeRTOS_Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 3762              		.loc 1 3778 0
 3763 001a 074B     		ldr	r3, .L256
 3764 001c 1B68     		ldr	r3, [r3]
 3765 001e DB68     		ldr	r3, [r3, #12]
 3766 0020 DB68     		ldr	r3, [r3, #12]
 3767 0022 7B60     		str	r3, [r7, #4]
3779:..\..\FreeRTOS_Source/tasks.c **** 	}
 3768              		.loc 1 3779 0
 3769 0024 7B68     		ldr	r3, [r7, #4]
 3770 0026 5B68     		ldr	r3, [r3, #4]
 3771 0028 044A     		ldr	r2, .L256+4
 3772 002a 1360     		str	r3, [r2]
 3773              	.L255:
 3774              		.loc 1 3781 0
 3775 002c 00BF     		nop
 3776 002e 0C37     		adds	r7, r7, #12
 3777              		.cfi_def_cfa_offset 4
 3778 0030 BD46     		mov	sp, r7
 3779              		.cfi_def_cfa_register 13
 3780              		@ sp needed
 3781 0032 80BC     		pop	{r7}
 3782              		.cfi_restore 7
 3783              		.cfi_def_cfa_offset 0
 3784 0034 7047     		bx	lr
 3785              	.L257:
 3786 0036 00BF     		.align	2
 3787              	.L256:
 3788 0038 68000000 		.word	pxDelayedTaskList
 3789 003c D0000000 		.word	xNextTaskUnblockTime
 3790              		.cfi_endproc
 3791              	.LFE106:
 3792              		.size	prvResetNextTaskUnblockTime, .-prvResetNextTaskUnblockTime
 3793              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3794              		.align	2
 3795              		.global	xTaskGetCurrentTaskHandle
 3796              		.thumb
 3797              		.thumb_func
 3798              		.type	xTaskGetCurrentTaskHandle, %function
 3799              	xTaskGetCurrentTaskHandle:
 3800              	.LFB107:
3782:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3783:..\..\FreeRTOS_Source/tasks.c **** 
3784:..\..\FreeRTOS_Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3785:..\..\FreeRTOS_Source/tasks.c **** 
3786:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3787:..\..\FreeRTOS_Source/tasks.c **** 	{
 3801              		.loc 1 3787 0
 3802              		.cfi_startproc
 3803              		@ args = 0, pretend = 0, frame = 8
 3804              		@ frame_needed = 1, uses_anonymous_args = 0
 3805              		@ link register save eliminated.
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 139
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 139
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 139
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 139
>>>>>>> parent of cb49844... test


 3806 0000 80B4     		push	{r7}
 3807              		.cfi_def_cfa_offset 4
 3808              		.cfi_offset 7, -4
 3809 0002 83B0     		sub	sp, sp, #12
 3810              		.cfi_def_cfa_offset 16
 3811 0004 00AF     		add	r7, sp, #0
 3812              		.cfi_def_cfa_register 7
3788:..\..\FreeRTOS_Source/tasks.c **** 	TaskHandle_t xReturn;
3789:..\..\FreeRTOS_Source/tasks.c **** 
3790:..\..\FreeRTOS_Source/tasks.c **** 		/* A critical section is not required as this is not called from
3791:..\..\FreeRTOS_Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3792:..\..\FreeRTOS_Source/tasks.c **** 		individual execution thread. */
3793:..\..\FreeRTOS_Source/tasks.c **** 		xReturn = pxCurrentTCB;
 3813              		.loc 1 3793 0
 3814 0006 044B     		ldr	r3, .L260
 3815 0008 1B68     		ldr	r3, [r3]
 3816 000a 7B60     		str	r3, [r7, #4]
3794:..\..\FreeRTOS_Source/tasks.c **** 
3795:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 3817              		.loc 1 3795 0
 3818 000c 7B68     		ldr	r3, [r7, #4]
3796:..\..\FreeRTOS_Source/tasks.c **** 	}
 3819              		.loc 1 3796 0
 3820 000e 1846     		mov	r0, r3
 3821 0010 0C37     		adds	r7, r7, #12
 3822              		.cfi_def_cfa_offset 4
 3823 0012 BD46     		mov	sp, r7
 3824              		.cfi_def_cfa_register 13
 3825              		@ sp needed
 3826 0014 80BC     		pop	{r7}
 3827              		.cfi_restore 7
 3828              		.cfi_def_cfa_offset 0
 3829 0016 7047     		bx	lr
 3830              	.L261:
 3831              		.align	2
 3832              	.L260:
 3833 0018 00000000 		.word	pxCurrentTCB
 3834              		.cfi_endproc
 3835              	.LFE107:
 3836              		.size	xTaskGetCurrentTaskHandle, .-xTaskGetCurrentTaskHandle
 3837              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3838              		.align	2
 3839              		.global	xTaskPriorityInherit
 3840              		.thumb
 3841              		.thumb_func
 3842              		.type	xTaskPriorityInherit, %function
 3843              	xTaskPriorityInherit:
 3844              	.LFB108:
3797:..\..\FreeRTOS_Source/tasks.c **** 
3798:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3799:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3800:..\..\FreeRTOS_Source/tasks.c **** 
3801:..\..\FreeRTOS_Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3802:..\..\FreeRTOS_Source/tasks.c **** 
3803:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3804:..\..\FreeRTOS_Source/tasks.c **** 	{
3805:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 140
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 140
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 140
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 140
>>>>>>> parent of cb49844... test


3806:..\..\FreeRTOS_Source/tasks.c **** 
3807:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3808:..\..\FreeRTOS_Source/tasks.c **** 		{
3809:..\..\FreeRTOS_Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3810:..\..\FreeRTOS_Source/tasks.c **** 		}
3811:..\..\FreeRTOS_Source/tasks.c **** 		else
3812:..\..\FreeRTOS_Source/tasks.c **** 		{
3813:..\..\FreeRTOS_Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3814:..\..\FreeRTOS_Source/tasks.c **** 			{
3815:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3816:..\..\FreeRTOS_Source/tasks.c **** 			}
3817:..\..\FreeRTOS_Source/tasks.c **** 			else
3818:..\..\FreeRTOS_Source/tasks.c **** 			{
3819:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3820:..\..\FreeRTOS_Source/tasks.c **** 			}
3821:..\..\FreeRTOS_Source/tasks.c **** 		}
3822:..\..\FreeRTOS_Source/tasks.c **** 
3823:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
3824:..\..\FreeRTOS_Source/tasks.c **** 	}
3825:..\..\FreeRTOS_Source/tasks.c **** 
3826:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3827:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3828:..\..\FreeRTOS_Source/tasks.c **** 
3829:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3830:..\..\FreeRTOS_Source/tasks.c **** 
3831:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3832:..\..\FreeRTOS_Source/tasks.c **** 	{
 3845              		.loc 1 3832 0
 3846              		.cfi_startproc
 3847              		@ args = 0, pretend = 0, frame = 16
 3848              		@ frame_needed = 1, uses_anonymous_args = 0
 3849 0000 80B5     		push	{r7, lr}
 3850              		.cfi_def_cfa_offset 8
 3851              		.cfi_offset 7, -8
 3852              		.cfi_offset 14, -4
 3853 0002 84B0     		sub	sp, sp, #16
 3854              		.cfi_def_cfa_offset 24
 3855 0004 00AF     		add	r7, sp, #0
 3856              		.cfi_def_cfa_register 7
 3857 0006 7860     		str	r0, [r7, #4]
3833:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3858              		.loc 1 3833 0
 3859 0008 7B68     		ldr	r3, [r7, #4]
 3860 000a BB60     		str	r3, [r7, #8]
3834:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 3861              		.loc 1 3834 0
 3862 000c 0023     		movs	r3, #0
 3863 000e FB60     		str	r3, [r7, #12]
3835:..\..\FreeRTOS_Source/tasks.c **** 
3836:..\..\FreeRTOS_Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3837:..\..\FreeRTOS_Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3838:..\..\FreeRTOS_Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3839:..\..\FreeRTOS_Source/tasks.c **** 		if( pxMutexHolder != NULL )
 3864              		.loc 1 3839 0
 3865 0010 7B68     		ldr	r3, [r7, #4]
 3866 0012 002B     		cmp	r3, #0
 3867 0014 69D0     		beq	.L263
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 141
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 141
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 141
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 141
>>>>>>> parent of cb49844... test


3840:..\..\FreeRTOS_Source/tasks.c **** 		{
3841:..\..\FreeRTOS_Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3842:..\..\FreeRTOS_Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3843:..\..\FreeRTOS_Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3844:..\..\FreeRTOS_Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 3868              		.loc 1 3844 0
 3869 0016 BB68     		ldr	r3, [r7, #8]
 3870 0018 DA6A     		ldr	r2, [r3, #44]
 3871 001a 364B     		ldr	r3, .L271
 3872 001c 1B68     		ldr	r3, [r3]
 3873 001e DB6A     		ldr	r3, [r3, #44]
 3874 0020 9A42     		cmp	r2, r3
 3875 0022 59D2     		bcs	.L264
3845:..\..\FreeRTOS_Source/tasks.c **** 			{
3846:..\..\FreeRTOS_Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3847:..\..\FreeRTOS_Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3848:..\..\FreeRTOS_Source/tasks.c **** 				not being used for anything else. */
3849:..\..\FreeRTOS_Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 3876              		.loc 1 3849 0
 3877 0024 BB68     		ldr	r3, [r7, #8]
 3878 0026 9B69     		ldr	r3, [r3, #24]
 3879 0028 002B     		cmp	r3, #0
 3880 002a 06DB     		blt	.L265
3850:..\..\FreeRTOS_Source/tasks.c **** 				{
3851:..\..\FreeRTOS_Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 3881              		.loc 1 3851 0
 3882 002c 314B     		ldr	r3, .L271
 3883 002e 1B68     		ldr	r3, [r3]
 3884 0030 DB6A     		ldr	r3, [r3, #44]
 3885 0032 C3F10502 		rsb	r2, r3, #5
 3886 0036 BB68     		ldr	r3, [r7, #8]
 3887 0038 9A61     		str	r2, [r3, #24]
 3888              	.L265:
3852:..\..\FreeRTOS_Source/tasks.c **** 				}
3853:..\..\FreeRTOS_Source/tasks.c **** 				else
3854:..\..\FreeRTOS_Source/tasks.c **** 				{
3855:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3856:..\..\FreeRTOS_Source/tasks.c **** 				}
3857:..\..\FreeRTOS_Source/tasks.c **** 
3858:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3859:..\..\FreeRTOS_Source/tasks.c **** 				to be moved into a new list. */
3860:..\..\FreeRTOS_Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 3889              		.loc 1 3860 0
 3890 003a BB68     		ldr	r3, [r7, #8]
 3891 003c 5969     		ldr	r1, [r3, #20]
 3892 003e BB68     		ldr	r3, [r7, #8]
 3893 0040 DA6A     		ldr	r2, [r3, #44]
 3894 0042 1346     		mov	r3, r2
 3895 0044 9B00     		lsls	r3, r3, #2
 3896 0046 1344     		add	r3, r3, r2
 3897 0048 9B00     		lsls	r3, r3, #2
 3898 004a 2B4A     		ldr	r2, .L271+4
 3899 004c 1344     		add	r3, r3, r2
 3900 004e 9942     		cmp	r1, r3
 3901 0050 3AD1     		bne	.L266
3861:..\..\FreeRTOS_Source/tasks.c **** 				{
3862:..\..\FreeRTOS_Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 142
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 142
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 142
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 142
>>>>>>> parent of cb49844... test


 3902              		.loc 1 3862 0
 3903 0052 BB68     		ldr	r3, [r7, #8]
 3904 0054 0433     		adds	r3, r3, #4
 3905 0056 1846     		mov	r0, r3
 3906 0058 FFF7FEFF 		bl	uxListRemove
 3907 005c 0346     		mov	r3, r0
 3908 005e 002B     		cmp	r3, #0
 3909 0060 15D1     		bne	.L267
3863:..\..\FreeRTOS_Source/tasks.c **** 					{
3864:..\..\FreeRTOS_Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 3910              		.loc 1 3864 0
 3911 0062 BB68     		ldr	r3, [r7, #8]
 3912 0064 DA6A     		ldr	r2, [r3, #44]
 3913 0066 2449     		ldr	r1, .L271+4
 3914 0068 1346     		mov	r3, r2
 3915 006a 9B00     		lsls	r3, r3, #2
 3916 006c 1344     		add	r3, r3, r2
 3917 006e 9B00     		lsls	r3, r3, #2
 3918 0070 0B44     		add	r3, r3, r1
 3919 0072 1B68     		ldr	r3, [r3]
 3920 0074 002B     		cmp	r3, #0
 3921 0076 0AD1     		bne	.L267
 3922              		.loc 1 3864 0 is_stmt 0 discriminator 1
 3923 0078 BB68     		ldr	r3, [r7, #8]
 3924 007a DB6A     		ldr	r3, [r3, #44]
 3925 007c 0122     		movs	r2, #1
 3926 007e 02FA03F3 		lsl	r3, r2, r3
 3927 0082 DA43     		mvns	r2, r3
 3928 0084 1D4B     		ldr	r3, .L271+8
 3929 0086 1B68     		ldr	r3, [r3]
 3930 0088 1340     		ands	r3, r3, r2
 3931 008a 1C4A     		ldr	r2, .L271+8
 3932 008c 1360     		str	r3, [r2]
 3933              	.L267:
3865:..\..\FreeRTOS_Source/tasks.c **** 					}
3866:..\..\FreeRTOS_Source/tasks.c **** 					else
3867:..\..\FreeRTOS_Source/tasks.c **** 					{
3868:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3869:..\..\FreeRTOS_Source/tasks.c **** 					}
3870:..\..\FreeRTOS_Source/tasks.c **** 
3871:..\..\FreeRTOS_Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3872:..\..\FreeRTOS_Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 3934              		.loc 1 3872 0 is_stmt 1
 3935 008e 194B     		ldr	r3, .L271
 3936 0090 1B68     		ldr	r3, [r3]
 3937 0092 DA6A     		ldr	r2, [r3, #44]
 3938 0094 BB68     		ldr	r3, [r7, #8]
 3939 0096 DA62     		str	r2, [r3, #44]
3873:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3940              		.loc 1 3873 0
 3941 0098 BB68     		ldr	r3, [r7, #8]
 3942 009a DB6A     		ldr	r3, [r3, #44]
 3943 009c 0122     		movs	r2, #1
 3944 009e 9A40     		lsls	r2, r2, r3
 3945 00a0 164B     		ldr	r3, .L271+8
 3946 00a2 1B68     		ldr	r3, [r3]
 3947 00a4 1343     		orrs	r3, r3, r2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 143
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 143
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 143
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 143
>>>>>>> parent of cb49844... test


 3948 00a6 154A     		ldr	r2, .L271+8
 3949 00a8 1360     		str	r3, [r2]
 3950 00aa BB68     		ldr	r3, [r7, #8]
 3951 00ac DA6A     		ldr	r2, [r3, #44]
 3952 00ae 1346     		mov	r3, r2
 3953 00b0 9B00     		lsls	r3, r3, #2
 3954 00b2 1344     		add	r3, r3, r2
 3955 00b4 9B00     		lsls	r3, r3, #2
 3956 00b6 104A     		ldr	r2, .L271+4
 3957 00b8 1A44     		add	r2, r2, r3
 3958 00ba BB68     		ldr	r3, [r7, #8]
 3959 00bc 0433     		adds	r3, r3, #4
 3960 00be 1946     		mov	r1, r3
 3961 00c0 1046     		mov	r0, r2
 3962 00c2 FFF7FEFF 		bl	vListInsertEnd
 3963 00c6 04E0     		b	.L269
 3964              	.L266:
3874:..\..\FreeRTOS_Source/tasks.c **** 				}
3875:..\..\FreeRTOS_Source/tasks.c **** 				else
3876:..\..\FreeRTOS_Source/tasks.c **** 				{
3877:..\..\FreeRTOS_Source/tasks.c **** 					/* Just inherit the priority. */
3878:..\..\FreeRTOS_Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 3965              		.loc 1 3878 0
 3966 00c8 0A4B     		ldr	r3, .L271
 3967 00ca 1B68     		ldr	r3, [r3]
 3968 00cc DA6A     		ldr	r2, [r3, #44]
 3969 00ce BB68     		ldr	r3, [r7, #8]
 3970 00d0 DA62     		str	r2, [r3, #44]
 3971              	.L269:
3879:..\..\FreeRTOS_Source/tasks.c **** 				}
3880:..\..\FreeRTOS_Source/tasks.c **** 
3881:..\..\FreeRTOS_Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3882:..\..\FreeRTOS_Source/tasks.c **** 
3883:..\..\FreeRTOS_Source/tasks.c **** 				/* Inheritance occurred. */
3884:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdTRUE;
 3972              		.loc 1 3884 0
 3973 00d2 0123     		movs	r3, #1
 3974 00d4 FB60     		str	r3, [r7, #12]
 3975 00d6 08E0     		b	.L263
 3976              	.L264:
3885:..\..\FreeRTOS_Source/tasks.c **** 			}
3886:..\..\FreeRTOS_Source/tasks.c **** 			else
3887:..\..\FreeRTOS_Source/tasks.c **** 			{
3888:..\..\FreeRTOS_Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 3977              		.loc 1 3888 0
 3978 00d8 BB68     		ldr	r3, [r7, #8]
 3979 00da 1A6C     		ldr	r2, [r3, #64]
 3980 00dc 054B     		ldr	r3, .L271
 3981 00de 1B68     		ldr	r3, [r3]
 3982 00e0 DB6A     		ldr	r3, [r3, #44]
 3983 00e2 9A42     		cmp	r2, r3
 3984 00e4 01D2     		bcs	.L263
3889:..\..\FreeRTOS_Source/tasks.c **** 				{
3890:..\..\FreeRTOS_Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3891:..\..\FreeRTOS_Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3892:..\..\FreeRTOS_Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3893:..\..\FreeRTOS_Source/tasks.c **** 					priority of the task attempting to take the mutex.
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 144
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 144
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 144
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 144
>>>>>>> parent of cb49844... test


3894:..\..\FreeRTOS_Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3895:..\..\FreeRTOS_Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3896:..\..\FreeRTOS_Source/tasks.c **** 					not been the case. */
3897:..\..\FreeRTOS_Source/tasks.c **** 					xReturn = pdTRUE;
 3985              		.loc 1 3897 0
 3986 00e6 0123     		movs	r3, #1
 3987 00e8 FB60     		str	r3, [r7, #12]
 3988              	.L263:
3898:..\..\FreeRTOS_Source/tasks.c **** 				}
3899:..\..\FreeRTOS_Source/tasks.c **** 				else
3900:..\..\FreeRTOS_Source/tasks.c **** 				{
3901:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3902:..\..\FreeRTOS_Source/tasks.c **** 				}
3903:..\..\FreeRTOS_Source/tasks.c **** 			}
3904:..\..\FreeRTOS_Source/tasks.c **** 		}
3905:..\..\FreeRTOS_Source/tasks.c **** 		else
3906:..\..\FreeRTOS_Source/tasks.c **** 		{
3907:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:..\..\FreeRTOS_Source/tasks.c **** 		}
3909:..\..\FreeRTOS_Source/tasks.c **** 
3910:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 3989              		.loc 1 3910 0
 3990 00ea FB68     		ldr	r3, [r7, #12]
3911:..\..\FreeRTOS_Source/tasks.c **** 	}
 3991              		.loc 1 3911 0
 3992 00ec 1846     		mov	r0, r3
 3993 00ee 1037     		adds	r7, r7, #16
 3994              		.cfi_def_cfa_offset 8
 3995 00f0 BD46     		mov	sp, r7
 3996              		.cfi_def_cfa_register 13
 3997              		@ sp needed
 3998 00f2 80BD     		pop	{r7, pc}
 3999              	.L272:
 4000              		.align	2
 4001              	.L271:
 4002 00f4 00000000 		.word	pxCurrentTCB
 4003 00f8 04000000 		.word	pxReadyTasksLists
 4004 00fc B8000000 		.word	uxTopReadyPriority
 4005              		.cfi_endproc
 4006              	.LFE108:
 4007              		.size	xTaskPriorityInherit, .-xTaskPriorityInherit
 4008              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4009              		.align	2
 4010              		.global	xTaskPriorityDisinherit
 4011              		.thumb
 4012              		.thumb_func
 4013              		.type	xTaskPriorityDisinherit, %function
 4014              	xTaskPriorityDisinherit:
 4015              	.LFB109:
3912:..\..\FreeRTOS_Source/tasks.c **** 
3913:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
3914:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3915:..\..\FreeRTOS_Source/tasks.c **** 
3916:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3917:..\..\FreeRTOS_Source/tasks.c **** 
3918:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3919:..\..\FreeRTOS_Source/tasks.c **** 	{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 145
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 145
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 145
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 145
>>>>>>> parent of cb49844... test


 4016              		.loc 1 3919 0
 4017              		.cfi_startproc
 4018              		@ args = 0, pretend = 0, frame = 16
 4019              		@ frame_needed = 1, uses_anonymous_args = 0
 4020 0000 80B5     		push	{r7, lr}
 4021              		.cfi_def_cfa_offset 8
 4022              		.cfi_offset 7, -8
 4023              		.cfi_offset 14, -4
 4024 0002 84B0     		sub	sp, sp, #16
 4025              		.cfi_def_cfa_offset 24
 4026 0004 00AF     		add	r7, sp, #0
 4027              		.cfi_def_cfa_register 7
 4028 0006 7860     		str	r0, [r7, #4]
3920:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4029              		.loc 1 3920 0
 4030 0008 7B68     		ldr	r3, [r7, #4]
 4031 000a BB60     		str	r3, [r7, #8]
3921:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 4032              		.loc 1 3921 0
 4033 000c 0023     		movs	r3, #0
 4034 000e FB60     		str	r3, [r7, #12]
3922:..\..\FreeRTOS_Source/tasks.c **** 
3923:..\..\FreeRTOS_Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4035              		.loc 1 3923 0
 4036 0010 7B68     		ldr	r3, [r7, #4]
 4037 0012 002B     		cmp	r3, #0
 4038 0014 4FD0     		beq	.L274
3924:..\..\FreeRTOS_Source/tasks.c **** 		{
3925:..\..\FreeRTOS_Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3926:..\..\FreeRTOS_Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3927:..\..\FreeRTOS_Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3928:..\..\FreeRTOS_Source/tasks.c **** 			be the running state task. */
3929:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3930:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3931:..\..\FreeRTOS_Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4039              		.loc 1 3931 0
 4040 0016 BB68     		ldr	r3, [r7, #8]
 4041 0018 5B6C     		ldr	r3, [r3, #68]
 4042 001a 5A1E     		subs	r2, r3, #1
 4043 001c BB68     		ldr	r3, [r7, #8]
 4044 001e 5A64     		str	r2, [r3, #68]
3932:..\..\FreeRTOS_Source/tasks.c **** 
3933:..\..\FreeRTOS_Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3934:..\..\FreeRTOS_Source/tasks.c **** 			task? */
3935:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 4045              		.loc 1 3935 0
 4046 0020 BB68     		ldr	r3, [r7, #8]
 4047 0022 DA6A     		ldr	r2, [r3, #44]
 4048 0024 BB68     		ldr	r3, [r7, #8]
 4049 0026 1B6C     		ldr	r3, [r3, #64]
 4050 0028 9A42     		cmp	r2, r3
 4051 002a 44D0     		beq	.L274
3936:..\..\FreeRTOS_Source/tasks.c **** 			{
3937:..\..\FreeRTOS_Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3938:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 4052              		.loc 1 3938 0
 4053 002c BB68     		ldr	r3, [r7, #8]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 146
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 146
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 146
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 146
>>>>>>> parent of cb49844... test


 4054 002e 5B6C     		ldr	r3, [r3, #68]
 4055 0030 002B     		cmp	r3, #0
 4056 0032 40D1     		bne	.L274
3939:..\..\FreeRTOS_Source/tasks.c **** 				{
3940:..\..\FreeRTOS_Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3941:..\..\FreeRTOS_Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3942:..\..\FreeRTOS_Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3943:..\..\FreeRTOS_Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3944:..\..\FreeRTOS_Source/tasks.c **** 					the holding task from the ready list. */
3945:..\..\FreeRTOS_Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4057              		.loc 1 3945 0
 4058 0034 BB68     		ldr	r3, [r7, #8]
 4059 0036 0433     		adds	r3, r3, #4
 4060 0038 1846     		mov	r0, r3
 4061 003a FFF7FEFF 		bl	uxListRemove
 4062 003e 0346     		mov	r3, r0
 4063 0040 002B     		cmp	r3, #0
 4064 0042 15D1     		bne	.L275
3946:..\..\FreeRTOS_Source/tasks.c **** 					{
3947:..\..\FreeRTOS_Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4065              		.loc 1 3947 0
 4066 0044 BB68     		ldr	r3, [r7, #8]
 4067 0046 DA6A     		ldr	r2, [r3, #44]
 4068 0048 1D49     		ldr	r1, .L278
 4069 004a 1346     		mov	r3, r2
 4070 004c 9B00     		lsls	r3, r3, #2
 4071 004e 1344     		add	r3, r3, r2
 4072 0050 9B00     		lsls	r3, r3, #2
 4073 0052 0B44     		add	r3, r3, r1
 4074 0054 1B68     		ldr	r3, [r3]
 4075 0056 002B     		cmp	r3, #0
 4076 0058 0AD1     		bne	.L275
 4077              		.loc 1 3947 0 is_stmt 0 discriminator 1
 4078 005a BB68     		ldr	r3, [r7, #8]
 4079 005c DB6A     		ldr	r3, [r3, #44]
 4080 005e 0122     		movs	r2, #1
 4081 0060 02FA03F3 		lsl	r3, r2, r3
 4082 0064 DA43     		mvns	r2, r3
 4083 0066 174B     		ldr	r3, .L278+4
 4084 0068 1B68     		ldr	r3, [r3]
 4085 006a 1340     		ands	r3, r3, r2
 4086 006c 154A     		ldr	r2, .L278+4
 4087 006e 1360     		str	r3, [r2]
 4088              	.L275:
3948:..\..\FreeRTOS_Source/tasks.c **** 					}
3949:..\..\FreeRTOS_Source/tasks.c **** 					else
3950:..\..\FreeRTOS_Source/tasks.c **** 					{
3951:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3952:..\..\FreeRTOS_Source/tasks.c **** 					}
3953:..\..\FreeRTOS_Source/tasks.c **** 
3954:..\..\FreeRTOS_Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3955:..\..\FreeRTOS_Source/tasks.c **** 					new	ready list. */
3956:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3957:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 4089              		.loc 1 3957 0 is_stmt 1
 4090 0070 BB68     		ldr	r3, [r7, #8]
 4091 0072 1A6C     		ldr	r2, [r3, #64]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 147
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 147
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 147
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 147
>>>>>>> parent of cb49844... test


 4092 0074 BB68     		ldr	r3, [r7, #8]
 4093 0076 DA62     		str	r2, [r3, #44]
3958:..\..\FreeRTOS_Source/tasks.c **** 
3959:..\..\FreeRTOS_Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3960:..\..\FreeRTOS_Source/tasks.c **** 					any other purpose if this task is running, and it must be
3961:..\..\FreeRTOS_Source/tasks.c **** 					running to give back the mutex. */
3962:..\..\FreeRTOS_Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 4094              		.loc 1 3962 0
 4095 0078 BB68     		ldr	r3, [r7, #8]
 4096 007a DB6A     		ldr	r3, [r3, #44]
 4097 007c C3F10502 		rsb	r2, r3, #5
 4098 0080 BB68     		ldr	r3, [r7, #8]
 4099 0082 9A61     		str	r2, [r3, #24]
3963:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4100              		.loc 1 3963 0
 4101 0084 BB68     		ldr	r3, [r7, #8]
 4102 0086 DB6A     		ldr	r3, [r3, #44]
 4103 0088 0122     		movs	r2, #1
 4104 008a 9A40     		lsls	r2, r2, r3
 4105 008c 0D4B     		ldr	r3, .L278+4
 4106 008e 1B68     		ldr	r3, [r3]
 4107 0090 1343     		orrs	r3, r3, r2
 4108 0092 0C4A     		ldr	r2, .L278+4
 4109 0094 1360     		str	r3, [r2]
 4110 0096 BB68     		ldr	r3, [r7, #8]
 4111 0098 DA6A     		ldr	r2, [r3, #44]
 4112 009a 1346     		mov	r3, r2
 4113 009c 9B00     		lsls	r3, r3, #2
 4114 009e 1344     		add	r3, r3, r2
 4115 00a0 9B00     		lsls	r3, r3, #2
 4116 00a2 074A     		ldr	r2, .L278
 4117 00a4 1A44     		add	r2, r2, r3
 4118 00a6 BB68     		ldr	r3, [r7, #8]
 4119 00a8 0433     		adds	r3, r3, #4
 4120 00aa 1946     		mov	r1, r3
 4121 00ac 1046     		mov	r0, r2
 4122 00ae FFF7FEFF 		bl	vListInsertEnd
3964:..\..\FreeRTOS_Source/tasks.c **** 
3965:..\..\FreeRTOS_Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3966:..\..\FreeRTOS_Source/tasks.c **** 					This is only actually required in the corner case whereby
3967:..\..\FreeRTOS_Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3968:..\..\FreeRTOS_Source/tasks.c **** 					in an order different to that in which they were taken.
3969:..\..\FreeRTOS_Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3970:..\..\FreeRTOS_Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3971:..\..\FreeRTOS_Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3972:..\..\FreeRTOS_Source/tasks.c **** 					a task is waiting on it or not. */
3973:..\..\FreeRTOS_Source/tasks.c **** 					xReturn = pdTRUE;
 4123              		.loc 1 3973 0
 4124 00b2 0123     		movs	r3, #1
 4125 00b4 FB60     		str	r3, [r7, #12]
 4126              	.L274:
3974:..\..\FreeRTOS_Source/tasks.c **** 				}
3975:..\..\FreeRTOS_Source/tasks.c **** 				else
3976:..\..\FreeRTOS_Source/tasks.c **** 				{
3977:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3978:..\..\FreeRTOS_Source/tasks.c **** 				}
3979:..\..\FreeRTOS_Source/tasks.c **** 			}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 148
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 148
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 148
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 148
>>>>>>> parent of cb49844... test


3980:..\..\FreeRTOS_Source/tasks.c **** 			else
3981:..\..\FreeRTOS_Source/tasks.c **** 			{
3982:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3983:..\..\FreeRTOS_Source/tasks.c **** 			}
3984:..\..\FreeRTOS_Source/tasks.c **** 		}
3985:..\..\FreeRTOS_Source/tasks.c **** 		else
3986:..\..\FreeRTOS_Source/tasks.c **** 		{
3987:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3988:..\..\FreeRTOS_Source/tasks.c **** 		}
3989:..\..\FreeRTOS_Source/tasks.c **** 
3990:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 4127              		.loc 1 3990 0
 4128 00b6 FB68     		ldr	r3, [r7, #12]
3991:..\..\FreeRTOS_Source/tasks.c **** 	}
 4129              		.loc 1 3991 0
 4130 00b8 1846     		mov	r0, r3
 4131 00ba 1037     		adds	r7, r7, #16
 4132              		.cfi_def_cfa_offset 8
 4133 00bc BD46     		mov	sp, r7
 4134              		.cfi_def_cfa_register 13
 4135              		@ sp needed
 4136 00be 80BD     		pop	{r7, pc}
 4137              	.L279:
 4138              		.align	2
 4139              	.L278:
 4140 00c0 04000000 		.word	pxReadyTasksLists
 4141 00c4 B8000000 		.word	uxTopReadyPriority
 4142              		.cfi_endproc
 4143              	.LFE109:
 4144              		.size	xTaskPriorityDisinherit, .-xTaskPriorityDisinherit
 4145              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4146              		.align	2
 4147              		.global	vTaskPriorityDisinheritAfterTimeout
 4148              		.thumb
 4149              		.thumb_func
 4150              		.type	vTaskPriorityDisinheritAfterTimeout, %function
 4151              	vTaskPriorityDisinheritAfterTimeout:
 4152              	.LFB110:
3992:..\..\FreeRTOS_Source/tasks.c **** 
3993:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
3994:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
3995:..\..\FreeRTOS_Source/tasks.c **** 
3996:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3997:..\..\FreeRTOS_Source/tasks.c **** 
3998:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3999:..\..\FreeRTOS_Source/tasks.c **** 	{
 4153              		.loc 1 3999 0
 4154              		.cfi_startproc
 4155              		@ args = 0, pretend = 0, frame = 24
 4156              		@ frame_needed = 1, uses_anonymous_args = 0
 4157 0000 80B5     		push	{r7, lr}
 4158              		.cfi_def_cfa_offset 8
 4159              		.cfi_offset 7, -8
 4160              		.cfi_offset 14, -4
 4161 0002 86B0     		sub	sp, sp, #24
 4162              		.cfi_def_cfa_offset 32
 4163 0004 00AF     		add	r7, sp, #0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 149
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 149
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 149
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 149
>>>>>>> parent of cb49844... test


 4164              		.cfi_def_cfa_register 7
 4165 0006 7860     		str	r0, [r7, #4]
 4166 0008 3960     		str	r1, [r7]
4000:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 4167              		.loc 1 4000 0
 4168 000a 7B68     		ldr	r3, [r7, #4]
 4169 000c 3B61     		str	r3, [r7, #16]
4001:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4002:..\..\FreeRTOS_Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 4170              		.loc 1 4002 0
 4171 000e 0123     		movs	r3, #1
 4172 0010 FB60     		str	r3, [r7, #12]
4003:..\..\FreeRTOS_Source/tasks.c **** 
4004:..\..\FreeRTOS_Source/tasks.c **** 		if( pxMutexHolder != NULL )
 4173              		.loc 1 4004 0
 4174 0012 7B68     		ldr	r3, [r7, #4]
 4175 0014 002B     		cmp	r3, #0
 4176 0016 63D0     		beq	.L287
4005:..\..\FreeRTOS_Source/tasks.c **** 		{
4006:..\..\FreeRTOS_Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4007:..\..\FreeRTOS_Source/tasks.c **** 			one mutex. */
4008:..\..\FreeRTOS_Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4009:..\..\FreeRTOS_Source/tasks.c **** 
4010:..\..\FreeRTOS_Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4011:..\..\FreeRTOS_Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4012:..\..\FreeRTOS_Source/tasks.c **** 			holding task's base priority and the priority of the highest
4013:..\..\FreeRTOS_Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4014:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 4177              		.loc 1 4014 0
 4178 0018 3B69     		ldr	r3, [r7, #16]
 4179 001a 1A6C     		ldr	r2, [r3, #64]
 4180 001c 3B68     		ldr	r3, [r7]
 4181 001e 9A42     		cmp	r2, r3
 4182 0020 02D2     		bcs	.L282
4015:..\..\FreeRTOS_Source/tasks.c **** 			{
4016:..\..\FreeRTOS_Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 4183              		.loc 1 4016 0
 4184 0022 3B68     		ldr	r3, [r7]
 4185 0024 7B61     		str	r3, [r7, #20]
 4186 0026 02E0     		b	.L283
 4187              	.L282:
4017:..\..\FreeRTOS_Source/tasks.c **** 			}
4018:..\..\FreeRTOS_Source/tasks.c **** 			else
4019:..\..\FreeRTOS_Source/tasks.c **** 			{
4020:..\..\FreeRTOS_Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 4188              		.loc 1 4020 0
 4189 0028 3B69     		ldr	r3, [r7, #16]
 4190 002a 1B6C     		ldr	r3, [r3, #64]
 4191 002c 7B61     		str	r3, [r7, #20]
 4192              	.L283:
4021:..\..\FreeRTOS_Source/tasks.c **** 			}
4022:..\..\FreeRTOS_Source/tasks.c **** 
4023:..\..\FreeRTOS_Source/tasks.c **** 			/* Does the priority need to change? */
4024:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 4193              		.loc 1 4024 0
 4194 002e 3B69     		ldr	r3, [r7, #16]
 4195 0030 DA6A     		ldr	r2, [r3, #44]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 150
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 150
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 150
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 150
>>>>>>> parent of cb49844... test


 4196 0032 7B69     		ldr	r3, [r7, #20]
 4197 0034 9A42     		cmp	r2, r3
 4198 0036 53D0     		beq	.L287
4025:..\..\FreeRTOS_Source/tasks.c **** 			{
4026:..\..\FreeRTOS_Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4027:..\..\FreeRTOS_Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4028:..\..\FreeRTOS_Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4029:..\..\FreeRTOS_Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4030:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 4199              		.loc 1 4030 0
 4200 0038 3B69     		ldr	r3, [r7, #16]
 4201 003a 5A6C     		ldr	r2, [r3, #68]
 4202 003c FB68     		ldr	r3, [r7, #12]
 4203 003e 9A42     		cmp	r2, r3
 4204 0040 4ED1     		bne	.L287
4031:..\..\FreeRTOS_Source/tasks.c **** 				{
4032:..\..\FreeRTOS_Source/tasks.c **** 					/* If a task has timed out because it already holds the
4033:..\..\FreeRTOS_Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4034:..\..\FreeRTOS_Source/tasks.c **** 					its own priority. */
4035:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4036:..\..\FreeRTOS_Source/tasks.c **** 
4037:..\..\FreeRTOS_Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4038:..\..\FreeRTOS_Source/tasks.c **** 					priority to facilitate determining the subject task's
4039:..\..\FreeRTOS_Source/tasks.c **** 					state. */
4040:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4041:..\..\FreeRTOS_Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 4205              		.loc 1 4041 0
 4206 0042 3B69     		ldr	r3, [r7, #16]
 4207 0044 DB6A     		ldr	r3, [r3, #44]
 4208 0046 BB60     		str	r3, [r7, #8]
4042:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 4209              		.loc 1 4042 0
 4210 0048 3B69     		ldr	r3, [r7, #16]
 4211 004a 7A69     		ldr	r2, [r7, #20]
 4212 004c DA62     		str	r2, [r3, #44]
4043:..\..\FreeRTOS_Source/tasks.c **** 
4044:..\..\FreeRTOS_Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4045:..\..\FreeRTOS_Source/tasks.c **** 					being used for anything else. */
4046:..\..\FreeRTOS_Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 4213              		.loc 1 4046 0
 4214 004e 3B69     		ldr	r3, [r7, #16]
 4215 0050 9B69     		ldr	r3, [r3, #24]
 4216 0052 002B     		cmp	r3, #0
 4217 0054 04DB     		blt	.L284
4047:..\..\FreeRTOS_Source/tasks.c **** 					{
4048:..\..\FreeRTOS_Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 4218              		.loc 1 4048 0
 4219 0056 7B69     		ldr	r3, [r7, #20]
 4220 0058 C3F10502 		rsb	r2, r3, #5
 4221 005c 3B69     		ldr	r3, [r7, #16]
 4222 005e 9A61     		str	r2, [r3, #24]
 4223              	.L284:
4049:..\..\FreeRTOS_Source/tasks.c **** 					}
4050:..\..\FreeRTOS_Source/tasks.c **** 					else
4051:..\..\FreeRTOS_Source/tasks.c **** 					{
4052:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4053:..\..\FreeRTOS_Source/tasks.c **** 					}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 151
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 151
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 151
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 151
>>>>>>> parent of cb49844... test


4054:..\..\FreeRTOS_Source/tasks.c **** 
4055:..\..\FreeRTOS_Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4056:..\..\FreeRTOS_Source/tasks.c **** 					then the task that holds the mutex could be in either the
4057:..\..\FreeRTOS_Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4058:..\..\FreeRTOS_Source/tasks.c **** 					from its current state list if it is in the Ready state as
4059:..\..\FreeRTOS_Source/tasks.c **** 					the task's priority is going to change and there is one
4060:..\..\FreeRTOS_Source/tasks.c **** 					Ready list per priority. */
4061:..\..\FreeRTOS_Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 4224              		.loc 1 4061 0
 4225 0060 3B69     		ldr	r3, [r7, #16]
 4226 0062 5969     		ldr	r1, [r3, #20]
 4227 0064 BA68     		ldr	r2, [r7, #8]
 4228 0066 1346     		mov	r3, r2
 4229 0068 9B00     		lsls	r3, r3, #2
 4230 006a 1344     		add	r3, r3, r2
 4231 006c 9B00     		lsls	r3, r3, #2
 4232 006e 1E4A     		ldr	r2, .L288
 4233 0070 1344     		add	r3, r3, r2
 4234 0072 9942     		cmp	r1, r3
 4235 0074 34D1     		bne	.L287
4062:..\..\FreeRTOS_Source/tasks.c **** 					{
4063:..\..\FreeRTOS_Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 4236              		.loc 1 4063 0
 4237 0076 3B69     		ldr	r3, [r7, #16]
 4238 0078 0433     		adds	r3, r3, #4
 4239 007a 1846     		mov	r0, r3
 4240 007c FFF7FEFF 		bl	uxListRemove
 4241 0080 0346     		mov	r3, r0
 4242 0082 002B     		cmp	r3, #0
 4243 0084 15D1     		bne	.L285
4064:..\..\FreeRTOS_Source/tasks.c **** 						{
4065:..\..\FreeRTOS_Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 4244              		.loc 1 4065 0
 4245 0086 3B69     		ldr	r3, [r7, #16]
 4246 0088 DA6A     		ldr	r2, [r3, #44]
 4247 008a 1749     		ldr	r1, .L288
 4248 008c 1346     		mov	r3, r2
 4249 008e 9B00     		lsls	r3, r3, #2
 4250 0090 1344     		add	r3, r3, r2
 4251 0092 9B00     		lsls	r3, r3, #2
 4252 0094 0B44     		add	r3, r3, r1
 4253 0096 1B68     		ldr	r3, [r3]
 4254 0098 002B     		cmp	r3, #0
 4255 009a 0AD1     		bne	.L285
 4256              		.loc 1 4065 0 is_stmt 0 discriminator 1
 4257 009c 3B69     		ldr	r3, [r7, #16]
 4258 009e DB6A     		ldr	r3, [r3, #44]
 4259 00a0 0122     		movs	r2, #1
 4260 00a2 02FA03F3 		lsl	r3, r2, r3
 4261 00a6 DA43     		mvns	r2, r3
 4262 00a8 104B     		ldr	r3, .L288+4
 4263 00aa 1B68     		ldr	r3, [r3]
 4264 00ac 1340     		ands	r3, r3, r2
 4265 00ae 0F4A     		ldr	r2, .L288+4
 4266 00b0 1360     		str	r3, [r2]
 4267              	.L285:
4066:..\..\FreeRTOS_Source/tasks.c **** 						}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 152
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 152
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 152
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 152
>>>>>>> parent of cb49844... test


4067:..\..\FreeRTOS_Source/tasks.c **** 						else
4068:..\..\FreeRTOS_Source/tasks.c **** 						{
4069:..\..\FreeRTOS_Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4070:..\..\FreeRTOS_Source/tasks.c **** 						}
4071:..\..\FreeRTOS_Source/tasks.c **** 
4072:..\..\FreeRTOS_Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 4268              		.loc 1 4072 0 is_stmt 1
 4269 00b2 3B69     		ldr	r3, [r7, #16]
 4270 00b4 DB6A     		ldr	r3, [r3, #44]
 4271 00b6 0122     		movs	r2, #1
 4272 00b8 9A40     		lsls	r2, r2, r3
 4273 00ba 0C4B     		ldr	r3, .L288+4
 4274 00bc 1B68     		ldr	r3, [r3]
 4275 00be 1343     		orrs	r3, r3, r2
 4276 00c0 0A4A     		ldr	r2, .L288+4
 4277 00c2 1360     		str	r3, [r2]
 4278 00c4 3B69     		ldr	r3, [r7, #16]
 4279 00c6 DA6A     		ldr	r2, [r3, #44]
 4280 00c8 1346     		mov	r3, r2
 4281 00ca 9B00     		lsls	r3, r3, #2
 4282 00cc 1344     		add	r3, r3, r2
 4283 00ce 9B00     		lsls	r3, r3, #2
 4284 00d0 054A     		ldr	r2, .L288
 4285 00d2 1A44     		add	r2, r2, r3
 4286 00d4 3B69     		ldr	r3, [r7, #16]
 4287 00d6 0433     		adds	r3, r3, #4
 4288 00d8 1946     		mov	r1, r3
 4289 00da 1046     		mov	r0, r2
 4290 00dc FFF7FEFF 		bl	vListInsertEnd
 4291              	.L287:
4073:..\..\FreeRTOS_Source/tasks.c **** 					}
4074:..\..\FreeRTOS_Source/tasks.c **** 					else
4075:..\..\FreeRTOS_Source/tasks.c **** 					{
4076:..\..\FreeRTOS_Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4077:..\..\FreeRTOS_Source/tasks.c **** 					}
4078:..\..\FreeRTOS_Source/tasks.c **** 				}
4079:..\..\FreeRTOS_Source/tasks.c **** 				else
4080:..\..\FreeRTOS_Source/tasks.c **** 				{
4081:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4082:..\..\FreeRTOS_Source/tasks.c **** 				}
4083:..\..\FreeRTOS_Source/tasks.c **** 			}
4084:..\..\FreeRTOS_Source/tasks.c **** 			else
4085:..\..\FreeRTOS_Source/tasks.c **** 			{
4086:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4087:..\..\FreeRTOS_Source/tasks.c **** 			}
4088:..\..\FreeRTOS_Source/tasks.c **** 		}
4089:..\..\FreeRTOS_Source/tasks.c **** 		else
4090:..\..\FreeRTOS_Source/tasks.c **** 		{
4091:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:..\..\FreeRTOS_Source/tasks.c **** 		}
4093:..\..\FreeRTOS_Source/tasks.c **** 	}
 4292              		.loc 1 4093 0
 4293 00e0 00BF     		nop
 4294 00e2 1837     		adds	r7, r7, #24
 4295              		.cfi_def_cfa_offset 8
 4296 00e4 BD46     		mov	sp, r7
 4297              		.cfi_def_cfa_register 13
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 153
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 153
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 153
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 153
>>>>>>> parent of cb49844... test


 4298              		@ sp needed
 4299 00e6 80BD     		pop	{r7, pc}
 4300              	.L289:
 4301              		.align	2
 4302              	.L288:
 4303 00e8 04000000 		.word	pxReadyTasksLists
 4304 00ec B8000000 		.word	uxTopReadyPriority
 4305              		.cfi_endproc
 4306              	.LFE110:
 4307              		.size	vTaskPriorityDisinheritAfterTimeout, .-vTaskPriorityDisinheritAfterTimeout
 4308              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4309              		.align	2
 4310              		.global	uxTaskResetEventItemValue
 4311              		.thumb
 4312              		.thumb_func
 4313              		.type	uxTaskResetEventItemValue, %function
 4314              	uxTaskResetEventItemValue:
 4315              	.LFB111:
4094:..\..\FreeRTOS_Source/tasks.c **** 
4095:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
4096:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4097:..\..\FreeRTOS_Source/tasks.c **** 
4098:..\..\FreeRTOS_Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:..\..\FreeRTOS_Source/tasks.c **** 
4100:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskEnterCritical( void )
4101:..\..\FreeRTOS_Source/tasks.c **** 	{
4102:..\..\FreeRTOS_Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4103:..\..\FreeRTOS_Source/tasks.c **** 
4104:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4105:..\..\FreeRTOS_Source/tasks.c **** 		{
4106:..\..\FreeRTOS_Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4107:..\..\FreeRTOS_Source/tasks.c **** 
4108:..\..\FreeRTOS_Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4109:..\..\FreeRTOS_Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4110:..\..\FreeRTOS_Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4111:..\..\FreeRTOS_Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4112:..\..\FreeRTOS_Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4113:..\..\FreeRTOS_Source/tasks.c **** 			critical section. */
4114:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4115:..\..\FreeRTOS_Source/tasks.c **** 			{
4116:..\..\FreeRTOS_Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4117:..\..\FreeRTOS_Source/tasks.c **** 			}
4118:..\..\FreeRTOS_Source/tasks.c **** 		}
4119:..\..\FreeRTOS_Source/tasks.c **** 		else
4120:..\..\FreeRTOS_Source/tasks.c **** 		{
4121:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4122:..\..\FreeRTOS_Source/tasks.c **** 		}
4123:..\..\FreeRTOS_Source/tasks.c **** 	}
4124:..\..\FreeRTOS_Source/tasks.c **** 
4125:..\..\FreeRTOS_Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4126:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4127:..\..\FreeRTOS_Source/tasks.c **** 
4128:..\..\FreeRTOS_Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4129:..\..\FreeRTOS_Source/tasks.c **** 
4130:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskExitCritical( void )
4131:..\..\FreeRTOS_Source/tasks.c **** 	{
4132:..\..\FreeRTOS_Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 154
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 154
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 154
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 154
>>>>>>> parent of cb49844... test


4133:..\..\FreeRTOS_Source/tasks.c **** 		{
4134:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4135:..\..\FreeRTOS_Source/tasks.c **** 			{
4136:..\..\FreeRTOS_Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4137:..\..\FreeRTOS_Source/tasks.c **** 
4138:..\..\FreeRTOS_Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4139:..\..\FreeRTOS_Source/tasks.c **** 				{
4140:..\..\FreeRTOS_Source/tasks.c **** 					portENABLE_INTERRUPTS();
4141:..\..\FreeRTOS_Source/tasks.c **** 				}
4142:..\..\FreeRTOS_Source/tasks.c **** 				else
4143:..\..\FreeRTOS_Source/tasks.c **** 				{
4144:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4145:..\..\FreeRTOS_Source/tasks.c **** 				}
4146:..\..\FreeRTOS_Source/tasks.c **** 			}
4147:..\..\FreeRTOS_Source/tasks.c **** 			else
4148:..\..\FreeRTOS_Source/tasks.c **** 			{
4149:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4150:..\..\FreeRTOS_Source/tasks.c **** 			}
4151:..\..\FreeRTOS_Source/tasks.c **** 		}
4152:..\..\FreeRTOS_Source/tasks.c **** 		else
4153:..\..\FreeRTOS_Source/tasks.c **** 		{
4154:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4155:..\..\FreeRTOS_Source/tasks.c **** 		}
4156:..\..\FreeRTOS_Source/tasks.c **** 	}
4157:..\..\FreeRTOS_Source/tasks.c **** 
4158:..\..\FreeRTOS_Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4159:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4160:..\..\FreeRTOS_Source/tasks.c **** 
4161:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4162:..\..\FreeRTOS_Source/tasks.c **** 
4163:..\..\FreeRTOS_Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4164:..\..\FreeRTOS_Source/tasks.c **** 	{
4165:..\..\FreeRTOS_Source/tasks.c **** 	size_t x;
4166:..\..\FreeRTOS_Source/tasks.c **** 
4167:..\..\FreeRTOS_Source/tasks.c **** 		/* Start by copying the entire string. */
4168:..\..\FreeRTOS_Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4169:..\..\FreeRTOS_Source/tasks.c **** 
4170:..\..\FreeRTOS_Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4171:..\..\FreeRTOS_Source/tasks.c **** 		printed out. */
4172:..\..\FreeRTOS_Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4173:..\..\FreeRTOS_Source/tasks.c **** 		{
4174:..\..\FreeRTOS_Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4175:..\..\FreeRTOS_Source/tasks.c **** 		}
4176:..\..\FreeRTOS_Source/tasks.c **** 
4177:..\..\FreeRTOS_Source/tasks.c **** 		/* Terminate. */
4178:..\..\FreeRTOS_Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4179:..\..\FreeRTOS_Source/tasks.c **** 
4180:..\..\FreeRTOS_Source/tasks.c **** 		/* Return the new end of string. */
4181:..\..\FreeRTOS_Source/tasks.c **** 		return &( pcBuffer[ x ] );
4182:..\..\FreeRTOS_Source/tasks.c **** 	}
4183:..\..\FreeRTOS_Source/tasks.c **** 
4184:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4185:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4186:..\..\FreeRTOS_Source/tasks.c **** 
4187:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4188:..\..\FreeRTOS_Source/tasks.c **** 
4189:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 155
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 155
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 155
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 155
>>>>>>> parent of cb49844... test


4190:..\..\FreeRTOS_Source/tasks.c **** 	{
4191:..\..\FreeRTOS_Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4192:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4193:..\..\FreeRTOS_Source/tasks.c **** 	char cStatus;
4194:..\..\FreeRTOS_Source/tasks.c **** 
4195:..\..\FreeRTOS_Source/tasks.c **** 		/*
4196:..\..\FreeRTOS_Source/tasks.c **** 		 * PLEASE NOTE:
4197:..\..\FreeRTOS_Source/tasks.c **** 		 *
4198:..\..\FreeRTOS_Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4199:..\..\FreeRTOS_Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4200:..\..\FreeRTOS_Source/tasks.c **** 		 * scheduler.
4201:..\..\FreeRTOS_Source/tasks.c **** 		 *
4202:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4203:..\..\FreeRTOS_Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4204:..\..\FreeRTOS_Source/tasks.c **** 		 * displays task names, states and stack usage.
4205:..\..\FreeRTOS_Source/tasks.c **** 		 *
4206:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4207:..\..\FreeRTOS_Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4208:..\..\FreeRTOS_Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4209:..\..\FreeRTOS_Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4210:..\..\FreeRTOS_Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4211:..\..\FreeRTOS_Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4212:..\..\FreeRTOS_Source/tasks.c **** 		 * snprintf() implementation!).
4213:..\..\FreeRTOS_Source/tasks.c **** 		 *
4214:..\..\FreeRTOS_Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4215:..\..\FreeRTOS_Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4216:..\..\FreeRTOS_Source/tasks.c **** 		 * through a call to vTaskList().
4217:..\..\FreeRTOS_Source/tasks.c **** 		 */
4218:..\..\FreeRTOS_Source/tasks.c **** 
4219:..\..\FreeRTOS_Source/tasks.c **** 
4220:..\..\FreeRTOS_Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4221:..\..\FreeRTOS_Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4222:..\..\FreeRTOS_Source/tasks.c **** 
4223:..\..\FreeRTOS_Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4224:..\..\FreeRTOS_Source/tasks.c **** 		function is executing. */
4225:..\..\FreeRTOS_Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4226:..\..\FreeRTOS_Source/tasks.c **** 
4227:..\..\FreeRTOS_Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4228:..\..\FreeRTOS_Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4229:..\..\FreeRTOS_Source/tasks.c **** 		equate to NULL. */
4230:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4231:..\..\FreeRTOS_Source/tasks.c **** 
4232:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4233:..\..\FreeRTOS_Source/tasks.c **** 		{
4234:..\..\FreeRTOS_Source/tasks.c **** 			/* Generate the (binary) data. */
4235:..\..\FreeRTOS_Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4236:..\..\FreeRTOS_Source/tasks.c **** 
4237:..\..\FreeRTOS_Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4238:..\..\FreeRTOS_Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4239:..\..\FreeRTOS_Source/tasks.c **** 			{
4240:..\..\FreeRTOS_Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4241:..\..\FreeRTOS_Source/tasks.c **** 				{
4242:..\..\FreeRTOS_Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4243:..\..\FreeRTOS_Source/tasks.c **** 										break;
4244:..\..\FreeRTOS_Source/tasks.c **** 
4245:..\..\FreeRTOS_Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4246:..\..\FreeRTOS_Source/tasks.c **** 										break;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 156
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 156
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 156
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 156
>>>>>>> parent of cb49844... test


4247:..\..\FreeRTOS_Source/tasks.c **** 
4248:..\..\FreeRTOS_Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4249:..\..\FreeRTOS_Source/tasks.c **** 										break;
4250:..\..\FreeRTOS_Source/tasks.c **** 
4251:..\..\FreeRTOS_Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4252:..\..\FreeRTOS_Source/tasks.c **** 										break;
4253:..\..\FreeRTOS_Source/tasks.c **** 
4254:..\..\FreeRTOS_Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4255:..\..\FreeRTOS_Source/tasks.c **** 										break;
4256:..\..\FreeRTOS_Source/tasks.c **** 
4257:..\..\FreeRTOS_Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4258:..\..\FreeRTOS_Source/tasks.c **** 					default:			/* Should not get here, but it is included
4259:..\..\FreeRTOS_Source/tasks.c **** 										to prevent static checking errors. */
4260:..\..\FreeRTOS_Source/tasks.c **** 										cStatus = ( char ) 0x00;
4261:..\..\FreeRTOS_Source/tasks.c **** 										break;
4262:..\..\FreeRTOS_Source/tasks.c **** 				}
4263:..\..\FreeRTOS_Source/tasks.c **** 
4264:..\..\FreeRTOS_Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4265:..\..\FreeRTOS_Source/tasks.c **** 				can be printed in tabular form more easily. */
4266:..\..\FreeRTOS_Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4267:..\..\FreeRTOS_Source/tasks.c **** 
4268:..\..\FreeRTOS_Source/tasks.c **** 				/* Write the rest of the string. */
4269:..\..\FreeRTOS_Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4270:..\..\FreeRTOS_Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers.
4271:..\..\FreeRTOS_Source/tasks.c **** 			}
4272:..\..\FreeRTOS_Source/tasks.c **** 
4273:..\..\FreeRTOS_Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4274:..\..\FreeRTOS_Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4275:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4276:..\..\FreeRTOS_Source/tasks.c **** 		}
4277:..\..\FreeRTOS_Source/tasks.c **** 		else
4278:..\..\FreeRTOS_Source/tasks.c **** 		{
4279:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4280:..\..\FreeRTOS_Source/tasks.c **** 		}
4281:..\..\FreeRTOS_Source/tasks.c **** 	}
4282:..\..\FreeRTOS_Source/tasks.c **** 
4283:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4284:..\..\FreeRTOS_Source/tasks.c **** /*----------------------------------------------------------*/
4285:..\..\FreeRTOS_Source/tasks.c **** 
4286:..\..\FreeRTOS_Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4287:..\..\FreeRTOS_Source/tasks.c **** 
4288:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4289:..\..\FreeRTOS_Source/tasks.c **** 	{
4290:..\..\FreeRTOS_Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4291:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4292:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4293:..\..\FreeRTOS_Source/tasks.c **** 
4294:..\..\FreeRTOS_Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4295:..\..\FreeRTOS_Source/tasks.c **** 		{
4296:..\..\FreeRTOS_Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4297:..\..\FreeRTOS_Source/tasks.c **** 		}
4298:..\..\FreeRTOS_Source/tasks.c **** 		#endif
4299:..\..\FreeRTOS_Source/tasks.c **** 
4300:..\..\FreeRTOS_Source/tasks.c **** 		/*
4301:..\..\FreeRTOS_Source/tasks.c **** 		 * PLEASE NOTE:
4302:..\..\FreeRTOS_Source/tasks.c **** 		 *
4303:..\..\FreeRTOS_Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 157
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 157
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 157
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 157
>>>>>>> parent of cb49844... test


4304:..\..\FreeRTOS_Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4305:..\..\FreeRTOS_Source/tasks.c **** 		 * scheduler.
4306:..\..\FreeRTOS_Source/tasks.c **** 		 *
4307:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4308:..\..\FreeRTOS_Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4309:..\..\FreeRTOS_Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4310:..\..\FreeRTOS_Source/tasks.c **** 		 * in both absolute and percentage terms.
4311:..\..\FreeRTOS_Source/tasks.c **** 		 *
4312:..\..\FreeRTOS_Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4313:..\..\FreeRTOS_Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4314:..\..\FreeRTOS_Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4315:..\..\FreeRTOS_Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4316:..\..\FreeRTOS_Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4317:..\..\FreeRTOS_Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4318:..\..\FreeRTOS_Source/tasks.c **** 		 * a full snprintf() implementation!).
4319:..\..\FreeRTOS_Source/tasks.c **** 		 *
4320:..\..\FreeRTOS_Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4321:..\..\FreeRTOS_Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4322:..\..\FreeRTOS_Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4323:..\..\FreeRTOS_Source/tasks.c **** 		 */
4324:..\..\FreeRTOS_Source/tasks.c **** 
4325:..\..\FreeRTOS_Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4326:..\..\FreeRTOS_Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4327:..\..\FreeRTOS_Source/tasks.c **** 
4328:..\..\FreeRTOS_Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4329:..\..\FreeRTOS_Source/tasks.c **** 		function is executing. */
4330:..\..\FreeRTOS_Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4331:..\..\FreeRTOS_Source/tasks.c **** 
4332:..\..\FreeRTOS_Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4333:..\..\FreeRTOS_Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4334:..\..\FreeRTOS_Source/tasks.c **** 		equate to NULL. */
4335:..\..\FreeRTOS_Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4336:..\..\FreeRTOS_Source/tasks.c **** 
4337:..\..\FreeRTOS_Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4338:..\..\FreeRTOS_Source/tasks.c **** 		{
4339:..\..\FreeRTOS_Source/tasks.c **** 			/* Generate the (binary) data. */
4340:..\..\FreeRTOS_Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4341:..\..\FreeRTOS_Source/tasks.c **** 
4342:..\..\FreeRTOS_Source/tasks.c **** 			/* For percentage calculations. */
4343:..\..\FreeRTOS_Source/tasks.c **** 			ulTotalTime /= 100UL;
4344:..\..\FreeRTOS_Source/tasks.c **** 
4345:..\..\FreeRTOS_Source/tasks.c **** 			/* Avoid divide by zero errors. */
4346:..\..\FreeRTOS_Source/tasks.c **** 			if( ulTotalTime > 0UL )
4347:..\..\FreeRTOS_Source/tasks.c **** 			{
4348:..\..\FreeRTOS_Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4349:..\..\FreeRTOS_Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4350:..\..\FreeRTOS_Source/tasks.c **** 				{
4351:..\..\FreeRTOS_Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4352:..\..\FreeRTOS_Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4353:..\..\FreeRTOS_Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4354:..\..\FreeRTOS_Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4355:..\..\FreeRTOS_Source/tasks.c **** 
4356:..\..\FreeRTOS_Source/tasks.c **** 					/* Write the task name to the string, padding with
4357:..\..\FreeRTOS_Source/tasks.c **** 					spaces so it can be printed in tabular form more
4358:..\..\FreeRTOS_Source/tasks.c **** 					easily. */
4359:..\..\FreeRTOS_Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4360:..\..\FreeRTOS_Source/tasks.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 158
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 158
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 158
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 158
>>>>>>> parent of cb49844... test


4361:..\..\FreeRTOS_Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4362:..\..\FreeRTOS_Source/tasks.c **** 					{
4363:..\..\FreeRTOS_Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4364:..\..\FreeRTOS_Source/tasks.c **** 						{
4365:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4366:..\..\FreeRTOS_Source/tasks.c **** 						}
4367:..\..\FreeRTOS_Source/tasks.c **** 						#else
4368:..\..\FreeRTOS_Source/tasks.c **** 						{
4369:..\..\FreeRTOS_Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4370:..\..\FreeRTOS_Source/tasks.c **** 							printf() library can be used. */
4371:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4372:..\..\FreeRTOS_Source/tasks.c **** 						}
4373:..\..\FreeRTOS_Source/tasks.c **** 						#endif
4374:..\..\FreeRTOS_Source/tasks.c **** 					}
4375:..\..\FreeRTOS_Source/tasks.c **** 					else
4376:..\..\FreeRTOS_Source/tasks.c **** 					{
4377:..\..\FreeRTOS_Source/tasks.c **** 						/* If the percentage is zero here then the task has
4378:..\..\FreeRTOS_Source/tasks.c **** 						consumed less than 1% of the total run time. */
4379:..\..\FreeRTOS_Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4380:..\..\FreeRTOS_Source/tasks.c **** 						{
4381:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4382:..\..\FreeRTOS_Source/tasks.c **** 						}
4383:..\..\FreeRTOS_Source/tasks.c **** 						#else
4384:..\..\FreeRTOS_Source/tasks.c **** 						{
4385:..\..\FreeRTOS_Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4386:..\..\FreeRTOS_Source/tasks.c **** 							printf() library can be used. */
4387:..\..\FreeRTOS_Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4388:..\..\FreeRTOS_Source/tasks.c **** 						}
4389:..\..\FreeRTOS_Source/tasks.c **** 						#endif
4390:..\..\FreeRTOS_Source/tasks.c **** 					}
4391:..\..\FreeRTOS_Source/tasks.c **** 
4392:..\..\FreeRTOS_Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4393:..\..\FreeRTOS_Source/tasks.c **** 				}
4394:..\..\FreeRTOS_Source/tasks.c **** 			}
4395:..\..\FreeRTOS_Source/tasks.c **** 			else
4396:..\..\FreeRTOS_Source/tasks.c **** 			{
4397:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4398:..\..\FreeRTOS_Source/tasks.c **** 			}
4399:..\..\FreeRTOS_Source/tasks.c **** 
4400:..\..\FreeRTOS_Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4401:..\..\FreeRTOS_Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4402:..\..\FreeRTOS_Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4403:..\..\FreeRTOS_Source/tasks.c **** 		}
4404:..\..\FreeRTOS_Source/tasks.c **** 		else
4405:..\..\FreeRTOS_Source/tasks.c **** 		{
4406:..\..\FreeRTOS_Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4407:..\..\FreeRTOS_Source/tasks.c **** 		}
4408:..\..\FreeRTOS_Source/tasks.c **** 	}
4409:..\..\FreeRTOS_Source/tasks.c **** 
4410:..\..\FreeRTOS_Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4411:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4412:..\..\FreeRTOS_Source/tasks.c **** 
4413:..\..\FreeRTOS_Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4414:..\..\FreeRTOS_Source/tasks.c **** {
 4316              		.loc 1 4414 0
 4317              		.cfi_startproc
 4318              		@ args = 0, pretend = 0, frame = 8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 159
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 159
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 159
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 159
>>>>>>> parent of cb49844... test


 4319              		@ frame_needed = 1, uses_anonymous_args = 0
 4320              		@ link register save eliminated.
 4321 0000 80B4     		push	{r7}
 4322              		.cfi_def_cfa_offset 4
 4323              		.cfi_offset 7, -4
 4324 0002 83B0     		sub	sp, sp, #12
 4325              		.cfi_def_cfa_offset 16
 4326 0004 00AF     		add	r7, sp, #0
 4327              		.cfi_def_cfa_register 7
4415:..\..\FreeRTOS_Source/tasks.c **** TickType_t uxReturn;
4416:..\..\FreeRTOS_Source/tasks.c **** 
4417:..\..\FreeRTOS_Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 4328              		.loc 1 4417 0
 4329 0006 094B     		ldr	r3, .L292
 4330 0008 1B68     		ldr	r3, [r3]
 4331 000a 9B69     		ldr	r3, [r3, #24]
 4332 000c 7B60     		str	r3, [r7, #4]
4418:..\..\FreeRTOS_Source/tasks.c **** 
4419:..\..\FreeRTOS_Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4420:..\..\FreeRTOS_Source/tasks.c **** 	queues and semaphores. */
4421:..\..\FreeRTOS_Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 4333              		.loc 1 4421 0
 4334 000e 074B     		ldr	r3, .L292
 4335 0010 1B68     		ldr	r3, [r3]
 4336 0012 064A     		ldr	r2, .L292
 4337 0014 1268     		ldr	r2, [r2]
 4338 0016 D26A     		ldr	r2, [r2, #44]
 4339 0018 C2F10502 		rsb	r2, r2, #5
 4340 001c 9A61     		str	r2, [r3, #24]
4422:..\..\FreeRTOS_Source/tasks.c **** 
4423:..\..\FreeRTOS_Source/tasks.c **** 	return uxReturn;
 4341              		.loc 1 4423 0
 4342 001e 7B68     		ldr	r3, [r7, #4]
4424:..\..\FreeRTOS_Source/tasks.c **** }
 4343              		.loc 1 4424 0
 4344 0020 1846     		mov	r0, r3
 4345 0022 0C37     		adds	r7, r7, #12
 4346              		.cfi_def_cfa_offset 4
 4347 0024 BD46     		mov	sp, r7
 4348              		.cfi_def_cfa_register 13
 4349              		@ sp needed
 4350 0026 80BC     		pop	{r7}
 4351              		.cfi_restore 7
 4352              		.cfi_def_cfa_offset 0
 4353 0028 7047     		bx	lr
 4354              	.L293:
 4355 002a 00BF     		.align	2
 4356              	.L292:
 4357 002c 00000000 		.word	pxCurrentTCB
 4358              		.cfi_endproc
 4359              	.LFE111:
 4360              		.size	uxTaskResetEventItemValue, .-uxTaskResetEventItemValue
 4361              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4362              		.align	2
 4363              		.global	pvTaskIncrementMutexHeldCount
 4364              		.thumb
 4365              		.thumb_func
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 160
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 160
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 160
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 160
>>>>>>> parent of cb49844... test


 4366              		.type	pvTaskIncrementMutexHeldCount, %function
 4367              	pvTaskIncrementMutexHeldCount:
 4368              	.LFB112:
4425:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4426:..\..\FreeRTOS_Source/tasks.c **** 
4427:..\..\FreeRTOS_Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4428:..\..\FreeRTOS_Source/tasks.c **** 
4429:..\..\FreeRTOS_Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4430:..\..\FreeRTOS_Source/tasks.c **** 	{
 4369              		.loc 1 4430 0
 4370              		.cfi_startproc
 4371              		@ args = 0, pretend = 0, frame = 0
 4372              		@ frame_needed = 1, uses_anonymous_args = 0
 4373              		@ link register save eliminated.
 4374 0000 80B4     		push	{r7}
 4375              		.cfi_def_cfa_offset 4
 4376              		.cfi_offset 7, -4
 4377 0002 00AF     		add	r7, sp, #0
 4378              		.cfi_def_cfa_register 7
4431:..\..\FreeRTOS_Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4432:..\..\FreeRTOS_Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4433:..\..\FreeRTOS_Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 4379              		.loc 1 4433 0
 4380 0004 074B     		ldr	r3, .L297
 4381 0006 1B68     		ldr	r3, [r3]
 4382 0008 002B     		cmp	r3, #0
 4383 000a 04D0     		beq	.L295
4434:..\..\FreeRTOS_Source/tasks.c **** 		{
4435:..\..\FreeRTOS_Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 4384              		.loc 1 4435 0
 4385 000c 054B     		ldr	r3, .L297
 4386 000e 1B68     		ldr	r3, [r3]
 4387 0010 5A6C     		ldr	r2, [r3, #68]
 4388 0012 0132     		adds	r2, r2, #1
 4389 0014 5A64     		str	r2, [r3, #68]
 4390              	.L295:
4436:..\..\FreeRTOS_Source/tasks.c **** 		}
4437:..\..\FreeRTOS_Source/tasks.c **** 
4438:..\..\FreeRTOS_Source/tasks.c **** 		return pxCurrentTCB;
 4391              		.loc 1 4438 0
 4392 0016 034B     		ldr	r3, .L297
 4393 0018 1B68     		ldr	r3, [r3]
4439:..\..\FreeRTOS_Source/tasks.c **** 	}
 4394              		.loc 1 4439 0
 4395 001a 1846     		mov	r0, r3
 4396 001c BD46     		mov	sp, r7
 4397              		.cfi_def_cfa_register 13
 4398              		@ sp needed
 4399 001e 80BC     		pop	{r7}
 4400              		.cfi_restore 7
 4401              		.cfi_def_cfa_offset 0
 4402 0020 7047     		bx	lr
 4403              	.L298:
 4404 0022 00BF     		.align	2
 4405              	.L297:
 4406 0024 00000000 		.word	pxCurrentTCB
 4407              		.cfi_endproc
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 161
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 161
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 161
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 161
>>>>>>> parent of cb49844... test


 4408              	.LFE112:
 4409              		.size	pvTaskIncrementMutexHeldCount, .-pvTaskIncrementMutexHeldCount
 4410              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4411              		.align	2
 4412              		.global	ulTaskNotifyTake
 4413              		.thumb
 4414              		.thumb_func
 4415              		.type	ulTaskNotifyTake, %function
 4416              	ulTaskNotifyTake:
 4417              	.LFB113:
4440:..\..\FreeRTOS_Source/tasks.c **** 
4441:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_MUTEXES */
4442:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4443:..\..\FreeRTOS_Source/tasks.c **** 
4444:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4445:..\..\FreeRTOS_Source/tasks.c **** 
4446:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4447:..\..\FreeRTOS_Source/tasks.c **** 	{
 4418              		.loc 1 4447 0
 4419              		.cfi_startproc
 4420              		@ args = 0, pretend = 0, frame = 16
 4421              		@ frame_needed = 1, uses_anonymous_args = 0
 4422 0000 80B5     		push	{r7, lr}
 4423              		.cfi_def_cfa_offset 8
 4424              		.cfi_offset 7, -8
 4425              		.cfi_offset 14, -4
 4426 0002 84B0     		sub	sp, sp, #16
 4427              		.cfi_def_cfa_offset 24
 4428 0004 00AF     		add	r7, sp, #0
 4429              		.cfi_def_cfa_register 7
 4430 0006 7860     		str	r0, [r7, #4]
 4431 0008 3960     		str	r1, [r7]
4448:..\..\FreeRTOS_Source/tasks.c **** 	uint32_t ulReturn;
4449:..\..\FreeRTOS_Source/tasks.c **** 
4450:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4432              		.loc 1 4450 0
 4433 000a FFF7FEFF 		bl	vPortEnterCritical
4451:..\..\FreeRTOS_Source/tasks.c **** 		{
4452:..\..\FreeRTOS_Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4453:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 4434              		.loc 1 4453 0
 4435 000e 1E4B     		ldr	r3, .L305
 4436 0010 1B68     		ldr	r3, [r3]
 4437 0012 9B6C     		ldr	r3, [r3, #72]
 4438 0014 002B     		cmp	r3, #0
 4439 0016 13D1     		bne	.L300
4454:..\..\FreeRTOS_Source/tasks.c **** 			{
4455:..\..\FreeRTOS_Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4456:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4440              		.loc 1 4456 0
 4441 0018 1B4B     		ldr	r3, .L305
 4442 001a 1B68     		ldr	r3, [r3]
 4443 001c 0122     		movs	r2, #1
 4444 001e 83F84C20 		strb	r2, [r3, #76]
4457:..\..\FreeRTOS_Source/tasks.c **** 
4458:..\..\FreeRTOS_Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4445              		.loc 1 4458 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 162
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 162
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 162
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 162
>>>>>>> parent of cb49844... test


 4446 0022 3B68     		ldr	r3, [r7]
 4447 0024 002B     		cmp	r3, #0
 4448 0026 0BD0     		beq	.L300
4459:..\..\FreeRTOS_Source/tasks.c **** 				{
4460:..\..\FreeRTOS_Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4449              		.loc 1 4460 0
 4450 0028 0121     		movs	r1, #1
 4451 002a 3868     		ldr	r0, [r7]
 4452 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4461:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4462:..\..\FreeRTOS_Source/tasks.c **** 
4463:..\..\FreeRTOS_Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4464:..\..\FreeRTOS_Source/tasks.c **** 					section (some will yield immediately, others wait until the
4465:..\..\FreeRTOS_Source/tasks.c **** 					critical section exits) - but it is not something that
4466:..\..\FreeRTOS_Source/tasks.c **** 					application code should ever do. */
4467:..\..\FreeRTOS_Source/tasks.c **** 					portYIELD_WITHIN_API();
 4453              		.loc 1 4467 0
 4454 0030 164B     		ldr	r3, .L305+4
 4455 0032 4FF08052 		mov	r2, #268435456
 4456 0036 1A60     		str	r2, [r3]
 4457              		.syntax unified
 4458              	@ 4467 "..\..\FreeRTOS_Source\tasks.c" 1
 4459 0038 BFF34F8F 		dsb
 4460              	@ 0 "" 2
 4461              	@ 4467 "..\..\FreeRTOS_Source\tasks.c" 1
 4462 003c BFF36F8F 		isb
 4463              	@ 0 "" 2
 4464              		.thumb
 4465              		.syntax unified
 4466              	.L300:
4468:..\..\FreeRTOS_Source/tasks.c **** 				}
4469:..\..\FreeRTOS_Source/tasks.c **** 				else
4470:..\..\FreeRTOS_Source/tasks.c **** 				{
4471:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4472:..\..\FreeRTOS_Source/tasks.c **** 				}
4473:..\..\FreeRTOS_Source/tasks.c **** 			}
4474:..\..\FreeRTOS_Source/tasks.c **** 			else
4475:..\..\FreeRTOS_Source/tasks.c **** 			{
4476:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4477:..\..\FreeRTOS_Source/tasks.c **** 			}
4478:..\..\FreeRTOS_Source/tasks.c **** 		}
4479:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4467              		.loc 1 4479 0
 4468 0040 FFF7FEFF 		bl	vPortExitCritical
4480:..\..\FreeRTOS_Source/tasks.c **** 
4481:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4469              		.loc 1 4481 0
 4470 0044 FFF7FEFF 		bl	vPortEnterCritical
4482:..\..\FreeRTOS_Source/tasks.c **** 		{
4483:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4484:..\..\FreeRTOS_Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 4471              		.loc 1 4484 0
 4472 0048 0F4B     		ldr	r3, .L305
 4473 004a 1B68     		ldr	r3, [r3]
 4474 004c 9B6C     		ldr	r3, [r3, #72]
 4475 004e FB60     		str	r3, [r7, #12]
4485:..\..\FreeRTOS_Source/tasks.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 163
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 163
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 163
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 163
>>>>>>> parent of cb49844... test


4486:..\..\FreeRTOS_Source/tasks.c **** 			if( ulReturn != 0UL )
 4476              		.loc 1 4486 0
 4477 0050 FB68     		ldr	r3, [r7, #12]
 4478 0052 002B     		cmp	r3, #0
 4479 0054 0CD0     		beq	.L301
4487:..\..\FreeRTOS_Source/tasks.c **** 			{
4488:..\..\FreeRTOS_Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 4480              		.loc 1 4488 0
 4481 0056 7B68     		ldr	r3, [r7, #4]
 4482 0058 002B     		cmp	r3, #0
 4483 005a 04D0     		beq	.L302
4489:..\..\FreeRTOS_Source/tasks.c **** 				{
4490:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 4484              		.loc 1 4490 0
 4485 005c 0A4B     		ldr	r3, .L305
 4486 005e 1B68     		ldr	r3, [r3]
 4487 0060 0022     		movs	r2, #0
 4488 0062 9A64     		str	r2, [r3, #72]
 4489 0064 04E0     		b	.L301
 4490              	.L302:
4491:..\..\FreeRTOS_Source/tasks.c **** 				}
4492:..\..\FreeRTOS_Source/tasks.c **** 				else
4493:..\..\FreeRTOS_Source/tasks.c **** 				{
4494:..\..\FreeRTOS_Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 4491              		.loc 1 4494 0
 4492 0066 084B     		ldr	r3, .L305
 4493 0068 1B68     		ldr	r3, [r3]
 4494 006a FA68     		ldr	r2, [r7, #12]
 4495 006c 013A     		subs	r2, r2, #1
 4496 006e 9A64     		str	r2, [r3, #72]
 4497              	.L301:
4495:..\..\FreeRTOS_Source/tasks.c **** 				}
4496:..\..\FreeRTOS_Source/tasks.c **** 			}
4497:..\..\FreeRTOS_Source/tasks.c **** 			else
4498:..\..\FreeRTOS_Source/tasks.c **** 			{
4499:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4500:..\..\FreeRTOS_Source/tasks.c **** 			}
4501:..\..\FreeRTOS_Source/tasks.c **** 
4502:..\..\FreeRTOS_Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4498              		.loc 1 4502 0
 4499 0070 054B     		ldr	r3, .L305
 4500 0072 1B68     		ldr	r3, [r3]
 4501 0074 0022     		movs	r2, #0
 4502 0076 83F84C20 		strb	r2, [r3, #76]
4503:..\..\FreeRTOS_Source/tasks.c **** 		}
4504:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4503              		.loc 1 4504 0
 4504 007a FFF7FEFF 		bl	vPortExitCritical
4505:..\..\FreeRTOS_Source/tasks.c **** 
4506:..\..\FreeRTOS_Source/tasks.c **** 		return ulReturn;
 4505              		.loc 1 4506 0
 4506 007e FB68     		ldr	r3, [r7, #12]
4507:..\..\FreeRTOS_Source/tasks.c **** 	}
 4507              		.loc 1 4507 0
 4508 0080 1846     		mov	r0, r3
 4509 0082 1037     		adds	r7, r7, #16
 4510              		.cfi_def_cfa_offset 8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 164
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 164
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 164
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 164
>>>>>>> parent of cb49844... test


 4511 0084 BD46     		mov	sp, r7
 4512              		.cfi_def_cfa_register 13
 4513              		@ sp needed
 4514 0086 80BD     		pop	{r7, pc}
 4515              	.L306:
 4516              		.align	2
 4517              	.L305:
 4518 0088 00000000 		.word	pxCurrentTCB
 4519 008c 04ED00E0 		.word	-536810236
 4520              		.cfi_endproc
 4521              	.LFE113:
 4522              		.size	ulTaskNotifyTake, .-ulTaskNotifyTake
 4523              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4524              		.align	2
 4525              		.global	xTaskNotifyWait
 4526              		.thumb
 4527              		.thumb_func
 4528              		.type	xTaskNotifyWait, %function
 4529              	xTaskNotifyWait:
 4530              	.LFB114:
4508:..\..\FreeRTOS_Source/tasks.c **** 
4509:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4510:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4511:..\..\FreeRTOS_Source/tasks.c **** 
4512:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4513:..\..\FreeRTOS_Source/tasks.c **** 
4514:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4515:..\..\FreeRTOS_Source/tasks.c **** 	{
 4531              		.loc 1 4515 0
 4532              		.cfi_startproc
 4533              		@ args = 0, pretend = 0, frame = 24
 4534              		@ frame_needed = 1, uses_anonymous_args = 0
 4535 0000 80B5     		push	{r7, lr}
 4536              		.cfi_def_cfa_offset 8
 4537              		.cfi_offset 7, -8
 4538              		.cfi_offset 14, -4
 4539 0002 86B0     		sub	sp, sp, #24
 4540              		.cfi_def_cfa_offset 32
 4541 0004 00AF     		add	r7, sp, #0
 4542              		.cfi_def_cfa_register 7
 4543 0006 F860     		str	r0, [r7, #12]
 4544 0008 B960     		str	r1, [r7, #8]
 4545 000a 7A60     		str	r2, [r7, #4]
 4546 000c 3B60     		str	r3, [r7]
4516:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
4517:..\..\FreeRTOS_Source/tasks.c **** 
4518:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4547              		.loc 1 4518 0
 4548 000e FFF7FEFF 		bl	vPortEnterCritical
4519:..\..\FreeRTOS_Source/tasks.c **** 		{
4520:..\..\FreeRTOS_Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4521:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4549              		.loc 1 4521 0
 4550 0012 264B     		ldr	r3, .L313
 4551 0014 1B68     		ldr	r3, [r3]
 4552 0016 93F84C30 		ldrb	r3, [r3, #76]
 4553 001a DBB2     		uxtb	r3, r3
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 165
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 165
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 165
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 165
>>>>>>> parent of cb49844... test


 4554 001c 022B     		cmp	r3, #2
 4555 001e 1AD0     		beq	.L308
4522:..\..\FreeRTOS_Source/tasks.c **** 			{
4523:..\..\FreeRTOS_Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4524:..\..\FreeRTOS_Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4525:..\..\FreeRTOS_Source/tasks.c **** 				clear the value to zero. */
4526:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 4556              		.loc 1 4526 0
 4557 0020 224B     		ldr	r3, .L313
 4558 0022 1B68     		ldr	r3, [r3]
 4559 0024 996C     		ldr	r1, [r3, #72]
 4560 0026 FA68     		ldr	r2, [r7, #12]
 4561 0028 D243     		mvns	r2, r2
 4562 002a 0A40     		ands	r2, r2, r1
 4563 002c 9A64     		str	r2, [r3, #72]
4527:..\..\FreeRTOS_Source/tasks.c **** 
4528:..\..\FreeRTOS_Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4529:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 4564              		.loc 1 4529 0
 4565 002e 1F4B     		ldr	r3, .L313
 4566 0030 1B68     		ldr	r3, [r3]
 4567 0032 0122     		movs	r2, #1
 4568 0034 83F84C20 		strb	r2, [r3, #76]
4530:..\..\FreeRTOS_Source/tasks.c **** 
4531:..\..\FreeRTOS_Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 4569              		.loc 1 4531 0
 4570 0038 3B68     		ldr	r3, [r7]
 4571 003a 002B     		cmp	r3, #0
 4572 003c 0BD0     		beq	.L308
4532:..\..\FreeRTOS_Source/tasks.c **** 				{
4533:..\..\FreeRTOS_Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4573              		.loc 1 4533 0
 4574 003e 0121     		movs	r1, #1
 4575 0040 3868     		ldr	r0, [r7]
 4576 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4534:..\..\FreeRTOS_Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4535:..\..\FreeRTOS_Source/tasks.c **** 
4536:..\..\FreeRTOS_Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4537:..\..\FreeRTOS_Source/tasks.c **** 					section (some will yield immediately, others wait until the
4538:..\..\FreeRTOS_Source/tasks.c **** 					critical section exits) - but it is not something that
4539:..\..\FreeRTOS_Source/tasks.c **** 					application code should ever do. */
4540:..\..\FreeRTOS_Source/tasks.c **** 					portYIELD_WITHIN_API();
 4577              		.loc 1 4540 0
 4578 0046 1A4B     		ldr	r3, .L313+4
 4579 0048 4FF08052 		mov	r2, #268435456
 4580 004c 1A60     		str	r2, [r3]
 4581              		.syntax unified
 4582              	@ 4540 "..\..\FreeRTOS_Source\tasks.c" 1
 4583 004e BFF34F8F 		dsb
 4584              	@ 0 "" 2
 4585              	@ 4540 "..\..\FreeRTOS_Source\tasks.c" 1
 4586 0052 BFF36F8F 		isb
 4587              	@ 0 "" 2
 4588              		.thumb
 4589              		.syntax unified
 4590              	.L308:
4541:..\..\FreeRTOS_Source/tasks.c **** 				}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 166
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 166
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 166
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 166
>>>>>>> parent of cb49844... test


4542:..\..\FreeRTOS_Source/tasks.c **** 				else
4543:..\..\FreeRTOS_Source/tasks.c **** 				{
4544:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4545:..\..\FreeRTOS_Source/tasks.c **** 				}
4546:..\..\FreeRTOS_Source/tasks.c **** 			}
4547:..\..\FreeRTOS_Source/tasks.c **** 			else
4548:..\..\FreeRTOS_Source/tasks.c **** 			{
4549:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4550:..\..\FreeRTOS_Source/tasks.c **** 			}
4551:..\..\FreeRTOS_Source/tasks.c **** 		}
4552:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4591              		.loc 1 4552 0
 4592 0056 FFF7FEFF 		bl	vPortExitCritical
4553:..\..\FreeRTOS_Source/tasks.c **** 
4554:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4593              		.loc 1 4554 0
 4594 005a FFF7FEFF 		bl	vPortEnterCritical
4555:..\..\FreeRTOS_Source/tasks.c **** 		{
4556:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4557:..\..\FreeRTOS_Source/tasks.c **** 
4558:..\..\FreeRTOS_Source/tasks.c **** 			if( pulNotificationValue != NULL )
 4595              		.loc 1 4558 0
 4596 005e 7B68     		ldr	r3, [r7, #4]
 4597 0060 002B     		cmp	r3, #0
 4598 0062 04D0     		beq	.L309
4559:..\..\FreeRTOS_Source/tasks.c **** 			{
4560:..\..\FreeRTOS_Source/tasks.c **** 				/* Output the current notification value, which may or may not
4561:..\..\FreeRTOS_Source/tasks.c **** 				have changed. */
4562:..\..\FreeRTOS_Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 4599              		.loc 1 4562 0
 4600 0064 114B     		ldr	r3, .L313
 4601 0066 1B68     		ldr	r3, [r3]
 4602 0068 9A6C     		ldr	r2, [r3, #72]
 4603 006a 7B68     		ldr	r3, [r7, #4]
 4604 006c 1A60     		str	r2, [r3]
 4605              	.L309:
4563:..\..\FreeRTOS_Source/tasks.c **** 			}
4564:..\..\FreeRTOS_Source/tasks.c **** 
4565:..\..\FreeRTOS_Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4566:..\..\FreeRTOS_Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4567:..\..\FreeRTOS_Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4568:..\..\FreeRTOS_Source/tasks.c **** 			unblocked because of a timeout. */
4569:..\..\FreeRTOS_Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 4606              		.loc 1 4569 0
 4607 006e 0F4B     		ldr	r3, .L313
 4608 0070 1B68     		ldr	r3, [r3]
 4609 0072 93F84C30 		ldrb	r3, [r3, #76]
 4610 0076 DBB2     		uxtb	r3, r3
 4611 0078 022B     		cmp	r3, #2
 4612 007a 02D0     		beq	.L310
4570:..\..\FreeRTOS_Source/tasks.c **** 			{
4571:..\..\FreeRTOS_Source/tasks.c **** 				/* A notification was not received. */
4572:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFALSE;
 4613              		.loc 1 4572 0
 4614 007c 0023     		movs	r3, #0
 4615 007e 7B61     		str	r3, [r7, #20]
 4616 0080 08E0     		b	.L311
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 167
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 167
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 167
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 167
>>>>>>> parent of cb49844... test


 4617              	.L310:
4573:..\..\FreeRTOS_Source/tasks.c **** 			}
4574:..\..\FreeRTOS_Source/tasks.c **** 			else
4575:..\..\FreeRTOS_Source/tasks.c **** 			{
4576:..\..\FreeRTOS_Source/tasks.c **** 				/* A notification was already pending or a notification was
4577:..\..\FreeRTOS_Source/tasks.c **** 				received while the task was waiting. */
4578:..\..\FreeRTOS_Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 4618              		.loc 1 4578 0
 4619 0082 0A4B     		ldr	r3, .L313
 4620 0084 1B68     		ldr	r3, [r3]
 4621 0086 996C     		ldr	r1, [r3, #72]
 4622 0088 BA68     		ldr	r2, [r7, #8]
 4623 008a D243     		mvns	r2, r2
 4624 008c 0A40     		ands	r2, r2, r1
 4625 008e 9A64     		str	r2, [r3, #72]
4579:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdTRUE;
 4626              		.loc 1 4579 0
 4627 0090 0123     		movs	r3, #1
 4628 0092 7B61     		str	r3, [r7, #20]
 4629              	.L311:
4580:..\..\FreeRTOS_Source/tasks.c **** 			}
4581:..\..\FreeRTOS_Source/tasks.c **** 
4582:..\..\FreeRTOS_Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 4630              		.loc 1 4582 0
 4631 0094 054B     		ldr	r3, .L313
 4632 0096 1B68     		ldr	r3, [r3]
 4633 0098 0022     		movs	r2, #0
 4634 009a 83F84C20 		strb	r2, [r3, #76]
4583:..\..\FreeRTOS_Source/tasks.c **** 		}
4584:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4635              		.loc 1 4584 0
 4636 009e FFF7FEFF 		bl	vPortExitCritical
4585:..\..\FreeRTOS_Source/tasks.c **** 
4586:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 4637              		.loc 1 4586 0
 4638 00a2 7B69     		ldr	r3, [r7, #20]
4587:..\..\FreeRTOS_Source/tasks.c **** 	}
 4639              		.loc 1 4587 0
 4640 00a4 1846     		mov	r0, r3
 4641 00a6 1837     		adds	r7, r7, #24
 4642              		.cfi_def_cfa_offset 8
 4643 00a8 BD46     		mov	sp, r7
 4644              		.cfi_def_cfa_register 13
 4645              		@ sp needed
 4646 00aa 80BD     		pop	{r7, pc}
 4647              	.L314:
 4648              		.align	2
 4649              	.L313:
 4650 00ac 00000000 		.word	pxCurrentTCB
 4651 00b0 04ED00E0 		.word	-536810236
 4652              		.cfi_endproc
 4653              	.LFE114:
 4654              		.size	xTaskNotifyWait, .-xTaskNotifyWait
 4655              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4656              		.align	2
 4657              		.global	xTaskGenericNotify
 4658              		.thumb
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 168
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 168
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 168
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 168
>>>>>>> parent of cb49844... test


 4659              		.thumb_func
 4660              		.type	xTaskGenericNotify, %function
 4661              	xTaskGenericNotify:
 4662              	.LFB115:
4588:..\..\FreeRTOS_Source/tasks.c **** 
4589:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4590:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4591:..\..\FreeRTOS_Source/tasks.c **** 
4592:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4593:..\..\FreeRTOS_Source/tasks.c **** 
4594:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4595:..\..\FreeRTOS_Source/tasks.c **** 	{
 4663              		.loc 1 4595 0
 4664              		.cfi_startproc
 4665              		@ args = 0, pretend = 0, frame = 32
 4666              		@ frame_needed = 1, uses_anonymous_args = 0
 4667 0000 80B5     		push	{r7, lr}
 4668              		.cfi_def_cfa_offset 8
 4669              		.cfi_offset 7, -8
 4670              		.cfi_offset 14, -4
 4671 0002 88B0     		sub	sp, sp, #32
 4672              		.cfi_def_cfa_offset 40
 4673 0004 00AF     		add	r7, sp, #0
 4674              		.cfi_def_cfa_register 7
 4675 0006 F860     		str	r0, [r7, #12]
 4676 0008 B960     		str	r1, [r7, #8]
 4677 000a 3B60     		str	r3, [r7]
 4678 000c 1346     		mov	r3, r2
 4679 000e FB71     		strb	r3, [r7, #7]
4596:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
4597:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4680              		.loc 1 4597 0
 4681 0010 0123     		movs	r3, #1
 4682 0012 FB61     		str	r3, [r7, #28]
4598:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4599:..\..\FreeRTOS_Source/tasks.c **** 
4600:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToNotify );
4601:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4683              		.loc 1 4601 0
 4684 0014 FB68     		ldr	r3, [r7, #12]
 4685 0016 BB61     		str	r3, [r7, #24]
4602:..\..\FreeRTOS_Source/tasks.c **** 
4603:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 4686              		.loc 1 4603 0
 4687 0018 FFF7FEFF 		bl	vPortEnterCritical
4604:..\..\FreeRTOS_Source/tasks.c **** 		{
4605:..\..\FreeRTOS_Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4688              		.loc 1 4605 0
 4689 001c 3B68     		ldr	r3, [r7]
 4690 001e 002B     		cmp	r3, #0
 4691 0020 03D0     		beq	.L316
4606:..\..\FreeRTOS_Source/tasks.c **** 			{
4607:..\..\FreeRTOS_Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4692              		.loc 1 4607 0
 4693 0022 BB69     		ldr	r3, [r7, #24]
 4694 0024 9A6C     		ldr	r2, [r3, #72]
 4695 0026 3B68     		ldr	r3, [r7]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 169
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 169
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 169
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 169
>>>>>>> parent of cb49844... test


 4696 0028 1A60     		str	r2, [r3]
 4697              	.L316:
4608:..\..\FreeRTOS_Source/tasks.c **** 			}
4609:..\..\FreeRTOS_Source/tasks.c **** 
4610:..\..\FreeRTOS_Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4698              		.loc 1 4610 0
 4699 002a BB69     		ldr	r3, [r7, #24]
 4700 002c 93F84C30 		ldrb	r3, [r3, #76]
 4701 0030 FB75     		strb	r3, [r7, #23]
4611:..\..\FreeRTOS_Source/tasks.c **** 
4612:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4702              		.loc 1 4612 0
 4703 0032 BB69     		ldr	r3, [r7, #24]
 4704 0034 0222     		movs	r2, #2
 4705 0036 83F84C20 		strb	r2, [r3, #76]
4613:..\..\FreeRTOS_Source/tasks.c **** 
4614:..\..\FreeRTOS_Source/tasks.c **** 			switch( eAction )
 4706              		.loc 1 4614 0
 4707 003a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4708 003c 042B     		cmp	r3, #4
 4709 003e 28D8     		bhi	.L329
 4710 0040 01A2     		adr	r2, .L319
 4711 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4712 0046 00BF     		.p2align 2
 4713              	.L319:
 4714 0048 93000000 		.word	.L329+1
 4715 004c 5D000000 		.word	.L320+1
 4716 0050 6B000000 		.word	.L321+1
 4717 0054 77000000 		.word	.L322+1
 4718 0058 7F000000 		.word	.L323+1
 4719              		.p2align 1
 4720              	.L320:
4615:..\..\FreeRTOS_Source/tasks.c **** 			{
4616:..\..\FreeRTOS_Source/tasks.c **** 				case eSetBits	:
4617:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4721              		.loc 1 4617 0
 4722 005c BB69     		ldr	r3, [r7, #24]
 4723 005e 9A6C     		ldr	r2, [r3, #72]
 4724 0060 BB68     		ldr	r3, [r7, #8]
 4725 0062 1A43     		orrs	r2, r2, r3
 4726 0064 BB69     		ldr	r3, [r7, #24]
 4727 0066 9A64     		str	r2, [r3, #72]
4618:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4728              		.loc 1 4618 0
 4729 0068 14E0     		b	.L324
 4730              	.L321:
4619:..\..\FreeRTOS_Source/tasks.c **** 
4620:..\..\FreeRTOS_Source/tasks.c **** 				case eIncrement	:
4621:..\..\FreeRTOS_Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4731              		.loc 1 4621 0
 4732 006a BB69     		ldr	r3, [r7, #24]
 4733 006c 9B6C     		ldr	r3, [r3, #72]
 4734 006e 5A1C     		adds	r2, r3, #1
 4735 0070 BB69     		ldr	r3, [r7, #24]
 4736 0072 9A64     		str	r2, [r3, #72]
4622:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4737              		.loc 1 4622 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 170
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 170
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 170
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 170
>>>>>>> parent of cb49844... test


 4738 0074 0EE0     		b	.L324
 4739              	.L322:
4623:..\..\FreeRTOS_Source/tasks.c **** 
4624:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithOverwrite	:
4625:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4740              		.loc 1 4625 0
 4741 0076 BB69     		ldr	r3, [r7, #24]
 4742 0078 BA68     		ldr	r2, [r7, #8]
 4743 007a 9A64     		str	r2, [r3, #72]
4626:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4744              		.loc 1 4626 0
 4745 007c 0AE0     		b	.L324
 4746              	.L323:
4627:..\..\FreeRTOS_Source/tasks.c **** 
4628:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4629:..\..\FreeRTOS_Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4747              		.loc 1 4629 0
 4748 007e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4749 0080 022B     		cmp	r3, #2
 4750 0082 03D0     		beq	.L325
4630:..\..\FreeRTOS_Source/tasks.c **** 					{
4631:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4751              		.loc 1 4631 0
 4752 0084 BB69     		ldr	r3, [r7, #24]
 4753 0086 BA68     		ldr	r2, [r7, #8]
 4754 0088 9A64     		str	r2, [r3, #72]
4632:..\..\FreeRTOS_Source/tasks.c **** 					}
4633:..\..\FreeRTOS_Source/tasks.c **** 					else
4634:..\..\FreeRTOS_Source/tasks.c **** 					{
4635:..\..\FreeRTOS_Source/tasks.c **** 						/* The value could not be written to the task. */
4636:..\..\FreeRTOS_Source/tasks.c **** 						xReturn = pdFAIL;
4637:..\..\FreeRTOS_Source/tasks.c **** 					}
4638:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4755              		.loc 1 4638 0
 4756 008a 03E0     		b	.L324
 4757              	.L325:
4636:..\..\FreeRTOS_Source/tasks.c **** 					}
 4758              		.loc 1 4636 0
 4759 008c 0023     		movs	r3, #0
 4760 008e FB61     		str	r3, [r7, #28]
 4761              		.loc 1 4638 0
 4762 0090 00E0     		b	.L324
 4763              	.L329:
4639:..\..\FreeRTOS_Source/tasks.c **** 
4640:..\..\FreeRTOS_Source/tasks.c **** 				case eNoAction:
4641:..\..\FreeRTOS_Source/tasks.c **** 					/* The task is being notified without its notify value being
4642:..\..\FreeRTOS_Source/tasks.c **** 					updated. */
4643:..\..\FreeRTOS_Source/tasks.c **** 					break;
4644:..\..\FreeRTOS_Source/tasks.c **** 
4645:..\..\FreeRTOS_Source/tasks.c **** 				default:
4646:..\..\FreeRTOS_Source/tasks.c **** 					/* Should not get here if all enums are handled.
4647:..\..\FreeRTOS_Source/tasks.c **** 					Artificially force an assert. */
4648:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( ( volatile uint32_t ) 0 );
4649:..\..\FreeRTOS_Source/tasks.c **** 
4650:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4764              		.loc 1 4650 0
 4765 0092 00BF     		nop
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 171
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 171
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 171
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 171
>>>>>>> parent of cb49844... test


 4766              	.L324:
4651:..\..\FreeRTOS_Source/tasks.c **** 			}
4652:..\..\FreeRTOS_Source/tasks.c **** 
4653:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY();
4654:..\..\FreeRTOS_Source/tasks.c **** 
4655:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4656:..\..\FreeRTOS_Source/tasks.c **** 			notification then unblock it now. */
4657:..\..\FreeRTOS_Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4767              		.loc 1 4657 0
 4768 0094 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 4769 0096 012B     		cmp	r3, #1
 4770 0098 2AD1     		bne	.L327
4658:..\..\FreeRTOS_Source/tasks.c **** 			{
4659:..\..\FreeRTOS_Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4771              		.loc 1 4659 0
 4772 009a BB69     		ldr	r3, [r7, #24]
 4773 009c 0433     		adds	r3, r3, #4
 4774 009e 1846     		mov	r0, r3
 4775 00a0 FFF7FEFF 		bl	uxListRemove
4660:..\..\FreeRTOS_Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4776              		.loc 1 4660 0
 4777 00a4 BB69     		ldr	r3, [r7, #24]
 4778 00a6 DB6A     		ldr	r3, [r3, #44]
 4779 00a8 0122     		movs	r2, #1
 4780 00aa 9A40     		lsls	r2, r2, r3
 4781 00ac 144B     		ldr	r3, .L330
 4782 00ae 1B68     		ldr	r3, [r3]
 4783 00b0 1343     		orrs	r3, r3, r2
 4784 00b2 134A     		ldr	r2, .L330
 4785 00b4 1360     		str	r3, [r2]
 4786 00b6 BB69     		ldr	r3, [r7, #24]
 4787 00b8 DA6A     		ldr	r2, [r3, #44]
 4788 00ba 1346     		mov	r3, r2
 4789 00bc 9B00     		lsls	r3, r3, #2
 4790 00be 1344     		add	r3, r3, r2
 4791 00c0 9B00     		lsls	r3, r3, #2
 4792 00c2 104A     		ldr	r2, .L330+4
 4793 00c4 1A44     		add	r2, r2, r3
 4794 00c6 BB69     		ldr	r3, [r7, #24]
 4795 00c8 0433     		adds	r3, r3, #4
 4796 00ca 1946     		mov	r1, r3
 4797 00cc 1046     		mov	r0, r2
 4798 00ce FFF7FEFF 		bl	vListInsertEnd
4661:..\..\FreeRTOS_Source/tasks.c **** 
4662:..\..\FreeRTOS_Source/tasks.c **** 				/* The task should not have been on an event list. */
4663:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4664:..\..\FreeRTOS_Source/tasks.c **** 
4665:..\..\FreeRTOS_Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4666:..\..\FreeRTOS_Source/tasks.c **** 				{
4667:..\..\FreeRTOS_Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4668:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4669:..\..\FreeRTOS_Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4670:..\..\FreeRTOS_Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4671:..\..\FreeRTOS_Source/tasks.c **** 					because it will automatically get reset to a new value when
4672:..\..\FreeRTOS_Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4673:..\..\FreeRTOS_Source/tasks.c **** 					tickless idling is used it might be more important to enter
4674:..\..\FreeRTOS_Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 172
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 172
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 172
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 172
>>>>>>> parent of cb49844... test


4675:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4676:..\..\FreeRTOS_Source/tasks.c **** 					earliest possible time. */
4677:..\..\FreeRTOS_Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4678:..\..\FreeRTOS_Source/tasks.c **** 				}
4679:..\..\FreeRTOS_Source/tasks.c **** 				#endif
4680:..\..\FreeRTOS_Source/tasks.c **** 
4681:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 4799              		.loc 1 4681 0
 4800 00d2 BB69     		ldr	r3, [r7, #24]
 4801 00d4 DA6A     		ldr	r2, [r3, #44]
 4802 00d6 0C4B     		ldr	r3, .L330+8
 4803 00d8 1B68     		ldr	r3, [r3]
 4804 00da DB6A     		ldr	r3, [r3, #44]
 4805 00dc 9A42     		cmp	r2, r3
 4806 00de 07D9     		bls	.L327
4682:..\..\FreeRTOS_Source/tasks.c **** 				{
4683:..\..\FreeRTOS_Source/tasks.c **** 					/* The notified task has a priority above the currently
4684:..\..\FreeRTOS_Source/tasks.c **** 					executing task so a yield is required. */
4685:..\..\FreeRTOS_Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 4807              		.loc 1 4685 0
 4808 00e0 0A4B     		ldr	r3, .L330+12
 4809 00e2 4FF08052 		mov	r2, #268435456
 4810 00e6 1A60     		str	r2, [r3]
 4811              		.syntax unified
 4812              	@ 4685 "..\..\FreeRTOS_Source\tasks.c" 1
 4813 00e8 BFF34F8F 		dsb
 4814              	@ 0 "" 2
 4815              	@ 4685 "..\..\FreeRTOS_Source\tasks.c" 1
 4816 00ec BFF36F8F 		isb
 4817              	@ 0 "" 2
 4818              		.thumb
 4819              		.syntax unified
 4820              	.L327:
4686:..\..\FreeRTOS_Source/tasks.c **** 				}
4687:..\..\FreeRTOS_Source/tasks.c **** 				else
4688:..\..\FreeRTOS_Source/tasks.c **** 				{
4689:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4690:..\..\FreeRTOS_Source/tasks.c **** 				}
4691:..\..\FreeRTOS_Source/tasks.c **** 			}
4692:..\..\FreeRTOS_Source/tasks.c **** 			else
4693:..\..\FreeRTOS_Source/tasks.c **** 			{
4694:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4695:..\..\FreeRTOS_Source/tasks.c **** 			}
4696:..\..\FreeRTOS_Source/tasks.c **** 		}
4697:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 4821              		.loc 1 4697 0
 4822 00f0 FFF7FEFF 		bl	vPortExitCritical
4698:..\..\FreeRTOS_Source/tasks.c **** 
4699:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 4823              		.loc 1 4699 0
 4824 00f4 FB69     		ldr	r3, [r7, #28]
4700:..\..\FreeRTOS_Source/tasks.c **** 	}
 4825              		.loc 1 4700 0
 4826 00f6 1846     		mov	r0, r3
 4827 00f8 2037     		adds	r7, r7, #32
 4828              		.cfi_def_cfa_offset 8
 4829 00fa BD46     		mov	sp, r7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 173
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 173
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 173
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 173
>>>>>>> parent of cb49844... test


 4830              		.cfi_def_cfa_register 13
 4831              		@ sp needed
 4832 00fc 80BD     		pop	{r7, pc}
 4833              	.L331:
 4834 00fe 00BF     		.align	2
 4835              	.L330:
 4836 0100 B8000000 		.word	uxTopReadyPriority
 4837 0104 04000000 		.word	pxReadyTasksLists
 4838 0108 00000000 		.word	pxCurrentTCB
 4839 010c 04ED00E0 		.word	-536810236
 4840              		.cfi_endproc
 4841              	.LFE115:
 4842              		.size	xTaskGenericNotify, .-xTaskGenericNotify
 4843              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4844              		.align	2
 4845              		.global	xTaskGenericNotifyFromISR
 4846              		.thumb
 4847              		.thumb_func
 4848              		.type	xTaskGenericNotifyFromISR, %function
 4849              	xTaskGenericNotifyFromISR:
 4850              	.LFB116:
4701:..\..\FreeRTOS_Source/tasks.c **** 
4702:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4703:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4704:..\..\FreeRTOS_Source/tasks.c **** 
4705:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4706:..\..\FreeRTOS_Source/tasks.c **** 
4707:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4708:..\..\FreeRTOS_Source/tasks.c **** 	{
 4851              		.loc 1 4708 0
 4852              		.cfi_startproc
 4853              		@ args = 4, pretend = 0, frame = 48
 4854              		@ frame_needed = 1, uses_anonymous_args = 0
 4855 0000 80B5     		push	{r7, lr}
 4856              		.cfi_def_cfa_offset 8
 4857              		.cfi_offset 7, -8
 4858              		.cfi_offset 14, -4
 4859 0002 8CB0     		sub	sp, sp, #48
 4860              		.cfi_def_cfa_offset 56
 4861 0004 00AF     		add	r7, sp, #0
 4862              		.cfi_def_cfa_register 7
 4863 0006 F860     		str	r0, [r7, #12]
 4864 0008 B960     		str	r1, [r7, #8]
 4865 000a 3B60     		str	r3, [r7]
 4866 000c 1346     		mov	r3, r2
 4867 000e FB71     		strb	r3, [r7, #7]
4709:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
4710:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4711:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 4868              		.loc 1 4711 0
 4869 0010 0123     		movs	r3, #1
 4870 0012 FB62     		str	r3, [r7, #44]
4712:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4713:..\..\FreeRTOS_Source/tasks.c **** 
4714:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToNotify );
4715:..\..\FreeRTOS_Source/tasks.c **** 
4716:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 174
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 174
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 174
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 174
>>>>>>> parent of cb49844... test


4717:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4718:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4719:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4720:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4721:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4722:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4723:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4724:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4725:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4726:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4727:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4728:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4729:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4730:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
4731:..\..\FreeRTOS_Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4732:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4733:..\..\FreeRTOS_Source/tasks.c **** 
4734:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4871              		.loc 1 4734 0
 4872 0014 FB68     		ldr	r3, [r7, #12]
 4873 0016 BB62     		str	r3, [r7, #40]
 4874              	.LBB51:
 4875              	.LBB52:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 4876              		.loc 2 211 0
 4877              		.syntax unified
 4878              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 4879 0018 EFF31182 			mrs r2, basepri											
 4880 001c 4FF0A003 		mov r3, #160												
 4881 0020 83F31188 		msr basepri, r3											
 4882 0024 BFF36F8F 		isb														
 4883 0028 BFF34F8F 		dsb														
 4884              	
 4885              	@ 0 "" 2
 4886              		.thumb
 4887              		.syntax unified
 4888 002c BA61     		str	r2, [r7, #24]
 4889 002e 7B61     		str	r3, [r7, #20]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 4890              		.loc 2 223 0
 4891 0030 BB69     		ldr	r3, [r7, #24]
 4892              	.LBE52:
 4893              	.LBE51:
4735:..\..\FreeRTOS_Source/tasks.c **** 
4736:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4894              		.loc 1 4736 0
 4895 0032 3B62     		str	r3, [r7, #32]
4737:..\..\FreeRTOS_Source/tasks.c **** 		{
4738:..\..\FreeRTOS_Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 4896              		.loc 1 4738 0
 4897 0034 3B68     		ldr	r3, [r7]
 4898 0036 002B     		cmp	r3, #0
 4899 0038 03D0     		beq	.L334
4739:..\..\FreeRTOS_Source/tasks.c **** 			{
4740:..\..\FreeRTOS_Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 4900              		.loc 1 4740 0
 4901 003a BB6A     		ldr	r3, [r7, #40]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 175
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 175
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 175
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 175
>>>>>>> parent of cb49844... test


 4902 003c 9A6C     		ldr	r2, [r3, #72]
 4903 003e 3B68     		ldr	r3, [r7]
 4904 0040 1A60     		str	r2, [r3]
 4905              	.L334:
4741:..\..\FreeRTOS_Source/tasks.c **** 			}
4742:..\..\FreeRTOS_Source/tasks.c **** 
4743:..\..\FreeRTOS_Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 4906              		.loc 1 4743 0
 4907 0042 BB6A     		ldr	r3, [r7, #40]
 4908 0044 93F84C30 		ldrb	r3, [r3, #76]
 4909 0048 FB77     		strb	r3, [r7, #31]
4744:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4910              		.loc 1 4744 0
 4911 004a BB6A     		ldr	r3, [r7, #40]
 4912 004c 0222     		movs	r2, #2
 4913 004e 83F84C20 		strb	r2, [r3, #76]
4745:..\..\FreeRTOS_Source/tasks.c **** 
4746:..\..\FreeRTOS_Source/tasks.c **** 			switch( eAction )
 4914              		.loc 1 4746 0
 4915 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4916 0054 042B     		cmp	r3, #4
 4917 0056 28D8     		bhi	.L350
 4918 0058 01A2     		adr	r2, .L337
 4919 005a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 4920 005e 00BF     		.p2align 2
 4921              	.L337:
 4922 0060 AB000000 		.word	.L350+1
 4923 0064 75000000 		.word	.L338+1
 4924 0068 83000000 		.word	.L339+1
 4925 006c 8F000000 		.word	.L340+1
 4926 0070 97000000 		.word	.L341+1
 4927              		.p2align 1
 4928              	.L338:
4747:..\..\FreeRTOS_Source/tasks.c **** 			{
4748:..\..\FreeRTOS_Source/tasks.c **** 				case eSetBits	:
4749:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 4929              		.loc 1 4749 0
 4930 0074 BB6A     		ldr	r3, [r7, #40]
 4931 0076 9A6C     		ldr	r2, [r3, #72]
 4932 0078 BB68     		ldr	r3, [r7, #8]
 4933 007a 1A43     		orrs	r2, r2, r3
 4934 007c BB6A     		ldr	r3, [r7, #40]
 4935 007e 9A64     		str	r2, [r3, #72]
4750:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4936              		.loc 1 4750 0
 4937 0080 14E0     		b	.L342
 4938              	.L339:
4751:..\..\FreeRTOS_Source/tasks.c **** 
4752:..\..\FreeRTOS_Source/tasks.c **** 				case eIncrement	:
4753:..\..\FreeRTOS_Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 4939              		.loc 1 4753 0
 4940 0082 BB6A     		ldr	r3, [r7, #40]
 4941 0084 9B6C     		ldr	r3, [r3, #72]
 4942 0086 5A1C     		adds	r2, r3, #1
 4943 0088 BB6A     		ldr	r3, [r7, #40]
 4944 008a 9A64     		str	r2, [r3, #72]
4754:..\..\FreeRTOS_Source/tasks.c **** 					break;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 176
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 176
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 176
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 176
>>>>>>> parent of cb49844... test


 4945              		.loc 1 4754 0
 4946 008c 0EE0     		b	.L342
 4947              	.L340:
4755:..\..\FreeRTOS_Source/tasks.c **** 
4756:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithOverwrite	:
4757:..\..\FreeRTOS_Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 4948              		.loc 1 4757 0
 4949 008e BB6A     		ldr	r3, [r7, #40]
 4950 0090 BA68     		ldr	r2, [r7, #8]
 4951 0092 9A64     		str	r2, [r3, #72]
4758:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4952              		.loc 1 4758 0
 4953 0094 0AE0     		b	.L342
 4954              	.L341:
4759:..\..\FreeRTOS_Source/tasks.c **** 
4760:..\..\FreeRTOS_Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4761:..\..\FreeRTOS_Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 4955              		.loc 1 4761 0
 4956 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4957 0098 022B     		cmp	r3, #2
 4958 009a 03D0     		beq	.L343
4762:..\..\FreeRTOS_Source/tasks.c **** 					{
4763:..\..\FreeRTOS_Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 4959              		.loc 1 4763 0
 4960 009c BB6A     		ldr	r3, [r7, #40]
 4961 009e BA68     		ldr	r2, [r7, #8]
 4962 00a0 9A64     		str	r2, [r3, #72]
4764:..\..\FreeRTOS_Source/tasks.c **** 					}
4765:..\..\FreeRTOS_Source/tasks.c **** 					else
4766:..\..\FreeRTOS_Source/tasks.c **** 					{
4767:..\..\FreeRTOS_Source/tasks.c **** 						/* The value could not be written to the task. */
4768:..\..\FreeRTOS_Source/tasks.c **** 						xReturn = pdFAIL;
4769:..\..\FreeRTOS_Source/tasks.c **** 					}
4770:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4963              		.loc 1 4770 0
 4964 00a2 03E0     		b	.L342
 4965              	.L343:
4768:..\..\FreeRTOS_Source/tasks.c **** 					}
 4966              		.loc 1 4768 0
 4967 00a4 0023     		movs	r3, #0
 4968 00a6 FB62     		str	r3, [r7, #44]
 4969              		.loc 1 4770 0
 4970 00a8 00E0     		b	.L342
 4971              	.L350:
4771:..\..\FreeRTOS_Source/tasks.c **** 
4772:..\..\FreeRTOS_Source/tasks.c **** 				case eNoAction :
4773:..\..\FreeRTOS_Source/tasks.c **** 					/* The task is being notified without its notify value being
4774:..\..\FreeRTOS_Source/tasks.c **** 					updated. */
4775:..\..\FreeRTOS_Source/tasks.c **** 					break;
4776:..\..\FreeRTOS_Source/tasks.c **** 
4777:..\..\FreeRTOS_Source/tasks.c **** 				default:
4778:..\..\FreeRTOS_Source/tasks.c **** 					/* Should not get here if all enums are handled.
4779:..\..\FreeRTOS_Source/tasks.c **** 					Artificially force an assert. */
4780:..\..\FreeRTOS_Source/tasks.c **** 					configASSERT( ( volatile uint32_t ) 0 );
4781:..\..\FreeRTOS_Source/tasks.c **** 					break;
 4972              		.loc 1 4781 0
 4973 00aa 00BF     		nop
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 177
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 177
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 177
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 177
>>>>>>> parent of cb49844... test


 4974              	.L342:
4782:..\..\FreeRTOS_Source/tasks.c **** 			}
4783:..\..\FreeRTOS_Source/tasks.c **** 
4784:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4785:..\..\FreeRTOS_Source/tasks.c **** 
4786:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4787:..\..\FreeRTOS_Source/tasks.c **** 			notification then unblock it now. */
4788:..\..\FreeRTOS_Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 4975              		.loc 1 4788 0
 4976 00ac FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 4977 00ae 012B     		cmp	r3, #1
 4978 00b0 36D1     		bne	.L345
4789:..\..\FreeRTOS_Source/tasks.c **** 			{
4790:..\..\FreeRTOS_Source/tasks.c **** 				/* The task should not have been on an event list. */
4791:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4792:..\..\FreeRTOS_Source/tasks.c **** 
4793:..\..\FreeRTOS_Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4979              		.loc 1 4793 0
 4980 00b2 204B     		ldr	r3, .L351
 4981 00b4 1B68     		ldr	r3, [r3]
 4982 00b6 002B     		cmp	r3, #0
 4983 00b8 1CD1     		bne	.L346
4794:..\..\FreeRTOS_Source/tasks.c **** 				{
4795:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 4984              		.loc 1 4795 0
 4985 00ba BB6A     		ldr	r3, [r7, #40]
 4986 00bc 0433     		adds	r3, r3, #4
 4987 00be 1846     		mov	r0, r3
 4988 00c0 FFF7FEFF 		bl	uxListRemove
4796:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4989              		.loc 1 4796 0
 4990 00c4 BB6A     		ldr	r3, [r7, #40]
 4991 00c6 DB6A     		ldr	r3, [r3, #44]
 4992 00c8 0122     		movs	r2, #1
 4993 00ca 9A40     		lsls	r2, r2, r3
 4994 00cc 1A4B     		ldr	r3, .L351+4
 4995 00ce 1B68     		ldr	r3, [r3]
 4996 00d0 1343     		orrs	r3, r3, r2
 4997 00d2 194A     		ldr	r2, .L351+4
 4998 00d4 1360     		str	r3, [r2]
 4999 00d6 BB6A     		ldr	r3, [r7, #40]
 5000 00d8 DA6A     		ldr	r2, [r3, #44]
 5001 00da 1346     		mov	r3, r2
 5002 00dc 9B00     		lsls	r3, r3, #2
 5003 00de 1344     		add	r3, r3, r2
 5004 00e0 9B00     		lsls	r3, r3, #2
 5005 00e2 164A     		ldr	r2, .L351+8
 5006 00e4 1A44     		add	r2, r2, r3
 5007 00e6 BB6A     		ldr	r3, [r7, #40]
 5008 00e8 0433     		adds	r3, r3, #4
 5009 00ea 1946     		mov	r1, r3
 5010 00ec 1046     		mov	r0, r2
 5011 00ee FFF7FEFF 		bl	vListInsertEnd
 5012 00f2 05E0     		b	.L347
 5013              	.L346:
4797:..\..\FreeRTOS_Source/tasks.c **** 				}
4798:..\..\FreeRTOS_Source/tasks.c **** 				else
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 178
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 178
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 178
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 178
>>>>>>> parent of cb49844... test


4799:..\..\FreeRTOS_Source/tasks.c **** 				{
4800:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4801:..\..\FreeRTOS_Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4802:..\..\FreeRTOS_Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5014              		.loc 1 4802 0
 5015 00f4 BB6A     		ldr	r3, [r7, #40]
 5016 00f6 1833     		adds	r3, r3, #24
 5017 00f8 1946     		mov	r1, r3
 5018 00fa 1148     		ldr	r0, .L351+12
 5019 00fc FFF7FEFF 		bl	vListInsertEnd
 5020              	.L347:
4803:..\..\FreeRTOS_Source/tasks.c **** 				}
4804:..\..\FreeRTOS_Source/tasks.c **** 
4805:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5021              		.loc 1 4805 0
 5022 0100 BB6A     		ldr	r3, [r7, #40]
 5023 0102 DA6A     		ldr	r2, [r3, #44]
 5024 0104 0F4B     		ldr	r3, .L351+16
 5025 0106 1B68     		ldr	r3, [r3]
 5026 0108 DB6A     		ldr	r3, [r3, #44]
 5027 010a 9A42     		cmp	r2, r3
 5028 010c 08D9     		bls	.L345
4806:..\..\FreeRTOS_Source/tasks.c **** 				{
4807:..\..\FreeRTOS_Source/tasks.c **** 					/* The notified task has a priority above the currently
4808:..\..\FreeRTOS_Source/tasks.c **** 					executing task so a yield is required. */
4809:..\..\FreeRTOS_Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5029              		.loc 1 4809 0
 5030 010e BB6B     		ldr	r3, [r7, #56]
 5031 0110 002B     		cmp	r3, #0
 5032 0112 02D0     		beq	.L348
4810:..\..\FreeRTOS_Source/tasks.c **** 					{
4811:..\..\FreeRTOS_Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5033              		.loc 1 4811 0
 5034 0114 BB6B     		ldr	r3, [r7, #56]
 5035 0116 0122     		movs	r2, #1
 5036 0118 1A60     		str	r2, [r3]
 5037              	.L348:
4812:..\..\FreeRTOS_Source/tasks.c **** 					}
4813:..\..\FreeRTOS_Source/tasks.c **** 
4814:..\..\FreeRTOS_Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4815:..\..\FreeRTOS_Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4816:..\..\FreeRTOS_Source/tasks.c **** 					safe FreeRTOS function. */
4817:..\..\FreeRTOS_Source/tasks.c **** 					xYieldPending = pdTRUE;
 5038              		.loc 1 4817 0
 5039 011a 0B4B     		ldr	r3, .L351+20
 5040 011c 0122     		movs	r2, #1
 5041 011e 1A60     		str	r2, [r3]
 5042              	.L345:
 5043 0120 3B6A     		ldr	r3, [r7, #32]
 5044 0122 7B62     		str	r3, [r7, #36]
 5045              	.LBB53:
 5046              	.LBB54:
 5047              		.loc 2 229 0
 5048 0124 7B6A     		ldr	r3, [r7, #36]
 5049              		.syntax unified
 5050              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5051 0126 83F31188 			msr basepri, r3	
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 179
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 179
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 179
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 179
>>>>>>> parent of cb49844... test


 5052              	@ 0 "" 2
 5053              		.thumb
 5054              		.syntax unified
 5055              	.LBE54:
 5056              	.LBE53:
4818:..\..\FreeRTOS_Source/tasks.c **** 				}
4819:..\..\FreeRTOS_Source/tasks.c **** 				else
4820:..\..\FreeRTOS_Source/tasks.c **** 				{
4821:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4822:..\..\FreeRTOS_Source/tasks.c **** 				}
4823:..\..\FreeRTOS_Source/tasks.c **** 			}
4824:..\..\FreeRTOS_Source/tasks.c **** 		}
4825:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4826:..\..\FreeRTOS_Source/tasks.c **** 
4827:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 5057              		.loc 1 4827 0
 5058 012a FB6A     		ldr	r3, [r7, #44]
4828:..\..\FreeRTOS_Source/tasks.c **** 	}
 5059              		.loc 1 4828 0
 5060 012c 1846     		mov	r0, r3
 5061 012e 3037     		adds	r7, r7, #48
 5062              		.cfi_def_cfa_offset 8
 5063 0130 BD46     		mov	sp, r7
 5064              		.cfi_def_cfa_register 13
 5065              		@ sp needed
 5066 0132 80BD     		pop	{r7, pc}
 5067              	.L352:
 5068              		.align	2
 5069              	.L351:
 5070 0134 D8000000 		.word	uxSchedulerSuspended
 5071 0138 B8000000 		.word	uxTopReadyPriority
 5072 013c 04000000 		.word	pxReadyTasksLists
 5073 0140 70000000 		.word	xPendingReadyList
 5074 0144 00000000 		.word	pxCurrentTCB
 5075 0148 C4000000 		.word	xYieldPending
 5076              		.cfi_endproc
 5077              	.LFE116:
 5078              		.size	xTaskGenericNotifyFromISR, .-xTaskGenericNotifyFromISR
 5079              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5080              		.align	2
 5081              		.global	vTaskNotifyGiveFromISR
 5082              		.thumb
 5083              		.thumb_func
 5084              		.type	vTaskNotifyGiveFromISR, %function
 5085              	vTaskNotifyGiveFromISR:
 5086              	.LFB117:
4829:..\..\FreeRTOS_Source/tasks.c **** 
4830:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4831:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4832:..\..\FreeRTOS_Source/tasks.c **** 
4833:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4834:..\..\FreeRTOS_Source/tasks.c **** 
4835:..\..\FreeRTOS_Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4836:..\..\FreeRTOS_Source/tasks.c **** 	{
 5087              		.loc 1 4836 0
 5088              		.cfi_startproc
 5089              		@ args = 0, pretend = 0, frame = 32
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 180
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 180
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 180
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 180
>>>>>>> parent of cb49844... test


 5090              		@ frame_needed = 1, uses_anonymous_args = 0
 5091 0000 80B5     		push	{r7, lr}
 5092              		.cfi_def_cfa_offset 8
 5093              		.cfi_offset 7, -8
 5094              		.cfi_offset 14, -4
 5095 0002 88B0     		sub	sp, sp, #32
 5096              		.cfi_def_cfa_offset 40
 5097 0004 00AF     		add	r7, sp, #0
 5098              		.cfi_def_cfa_register 7
 5099 0006 7860     		str	r0, [r7, #4]
 5100 0008 3960     		str	r1, [r7]
4837:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t * pxTCB;
4838:..\..\FreeRTOS_Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4839:..\..\FreeRTOS_Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4840:..\..\FreeRTOS_Source/tasks.c **** 
4841:..\..\FreeRTOS_Source/tasks.c **** 		configASSERT( xTaskToNotify );
4842:..\..\FreeRTOS_Source/tasks.c **** 
4843:..\..\FreeRTOS_Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4844:..\..\FreeRTOS_Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4845:..\..\FreeRTOS_Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4846:..\..\FreeRTOS_Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4847:..\..\FreeRTOS_Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4848:..\..\FreeRTOS_Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4849:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4850:..\..\FreeRTOS_Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4851:..\..\FreeRTOS_Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4852:..\..\FreeRTOS_Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4853:..\..\FreeRTOS_Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4854:..\..\FreeRTOS_Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4855:..\..\FreeRTOS_Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4856:..\..\FreeRTOS_Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4857:..\..\FreeRTOS_Source/tasks.c **** 		provided on the following link:
4858:..\..\FreeRTOS_Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4859:..\..\FreeRTOS_Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4860:..\..\FreeRTOS_Source/tasks.c **** 
4861:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5101              		.loc 1 4861 0
 5102 000a 7B68     		ldr	r3, [r7, #4]
 5103 000c FB61     		str	r3, [r7, #28]
 5104              	.LBB55:
 5105              	.LBB56:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 5106              		.loc 2 211 0
 5107              		.syntax unified
 5108              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5109 000e EFF31182 			mrs r2, basepri											
 5110 0012 4FF0A003 		mov r3, #160												
 5111 0016 83F31188 		msr basepri, r3											
 5112 001a BFF36F8F 		isb														
 5113 001e BFF34F8F 		dsb														
 5114              	
 5115              	@ 0 "" 2
 5116              		.thumb
 5117              		.syntax unified
 5118 0022 FA60     		str	r2, [r7, #12]
 5119 0024 BB60     		str	r3, [r7, #8]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 181
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 181
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 181
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 181
>>>>>>> parent of cb49844... test


 5120              		.loc 2 223 0
 5121 0026 FB68     		ldr	r3, [r7, #12]
 5122              	.LBE56:
 5123              	.LBE55:
4862:..\..\FreeRTOS_Source/tasks.c **** 
4863:..\..\FreeRTOS_Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 5124              		.loc 1 4863 0
 5125 0028 7B61     		str	r3, [r7, #20]
4864:..\..\FreeRTOS_Source/tasks.c **** 		{
4865:..\..\FreeRTOS_Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 5126              		.loc 1 4865 0
 5127 002a FB69     		ldr	r3, [r7, #28]
 5128 002c 93F84C30 		ldrb	r3, [r3, #76]
 5129 0030 FB74     		strb	r3, [r7, #19]
4866:..\..\FreeRTOS_Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5130              		.loc 1 4866 0
 5131 0032 FB69     		ldr	r3, [r7, #28]
 5132 0034 0222     		movs	r2, #2
 5133 0036 83F84C20 		strb	r2, [r3, #76]
4867:..\..\FreeRTOS_Source/tasks.c **** 
4868:..\..\FreeRTOS_Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4869:..\..\FreeRTOS_Source/tasks.c **** 			semaphore. */
4870:..\..\FreeRTOS_Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 5134              		.loc 1 4870 0
 5135 003a FB69     		ldr	r3, [r7, #28]
 5136 003c 9B6C     		ldr	r3, [r3, #72]
 5137 003e 5A1C     		adds	r2, r3, #1
 5138 0040 FB69     		ldr	r3, [r7, #28]
 5139 0042 9A64     		str	r2, [r3, #72]
4871:..\..\FreeRTOS_Source/tasks.c **** 
4872:..\..\FreeRTOS_Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4873:..\..\FreeRTOS_Source/tasks.c **** 
4874:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4875:..\..\FreeRTOS_Source/tasks.c **** 			notification then unblock it now. */
4876:..\..\FreeRTOS_Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 5140              		.loc 1 4876 0
 5141 0044 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 5142 0046 012B     		cmp	r3, #1
 5143 0048 36D1     		bne	.L355
4877:..\..\FreeRTOS_Source/tasks.c **** 			{
4878:..\..\FreeRTOS_Source/tasks.c **** 				/* The task should not have been on an event list. */
4879:..\..\FreeRTOS_Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4880:..\..\FreeRTOS_Source/tasks.c **** 
4881:..\..\FreeRTOS_Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 5144              		.loc 1 4881 0
 5145 004a 204B     		ldr	r3, .L359
 5146 004c 1B68     		ldr	r3, [r3]
 5147 004e 002B     		cmp	r3, #0
 5148 0050 1CD1     		bne	.L356
4882:..\..\FreeRTOS_Source/tasks.c **** 				{
4883:..\..\FreeRTOS_Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5149              		.loc 1 4883 0
 5150 0052 FB69     		ldr	r3, [r7, #28]
 5151 0054 0433     		adds	r3, r3, #4
 5152 0056 1846     		mov	r0, r3
 5153 0058 FFF7FEFF 		bl	uxListRemove
4884:..\..\FreeRTOS_Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 182
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 182
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 182
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 182
>>>>>>> parent of cb49844... test


 5154              		.loc 1 4884 0
 5155 005c FB69     		ldr	r3, [r7, #28]
 5156 005e DB6A     		ldr	r3, [r3, #44]
 5157 0060 0122     		movs	r2, #1
 5158 0062 9A40     		lsls	r2, r2, r3
 5159 0064 1A4B     		ldr	r3, .L359+4
 5160 0066 1B68     		ldr	r3, [r3]
 5161 0068 1343     		orrs	r3, r3, r2
 5162 006a 194A     		ldr	r2, .L359+4
 5163 006c 1360     		str	r3, [r2]
 5164 006e FB69     		ldr	r3, [r7, #28]
 5165 0070 DA6A     		ldr	r2, [r3, #44]
 5166 0072 1346     		mov	r3, r2
 5167 0074 9B00     		lsls	r3, r3, #2
 5168 0076 1344     		add	r3, r3, r2
 5169 0078 9B00     		lsls	r3, r3, #2
 5170 007a 164A     		ldr	r2, .L359+8
 5171 007c 1A44     		add	r2, r2, r3
 5172 007e FB69     		ldr	r3, [r7, #28]
 5173 0080 0433     		adds	r3, r3, #4
 5174 0082 1946     		mov	r1, r3
 5175 0084 1046     		mov	r0, r2
 5176 0086 FFF7FEFF 		bl	vListInsertEnd
 5177 008a 05E0     		b	.L357
 5178              	.L356:
4885:..\..\FreeRTOS_Source/tasks.c **** 				}
4886:..\..\FreeRTOS_Source/tasks.c **** 				else
4887:..\..\FreeRTOS_Source/tasks.c **** 				{
4888:..\..\FreeRTOS_Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4889:..\..\FreeRTOS_Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4890:..\..\FreeRTOS_Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 5179              		.loc 1 4890 0
 5180 008c FB69     		ldr	r3, [r7, #28]
 5181 008e 1833     		adds	r3, r3, #24
 5182 0090 1946     		mov	r1, r3
 5183 0092 1148     		ldr	r0, .L359+12
 5184 0094 FFF7FEFF 		bl	vListInsertEnd
 5185              	.L357:
4891:..\..\FreeRTOS_Source/tasks.c **** 				}
4892:..\..\FreeRTOS_Source/tasks.c **** 
4893:..\..\FreeRTOS_Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 5186              		.loc 1 4893 0
 5187 0098 FB69     		ldr	r3, [r7, #28]
 5188 009a DA6A     		ldr	r2, [r3, #44]
 5189 009c 0F4B     		ldr	r3, .L359+16
 5190 009e 1B68     		ldr	r3, [r3]
 5191 00a0 DB6A     		ldr	r3, [r3, #44]
 5192 00a2 9A42     		cmp	r2, r3
 5193 00a4 08D9     		bls	.L355
4894:..\..\FreeRTOS_Source/tasks.c **** 				{
4895:..\..\FreeRTOS_Source/tasks.c **** 					/* The notified task has a priority above the currently
4896:..\..\FreeRTOS_Source/tasks.c **** 					executing task so a yield is required. */
4897:..\..\FreeRTOS_Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 5194              		.loc 1 4897 0
 5195 00a6 3B68     		ldr	r3, [r7]
 5196 00a8 002B     		cmp	r3, #0
 5197 00aa 02D0     		beq	.L358
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 183
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 183
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 183
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 183
>>>>>>> parent of cb49844... test


4898:..\..\FreeRTOS_Source/tasks.c **** 					{
4899:..\..\FreeRTOS_Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 5198              		.loc 1 4899 0
 5199 00ac 3B68     		ldr	r3, [r7]
 5200 00ae 0122     		movs	r2, #1
 5201 00b0 1A60     		str	r2, [r3]
 5202              	.L358:
4900:..\..\FreeRTOS_Source/tasks.c **** 					}
4901:..\..\FreeRTOS_Source/tasks.c **** 
4902:..\..\FreeRTOS_Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4903:..\..\FreeRTOS_Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
4904:..\..\FreeRTOS_Source/tasks.c **** 					safe FreeRTOS function. */
4905:..\..\FreeRTOS_Source/tasks.c **** 					xYieldPending = pdTRUE;
 5203              		.loc 1 4905 0
 5204 00b2 0B4B     		ldr	r3, .L359+20
 5205 00b4 0122     		movs	r2, #1
 5206 00b6 1A60     		str	r2, [r3]
 5207              	.L355:
 5208 00b8 7B69     		ldr	r3, [r7, #20]
 5209 00ba BB61     		str	r3, [r7, #24]
 5210              	.LBB57:
 5211              	.LBB58:
 5212              		.loc 2 229 0
 5213 00bc BB69     		ldr	r3, [r7, #24]
 5214              		.syntax unified
 5215              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 5216 00be 83F31188 			msr basepri, r3	
 5217              	@ 0 "" 2
 5218              		.thumb
 5219              		.syntax unified
 5220              	.LBE58:
 5221              	.LBE57:
4906:..\..\FreeRTOS_Source/tasks.c **** 				}
4907:..\..\FreeRTOS_Source/tasks.c **** 				else
4908:..\..\FreeRTOS_Source/tasks.c **** 				{
4909:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4910:..\..\FreeRTOS_Source/tasks.c **** 				}
4911:..\..\FreeRTOS_Source/tasks.c **** 			}
4912:..\..\FreeRTOS_Source/tasks.c **** 		}
4913:..\..\FreeRTOS_Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4914:..\..\FreeRTOS_Source/tasks.c **** 	}
 5222              		.loc 1 4914 0
 5223 00c2 00BF     		nop
 5224 00c4 2037     		adds	r7, r7, #32
 5225              		.cfi_def_cfa_offset 8
 5226 00c6 BD46     		mov	sp, r7
 5227              		.cfi_def_cfa_register 13
 5228              		@ sp needed
 5229 00c8 80BD     		pop	{r7, pc}
 5230              	.L360:
 5231 00ca 00BF     		.align	2
 5232              	.L359:
 5233 00cc D8000000 		.word	uxSchedulerSuspended
 5234 00d0 B8000000 		.word	uxTopReadyPriority
 5235 00d4 04000000 		.word	pxReadyTasksLists
 5236 00d8 70000000 		.word	xPendingReadyList
 5237 00dc 00000000 		.word	pxCurrentTCB
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 184
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 184
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 184
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 184
>>>>>>> parent of cb49844... test


 5238 00e0 C4000000 		.word	xYieldPending
 5239              		.cfi_endproc
 5240              	.LFE117:
 5241              		.size	vTaskNotifyGiveFromISR, .-vTaskNotifyGiveFromISR
 5242              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5243              		.align	2
 5244              		.global	xTaskNotifyStateClear
 5245              		.thumb
 5246              		.thumb_func
 5247              		.type	xTaskNotifyStateClear, %function
 5248              	xTaskNotifyStateClear:
 5249              	.LFB118:
4915:..\..\FreeRTOS_Source/tasks.c **** 
4916:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4917:..\..\FreeRTOS_Source/tasks.c **** 
4918:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4919:..\..\FreeRTOS_Source/tasks.c **** 
4920:..\..\FreeRTOS_Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4921:..\..\FreeRTOS_Source/tasks.c **** 
4922:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4923:..\..\FreeRTOS_Source/tasks.c **** 	{
 5250              		.loc 1 4923 0
 5251              		.cfi_startproc
 5252              		@ args = 0, pretend = 0, frame = 16
 5253              		@ frame_needed = 1, uses_anonymous_args = 0
 5254 0000 80B5     		push	{r7, lr}
 5255              		.cfi_def_cfa_offset 8
 5256              		.cfi_offset 7, -8
 5257              		.cfi_offset 14, -4
 5258 0002 84B0     		sub	sp, sp, #16
 5259              		.cfi_def_cfa_offset 24
 5260 0004 00AF     		add	r7, sp, #0
 5261              		.cfi_def_cfa_register 7
 5262 0006 7860     		str	r0, [r7, #4]
4924:..\..\FreeRTOS_Source/tasks.c **** 	TCB_t *pxTCB;
4925:..\..\FreeRTOS_Source/tasks.c **** 	BaseType_t xReturn;
4926:..\..\FreeRTOS_Source/tasks.c **** 
4927:..\..\FreeRTOS_Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4928:..\..\FreeRTOS_Source/tasks.c **** 		its notification state cleared. */
4929:..\..\FreeRTOS_Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5263              		.loc 1 4929 0
 5264 0008 7B68     		ldr	r3, [r7, #4]
 5265 000a 002B     		cmp	r3, #0
 5266 000c 02D1     		bne	.L362
 5267              		.loc 1 4929 0 is_stmt 0 discriminator 1
 5268 000e 0E4B     		ldr	r3, .L367
 5269 0010 1B68     		ldr	r3, [r3]
 5270 0012 00E0     		b	.L363
 5271              	.L362:
 5272              		.loc 1 4929 0 discriminator 2
 5273 0014 7B68     		ldr	r3, [r7, #4]
 5274              	.L363:
 5275              		.loc 1 4929 0 discriminator 4
 5276 0016 BB60     		str	r3, [r7, #8]
4930:..\..\FreeRTOS_Source/tasks.c **** 
4931:..\..\FreeRTOS_Source/tasks.c **** 		taskENTER_CRITICAL();
 5277              		.loc 1 4931 0 is_stmt 1 discriminator 4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 185
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 185
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 185
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 185
>>>>>>> parent of cb49844... test


 5278 0018 FFF7FEFF 		bl	vPortEnterCritical
4932:..\..\FreeRTOS_Source/tasks.c **** 		{
4933:..\..\FreeRTOS_Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 5279              		.loc 1 4933 0 discriminator 4
 5280 001c BB68     		ldr	r3, [r7, #8]
 5281 001e 93F84C30 		ldrb	r3, [r3, #76]
 5282 0022 DBB2     		uxtb	r3, r3
 5283 0024 022B     		cmp	r3, #2
 5284 0026 06D1     		bne	.L364
4934:..\..\FreeRTOS_Source/tasks.c **** 			{
4935:..\..\FreeRTOS_Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 5285              		.loc 1 4935 0
 5286 0028 BB68     		ldr	r3, [r7, #8]
 5287 002a 0022     		movs	r2, #0
 5288 002c 83F84C20 		strb	r2, [r3, #76]
4936:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdPASS;
 5289              		.loc 1 4936 0
 5290 0030 0123     		movs	r3, #1
 5291 0032 FB60     		str	r3, [r7, #12]
 5292 0034 01E0     		b	.L365
 5293              	.L364:
4937:..\..\FreeRTOS_Source/tasks.c **** 			}
4938:..\..\FreeRTOS_Source/tasks.c **** 			else
4939:..\..\FreeRTOS_Source/tasks.c **** 			{
4940:..\..\FreeRTOS_Source/tasks.c **** 				xReturn = pdFAIL;
 5294              		.loc 1 4940 0
 5295 0036 0023     		movs	r3, #0
 5296 0038 FB60     		str	r3, [r7, #12]
 5297              	.L365:
4941:..\..\FreeRTOS_Source/tasks.c **** 			}
4942:..\..\FreeRTOS_Source/tasks.c **** 		}
4943:..\..\FreeRTOS_Source/tasks.c **** 		taskEXIT_CRITICAL();
 5298              		.loc 1 4943 0
 5299 003a FFF7FEFF 		bl	vPortExitCritical
4944:..\..\FreeRTOS_Source/tasks.c **** 
4945:..\..\FreeRTOS_Source/tasks.c **** 		return xReturn;
 5300              		.loc 1 4945 0
 5301 003e FB68     		ldr	r3, [r7, #12]
4946:..\..\FreeRTOS_Source/tasks.c **** 	}
 5302              		.loc 1 4946 0
 5303 0040 1846     		mov	r0, r3
 5304 0042 1037     		adds	r7, r7, #16
 5305              		.cfi_def_cfa_offset 8
 5306 0044 BD46     		mov	sp, r7
 5307              		.cfi_def_cfa_register 13
 5308              		@ sp needed
 5309 0046 80BD     		pop	{r7, pc}
 5310              	.L368:
 5311              		.align	2
 5312              	.L367:
 5313 0048 00000000 		.word	pxCurrentTCB
 5314              		.cfi_endproc
 5315              	.LFE118:
 5316              		.size	xTaskNotifyStateClear, .-xTaskNotifyStateClear
 5317              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 5318              		.align	2
 5319              		.thumb
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 186
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 186
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 186
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 186
>>>>>>> parent of cb49844... test


 5320              		.thumb_func
 5321              		.type	prvAddCurrentTaskToDelayedList, %function
 5322              	prvAddCurrentTaskToDelayedList:
 5323              	.LFB119:
4947:..\..\FreeRTOS_Source/tasks.c **** 
4948:..\..\FreeRTOS_Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4949:..\..\FreeRTOS_Source/tasks.c **** /*-----------------------------------------------------------*/
4950:..\..\FreeRTOS_Source/tasks.c **** 
4951:..\..\FreeRTOS_Source/tasks.c **** 
4952:..\..\FreeRTOS_Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4953:..\..\FreeRTOS_Source/tasks.c **** {
 5324              		.loc 1 4953 0
 5325              		.cfi_startproc
 5326              		@ args = 0, pretend = 0, frame = 16
 5327              		@ frame_needed = 1, uses_anonymous_args = 0
 5328 0000 80B5     		push	{r7, lr}
 5329              		.cfi_def_cfa_offset 8
 5330              		.cfi_offset 7, -8
 5331              		.cfi_offset 14, -4
 5332 0002 84B0     		sub	sp, sp, #16
 5333              		.cfi_def_cfa_offset 24
 5334 0004 00AF     		add	r7, sp, #0
 5335              		.cfi_def_cfa_register 7
 5336 0006 7860     		str	r0, [r7, #4]
 5337 0008 3960     		str	r1, [r7]
4954:..\..\FreeRTOS_Source/tasks.c **** TickType_t xTimeToWake;
4955:..\..\FreeRTOS_Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 5338              		.loc 1 4955 0
 5339 000a 294B     		ldr	r3, .L375
 5340 000c 1B68     		ldr	r3, [r3]
 5341 000e FB60     		str	r3, [r7, #12]
4956:..\..\FreeRTOS_Source/tasks.c **** 
4957:..\..\FreeRTOS_Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4958:..\..\FreeRTOS_Source/tasks.c **** 	{
4959:..\..\FreeRTOS_Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4960:..\..\FreeRTOS_Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4961:..\..\FreeRTOS_Source/tasks.c **** 		when the task leaves the Blocked state. */
4962:..\..\FreeRTOS_Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4963:..\..\FreeRTOS_Source/tasks.c **** 	}
4964:..\..\FreeRTOS_Source/tasks.c **** 	#endif
4965:..\..\FreeRTOS_Source/tasks.c **** 
4966:..\..\FreeRTOS_Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4967:..\..\FreeRTOS_Source/tasks.c **** 	as the same list item is used for both lists. */
4968:..\..\FreeRTOS_Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 5342              		.loc 1 4968 0
 5343 0010 284B     		ldr	r3, .L375+4
 5344 0012 1B68     		ldr	r3, [r3]
 5345 0014 0433     		adds	r3, r3, #4
 5346 0016 1846     		mov	r0, r3
 5347 0018 FFF7FEFF 		bl	uxListRemove
 5348 001c 0346     		mov	r3, r0
 5349 001e 002B     		cmp	r3, #0
 5350 0020 0BD1     		bne	.L370
4969:..\..\FreeRTOS_Source/tasks.c **** 	{
4970:..\..\FreeRTOS_Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4971:..\..\FreeRTOS_Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4972:..\..\FreeRTOS_Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 187
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 187
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 187
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 187
>>>>>>> parent of cb49844... test


 5351              		.loc 1 4972 0
 5352 0022 244B     		ldr	r3, .L375+4
 5353 0024 1B68     		ldr	r3, [r3]
 5354 0026 DB6A     		ldr	r3, [r3, #44]
 5355 0028 0122     		movs	r2, #1
 5356 002a 02FA03F3 		lsl	r3, r2, r3
 5357 002e DA43     		mvns	r2, r3
 5358 0030 214B     		ldr	r3, .L375+8
 5359 0032 1B68     		ldr	r3, [r3]
 5360 0034 1340     		ands	r3, r3, r2
 5361 0036 204A     		ldr	r2, .L375+8
 5362 0038 1360     		str	r3, [r2]
 5363              	.L370:
4973:..\..\FreeRTOS_Source/tasks.c **** 	}
4974:..\..\FreeRTOS_Source/tasks.c **** 	else
4975:..\..\FreeRTOS_Source/tasks.c **** 	{
4976:..\..\FreeRTOS_Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4977:..\..\FreeRTOS_Source/tasks.c **** 	}
4978:..\..\FreeRTOS_Source/tasks.c **** 
4979:..\..\FreeRTOS_Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4980:..\..\FreeRTOS_Source/tasks.c **** 	{
4981:..\..\FreeRTOS_Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 5364              		.loc 1 4981 0
 5365 003a 7B68     		ldr	r3, [r7, #4]
 5366 003c B3F1FF3F 		cmp	r3, #-1
 5367 0040 0AD1     		bne	.L371
 5368              		.loc 1 4981 0 is_stmt 0 discriminator 1
 5369 0042 3B68     		ldr	r3, [r7]
 5370 0044 002B     		cmp	r3, #0
 5371 0046 07D0     		beq	.L371
4982:..\..\FreeRTOS_Source/tasks.c **** 		{
4983:..\..\FreeRTOS_Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4984:..\..\FreeRTOS_Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4985:..\..\FreeRTOS_Source/tasks.c **** 			indefinitely. */
4986:..\..\FreeRTOS_Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 5372              		.loc 1 4986 0 is_stmt 1
 5373 0048 1A4B     		ldr	r3, .L375+4
 5374 004a 1B68     		ldr	r3, [r3]
 5375 004c 0433     		adds	r3, r3, #4
 5376 004e 1946     		mov	r1, r3
 5377 0050 1A48     		ldr	r0, .L375+12
 5378 0052 FFF7FEFF 		bl	vListInsertEnd
4987:..\..\FreeRTOS_Source/tasks.c **** 		}
4988:..\..\FreeRTOS_Source/tasks.c **** 		else
4989:..\..\FreeRTOS_Source/tasks.c **** 		{
4990:..\..\FreeRTOS_Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4991:..\..\FreeRTOS_Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4992:..\..\FreeRTOS_Source/tasks.c **** 			kernel will manage it correctly. */
4993:..\..\FreeRTOS_Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
4994:..\..\FreeRTOS_Source/tasks.c **** 
4995:..\..\FreeRTOS_Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4996:..\..\FreeRTOS_Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4997:..\..\FreeRTOS_Source/tasks.c **** 
4998:..\..\FreeRTOS_Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
4999:..\..\FreeRTOS_Source/tasks.c **** 			{
5000:..\..\FreeRTOS_Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5001:..\..\FreeRTOS_Source/tasks.c **** 				list. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 188
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 188
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 188
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 188
>>>>>>> parent of cb49844... test


5002:..\..\FreeRTOS_Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5003:..\..\FreeRTOS_Source/tasks.c **** 			}
5004:..\..\FreeRTOS_Source/tasks.c **** 			else
5005:..\..\FreeRTOS_Source/tasks.c **** 			{
5006:..\..\FreeRTOS_Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5007:..\..\FreeRTOS_Source/tasks.c **** 				is used. */
5008:..\..\FreeRTOS_Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5009:..\..\FreeRTOS_Source/tasks.c **** 
5010:..\..\FreeRTOS_Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5011:..\..\FreeRTOS_Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5012:..\..\FreeRTOS_Source/tasks.c **** 				needs to be updated too. */
5013:..\..\FreeRTOS_Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5014:..\..\FreeRTOS_Source/tasks.c **** 				{
5015:..\..\FreeRTOS_Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5016:..\..\FreeRTOS_Source/tasks.c **** 				}
5017:..\..\FreeRTOS_Source/tasks.c **** 				else
5018:..\..\FreeRTOS_Source/tasks.c **** 				{
5019:..\..\FreeRTOS_Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5020:..\..\FreeRTOS_Source/tasks.c **** 				}
5021:..\..\FreeRTOS_Source/tasks.c **** 			}
5022:..\..\FreeRTOS_Source/tasks.c **** 		}
5023:..\..\FreeRTOS_Source/tasks.c **** 	}
5024:..\..\FreeRTOS_Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5025:..\..\FreeRTOS_Source/tasks.c **** 	{
5026:..\..\FreeRTOS_Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5027:..\..\FreeRTOS_Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5028:..\..\FreeRTOS_Source/tasks.c **** 		will manage it correctly. */
5029:..\..\FreeRTOS_Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5030:..\..\FreeRTOS_Source/tasks.c **** 
5031:..\..\FreeRTOS_Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5032:..\..\FreeRTOS_Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5033:..\..\FreeRTOS_Source/tasks.c **** 
5034:..\..\FreeRTOS_Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5035:..\..\FreeRTOS_Source/tasks.c **** 		{
5036:..\..\FreeRTOS_Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5037:..\..\FreeRTOS_Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5038:..\..\FreeRTOS_Source/tasks.c **** 		}
5039:..\..\FreeRTOS_Source/tasks.c **** 		else
5040:..\..\FreeRTOS_Source/tasks.c **** 		{
5041:..\..\FreeRTOS_Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5042:..\..\FreeRTOS_Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5043:..\..\FreeRTOS_Source/tasks.c **** 
5044:..\..\FreeRTOS_Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5045:..\..\FreeRTOS_Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5046:..\..\FreeRTOS_Source/tasks.c **** 			too. */
5047:..\..\FreeRTOS_Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5048:..\..\FreeRTOS_Source/tasks.c **** 			{
5049:..\..\FreeRTOS_Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5050:..\..\FreeRTOS_Source/tasks.c **** 			}
5051:..\..\FreeRTOS_Source/tasks.c **** 			else
5052:..\..\FreeRTOS_Source/tasks.c **** 			{
5053:..\..\FreeRTOS_Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5054:..\..\FreeRTOS_Source/tasks.c **** 			}
5055:..\..\FreeRTOS_Source/tasks.c **** 		}
5056:..\..\FreeRTOS_Source/tasks.c **** 
5057:..\..\FreeRTOS_Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5058:..\..\FreeRTOS_Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 189
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 189
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 189
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 189
>>>>>>> parent of cb49844... test


5059:..\..\FreeRTOS_Source/tasks.c **** 	}
5060:..\..\FreeRTOS_Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5061:..\..\FreeRTOS_Source/tasks.c **** }
 5379              		.loc 1 5061 0
 5380 0056 26E0     		b	.L374
 5381              	.L371:
4993:..\..\FreeRTOS_Source/tasks.c **** 
 5382              		.loc 1 4993 0
 5383 0058 FA68     		ldr	r2, [r7, #12]
 5384 005a 7B68     		ldr	r3, [r7, #4]
 5385 005c 1344     		add	r3, r3, r2
 5386 005e BB60     		str	r3, [r7, #8]
4996:..\..\FreeRTOS_Source/tasks.c **** 
 5387              		.loc 1 4996 0
 5388 0060 144B     		ldr	r3, .L375+4
 5389 0062 1B68     		ldr	r3, [r3]
 5390 0064 BA68     		ldr	r2, [r7, #8]
 5391 0066 5A60     		str	r2, [r3, #4]
4998:..\..\FreeRTOS_Source/tasks.c **** 			{
 5392              		.loc 1 4998 0
 5393 0068 BA68     		ldr	r2, [r7, #8]
 5394 006a FB68     		ldr	r3, [r7, #12]
 5395 006c 9A42     		cmp	r2, r3
 5396 006e 09D2     		bcs	.L373
5002:..\..\FreeRTOS_Source/tasks.c **** 			}
 5397              		.loc 1 5002 0
 5398 0070 134B     		ldr	r3, .L375+16
 5399 0072 1A68     		ldr	r2, [r3]
 5400 0074 0F4B     		ldr	r3, .L375+4
 5401 0076 1B68     		ldr	r3, [r3]
 5402 0078 0433     		adds	r3, r3, #4
 5403 007a 1946     		mov	r1, r3
 5404 007c 1046     		mov	r0, r2
 5405 007e FFF7FEFF 		bl	vListInsert
 5406              		.loc 1 5061 0
 5407 0082 10E0     		b	.L374
 5408              	.L373:
5008:..\..\FreeRTOS_Source/tasks.c **** 
 5409              		.loc 1 5008 0
 5410 0084 0F4B     		ldr	r3, .L375+20
 5411 0086 1A68     		ldr	r2, [r3]
 5412 0088 0A4B     		ldr	r3, .L375+4
 5413 008a 1B68     		ldr	r3, [r3]
 5414 008c 0433     		adds	r3, r3, #4
 5415 008e 1946     		mov	r1, r3
 5416 0090 1046     		mov	r0, r2
 5417 0092 FFF7FEFF 		bl	vListInsert
5013:..\..\FreeRTOS_Source/tasks.c **** 				{
 5418              		.loc 1 5013 0
 5419 0096 0C4B     		ldr	r3, .L375+24
 5420 0098 1B68     		ldr	r3, [r3]
 5421 009a BA68     		ldr	r2, [r7, #8]
 5422 009c 9A42     		cmp	r2, r3
 5423 009e 02D2     		bcs	.L374
5015:..\..\FreeRTOS_Source/tasks.c **** 				}
 5424              		.loc 1 5015 0
 5425 00a0 094A     		ldr	r2, .L375+24
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 190
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 190
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 190
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 190
>>>>>>> parent of cb49844... test


 5426 00a2 BB68     		ldr	r3, [r7, #8]
 5427 00a4 1360     		str	r3, [r2]
 5428              	.L374:
 5429              		.loc 1 5061 0
 5430 00a6 00BF     		nop
 5431 00a8 1037     		adds	r7, r7, #16
 5432              		.cfi_def_cfa_offset 8
 5433 00aa BD46     		mov	sp, r7
 5434              		.cfi_def_cfa_register 13
 5435              		@ sp needed
 5436 00ac 80BD     		pop	{r7, pc}
 5437              	.L376:
 5438 00ae 00BF     		.align	2
 5439              	.L375:
 5440 00b0 B4000000 		.word	xTickCount
 5441 00b4 00000000 		.word	pxCurrentTCB
 5442 00b8 B8000000 		.word	uxTopReadyPriority
 5443 00bc 9C000000 		.word	xSuspendedTaskList
 5444 00c0 6C000000 		.word	pxOverflowDelayedTaskList
 5445 00c4 68000000 		.word	pxDelayedTaskList
 5446 00c8 D0000000 		.word	xNextTaskUnblockTime
 5447              		.cfi_endproc
 5448              	.LFE119:
 5449              		.size	prvAddCurrentTaskToDelayedList, .-prvAddCurrentTaskToDelayedList
 5450              		.bss
 5451              		.align	2
 5452              	xDelayedTaskList1.7292:
 5453 00dc 00000000 		.space	20
 5453      00000000 
 5453      00000000 
 5453      00000000 
 5453      00000000 
 5454              		.align	2
 5455              	xDelayedTaskList2.7293:
 5456 00f0 00000000 		.space	20
 5456      00000000 
 5456      00000000 
 5456      00000000 
 5456      00000000 
 5457              		.text
 5458              	.Letext0:
 5459              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 5460              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 5461              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 5462              		.file 6 "..\\..\\FreeRTOS_Source\\include/projdefs.h"
 5463              		.file 7 "..\\..\\FreeRTOS_Source\\include/list.h"
 5464              		.file 8 "..\\..\\FreeRTOS_Source\\include/task.h"
 5465              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 5466              		.section	.debug_info,"",%progbits
 5467              	.Ldebug_info0:
 5468 0000 00170000 		.4byte	0x1700
 5469 0004 0400     		.2byte	0x4
 5470 0006 00000000 		.4byte	.Ldebug_abbrev0
 5471 000a 04       		.byte	0x4
 5472 000b 01       		.uleb128 0x1
 5473 000c 5C010000 		.4byte	.LASF229
 5474 0010 0C       		.byte	0xc
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 191
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 191
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 191
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 191
>>>>>>> parent of cb49844... test


 5475 0011 CD0D0000 		.4byte	.LASF230
 5476 0015 D9020000 		.4byte	.LASF231
 5477 0019 00000000 		.4byte	.Ldebug_ranges0+0
 5478 001d 00000000 		.4byte	0
 5479 0021 00000000 		.4byte	.Ldebug_line0
 5480 0025 02       		.uleb128 0x2
 5481 0026 31050000 		.4byte	.LASF4
 5482 002a 03       		.byte	0x3
 5483 002b D8       		.byte	0xd8
 5484 002c 30000000 		.4byte	0x30
 5485 0030 03       		.uleb128 0x3
 5486 0031 04       		.byte	0x4
 5487 0032 07       		.byte	0x7
 5488 0033 CF000000 		.4byte	.LASF0
 5489 0037 04       		.uleb128 0x4
 5490 0038 04       		.byte	0x4
 5491 0039 05       		.byte	0x5
 5492 003a 696E7400 		.ascii	"int\000"
 5493 003e 03       		.uleb128 0x3
 5494 003f 08       		.byte	0x8
 5495 0040 05       		.byte	0x5
 5496 0041 F1070000 		.4byte	.LASF1
 5497 0045 03       		.uleb128 0x3
 5498 0046 08       		.byte	0x8
 5499 0047 04       		.byte	0x4
 5500 0048 B4090000 		.4byte	.LASF2
 5501 004c 03       		.uleb128 0x3
 5502 004d 01       		.byte	0x1
 5503 004e 06       		.byte	0x6
 5504 004f 1E0E0000 		.4byte	.LASF3
 5505 0053 02       		.uleb128 0x2
 5506 0054 510B0000 		.4byte	.LASF5
 5507 0058 04       		.byte	0x4
 5508 0059 1D       		.byte	0x1d
 5509 005a 5E000000 		.4byte	0x5e
 5510 005e 03       		.uleb128 0x3
 5511 005f 01       		.byte	0x1
 5512 0060 08       		.byte	0x8
 5513 0061 740C0000 		.4byte	.LASF6
 5514 0065 03       		.uleb128 0x3
 5515 0066 02       		.byte	0x2
 5516 0067 05       		.byte	0x5
 5517 0068 570A0000 		.4byte	.LASF7
 5518 006c 02       		.uleb128 0x2
 5519 006d B5040000 		.4byte	.LASF8
 5520 0071 04       		.byte	0x4
 5521 0072 2B       		.byte	0x2b
 5522 0073 77000000 		.4byte	0x77
 5523 0077 03       		.uleb128 0x3
 5524 0078 02       		.byte	0x2
 5525 0079 07       		.byte	0x7
 5526 007a 2A0E0000 		.4byte	.LASF9
 5527 007e 02       		.uleb128 0x2
 5528 007f 35010000 		.4byte	.LASF10
 5529 0083 04       		.byte	0x4
 5530 0084 3F       		.byte	0x3f
 5531 0085 89000000 		.4byte	0x89
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 192
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 192
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 192
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 192
>>>>>>> parent of cb49844... test


 5532 0089 03       		.uleb128 0x3
 5533 008a 04       		.byte	0x4
 5534 008b 05       		.byte	0x5
 5535 008c 790A0000 		.4byte	.LASF11
 5536 0090 02       		.uleb128 0x2
 5537 0091 A10C0000 		.4byte	.LASF12
 5538 0095 04       		.byte	0x4
 5539 0096 41       		.byte	0x41
 5540 0097 9B000000 		.4byte	0x9b
 5541 009b 03       		.uleb128 0x3
 5542 009c 04       		.byte	0x4
 5543 009d 07       		.byte	0x7
 5544 009e A90B0000 		.4byte	.LASF13
 5545 00a2 03       		.uleb128 0x3
 5546 00a3 08       		.byte	0x8
 5547 00a4 07       		.byte	0x7
 5548 00a5 24040000 		.4byte	.LASF14
 5549 00a9 03       		.uleb128 0x3
 5550 00aa 04       		.byte	0x4
 5551 00ab 07       		.byte	0x7
 5552 00ac 810B0000 		.4byte	.LASF15
 5553 00b0 05       		.uleb128 0x5
 5554 00b1 04       		.byte	0x4
 5555 00b2 06       		.uleb128 0x6
 5556 00b3 04       		.byte	0x4
 5557 00b4 B8000000 		.4byte	0xb8
 5558 00b8 03       		.uleb128 0x3
 5559 00b9 01       		.byte	0x1
 5560 00ba 08       		.byte	0x8
 5561 00bb A9060000 		.4byte	.LASF16
 5562 00bf 06       		.uleb128 0x6
 5563 00c0 04       		.byte	0x4
 5564 00c1 C5000000 		.4byte	0xc5
 5565 00c5 07       		.uleb128 0x7
 5566 00c6 B8000000 		.4byte	0xb8
 5567 00ca 02       		.uleb128 0x2
 5568 00cb 7E070000 		.4byte	.LASF17
 5569 00cf 05       		.byte	0x5
 5570 00d0 18       		.byte	0x18
 5571 00d1 53000000 		.4byte	0x53
 5572 00d5 02       		.uleb128 0x2
 5573 00d6 CF090000 		.4byte	.LASF18
 5574 00da 05       		.byte	0x5
 5575 00db 24       		.byte	0x24
 5576 00dc 6C000000 		.4byte	0x6c
 5577 00e0 02       		.uleb128 0x2
 5578 00e1 0F0C0000 		.4byte	.LASF19
 5579 00e5 05       		.byte	0x5
 5580 00e6 2C       		.byte	0x2c
 5581 00e7 7E000000 		.4byte	0x7e
 5582 00eb 02       		.uleb128 0x2
 5583 00ec 81030000 		.4byte	.LASF20
 5584 00f0 05       		.byte	0x5
 5585 00f1 30       		.byte	0x30
 5586 00f2 90000000 		.4byte	0x90
 5587 00f6 03       		.uleb128 0x3
 5588 00f7 04       		.byte	0x4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 193
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 193
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 193
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 193
>>>>>>> parent of cb49844... test


 5589 00f8 04       		.byte	0x4
 5590 00f9 CC030000 		.4byte	.LASF21
 5591 00fd 03       		.uleb128 0x3
 5592 00fe 08       		.byte	0x8
 5593 00ff 04       		.byte	0x4
 5594 0100 5E0E0000 		.4byte	.LASF22
 5595 0104 08       		.uleb128 0x8
 5596 0105 EB000000 		.4byte	0xeb
 5597 0109 08       		.uleb128 0x8
 5598 010a CA000000 		.4byte	0xca
 5599 010e 02       		.uleb128 0x2
 5600 010f 82080000 		.4byte	.LASF23
 5601 0113 06       		.byte	0x6
 5602 0114 23       		.byte	0x23
 5603 0115 19010000 		.4byte	0x119
 5604 0119 06       		.uleb128 0x6
 5605 011a 04       		.byte	0x4
 5606 011b 1F010000 		.4byte	0x11f
 5607 011f 09       		.uleb128 0x9
 5608 0120 2A010000 		.4byte	0x12a
 5609 0124 0A       		.uleb128 0xa
 5610 0125 B0000000 		.4byte	0xb0
 5611 0129 00       		.byte	0
 5612 012a 02       		.uleb128 0x2
 5613 012b 02010000 		.4byte	.LASF24
 5614 012f 02       		.byte	0x2
 5615 0130 37       		.byte	0x37
 5616 0131 EB000000 		.4byte	0xeb
 5617 0135 02       		.uleb128 0x2
 5618 0136 30080000 		.4byte	.LASF25
 5619 013a 02       		.byte	0x2
 5620 013b 38       		.byte	0x38
 5621 013c 89000000 		.4byte	0x89
 5622 0140 02       		.uleb128 0x2
 5623 0141 E0060000 		.4byte	.LASF26
 5624 0145 02       		.byte	0x2
 5625 0146 39       		.byte	0x39
 5626 0147 9B000000 		.4byte	0x9b
 5627 014b 02       		.uleb128 0x2
 5628 014c 8C090000 		.4byte	.LASF27
 5629 0150 02       		.byte	0x2
 5630 0151 3F       		.byte	0x3f
 5631 0152 EB000000 		.4byte	0xeb
 5632 0156 06       		.uleb128 0x6
 5633 0157 04       		.byte	0x4
 5634 0158 CA000000 		.4byte	0xca
 5635 015c 0B       		.uleb128 0xb
 5636 015d 3F010000 		.4byte	.LASF33
 5637 0161 14       		.byte	0x14
 5638 0162 07       		.byte	0x7
 5639 0163 8C       		.byte	0x8c
 5640 0164 A5010000 		.4byte	0x1a5
 5641 0168 0C       		.uleb128 0xc
 5642 0169 6E0A0000 		.4byte	.LASF28
 5643 016d 07       		.byte	0x7
 5644 016e 8F       		.byte	0x8f
 5645 016f 4B010000 		.4byte	0x14b
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 194
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 194
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 194
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 194
>>>>>>> parent of cb49844... test


 5646 0173 00       		.byte	0
 5647 0174 0C       		.uleb128 0xc
 5648 0175 91080000 		.4byte	.LASF29
 5649 0179 07       		.byte	0x7
 5650 017a 90       		.byte	0x90
 5651 017b A5010000 		.4byte	0x1a5
 5652 017f 04       		.byte	0x4
 5653 0180 0C       		.uleb128 0xc
 5654 0181 91040000 		.4byte	.LASF30
 5655 0185 07       		.byte	0x7
 5656 0186 91       		.byte	0x91
 5657 0187 A5010000 		.4byte	0x1a5
 5658 018b 08       		.byte	0x8
 5659 018c 0C       		.uleb128 0xc
 5660 018d 350D0000 		.4byte	.LASF31
 5661 0191 07       		.byte	0x7
 5662 0192 92       		.byte	0x92
 5663 0193 B0000000 		.4byte	0xb0
 5664 0197 0C       		.byte	0xc
 5665 0198 0C       		.uleb128 0xc
 5666 0199 5A0C0000 		.4byte	.LASF32
 5667 019d 07       		.byte	0x7
 5668 019e 93       		.byte	0x93
 5669 019f DC010000 		.4byte	0x1dc
 5670 01a3 10       		.byte	0x10
 5671 01a4 00       		.byte	0
 5672 01a5 06       		.uleb128 0x6
 5673 01a6 04       		.byte	0x4
 5674 01a7 5C010000 		.4byte	0x15c
 5675 01ab 0B       		.uleb128 0xb
 5676 01ac 60050000 		.4byte	.LASF34
 5677 01b0 14       		.byte	0x14
 5678 01b1 07       		.byte	0x7
 5679 01b2 A4       		.byte	0xa4
 5680 01b3 DC010000 		.4byte	0x1dc
 5681 01b7 0C       		.uleb128 0xc
 5682 01b8 0B000000 		.4byte	.LASF35
 5683 01bc 07       		.byte	0x7
 5684 01bd A7       		.byte	0xa7
 5685 01be 29020000 		.4byte	0x229
 5686 01c2 00       		.byte	0
 5687 01c3 0C       		.uleb128 0xc
 5688 01c4 FA000000 		.4byte	.LASF36
 5689 01c8 07       		.byte	0x7
 5690 01c9 A8       		.byte	0xa8
 5691 01ca 2E020000 		.4byte	0x22e
 5692 01ce 04       		.byte	0x4
 5693 01cf 0C       		.uleb128 0xc
 5694 01d0 20070000 		.4byte	.LASF37
 5695 01d4 07       		.byte	0x7
 5696 01d5 A9       		.byte	0xa9
 5697 01d6 1E020000 		.4byte	0x21e
 5698 01da 08       		.byte	0x8
 5699 01db 00       		.byte	0
 5700 01dc 06       		.uleb128 0x6
 5701 01dd 04       		.byte	0x4
 5702 01de AB010000 		.4byte	0x1ab
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 195
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 195
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 195
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 195
>>>>>>> parent of cb49844... test


 5703 01e2 02       		.uleb128 0x2
 5704 01e3 AE060000 		.4byte	.LASF38
 5705 01e7 07       		.byte	0x7
 5706 01e8 96       		.byte	0x96
 5707 01e9 5C010000 		.4byte	0x15c
 5708 01ed 0B       		.uleb128 0xb
 5709 01ee 43050000 		.4byte	.LASF39
 5710 01f2 0C       		.byte	0xc
 5711 01f3 07       		.byte	0x7
 5712 01f4 98       		.byte	0x98
 5713 01f5 1E020000 		.4byte	0x21e
 5714 01f9 0C       		.uleb128 0xc
 5715 01fa 6E0A0000 		.4byte	.LASF28
 5716 01fe 07       		.byte	0x7
 5717 01ff 9B       		.byte	0x9b
 5718 0200 4B010000 		.4byte	0x14b
 5719 0204 00       		.byte	0
 5720 0205 0C       		.uleb128 0xc
 5721 0206 91080000 		.4byte	.LASF29
 5722 020a 07       		.byte	0x7
 5723 020b 9C       		.byte	0x9c
 5724 020c A5010000 		.4byte	0x1a5
 5725 0210 04       		.byte	0x4
 5726 0211 0C       		.uleb128 0xc
 5727 0212 91040000 		.4byte	.LASF30
 5728 0216 07       		.byte	0x7
 5729 0217 9D       		.byte	0x9d
 5730 0218 A5010000 		.4byte	0x1a5
 5731 021c 08       		.byte	0x8
 5732 021d 00       		.byte	0
 5733 021e 02       		.uleb128 0x2
 5734 021f 3A070000 		.4byte	.LASF40
 5735 0223 07       		.byte	0x7
 5736 0224 9F       		.byte	0x9f
 5737 0225 ED010000 		.4byte	0x1ed
 5738 0229 08       		.uleb128 0x8
 5739 022a 40010000 		.4byte	0x140
 5740 022e 06       		.uleb128 0x6
 5741 022f 04       		.byte	0x4
 5742 0230 E2010000 		.4byte	0x1e2
 5743 0234 02       		.uleb128 0x2
 5744 0235 78090000 		.4byte	.LASF41
 5745 0239 07       		.byte	0x7
 5746 023a AB       		.byte	0xab
 5747 023b AB010000 		.4byte	0x1ab
 5748 023f 02       		.uleb128 0x2
 5749 0240 1E090000 		.4byte	.LASF42
 5750 0244 08       		.byte	0x8
 5751 0245 3E       		.byte	0x3e
 5752 0246 4A020000 		.4byte	0x24a
 5753 024a 06       		.uleb128 0x6
 5754 024b 04       		.byte	0x4
 5755 024c 50020000 		.4byte	0x250
 5756 0250 0D       		.uleb128 0xd
 5757 0251 25060000 		.4byte	.LASF43
 5758 0255 50       		.byte	0x50
 5759 0256 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 196
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 196
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 196
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 196
>>>>>>> parent of cb49844... test


 5760 0257 0D01     		.2byte	0x10d
 5761 0259 E0020000 		.4byte	0x2e0
 5762 025d 0E       		.uleb128 0xe
 5763 025e 7A0E0000 		.4byte	.LASF44
 5764 0262 01       		.byte	0x1
 5765 0263 0F01     		.2byte	0x10f
 5766 0265 C9030000 		.4byte	0x3c9
 5767 0269 00       		.byte	0
 5768 026a 0E       		.uleb128 0xe
 5769 026b 490E0000 		.4byte	.LASF45
 5770 026f 01       		.byte	0x1
 5771 0270 1501     		.2byte	0x115
 5772 0272 E2010000 		.4byte	0x1e2
 5773 0276 04       		.byte	0x4
 5774 0277 0E       		.uleb128 0xe
 5775 0278 FD0C0000 		.4byte	.LASF46
 5776 027c 01       		.byte	0x1
 5777 027d 1601     		.2byte	0x116
 5778 027f E2010000 		.4byte	0x1e2
 5779 0283 18       		.byte	0x18
 5780 0284 0E       		.uleb128 0xe
 5781 0285 1B000000 		.4byte	.LASF47
 5782 0289 01       		.byte	0x1
 5783 028a 1701     		.2byte	0x117
 5784 028c 40010000 		.4byte	0x140
 5785 0290 2C       		.byte	0x2c
 5786 0291 0E       		.uleb128 0xe
 5787 0292 FC0A0000 		.4byte	.LASF48
 5788 0296 01       		.byte	0x1
 5789 0297 1801     		.2byte	0x118
 5790 0299 C3030000 		.4byte	0x3c3
 5791 029d 30       		.byte	0x30
 5792 029e 0E       		.uleb128 0xe
 5793 029f 00000000 		.4byte	.LASF49
 5794 02a3 01       		.byte	0x1
 5795 02a4 1901     		.2byte	0x119
 5796 02a6 D4030000 		.4byte	0x3d4
 5797 02aa 34       		.byte	0x34
 5798 02ab 0E       		.uleb128 0xe
 5799 02ac DE0C0000 		.4byte	.LASF50
 5800 02b0 01       		.byte	0x1
 5801 02b1 2901     		.2byte	0x129
 5802 02b3 40010000 		.4byte	0x140
 5803 02b7 40       		.byte	0x40
 5804 02b8 0E       		.uleb128 0xe
 5805 02b9 6A060000 		.4byte	.LASF51
 5806 02bd 01       		.byte	0x1
 5807 02be 2A01     		.2byte	0x12a
 5808 02c0 40010000 		.4byte	0x140
 5809 02c4 44       		.byte	0x44
 5810 02c5 0E       		.uleb128 0xe
 5811 02c6 38060000 		.4byte	.LASF52
 5812 02ca 01       		.byte	0x1
 5813 02cb 4501     		.2byte	0x145
 5814 02cd 04010000 		.4byte	0x104
 5815 02d1 48       		.byte	0x48
 5816 02d2 0E       		.uleb128 0xe
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 197
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 197
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 197
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 197
>>>>>>> parent of cb49844... test


 5817 02d3 8A030000 		.4byte	.LASF53
 5818 02d7 01       		.byte	0x1
 5819 02d8 4601     		.2byte	0x146
 5820 02da 09010000 		.4byte	0x109
 5821 02de 4C       		.byte	0x4c
 5822 02df 00       		.byte	0
 5823 02e0 0F       		.uleb128 0xf
 5824 02e1 01       		.byte	0x1
 5825 02e2 5E000000 		.4byte	0x5e
 5826 02e6 08       		.byte	0x8
 5827 02e7 48       		.byte	0x48
 5828 02e8 11030000 		.4byte	0x311
 5829 02ec 10       		.uleb128 0x10
 5830 02ed 480C0000 		.4byte	.LASF54
 5831 02f1 00       		.byte	0
 5832 02f2 10       		.uleb128 0x10
 5833 02f3 86070000 		.4byte	.LASF55
 5834 02f7 01       		.byte	0x1
 5835 02f8 10       		.uleb128 0x10
 5836 02f9 4A0D0000 		.4byte	.LASF56
 5837 02fd 02       		.byte	0x2
 5838 02fe 10       		.uleb128 0x10
 5839 02ff 3E000000 		.4byte	.LASF57
 5840 0303 03       		.byte	0x3
 5841 0304 10       		.uleb128 0x10
 5842 0305 FF070000 		.4byte	.LASF58
 5843 0309 04       		.byte	0x4
 5844 030a 10       		.uleb128 0x10
 5845 030b 49000000 		.4byte	.LASF59
 5846 030f 05       		.byte	0x5
 5847 0310 00       		.byte	0
 5848 0311 02       		.uleb128 0x2
 5849 0312 6D090000 		.4byte	.LASF60
 5850 0316 08       		.byte	0x8
 5851 0317 4F       		.byte	0x4f
 5852 0318 E0020000 		.4byte	0x2e0
 5853 031c 0F       		.uleb128 0xf
 5854 031d 01       		.byte	0x1
 5855 031e 5E000000 		.4byte	0x5e
 5856 0322 08       		.byte	0x8
 5857 0323 53       		.byte	0x53
 5858 0324 47030000 		.4byte	0x347
 5859 0328 10       		.uleb128 0x10
 5860 0329 A4000000 		.4byte	.LASF61
 5861 032d 00       		.byte	0
 5862 032e 10       		.uleb128 0x10
 5863 032f AB090000 		.4byte	.LASF62
 5864 0333 01       		.byte	0x1
 5865 0334 10       		.uleb128 0x10
 5866 0335 38050000 		.4byte	.LASF63
 5867 0339 02       		.byte	0x2
 5868 033a 10       		.uleb128 0x10
 5869 033b 0D040000 		.4byte	.LASF64
 5870 033f 03       		.byte	0x3
 5871 0340 10       		.uleb128 0x10
 5872 0341 B9060000 		.4byte	.LASF65
 5873 0345 04       		.byte	0x4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 198
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 198
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 198
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 198
>>>>>>> parent of cb49844... test


 5874 0346 00       		.byte	0
 5875 0347 02       		.uleb128 0x2
 5876 0348 23050000 		.4byte	.LASF66
 5877 034c 08       		.byte	0x8
 5878 034d 59       		.byte	0x59
 5879 034e 1C030000 		.4byte	0x31c
 5880 0352 0B       		.uleb128 0xb
 5881 0353 0E010000 		.4byte	.LASF67
 5882 0357 08       		.byte	0x8
 5883 0358 08       		.byte	0x8
 5884 0359 5E       		.byte	0x5e
 5885 035a 77030000 		.4byte	0x377
 5886 035e 0C       		.uleb128 0xc
 5887 035f 6F020000 		.4byte	.LASF68
 5888 0363 08       		.byte	0x8
 5889 0364 60       		.byte	0x60
 5890 0365 35010000 		.4byte	0x135
 5891 0369 00       		.byte	0
 5892 036a 0C       		.uleb128 0xc
 5893 036b 64080000 		.4byte	.LASF69
 5894 036f 08       		.byte	0x8
 5895 0370 61       		.byte	0x61
 5896 0371 4B010000 		.4byte	0x14b
 5897 0375 04       		.byte	0x4
 5898 0376 00       		.byte	0
 5899 0377 02       		.uleb128 0x2
 5900 0378 EA080000 		.4byte	.LASF70
 5901 037c 08       		.byte	0x8
 5902 037d 62       		.byte	0x62
 5903 037e 52030000 		.4byte	0x352
 5904 0382 0B       		.uleb128 0xb
 5905 0383 C0090000 		.4byte	.LASF71
 5906 0387 0C       		.byte	0xc
 5907 0388 08       		.byte	0x8
 5908 0389 67       		.byte	0x67
 5909 038a B3030000 		.4byte	0x3b3
 5910 038e 0C       		.uleb128 0xc
 5911 038f F9060000 		.4byte	.LASF72
 5912 0393 08       		.byte	0x8
 5913 0394 69       		.byte	0x69
 5914 0395 B0000000 		.4byte	0xb0
 5915 0399 00       		.byte	0
 5916 039a 0C       		.uleb128 0xc
 5917 039b 20080000 		.4byte	.LASF73
 5918 039f 08       		.byte	0x8
 5919 03a0 6A       		.byte	0x6a
 5920 03a1 EB000000 		.4byte	0xeb
 5921 03a5 04       		.byte	0x4
 5922 03a6 0C       		.uleb128 0xc
 5923 03a7 96020000 		.4byte	.LASF74
 5924 03ab 08       		.byte	0x8
 5925 03ac 6B       		.byte	0x6b
 5926 03ad EB000000 		.4byte	0xeb
 5927 03b1 08       		.byte	0x8
 5928 03b2 00       		.byte	0
 5929 03b3 02       		.uleb128 0x2
<<<<<<< HEAD
 5930 03b4 2C070000 		.4byte	.LASF75
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 199
=======
 5930 03b4 AF070000 		.4byte	.LASF75
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 199
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 199
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 199
>>>>>>> parent of cb49844... test


 5931 03b8 08       		.byte	0x8
 5932 03b9 6C       		.byte	0x6c
 5933 03ba 82030000 		.4byte	0x382
 5934 03be 07       		.uleb128 0x7
 5935 03bf BF000000 		.4byte	0xbf
 5936 03c3 06       		.uleb128 0x6
 5937 03c4 04       		.byte	0x4
 5938 03c5 2A010000 		.4byte	0x12a
 5939 03c9 06       		.uleb128 0x6
 5940 03ca 04       		.byte	0x4
 5941 03cb CF030000 		.4byte	0x3cf
 5942 03cf 08       		.uleb128 0x8
 5943 03d0 2A010000 		.4byte	0x12a
 5944 03d4 11       		.uleb128 0x11
 5945 03d5 B8000000 		.4byte	0xb8
 5946 03d9 E4030000 		.4byte	0x3e4
 5947 03dd 12       		.uleb128 0x12
 5948 03de A9000000 		.4byte	0xa9
 5949 03e2 0B       		.byte	0xb
 5950 03e3 00       		.byte	0
 5951 03e4 13       		.uleb128 0x13
 5952 03e5 63030000 		.4byte	.LASF76
 5953 03e9 01       		.byte	0x1
 5954 03ea 5301     		.2byte	0x153
 5955 03ec 50020000 		.4byte	0x250
 5956 03f0 13       		.uleb128 0x13
 5957 03f1 220D0000 		.4byte	.LASF77
 5958 03f5 01       		.byte	0x1
 5959 03f6 5701     		.2byte	0x157
 5960 03f8 E4030000 		.4byte	0x3e4
 5961 03fc 14       		.uleb128 0x14
 5962 03fd D3070000 		.4byte	.LASF82
 5963 0401 02       		.byte	0x2
 5964 0402 CF       		.byte	0xcf
 5965 0403 EB000000 		.4byte	0xeb
 5966 0407 03       		.byte	0x3
 5967 0408 23040000 		.4byte	0x423
 5968 040c 15       		.uleb128 0x15
 5969 040d A7030000 		.4byte	.LASF78
 5970 0411 02       		.byte	0x2
 5971 0412 D1       		.byte	0xd1
 5972 0413 EB000000 		.4byte	0xeb
 5973 0417 15       		.uleb128 0x15
 5974 0418 D3060000 		.4byte	.LASF79
 5975 041c 02       		.byte	0x2
 5976 041d D1       		.byte	0xd1
 5977 041e EB000000 		.4byte	0xeb
 5978 0422 00       		.byte	0
 5979 0423 16       		.uleb128 0x16
 5980 0424 AD050000 		.4byte	.LASF80
 5981 0428 02       		.byte	0x2
 5982 0429 E3       		.byte	0xe3
 5983 042a 03       		.byte	0x3
 5984 042b 3B040000 		.4byte	0x43b
 5985 042f 17       		.uleb128 0x17
 5986 0430 33090000 		.4byte	.LASF84
 5987 0434 02       		.byte	0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 200
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 200
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 200
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 200
>>>>>>> parent of cb49844... test


 5988 0435 E3       		.byte	0xe3
 5989 0436 EB000000 		.4byte	0xeb
 5990 043a 00       		.byte	0
 5991 043b 16       		.uleb128 0x16
 5992 043c BB0B0000 		.4byte	.LASF81
 5993 0440 02       		.byte	0x2
 5994 0441 BF       		.byte	0xbf
 5995 0442 03       		.byte	0x3
 5996 0443 53040000 		.4byte	0x453
 5997 0447 15       		.uleb128 0x15
 5998 0448 D3060000 		.4byte	.LASF79
 5999 044c 02       		.byte	0x2
 6000 044d C1       		.byte	0xc1
 6001 044e EB000000 		.4byte	0xeb
 6002 0452 00       		.byte	0
 6003 0453 14       		.uleb128 0x14
 6004 0454 08080000 		.4byte	.LASF83
 6005 0458 02       		.byte	0x2
 6006 0459 82       		.byte	0x82
 6007 045a CA000000 		.4byte	0xca
 6008 045e 03       		.byte	0x3
 6009 045f 7A040000 		.4byte	0x47a
 6010 0463 17       		.uleb128 0x17
 6011 0464 42020000 		.4byte	.LASF85
 6012 0468 02       		.byte	0x2
 6013 0469 82       		.byte	0x82
 6014 046a EB000000 		.4byte	0xeb
 6015 046e 15       		.uleb128 0x15
 6016 046f 5B0B0000 		.4byte	.LASF86
 6017 0473 02       		.byte	0x2
 6018 0474 84       		.byte	0x84
 6019 0475 CA000000 		.4byte	0xca
 6020 0479 00       		.byte	0
 6021 047a 18       		.uleb128 0x18
 6022 047b 59070000 		.4byte	.LASF110
 6023 047f 01       		.byte	0x1
 6024 0480 D302     		.2byte	0x2d3
 6025 0482 35010000 		.4byte	0x135
 6026 0486 00000000 		.4byte	.LFB68
 6027 048a 82000000 		.4byte	.LFE68-.LFB68
 6028 048e 01       		.uleb128 0x1
 6029 048f 9C       		.byte	0x9c
 6030 0490 26050000 		.4byte	0x526
 6031 0494 19       		.uleb128 0x19
 6032 0495 A4070000 		.4byte	.LASF87
 6033 0499 01       		.byte	0x1
 6034 049a D302     		.2byte	0x2d3
 6035 049c 0E010000 		.4byte	0x10e
 6036 04a0 02       		.uleb128 0x2
 6037 04a1 91       		.byte	0x91
 6038 04a2 64       		.sleb128 -28
 6039 04a3 19       		.uleb128 0x19
 6040 04a4 5C030000 		.4byte	.LASF88
 6041 04a8 01       		.byte	0x1
 6042 04a9 D402     		.2byte	0x2d4
 6043 04ab BE030000 		.4byte	0x3be
 6044 04af 02       		.uleb128 0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 201
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 201
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 201
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 201
>>>>>>> parent of cb49844... test


 6045 04b0 91       		.byte	0x91
 6046 04b1 60       		.sleb128 -32
 6047 04b2 19       		.uleb128 0x19
 6048 04b3 E1030000 		.4byte	.LASF89
 6049 04b7 01       		.byte	0x1
 6050 04b8 D502     		.2byte	0x2d5
 6051 04ba 26050000 		.4byte	0x526
 6052 04be 02       		.uleb128 0x2
 6053 04bf 91       		.byte	0x91
 6054 04c0 5E       		.sleb128 -34
 6055 04c1 19       		.uleb128 0x19
 6056 04c2 610A0000 		.4byte	.LASF90
 6057 04c6 01       		.byte	0x1
 6058 04c7 D602     		.2byte	0x2d6
 6059 04c9 2B050000 		.4byte	0x52b
 6060 04cd 02       		.uleb128 0x2
 6061 04ce 91       		.byte	0x91
 6062 04cf 58       		.sleb128 -40
 6063 04d0 19       		.uleb128 0x19
 6064 04d1 1B000000 		.4byte	.LASF47
 6065 04d5 01       		.byte	0x1
 6066 04d6 D702     		.2byte	0x2d7
 6067 04d8 40010000 		.4byte	0x140
 6068 04dc 02       		.uleb128 0x2
 6069 04dd 91       		.byte	0x91
 6070 04de 00       		.sleb128 0
 6071 04df 19       		.uleb128 0x19
 6072 04e0 BA0E0000 		.4byte	.LASF91
 6073 04e4 01       		.byte	0x1
 6074 04e5 D802     		.2byte	0x2d8
 6075 04e7 36050000 		.4byte	0x536
 6076 04eb 02       		.uleb128 0x2
 6077 04ec 91       		.byte	0x91
 6078 04ed 04       		.sleb128 4
 6079 04ee 1A       		.uleb128 0x1a
 6080 04ef 9B070000 		.4byte	.LASF92
 6081 04f3 01       		.byte	0x1
 6082 04f4 DA02     		.2byte	0x2da
 6083 04f6 3B050000 		.4byte	0x53b
 6084 04fa 02       		.uleb128 0x2
 6085 04fb 91       		.byte	0x91
 6086 04fc 74       		.sleb128 -12
 6087 04fd 1A       		.uleb128 0x1a
 6088 04fe 790B0000 		.4byte	.LASF93
 6089 0502 01       		.byte	0x1
 6090 0503 DB02     		.2byte	0x2db
 6091 0505 35010000 		.4byte	0x135
 6092 0509 02       		.uleb128 0x2
 6093 050a 91       		.byte	0x91
 6094 050b 70       		.sleb128 -16
 6095 050c 1B       		.uleb128 0x1b
 6096 050d 10000000 		.4byte	.LBB27
 6097 0511 34000000 		.4byte	.LBE27-.LBB27
 6098 0515 1A       		.uleb128 0x1a
 6099 0516 FC0A0000 		.4byte	.LASF48
 6100 051a 01       		.byte	0x1
 6101 051b F802     		.2byte	0x2f8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 202
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 202
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 202
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 202
>>>>>>> parent of cb49844... test


 6102 051d C3030000 		.4byte	0x3c3
 6103 0521 02       		.uleb128 0x2
 6104 0522 91       		.byte	0x91
 6105 0523 6C       		.sleb128 -20
 6106 0524 00       		.byte	0
 6107 0525 00       		.byte	0
 6108 0526 07       		.uleb128 0x7
 6109 0527 D5000000 		.4byte	0xd5
 6110 052b 07       		.uleb128 0x7
 6111 052c B0000000 		.4byte	0xb0
 6112 0530 06       		.uleb128 0x6
 6113 0531 04       		.byte	0x4
 6114 0532 3F020000 		.4byte	0x23f
 6115 0536 07       		.uleb128 0x7
 6116 0537 30050000 		.4byte	0x530
 6117 053b 06       		.uleb128 0x6
 6118 053c 04       		.byte	0x4
 6119 053d F0030000 		.4byte	0x3f0
 6120 0541 1C       		.uleb128 0x1c
 6121 0542 75000000 		.4byte	.LASF96
 6122 0546 01       		.byte	0x1
 6123 0547 2E03     		.2byte	0x32e
 6124 0549 00000000 		.4byte	.LFB69
 6125 054d EE000000 		.4byte	.LFE69-.LFB69
 6126 0551 01       		.uleb128 0x1
 6127 0552 9C       		.byte	0x9c
 6128 0553 EC050000 		.4byte	0x5ec
 6129 0557 19       		.uleb128 0x19
 6130 0558 A4070000 		.4byte	.LASF87
 6131 055c 01       		.byte	0x1
 6132 055d 2E03     		.2byte	0x32e
 6133 055f 0E010000 		.4byte	0x10e
 6134 0563 02       		.uleb128 0x2
 6135 0564 91       		.byte	0x91
 6136 0565 6C       		.sleb128 -20
 6137 0566 19       		.uleb128 0x19
 6138 0567 5C030000 		.4byte	.LASF88
 6139 056b 01       		.byte	0x1
 6140 056c 2F03     		.2byte	0x32f
 6141 056e BE030000 		.4byte	0x3be
 6142 0572 02       		.uleb128 0x2
 6143 0573 91       		.byte	0x91
 6144 0574 68       		.sleb128 -24
 6145 0575 19       		.uleb128 0x19
 6146 0576 EC060000 		.4byte	.LASF94
 6147 057a 01       		.byte	0x1
 6148 057b 3003     		.2byte	0x330
 6149 057d EC050000 		.4byte	0x5ec
 6150 0581 02       		.uleb128 0x2
 6151 0582 91       		.byte	0x91
 6152 0583 64       		.sleb128 -28
 6153 0584 19       		.uleb128 0x19
 6154 0585 610A0000 		.4byte	.LASF90
 6155 0589 01       		.byte	0x1
 6156 058a 3103     		.2byte	0x331
 6157 058c 2B050000 		.4byte	0x52b
 6158 0590 02       		.uleb128 0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 203
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 203
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 203
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 203
>>>>>>> parent of cb49844... test


 6159 0591 91       		.byte	0x91
 6160 0592 60       		.sleb128 -32
 6161 0593 19       		.uleb128 0x19
 6162 0594 1B000000 		.4byte	.LASF47
 6163 0598 01       		.byte	0x1
 6164 0599 3203     		.2byte	0x332
 6165 059b 40010000 		.4byte	0x140
 6166 059f 02       		.uleb128 0x2
 6167 05a0 91       		.byte	0x91
 6168 05a1 00       		.sleb128 0
 6169 05a2 19       		.uleb128 0x19
 6170 05a3 BA0E0000 		.4byte	.LASF91
 6171 05a7 01       		.byte	0x1
 6172 05a8 3303     		.2byte	0x333
 6173 05aa 36050000 		.4byte	0x536
 6174 05ae 02       		.uleb128 0x2
 6175 05af 91       		.byte	0x91
 6176 05b0 04       		.sleb128 4
 6177 05b1 19       		.uleb128 0x19
 6178 05b2 9B070000 		.4byte	.LASF92
 6179 05b6 01       		.byte	0x1
 6180 05b7 3403     		.2byte	0x334
 6181 05b9 3B050000 		.4byte	0x53b
 6182 05bd 02       		.uleb128 0x2
 6183 05be 91       		.byte	0x91
 6184 05bf 08       		.sleb128 8
 6185 05c0 19       		.uleb128 0x19
 6186 05c1 A50D0000 		.4byte	.LASF95
 6187 05c5 01       		.byte	0x1
 6188 05c6 3503     		.2byte	0x335
 6189 05c8 FC050000 		.4byte	0x5fc
 6190 05cc 02       		.uleb128 0x2
 6191 05cd 91       		.byte	0x91
 6192 05ce 0C       		.sleb128 12
 6193 05cf 1A       		.uleb128 0x1a
 6194 05d0 7A0E0000 		.4byte	.LASF44
 6195 05d4 01       		.byte	0x1
 6196 05d5 3703     		.2byte	0x337
 6197 05d7 C3030000 		.4byte	0x3c3
 6198 05db 02       		.uleb128 0x2
 6199 05dc 91       		.byte	0x91
 6200 05dd 70       		.sleb128 -16
 6201 05de 1D       		.uleb128 0x1d
 6202 05df 7800     		.ascii	"x\000"
 6203 05e1 01       		.byte	0x1
 6204 05e2 3803     		.2byte	0x338
 6205 05e4 40010000 		.4byte	0x140
 6206 05e8 02       		.uleb128 0x2
 6207 05e9 91       		.byte	0x91
 6208 05ea 74       		.sleb128 -12
 6209 05eb 00       		.byte	0
 6210 05ec 07       		.uleb128 0x7
 6211 05ed EB000000 		.4byte	0xeb
 6212 05f1 06       		.uleb128 0x6
 6213 05f2 04       		.byte	0x4
 6214 05f3 F7050000 		.4byte	0x5f7
 6215 05f7 07       		.uleb128 0x7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 204
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 204
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 204
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 204
>>>>>>> parent of cb49844... test


 6216 05f8 B3030000 		.4byte	0x3b3
 6217 05fc 07       		.uleb128 0x7
 6218 05fd F1050000 		.4byte	0x5f1
 6219 0601 1C       		.uleb128 0x1c
 6220 0602 65070000 		.4byte	.LASF97
 6221 0606 01       		.byte	0x1
 6222 0607 FC03     		.2byte	0x3fc
 6223 0609 00000000 		.4byte	.LFB70
 6224 060d D4000000 		.4byte	.LFE70-.LFB70
 6225 0611 01       		.uleb128 0x1
 6226 0612 9C       		.byte	0x9c
 6227 0613 27060000 		.4byte	0x627
 6228 0617 19       		.uleb128 0x19
 6229 0618 9B070000 		.4byte	.LASF92
 6230 061c 01       		.byte	0x1
 6231 061d FC03     		.2byte	0x3fc
 6232 061f 3B050000 		.4byte	0x53b
 6233 0623 02       		.uleb128 0x2
 6234 0624 91       		.byte	0x91
 6235 0625 74       		.sleb128 -12
 6236 0626 00       		.byte	0
 6237 0627 1E       		.uleb128 0x1e
 6238 0628 D8090000 		.4byte	.LASF100
 6239 062c 01       		.byte	0x1
 6240 062d 5104     		.2byte	0x451
 6241 062f 00000000 		.4byte	.LFB71
 6242 0633 FC000000 		.4byte	.LFE71-.LFB71
 6243 0637 01       		.uleb128 0x1
 6244 0638 9C       		.byte	0x9c
 6245 0639 5C060000 		.4byte	0x65c
 6246 063d 19       		.uleb128 0x19
 6247 063e 040B0000 		.4byte	.LASF98
 6248 0642 01       		.byte	0x1
 6249 0643 5104     		.2byte	0x451
 6250 0645 3F020000 		.4byte	0x23f
 6251 0649 02       		.uleb128 0x2
 6252 064a 91       		.byte	0x91
 6253 064b 6C       		.sleb128 -20
 6254 064c 1A       		.uleb128 0x1a
 6255 064d 580E0000 		.4byte	.LASF99
 6256 0651 01       		.byte	0x1
 6257 0652 5304     		.2byte	0x453
 6258 0654 3B050000 		.4byte	0x53b
 6259 0658 02       		.uleb128 0x2
 6260 0659 91       		.byte	0x91
 6261 065a 74       		.sleb128 -12
 6262 065b 00       		.byte	0
 6263 065c 1E       		.uleb128 0x1e
 6264 065d ED0C0000 		.4byte	.LASF101
 6265 0661 01       		.byte	0x1
 6266 0662 AD04     		.2byte	0x4ad
 6267 0664 00000000 		.4byte	.LFB72
 6268 0668 A0000000 		.4byte	.LFE72-.LFB72
 6269 066c 01       		.uleb128 0x1
 6270 066d 9C       		.byte	0x9c
 6271 066e D7060000 		.4byte	0x6d7
 6272 0672 19       		.uleb128 0x19
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 205
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 205
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 205
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 205
>>>>>>> parent of cb49844... test


 6273 0673 3E0B0000 		.4byte	.LASF102
 6274 0677 01       		.byte	0x1
 6275 0678 AD04     		.2byte	0x4ad
 6276 067a DD060000 		.4byte	0x6dd
 6277 067e 02       		.uleb128 0x2
 6278 067f 91       		.byte	0x91
 6279 0680 64       		.sleb128 -28
 6280 0681 19       		.uleb128 0x19
 6281 0682 0F0E0000 		.4byte	.LASF103
 6282 0686 01       		.byte	0x1
 6283 0687 AD04     		.2byte	0x4ad
 6284 0689 E2060000 		.4byte	0x6e2
 6285 068d 02       		.uleb128 0x2
 6286 068e 91       		.byte	0x91
 6287 068f 60       		.sleb128 -32
 6288 0690 1A       		.uleb128 0x1a
 6289 0691 3D0E0000 		.4byte	.LASF104
 6290 0695 01       		.byte	0x1
 6291 0696 AF04     		.2byte	0x4af
 6292 0698 4B010000 		.4byte	0x14b
 6293 069c 02       		.uleb128 0x2
 6294 069d 91       		.byte	0x91
 6295 069e 6C       		.sleb128 -20
 6296 069f 1A       		.uleb128 0x1a
 6297 06a0 600D0000 		.4byte	.LASF105
 6298 06a4 01       		.byte	0x1
 6299 06a5 B004     		.2byte	0x4b0
 6300 06a7 35010000 		.4byte	0x135
 6301 06ab 02       		.uleb128 0x2
 6302 06ac 91       		.byte	0x91
 6303 06ad 68       		.sleb128 -24
 6304 06ae 1A       		.uleb128 0x1a
 6305 06af 07070000 		.4byte	.LASF106
 6306 06b3 01       		.byte	0x1
 6307 06b4 B004     		.2byte	0x4b0
 6308 06b6 35010000 		.4byte	0x135
 6309 06ba 02       		.uleb128 0x2
 6310 06bb 91       		.byte	0x91
 6311 06bc 74       		.sleb128 -12
 6312 06bd 1B       		.uleb128 0x1b
 6313 06be 12000000 		.4byte	.LBB28
 6314 06c2 62000000 		.4byte	.LBE28-.LBB28
 6315 06c6 1A       		.uleb128 0x1a
 6316 06c7 8A050000 		.4byte	.LASF107
 6317 06cb 01       		.byte	0x1
 6318 06cc BA04     		.2byte	0x4ba
 6319 06ce E2060000 		.4byte	0x6e2
 6320 06d2 02       		.uleb128 0x2
 6321 06d3 91       		.byte	0x91
 6322 06d4 70       		.sleb128 -16
 6323 06d5 00       		.byte	0
 6324 06d6 00       		.byte	0
 6325 06d7 06       		.uleb128 0x6
 6326 06d8 04       		.byte	0x4
 6327 06d9 4B010000 		.4byte	0x14b
 6328 06dd 07       		.uleb128 0x7
 6329 06de D7060000 		.4byte	0x6d7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 206
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 206
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 206
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 206
>>>>>>> parent of cb49844... test


 6330 06e2 07       		.uleb128 0x7
 6331 06e3 4B010000 		.4byte	0x14b
 6332 06e7 1E       		.uleb128 0x1e
 6333 06e8 FC050000 		.4byte	.LASF108
 6334 06ec 01       		.byte	0x1
 6335 06ed 0105     		.2byte	0x501
 6336 06ef 00000000 		.4byte	.LFB73
 6337 06f3 48000000 		.4byte	.LFE73-.LFB73
 6338 06f7 01       		.uleb128 0x1
 6339 06f8 9C       		.byte	0x9c
 6340 06f9 1C070000 		.4byte	0x71c
 6341 06fd 19       		.uleb128 0x19
 6342 06fe 660C0000 		.4byte	.LASF109
 6343 0702 01       		.byte	0x1
 6344 0703 0105     		.2byte	0x501
 6345 0705 E2060000 		.4byte	0x6e2
 6346 0709 02       		.uleb128 0x2
 6347 070a 91       		.byte	0x91
 6348 070b 6C       		.sleb128 -20
 6349 070c 1A       		.uleb128 0x1a
 6350 070d 600D0000 		.4byte	.LASF105
 6351 0711 01       		.byte	0x1
 6352 0712 0305     		.2byte	0x503
 6353 0714 35010000 		.4byte	0x135
 6354 0718 02       		.uleb128 0x2
 6355 0719 91       		.byte	0x91
 6356 071a 74       		.sleb128 -12
 6357 071b 00       		.byte	0
 6358 071c 18       		.uleb128 0x18
 6359 071d 8D070000 		.4byte	.LASF111
 6360 0721 01       		.byte	0x1
 6361 0722 2E05     		.2byte	0x52e
 6362 0724 11030000 		.4byte	0x311
 6363 0728 00000000 		.4byte	.LFB74
 6364 072c B0000000 		.4byte	.LFE74-.LFB74
 6365 0730 01       		.uleb128 0x1
 6366 0731 9C       		.byte	0x9c
 6367 0732 91070000 		.4byte	0x791
 6368 0736 19       		.uleb128 0x19
 6369 0737 A5090000 		.4byte	.LASF112
 6370 073b 01       		.byte	0x1
 6371 073c 2E05     		.2byte	0x52e
 6372 073e 3F020000 		.4byte	0x23f
 6373 0742 02       		.uleb128 0x2
 6374 0743 91       		.byte	0x91
 6375 0744 5C       		.sleb128 -36
 6376 0745 1A       		.uleb128 0x1a
 6377 0746 A3020000 		.4byte	.LASF113
 6378 074a 01       		.byte	0x1
 6379 074b 3005     		.2byte	0x530
 6380 074d 11030000 		.4byte	0x311
 6381 0751 02       		.uleb128 0x2
 6382 0752 91       		.byte	0x91
 6383 0753 77       		.sleb128 -9
 6384 0754 1A       		.uleb128 0x1a
 6385 0755 32000000 		.4byte	.LASF114
 6386 0759 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 207
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 207
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 207
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 207
>>>>>>> parent of cb49844... test


 6387 075a 3105     		.2byte	0x531
 6388 075c 91070000 		.4byte	0x791
 6389 0760 02       		.uleb128 0x2
 6390 0761 91       		.byte	0x91
 6391 0762 6C       		.sleb128 -20
 6392 0763 1A       		.uleb128 0x1a
 6393 0764 C1000000 		.4byte	.LASF115
 6394 0768 01       		.byte	0x1
 6395 0769 3105     		.2byte	0x531
 6396 076b 91070000 		.4byte	0x791
 6397 076f 02       		.uleb128 0x2
 6398 0770 91       		.byte	0x91
 6399 0771 68       		.sleb128 -24
 6400 0772 1A       		.uleb128 0x1a
 6401 0773 7E020000 		.4byte	.LASF116
 6402 0777 01       		.byte	0x1
 6403 0778 3105     		.2byte	0x531
 6404 077a 91070000 		.4byte	0x791
 6405 077e 02       		.uleb128 0x2
 6406 077f 91       		.byte	0x91
 6407 0780 64       		.sleb128 -28
 6408 0781 1A       		.uleb128 0x1a
 6409 0782 580E0000 		.4byte	.LASF99
 6410 0786 01       		.byte	0x1
 6411 0787 3205     		.2byte	0x532
 6412 0789 A7070000 		.4byte	0x7a7
 6413 078d 02       		.uleb128 0x2
 6414 078e 91       		.byte	0x91
 6415 078f 70       		.sleb128 -16
 6416 0790 00       		.byte	0
 6417 0791 06       		.uleb128 0x6
 6418 0792 04       		.byte	0x4
 6419 0793 97070000 		.4byte	0x797
 6420 0797 07       		.uleb128 0x7
 6421 0798 34020000 		.4byte	0x234
 6422 079c 06       		.uleb128 0x6
 6423 079d 04       		.byte	0x4
 6424 079e A2070000 		.4byte	0x7a2
 6425 07a2 07       		.uleb128 0x7
 6426 07a3 F0030000 		.4byte	0x3f0
 6427 07a7 07       		.uleb128 0x7
 6428 07a8 9C070000 		.4byte	0x79c
 6429 07ac 18       		.uleb128 0x18
 6430 07ad 78050000 		.4byte	.LASF117
 6431 07b1 01       		.byte	0x1
 6432 07b2 8A05     		.2byte	0x58a
 6433 07b4 40010000 		.4byte	0x140
 6434 07b8 00000000 		.4byte	.LFB75
 6435 07bc 34000000 		.4byte	.LFE75-.LFB75
 6436 07c0 01       		.uleb128 0x1
 6437 07c1 9C       		.byte	0x9c
 6438 07c2 F4070000 		.4byte	0x7f4
 6439 07c6 19       		.uleb128 0x19
 6440 07c7 A5090000 		.4byte	.LASF112
 6441 07cb 01       		.byte	0x1
 6442 07cc 8A05     		.2byte	0x58a
 6443 07ce F4070000 		.4byte	0x7f4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 208
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 208
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 208
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 208
>>>>>>> parent of cb49844... test


 6444 07d2 02       		.uleb128 0x2
 6445 07d3 91       		.byte	0x91
 6446 07d4 6C       		.sleb128 -20
 6447 07d5 1A       		.uleb128 0x1a
 6448 07d6 580E0000 		.4byte	.LASF99
 6449 07da 01       		.byte	0x1
 6450 07db 8C05     		.2byte	0x58c
 6451 07dd 9C070000 		.4byte	0x79c
 6452 07e1 02       		.uleb128 0x2
 6453 07e2 91       		.byte	0x91
 6454 07e3 74       		.sleb128 -12
 6455 07e4 1A       		.uleb128 0x1a
 6456 07e5 B9020000 		.4byte	.LASF118
 6457 07e9 01       		.byte	0x1
 6458 07ea 8D05     		.2byte	0x58d
 6459 07ec 40010000 		.4byte	0x140
 6460 07f0 02       		.uleb128 0x2
 6461 07f1 91       		.byte	0x91
 6462 07f2 70       		.sleb128 -16
 6463 07f3 00       		.byte	0
 6464 07f4 07       		.uleb128 0x7
 6465 07f5 3F020000 		.4byte	0x23f
 6466 07f9 1F       		.uleb128 0x1f
 6467 07fa BF080000 		.4byte	.LASF119
 6468 07fe 01       		.byte	0x1
 6469 07ff A005     		.2byte	0x5a0
 6470 0801 40010000 		.4byte	0x140
 6471 0805 00000000 		.4byte	.LFB76
 6472 0809 54000000 		.4byte	.LFE76-.LFB76
 6473 080d 01       		.uleb128 0x1
 6474 080e 9C       		.byte	0x9c
 6475 080f 98080000 		.4byte	0x898
 6476 0813 19       		.uleb128 0x19
 6477 0814 A5090000 		.4byte	.LASF112
 6478 0818 01       		.byte	0x1
 6479 0819 A005     		.2byte	0x5a0
 6480 081b F4070000 		.4byte	0x7f4
 6481 081f 02       		.uleb128 0x2
 6482 0820 91       		.byte	0x91
 6483 0821 5C       		.sleb128 -36
 6484 0822 1A       		.uleb128 0x1a
 6485 0823 580E0000 		.4byte	.LASF99
 6486 0827 01       		.byte	0x1
 6487 0828 A205     		.2byte	0x5a2
 6488 082a 9C070000 		.4byte	0x79c
 6489 082e 02       		.uleb128 0x2
 6490 082f 91       		.byte	0x91
 6491 0830 6C       		.sleb128 -20
 6492 0831 1A       		.uleb128 0x1a
 6493 0832 B9020000 		.4byte	.LASF118
 6494 0836 01       		.byte	0x1
 6495 0837 A305     		.2byte	0x5a3
 6496 0839 40010000 		.4byte	0x140
 6497 083d 02       		.uleb128 0x2
 6498 083e 91       		.byte	0x91
 6499 083f 68       		.sleb128 -24
 6500 0840 1A       		.uleb128 0x1a
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 209
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 209
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 209
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 209
>>>>>>> parent of cb49844... test


 6501 0841 54040000 		.4byte	.LASF120
 6502 0845 01       		.byte	0x1
 6503 0846 A305     		.2byte	0x5a3
 6504 0848 40010000 		.4byte	0x140
 6505 084c 02       		.uleb128 0x2
 6506 084d 91       		.byte	0x91
 6507 084e 70       		.sleb128 -16
 6508 084f 20       		.uleb128 0x20
 6509 0850 FC030000 		.4byte	0x3fc
 6510 0854 08000000 		.4byte	.LBB29
 6511 0858 1A000000 		.4byte	.LBE29-.LBB29
 6512 085c 01       		.byte	0x1
 6513 085d B705     		.2byte	0x5b7
 6514 085f 7E080000 		.4byte	0x87e
 6515 0863 1B       		.uleb128 0x1b
 6516 0864 08000000 		.4byte	.LBB30
 6517 0868 1A000000 		.4byte	.LBE30-.LBB30
 6518 086c 21       		.uleb128 0x21
 6519 086d 0C040000 		.4byte	0x40c
 6520 0871 02       		.uleb128 0x2
 6521 0872 91       		.byte	0x91
 6522 0873 64       		.sleb128 -28
 6523 0874 21       		.uleb128 0x21
 6524 0875 17040000 		.4byte	0x417
 6525 0879 02       		.uleb128 0x2
 6526 087a 91       		.byte	0x91
 6527 087b 60       		.sleb128 -32
 6528 087c 00       		.byte	0
 6529 087d 00       		.byte	0
 6530 087e 22       		.uleb128 0x22
 6531 087f 23040000 		.4byte	0x423
 6532 0883 3E000000 		.4byte	.LBB31
 6533 0887 06000000 		.4byte	.LBE31-.LBB31
 6534 088b 01       		.byte	0x1
 6535 088c BE05     		.2byte	0x5be
 6536 088e 23       		.uleb128 0x23
 6537 088f 2F040000 		.4byte	0x42f
 6538 0893 02       		.uleb128 0x2
 6539 0894 91       		.byte	0x91
 6540 0895 74       		.sleb128 -12
 6541 0896 00       		.byte	0
 6542 0897 00       		.byte	0
 6543 0898 1E       		.uleb128 0x1e
 6544 0899 5C090000 		.4byte	.LASF121
 6545 089d 01       		.byte	0x1
 6546 089e C805     		.2byte	0x5c8
 6547 08a0 00000000 		.4byte	.LFB77
 6548 08a4 38010000 		.4byte	.LFE77-.LFB77
 6549 08a8 01       		.uleb128 0x1
 6550 08a9 9C       		.byte	0x9c
 6551 08aa 09090000 		.4byte	0x909
 6552 08ae 19       		.uleb128 0x19
 6553 08af A5090000 		.4byte	.LASF112
 6554 08b3 01       		.byte	0x1
 6555 08b4 C805     		.2byte	0x5c8
 6556 08b6 3F020000 		.4byte	0x23f
 6557 08ba 02       		.uleb128 0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 210
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 210
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 210
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 210
>>>>>>> parent of cb49844... test


 6558 08bb 91       		.byte	0x91
 6559 08bc 64       		.sleb128 -28
 6560 08bd 19       		.uleb128 0x19
 6561 08be 74080000 		.4byte	.LASF122
 6562 08c2 01       		.byte	0x1
 6563 08c3 C805     		.2byte	0x5c8
 6564 08c5 40010000 		.4byte	0x140
 6565 08c9 02       		.uleb128 0x2
 6566 08ca 91       		.byte	0x91
 6567 08cb 60       		.sleb128 -32
 6568 08cc 1A       		.uleb128 0x1a
 6569 08cd 580E0000 		.4byte	.LASF99
 6570 08d1 01       		.byte	0x1
 6571 08d2 CA05     		.2byte	0x5ca
 6572 08d4 3B050000 		.4byte	0x53b
 6573 08d8 02       		.uleb128 0x2
 6574 08d9 91       		.byte	0x91
 6575 08da 70       		.sleb128 -16
 6576 08db 1A       		.uleb128 0x1a
 6577 08dc F10E0000 		.4byte	.LASF123
 6578 08e0 01       		.byte	0x1
 6579 08e1 CB05     		.2byte	0x5cb
 6580 08e3 40010000 		.4byte	0x140
 6581 08e7 02       		.uleb128 0x2
 6582 08e8 91       		.byte	0x91
 6583 08e9 6C       		.sleb128 -20
 6584 08ea 1A       		.uleb128 0x1a
 6585 08eb 0C0D0000 		.4byte	.LASF124
 6586 08ef 01       		.byte	0x1
 6587 08f0 CB05     		.2byte	0x5cb
 6588 08f2 40010000 		.4byte	0x140
 6589 08f6 02       		.uleb128 0x2
 6590 08f7 91       		.byte	0x91
 6591 08f8 68       		.sleb128 -24
 6592 08f9 1A       		.uleb128 0x1a
 6593 08fa 98030000 		.4byte	.LASF125
 6594 08fe 01       		.byte	0x1
 6595 08ff CC05     		.2byte	0x5cc
 6596 0901 35010000 		.4byte	0x135
 6597 0905 02       		.uleb128 0x2
 6598 0906 91       		.byte	0x91
 6599 0907 74       		.sleb128 -12
 6600 0908 00       		.byte	0
 6601 0909 1E       		.uleb128 0x1e
 6602 090a 530D0000 		.4byte	.LASF126
 6603 090e 01       		.byte	0x1
 6604 090f 6C06     		.2byte	0x66c
 6605 0911 00000000 		.4byte	.LFB78
 6606 0915 04010000 		.4byte	.LFE78-.LFB78
 6607 0919 01       		.uleb128 0x1
 6608 091a 9C       		.byte	0x9c
 6609 091b 3E090000 		.4byte	0x93e
 6610 091f 19       		.uleb128 0x19
 6611 0920 1A0B0000 		.4byte	.LASF127
 6612 0924 01       		.byte	0x1
 6613 0925 6C06     		.2byte	0x66c
 6614 0927 3F020000 		.4byte	0x23f
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 211
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 211
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 211
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 211
>>>>>>> parent of cb49844... test


 6615 092b 02       		.uleb128 0x2
 6616 092c 91       		.byte	0x91
 6617 092d 6C       		.sleb128 -20
 6618 092e 1A       		.uleb128 0x1a
 6619 092f 580E0000 		.4byte	.LASF99
 6620 0933 01       		.byte	0x1
 6621 0934 6E06     		.2byte	0x66e
 6622 0936 3B050000 		.4byte	0x53b
 6623 093a 02       		.uleb128 0x2
 6624 093b 91       		.byte	0x91
 6625 093c 74       		.sleb128 -12
 6626 093d 00       		.byte	0
 6627 093e 24       		.uleb128 0x24
 6628 093f C70A0000 		.4byte	.LASF170
 6629 0943 01       		.byte	0x1
 6630 0944 D106     		.2byte	0x6d1
 6631 0946 35010000 		.4byte	0x135
 6632 094a 00000000 		.4byte	.LFB79
 6633 094e 44000000 		.4byte	.LFE79-.LFB79
 6634 0952 01       		.uleb128 0x1
 6635 0953 9C       		.byte	0x9c
 6636 0954 86090000 		.4byte	0x986
 6637 0958 19       		.uleb128 0x19
 6638 0959 A5090000 		.4byte	.LASF112
 6639 095d 01       		.byte	0x1
 6640 095e D106     		.2byte	0x6d1
 6641 0960 F4070000 		.4byte	0x7f4
 6642 0964 02       		.uleb128 0x2
 6643 0965 91       		.byte	0x91
 6644 0966 6C       		.sleb128 -20
 6645 0967 1A       		.uleb128 0x1a
 6646 0968 790B0000 		.4byte	.LASF93
 6647 096c 01       		.byte	0x1
 6648 096d D306     		.2byte	0x6d3
 6649 096f 35010000 		.4byte	0x135
 6650 0973 02       		.uleb128 0x2
 6651 0974 91       		.byte	0x91
 6652 0975 74       		.sleb128 -12
 6653 0976 1A       		.uleb128 0x1a
 6654 0977 580E0000 		.4byte	.LASF99
 6655 097b 01       		.byte	0x1
 6656 097c D406     		.2byte	0x6d4
 6657 097e A7070000 		.4byte	0x7a7
 6658 0982 02       		.uleb128 0x2
 6659 0983 91       		.byte	0x91
 6660 0984 70       		.sleb128 -16
 6661 0985 00       		.byte	0
 6662 0986 1E       		.uleb128 0x1e
 6663 0987 870E0000 		.4byte	.LASF128
 6664 098b 01       		.byte	0x1
 6665 098c FF06     		.2byte	0x6ff
 6666 098e 00000000 		.4byte	.LFB80
 6667 0992 A0000000 		.4byte	.LFE80-.LFB80
 6668 0996 01       		.uleb128 0x1
 6669 0997 9C       		.byte	0x9c
 6670 0998 BB090000 		.4byte	0x9bb
 6671 099c 19       		.uleb128 0x19
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 212
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 212
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 212
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 212
>>>>>>> parent of cb49844... test


 6672 099d AB020000 		.4byte	.LASF129
 6673 09a1 01       		.byte	0x1
 6674 09a2 FF06     		.2byte	0x6ff
 6675 09a4 3F020000 		.4byte	0x23f
 6676 09a8 02       		.uleb128 0x2
 6677 09a9 91       		.byte	0x91
 6678 09aa 6C       		.sleb128 -20
 6679 09ab 1A       		.uleb128 0x1a
 6680 09ac 580E0000 		.4byte	.LASF99
 6681 09b0 01       		.byte	0x1
 6682 09b1 0107     		.2byte	0x701
 6683 09b3 BB090000 		.4byte	0x9bb
 6684 09b7 02       		.uleb128 0x2
 6685 09b8 91       		.byte	0x91
 6686 09b9 74       		.sleb128 -12
 6687 09ba 00       		.byte	0
 6688 09bb 07       		.uleb128 0x7
 6689 09bc 3B050000 		.4byte	0x53b
 6690 09c0 18       		.uleb128 0x18
 6691 09c1 E4040000 		.4byte	.LASF130
 6692 09c5 01       		.byte	0x1
 6693 09c6 3507     		.2byte	0x735
 6694 09c8 35010000 		.4byte	0x135
 6695 09cc 00000000 		.4byte	.LFB81
 6696 09d0 C0000000 		.4byte	.LFE81-.LFB81
 6697 09d4 01       		.uleb128 0x1
 6698 09d5 9C       		.byte	0x9c
 6699 09d6 5F0A0000 		.4byte	0xa5f
 6700 09da 19       		.uleb128 0x19
 6701 09db AB020000 		.4byte	.LASF129
 6702 09df 01       		.byte	0x1
 6703 09e0 3507     		.2byte	0x735
 6704 09e2 3F020000 		.4byte	0x23f
 6705 09e6 02       		.uleb128 0x2
 6706 09e7 91       		.byte	0x91
 6707 09e8 5C       		.sleb128 -36
 6708 09e9 1A       		.uleb128 0x1a
 6709 09ea 98030000 		.4byte	.LASF125
 6710 09ee 01       		.byte	0x1
 6711 09ef 3707     		.2byte	0x737
 6712 09f1 35010000 		.4byte	0x135
 6713 09f5 02       		.uleb128 0x2
 6714 09f6 91       		.byte	0x91
 6715 09f7 74       		.sleb128 -12
 6716 09f8 1A       		.uleb128 0x1a
 6717 09f9 580E0000 		.4byte	.LASF99
 6718 09fd 01       		.byte	0x1
 6719 09fe 3807     		.2byte	0x738
 6720 0a00 BB090000 		.4byte	0x9bb
 6721 0a04 02       		.uleb128 0x2
 6722 0a05 91       		.byte	0x91
 6723 0a06 70       		.sleb128 -16
 6724 0a07 1A       		.uleb128 0x1a
 6725 0a08 6A030000 		.4byte	.LASF131
 6726 0a0c 01       		.byte	0x1
 6727 0a0d 3907     		.2byte	0x739
 6728 0a0f 40010000 		.4byte	0x140
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 213
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 213
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 213
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 213
>>>>>>> parent of cb49844... test


 6729 0a13 02       		.uleb128 0x2
 6730 0a14 91       		.byte	0x91
 6731 0a15 68       		.sleb128 -24
 6732 0a16 20       		.uleb128 0x20
 6733 0a17 FC030000 		.4byte	0x3fc
 6734 0a1b 10000000 		.4byte	.LBB33
 6735 0a1f 1A000000 		.4byte	.LBE33-.LBB33
 6736 0a23 01       		.byte	0x1
 6737 0a24 4F07     		.2byte	0x74f
 6738 0a26 450A0000 		.4byte	0xa45
 6739 0a2a 1B       		.uleb128 0x1b
 6740 0a2b 10000000 		.4byte	.LBB34
 6741 0a2f 1A000000 		.4byte	.LBE34-.LBB34
 6742 0a33 21       		.uleb128 0x21
 6743 0a34 0C040000 		.4byte	0x40c
 6744 0a38 02       		.uleb128 0x2
 6745 0a39 91       		.byte	0x91
 6746 0a3a 64       		.sleb128 -28
 6747 0a3b 21       		.uleb128 0x21
 6748 0a3c 17040000 		.4byte	0x417
 6749 0a40 02       		.uleb128 0x2
 6750 0a41 91       		.byte	0x91
 6751 0a42 60       		.sleb128 -32
 6752 0a43 00       		.byte	0
 6753 0a44 00       		.byte	0
 6754 0a45 22       		.uleb128 0x22
 6755 0a46 23040000 		.4byte	0x423
 6756 0a4a 9C000000 		.4byte	.LBB35
 6757 0a4e 06000000 		.4byte	.LBE35-.LBB35
 6758 0a52 01       		.byte	0x1
 6759 0a53 7307     		.2byte	0x773
 6760 0a55 23       		.uleb128 0x23
 6761 0a56 2F040000 		.4byte	0x42f
 6762 0a5a 02       		.uleb128 0x2
 6763 0a5b 91       		.byte	0x91
 6764 0a5c 6C       		.sleb128 -20
 6765 0a5d 00       		.byte	0
 6766 0a5e 00       		.byte	0
 6767 0a5f 1E       		.uleb128 0x1e
 6768 0a60 1E0C0000 		.4byte	.LASF132
 6769 0a64 01       		.byte	0x1
 6770 0a65 7B07     		.2byte	0x77b
 6771 0a67 00000000 		.4byte	.LFB82
 6772 0a6b 6C000000 		.4byte	.LFE82-.LFB82
 6773 0a6f 01       		.uleb128 0x1
 6774 0a70 9C       		.byte	0x9c
 6775 0a71 A80A0000 		.4byte	0xaa8
 6776 0a75 1A       		.uleb128 0x1a
 6777 0a76 790B0000 		.4byte	.LASF93
 6778 0a7a 01       		.byte	0x1
 6779 0a7b 7D07     		.2byte	0x77d
 6780 0a7d 35010000 		.4byte	0x135
 6781 0a81 02       		.uleb128 0x2
 6782 0a82 91       		.byte	0x91
 6783 0a83 74       		.sleb128 -12
 6784 0a84 22       		.uleb128 0x22
 6785 0a85 3B040000 		.4byte	0x43b
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 214
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 214
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 214
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 214
>>>>>>> parent of cb49844... test


 6786 0a89 22000000 		.4byte	.LBB37
 6787 0a8d 12000000 		.4byte	.LBE37-.LBB37
 6788 0a91 01       		.byte	0x1
 6789 0a92 C307     		.2byte	0x7c3
 6790 0a94 1B       		.uleb128 0x1b
 6791 0a95 22000000 		.4byte	.LBB38
 6792 0a99 12000000 		.4byte	.LBE38-.LBB38
 6793 0a9d 21       		.uleb128 0x21
 6794 0a9e 47040000 		.4byte	0x447
 6795 0aa2 02       		.uleb128 0x2
 6796 0aa3 91       		.byte	0x91
 6797 0aa4 70       		.sleb128 -16
 6798 0aa5 00       		.byte	0
 6799 0aa6 00       		.byte	0
 6800 0aa7 00       		.byte	0
 6801 0aa8 1E       		.uleb128 0x1e
 6802 0aa9 66050000 		.4byte	.LASF133
 6803 0aad 01       		.byte	0x1
 6804 0aae F507     		.2byte	0x7f5
 6805 0ab0 00000000 		.4byte	.LFB83
 6806 0ab4 30000000 		.4byte	.LFE83-.LFB83
 6807 0ab8 01       		.uleb128 0x1
 6808 0ab9 9C       		.byte	0x9c
 6809 0aba E20A0000 		.4byte	0xae2
 6810 0abe 22       		.uleb128 0x22
 6811 0abf 3B040000 		.4byte	0x43b
 6812 0ac3 06000000 		.4byte	.LBB39
 6813 0ac7 12000000 		.4byte	.LBE39-.LBB39
 6814 0acb 01       		.byte	0x1
 6815 0acc FA07     		.2byte	0x7fa
 6816 0ace 1B       		.uleb128 0x1b
 6817 0acf 06000000 		.4byte	.LBB40
 6818 0ad3 12000000 		.4byte	.LBE40-.LBB40
 6819 0ad7 21       		.uleb128 0x21
 6820 0ad8 47040000 		.4byte	0x447
 6821 0adc 02       		.uleb128 0x2
 6822 0add 91       		.byte	0x91
 6823 0ade 74       		.sleb128 -12
 6824 0adf 00       		.byte	0
 6825 0ae0 00       		.byte	0
 6826 0ae1 00       		.byte	0
 6827 0ae2 25       		.uleb128 0x25
 6828 0ae3 F7040000 		.4byte	.LASF163
 6829 0ae7 01       		.byte	0x1
 6830 0ae8 0008     		.2byte	0x800
 6831 0aea 00000000 		.4byte	.LFB84
 6832 0aee 1C000000 		.4byte	.LFE84-.LFB84
 6833 0af2 01       		.uleb128 0x1
 6834 0af3 9C       		.byte	0x9c
 6835 0af4 18       		.uleb128 0x18
 6836 0af5 8F0A0000 		.4byte	.LASF134
 6837 0af9 01       		.byte	0x1
 6838 0afa 4908     		.2byte	0x849
 6839 0afc 35010000 		.4byte	0x135
 6840 0b00 00000000 		.4byte	.LFB85
 6841 0b04 1C010000 		.4byte	.LFE85-.LFB85
 6842 0b08 01       		.uleb128 0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 215
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 215
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 215
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 215
>>>>>>> parent of cb49844... test


 6843 0b09 9C       		.byte	0x9c
 6844 0b0a 460B0000 		.4byte	0xb46
 6845 0b0e 1A       		.uleb128 0x1a
 6846 0b0f 580E0000 		.4byte	.LASF99
 6847 0b13 01       		.byte	0x1
 6848 0b14 4B08     		.2byte	0x84b
 6849 0b16 3B050000 		.4byte	0x53b
 6850 0b1a 02       		.uleb128 0x2
 6851 0b1b 91       		.byte	0x91
 6852 0b1c 74       		.sleb128 -12
 6853 0b1d 1A       		.uleb128 0x1a
 6854 0b1e 600D0000 		.4byte	.LASF105
 6855 0b22 01       		.byte	0x1
 6856 0b23 4C08     		.2byte	0x84c
 6857 0b25 35010000 		.4byte	0x135
 6858 0b29 02       		.uleb128 0x2
 6859 0b2a 91       		.byte	0x91
 6860 0b2b 70       		.sleb128 -16
 6861 0b2c 1B       		.uleb128 0x1b
 6862 0b2d 9E000000 		.4byte	.LBB41
 6863 0b31 2E000000 		.4byte	.LBE41-.LBB41
 6864 0b35 1A       		.uleb128 0x1a
 6865 0b36 52000000 		.4byte	.LASF135
 6866 0b3a 01       		.byte	0x1
 6867 0b3b 8408     		.2byte	0x884
 6868 0b3d 40010000 		.4byte	0x140
 6869 0b41 02       		.uleb128 0x2
 6870 0b42 91       		.byte	0x91
 6871 0b43 6C       		.sleb128 -20
 6872 0b44 00       		.byte	0
 6873 0b45 00       		.byte	0
 6874 0b46 1F       		.uleb128 0x1f
 6875 0b47 D8080000 		.4byte	.LASF136
 6876 0b4b 01       		.byte	0x1
 6877 0b4c B708     		.2byte	0x8b7
 6878 0b4e 4B010000 		.4byte	0x14b
 6879 0b52 00000000 		.4byte	.LFB86
 6880 0b56 1C000000 		.4byte	.LFE86-.LFB86
 6881 0b5a 01       		.uleb128 0x1
 6882 0b5b 9C       		.byte	0x9c
 6883 0b5c 700B0000 		.4byte	0xb70
 6884 0b60 1A       		.uleb128 0x1a
 6885 0b61 170C0000 		.4byte	.LASF137
 6886 0b65 01       		.byte	0x1
 6887 0b66 B908     		.2byte	0x8b9
 6888 0b68 4B010000 		.4byte	0x14b
 6889 0b6c 02       		.uleb128 0x2
 6890 0b6d 91       		.byte	0x91
 6891 0b6e 74       		.sleb128 -12
 6892 0b6f 00       		.byte	0
 6893 0b70 1F       		.uleb128 0x1f
 6894 0b71 3B040000 		.4byte	.LASF138
 6895 0b75 01       		.byte	0x1
 6896 0b76 C608     		.2byte	0x8c6
 6897 0b78 4B010000 		.4byte	0x14b
 6898 0b7c 00000000 		.4byte	.LFB87
 6899 0b80 20000000 		.4byte	.LFE87-.LFB87
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 216
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 216
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 216
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 216
>>>>>>> parent of cb49844... test


 6900 0b84 01       		.uleb128 0x1
 6901 0b85 9C       		.byte	0x9c
 6902 0b86 A90B0000 		.4byte	0xba9
 6903 0b8a 1A       		.uleb128 0x1a
 6904 0b8b 790B0000 		.4byte	.LASF93
 6905 0b8f 01       		.byte	0x1
 6906 0b90 C808     		.2byte	0x8c8
 6907 0b92 4B010000 		.4byte	0x14b
 6908 0b96 02       		.uleb128 0x2
 6909 0b97 91       		.byte	0x91
 6910 0b98 70       		.sleb128 -16
 6911 0b99 1A       		.uleb128 0x1a
 6912 0b9a 6A030000 		.4byte	.LASF131
 6913 0b9e 01       		.byte	0x1
 6914 0b9f C908     		.2byte	0x8c9
 6915 0ba1 40010000 		.4byte	0x140
 6916 0ba5 02       		.uleb128 0x2
 6917 0ba6 91       		.byte	0x91
 6918 0ba7 74       		.sleb128 -12
 6919 0ba8 00       		.byte	0
 6920 0ba9 26       		.uleb128 0x26
 6921 0baa C2020000 		.4byte	.LASF188
 6922 0bae 01       		.byte	0x1
 6923 0baf E508     		.2byte	0x8e5
 6924 0bb1 40010000 		.4byte	0x140
 6925 0bb5 00000000 		.4byte	.LFB88
 6926 0bb9 14000000 		.4byte	.LFE88-.LFB88
 6927 0bbd 01       		.uleb128 0x1
 6928 0bbe 9C       		.byte	0x9c
 6929 0bbf 1F       		.uleb128 0x1f
 6930 0bc0 010C0000 		.4byte	.LASF139
 6931 0bc4 01       		.byte	0x1
 6932 0bc5 ED08     		.2byte	0x8ed
 6933 0bc7 B2000000 		.4byte	0xb2
 6934 0bcb 00000000 		.4byte	.LFB89
 6935 0bcf 2C000000 		.4byte	.LFE89-.LFB89
 6936 0bd3 01       		.uleb128 0x1
 6937 0bd4 9C       		.byte	0x9c
 6938 0bd5 F80B0000 		.4byte	0xbf8
 6939 0bd9 19       		.uleb128 0x19
 6940 0bda 7F090000 		.4byte	.LASF140
 6941 0bde 01       		.byte	0x1
 6942 0bdf ED08     		.2byte	0x8ed
 6943 0be1 3F020000 		.4byte	0x23f
 6944 0be5 02       		.uleb128 0x2
 6945 0be6 91       		.byte	0x91
 6946 0be7 6C       		.sleb128 -20
 6947 0be8 1A       		.uleb128 0x1a
 6948 0be9 580E0000 		.4byte	.LASF99
 6949 0bed 01       		.byte	0x1
 6950 0bee EF08     		.2byte	0x8ef
 6951 0bf0 3B050000 		.4byte	0x53b
 6952 0bf4 02       		.uleb128 0x2
 6953 0bf5 91       		.byte	0x91
 6954 0bf6 74       		.sleb128 -12
 6955 0bf7 00       		.byte	0
 6956 0bf8 18       		.uleb128 0x18
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 217
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 217
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 217
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 217
>>>>>>> parent of cb49844... test


 6957 0bf9 2F020000 		.4byte	.LASF141
 6958 0bfd 01       		.byte	0x1
 6959 0bfe 340A     		.2byte	0xa34
 6960 0c00 35010000 		.4byte	0x135
 6961 0c04 00000000 		.4byte	.LFB90
 6962 0c08 50010000 		.4byte	.LFE90-.LFB90
 6963 0c0c 01       		.uleb128 0x1
 6964 0c0d 9C       		.byte	0x9c
 6965 0c0e 720C0000 		.4byte	0xc72
 6966 0c12 1A       		.uleb128 0x1a
 6967 0c13 580E0000 		.4byte	.LASF99
 6968 0c17 01       		.byte	0x1
 6969 0c18 360A     		.2byte	0xa36
 6970 0c1a 3B050000 		.4byte	0x53b
 6971 0c1e 02       		.uleb128 0x2
 6972 0c1f 91       		.byte	0x91
 6973 0c20 68       		.sleb128 -24
 6974 0c21 1A       		.uleb128 0x1a
 6975 0c22 6E0A0000 		.4byte	.LASF28
 6976 0c26 01       		.byte	0x1
 6977 0c27 370A     		.2byte	0xa37
 6978 0c29 4B010000 		.4byte	0x14b
 6979 0c2d 02       		.uleb128 0x2
 6980 0c2e 91       		.byte	0x91
 6981 0c2f 64       		.sleb128 -28
 6982 0c30 1A       		.uleb128 0x1a
 6983 0c31 DE0A0000 		.4byte	.LASF142
 6984 0c35 01       		.byte	0x1
 6985 0c36 380A     		.2byte	0xa38
 6986 0c38 35010000 		.4byte	0x135
 6987 0c3c 02       		.uleb128 0x2
 6988 0c3d 91       		.byte	0x91
 6989 0c3e 74       		.sleb128 -12
 6990 0c3f 1B       		.uleb128 0x1b
 6991 0c40 12000000 		.4byte	.LBB42
 6992 0c44 F0000000 		.4byte	.LBE42-.LBB42
 6993 0c48 1A       		.uleb128 0x1a
 6994 0c49 8A050000 		.4byte	.LASF107
 6995 0c4d 01       		.byte	0x1
 6996 0c4e 420A     		.2byte	0xa42
 6997 0c50 E2060000 		.4byte	0x6e2
 6998 0c54 02       		.uleb128 0x2
 6999 0c55 91       		.byte	0x91
 7000 0c56 70       		.sleb128 -16
 7001 0c57 1B       		.uleb128 0x1b
 7002 0c58 26000000 		.4byte	.LBB43
 7003 0c5c 22000000 		.4byte	.LBE43-.LBB43
 7004 0c60 1A       		.uleb128 0x1a
 7005 0c61 DF050000 		.4byte	.LASF143
 7006 0c65 01       		.byte	0x1
 7007 0c66 4A0A     		.2byte	0xa4a
 7008 0c68 720C0000 		.4byte	0xc72
 7009 0c6c 02       		.uleb128 0x2
 7010 0c6d 91       		.byte	0x91
 7011 0c6e 6C       		.sleb128 -20
 7012 0c6f 00       		.byte	0
 7013 0c70 00       		.byte	0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 218
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 218
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 218
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 218
>>>>>>> parent of cb49844... test


 7014 0c71 00       		.byte	0
 7015 0c72 06       		.uleb128 0x6
 7016 0c73 04       		.byte	0x4
 7017 0c74 34020000 		.4byte	0x234
 7018 0c78 1E       		.uleb128 0x1e
 7019 0c79 070A0000 		.4byte	.LASF144
 7020 0c7d 01       		.byte	0x1
 7021 0c7e 3C0B     		.2byte	0xb3c
 7022 0c80 00000000 		.4byte	.LFB91
 7023 0c84 D8000000 		.4byte	.LFE91-.LFB91
 7024 0c88 01       		.uleb128 0x1
 7025 0c89 9C       		.byte	0x9c
 7026 0c8a 1C0D0000 		.4byte	0xd1c
 7027 0c8e 27       		.uleb128 0x27
 7028 0c8f 1C000000 		.4byte	.LBB44
 7029 0c93 4E000000 		.4byte	.LBE44-.LBB44
 7030 0c97 BA0C0000 		.4byte	0xcba
 7031 0c9b 1A       		.uleb128 0x1a
 7032 0c9c 510C0000 		.4byte	.LASF145
 7033 0ca0 01       		.byte	0x1
 7034 0ca1 680B     		.2byte	0xb68
 7035 0ca3 220D0000 		.4byte	0xd22
 7036 0ca7 02       		.uleb128 0x2
 7037 0ca8 91       		.byte	0x91
 7038 0ca9 74       		.sleb128 -12
 7039 0caa 1A       		.uleb128 0x1a
 7040 0cab 3B080000 		.4byte	.LASF146
 7041 0caf 01       		.byte	0x1
 7042 0cb0 680B     		.2byte	0xb68
 7043 0cb2 EC050000 		.4byte	0x5ec
 7044 0cb6 02       		.uleb128 0x2
 7045 0cb7 91       		.byte	0x91
 7046 0cb8 70       		.sleb128 -16
 7047 0cb9 00       		.byte	0
 7048 0cba 1B       		.uleb128 0x1b
 7049 0cbb 6A000000 		.4byte	.LBB45
 7050 0cbf 50000000 		.4byte	.LBE45-.LBB45
 7051 0cc3 1A       		.uleb128 0x1a
 7052 0cc4 D00C0000 		.4byte	.LASF147
 7053 0cc8 01       		.byte	0x1
 7054 0cc9 6C0B     		.2byte	0xb6c
 7055 0ccb 40010000 		.4byte	0x140
 7056 0ccf 02       		.uleb128 0x2
 7057 0cd0 91       		.byte	0x91
 7058 0cd1 6C       		.sleb128 -20
 7059 0cd2 20       		.uleb128 0x20
 7060 0cd3 53040000 		.4byte	0x453
 7061 0cd7 70000000 		.4byte	.LBB46
 7062 0cdb 0A000000 		.4byte	.LBE46-.LBB46
 7063 0cdf 01       		.byte	0x1
 7064 0ce0 6C0B     		.2byte	0xb6c
 7065 0ce2 010D0000 		.4byte	0xd01
 7066 0ce6 23       		.uleb128 0x23
 7067 0ce7 63040000 		.4byte	0x463
 7068 0ceb 02       		.uleb128 0x2
 7069 0cec 91       		.byte	0x91
 7070 0ced 64       		.sleb128 -28
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 219
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 219
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 219
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 219
>>>>>>> parent of cb49844... test


 7071 0cee 1B       		.uleb128 0x1b
 7072 0cef 70000000 		.4byte	.LBB47
 7073 0cf3 0A000000 		.4byte	.LBE47-.LBB47
 7074 0cf7 21       		.uleb128 0x21
 7075 0cf8 6E040000 		.4byte	0x46e
 7076 0cfc 02       		.uleb128 0x2
 7077 0cfd 91       		.byte	0x91
 7078 0cfe 63       		.sleb128 -29
 7079 0cff 00       		.byte	0
 7080 0d00 00       		.byte	0
 7081 0d01 1B       		.uleb128 0x1b
 7082 0d02 80000000 		.4byte	.LBB48
 7083 0d06 3A000000 		.4byte	.LBE48-.LBB48
 7084 0d0a 1A       		.uleb128 0x1a
 7085 0d0b 26000000 		.4byte	.LASF148
 7086 0d0f 01       		.byte	0x1
 7087 0d10 6C0B     		.2byte	0xb6c
 7088 0d12 270D0000 		.4byte	0xd27
 7089 0d16 02       		.uleb128 0x2
 7090 0d17 91       		.byte	0x91
 7091 0d18 68       		.sleb128 -24
 7092 0d19 00       		.byte	0
 7093 0d1a 00       		.byte	0
 7094 0d1b 00       		.byte	0
 7095 0d1c 06       		.uleb128 0x6
 7096 0d1d 04       		.byte	0x4
 7097 0d1e EC050000 		.4byte	0x5ec
 7098 0d22 07       		.uleb128 0x7
 7099 0d23 1C0D0000 		.4byte	0xd1c
 7100 0d27 07       		.uleb128 0x7
 7101 0d28 720C0000 		.4byte	0xc72
 7102 0d2c 1E       		.uleb128 0x1e
 7103 0d2d E6050000 		.4byte	.LASF149
 7104 0d31 01       		.byte	0x1
 7105 0d32 7A0B     		.2byte	0xb7a
 7106 0d34 00000000 		.4byte	.LFB92
 7107 0d38 2C000000 		.4byte	.LFE92-.LFB92
 7108 0d3c 01       		.uleb128 0x1
 7109 0d3d 9C       		.byte	0x9c
 7110 0d3e 610D0000 		.4byte	0xd61
 7111 0d42 19       		.uleb128 0x19
 7112 0d43 DC000000 		.4byte	.LASF150
 7113 0d47 01       		.byte	0x1
 7114 0d48 7A0B     		.2byte	0xb7a
 7115 0d4a 270D0000 		.4byte	0xd27
 7116 0d4e 02       		.uleb128 0x2
 7117 0d4f 91       		.byte	0x91
 7118 0d50 74       		.sleb128 -12
 7119 0d51 19       		.uleb128 0x19
 7120 0d52 280D0000 		.4byte	.LASF151
 7121 0d56 01       		.byte	0x1
 7122 0d57 7A0B     		.2byte	0xb7a
 7123 0d59 E2060000 		.4byte	0x6e2
 7124 0d5d 02       		.uleb128 0x2
 7125 0d5e 91       		.byte	0x91
 7126 0d5f 70       		.sleb128 -16
 7127 0d60 00       		.byte	0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 220
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 220
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 220
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 220
>>>>>>> parent of cb49844... test


 7128 0d61 1E       		.uleb128 0x1e
 7129 0d62 820C0000 		.4byte	.LASF152
 7130 0d66 01       		.byte	0x1
 7131 0d67 8B0B     		.2byte	0xb8b
 7132 0d69 00000000 		.4byte	.LFB93
 7133 0d6d 3C000000 		.4byte	.LFE93-.LFB93
 7134 0d71 01       		.uleb128 0x1
 7135 0d72 9C       		.byte	0x9c
 7136 0d73 A50D0000 		.4byte	0xda5
 7137 0d77 19       		.uleb128 0x19
 7138 0d78 DC000000 		.4byte	.LASF150
 7139 0d7c 01       		.byte	0x1
 7140 0d7d 8B0B     		.2byte	0xb8b
 7141 0d7f 720C0000 		.4byte	0xc72
 7142 0d83 02       		.uleb128 0x2
 7143 0d84 91       		.byte	0x91
 7144 0d85 74       		.sleb128 -12
 7145 0d86 19       		.uleb128 0x19
 7146 0d87 6E0A0000 		.4byte	.LASF28
 7147 0d8b 01       		.byte	0x1
 7148 0d8c 8B0B     		.2byte	0xb8b
 7149 0d8e E2060000 		.4byte	0x6e2
 7150 0d92 02       		.uleb128 0x2
 7151 0d93 91       		.byte	0x91
 7152 0d94 70       		.sleb128 -16
 7153 0d95 19       		.uleb128 0x19
 7154 0d96 280D0000 		.4byte	.LASF151
 7155 0d9a 01       		.byte	0x1
 7156 0d9b 8B0B     		.2byte	0xb8b
 7157 0d9d E2060000 		.4byte	0x6e2
 7158 0da1 02       		.uleb128 0x2
 7159 0da2 91       		.byte	0x91
 7160 0da3 6C       		.sleb128 -20
 7161 0da4 00       		.byte	0
 7162 0da5 18       		.uleb128 0x18
 7163 0da6 90060000 		.4byte	.LASF153
 7164 0daa 01       		.byte	0x1
 7165 0dab C40B     		.2byte	0xbc4
 7166 0dad 35010000 		.4byte	0x135
 7167 0db1 00000000 		.4byte	.LFB94
 7168 0db5 A8000000 		.4byte	.LFE94-.LFB94
 7169 0db9 01       		.uleb128 0x1
 7170 0dba 9C       		.byte	0x9c
 7171 0dbb ED0D0000 		.4byte	0xded
 7172 0dbf 19       		.uleb128 0x19
 7173 0dc0 DC000000 		.4byte	.LASF150
 7174 0dc4 01       		.byte	0x1
 7175 0dc5 C40B     		.2byte	0xbc4
 7176 0dc7 ED0D0000 		.4byte	0xded
 7177 0dcb 02       		.uleb128 0x2
 7178 0dcc 91       		.byte	0x91
 7179 0dcd 6C       		.sleb128 -20
 7180 0dce 1A       		.uleb128 0x1a
 7181 0dcf D2030000 		.4byte	.LASF154
 7182 0dd3 01       		.byte	0x1
 7183 0dd4 C60B     		.2byte	0xbc6
 7184 0dd6 3B050000 		.4byte	0x53b
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 221
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 221
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 221
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 221
>>>>>>> parent of cb49844... test


 7185 0dda 02       		.uleb128 0x2
 7186 0ddb 91       		.byte	0x91
 7187 0ddc 70       		.sleb128 -16
 7188 0ddd 1A       		.uleb128 0x1a
 7189 0dde 790B0000 		.4byte	.LASF93
 7190 0de2 01       		.byte	0x1
 7191 0de3 C70B     		.2byte	0xbc7
 7192 0de5 35010000 		.4byte	0x135
 7193 0de9 02       		.uleb128 0x2
 7194 0dea 91       		.byte	0x91
 7195 0deb 74       		.sleb128 -12
 7196 0dec 00       		.byte	0
 7197 0ded 07       		.uleb128 0x7
 7198 0dee 91070000 		.4byte	0x791
 7199 0df2 1E       		.uleb128 0x1e
 7200 0df3 48060000 		.4byte	.LASF155
 7201 0df7 01       		.byte	0x1
 7202 0df8 080C     		.2byte	0xc08
 7203 0dfa 00000000 		.4byte	.LFB95
 7204 0dfe 84000000 		.4byte	.LFE95-.LFB95
 7205 0e02 01       		.uleb128 0x1
 7206 0e03 9C       		.byte	0x9c
 7207 0e04 360E0000 		.4byte	0xe36
 7208 0e08 19       		.uleb128 0x19
 7209 0e09 AA0E0000 		.4byte	.LASF156
 7210 0e0d 01       		.byte	0x1
 7211 0e0e 080C     		.2byte	0xc08
 7212 0e10 2E020000 		.4byte	0x22e
 7213 0e14 02       		.uleb128 0x2
 7214 0e15 91       		.byte	0x91
 7215 0e16 6C       		.sleb128 -20
 7216 0e17 19       		.uleb128 0x19
 7217 0e18 6E0A0000 		.4byte	.LASF28
 7218 0e1c 01       		.byte	0x1
 7219 0e1d 080C     		.2byte	0xc08
 7220 0e1f E2060000 		.4byte	0x6e2
 7221 0e23 02       		.uleb128 0x2
 7222 0e24 91       		.byte	0x91
 7223 0e25 68       		.sleb128 -24
 7224 0e26 1A       		.uleb128 0x1a
 7225 0e27 D2030000 		.4byte	.LASF154
 7226 0e2b 01       		.byte	0x1
 7227 0e2c 0A0C     		.2byte	0xc0a
 7228 0e2e 3B050000 		.4byte	0x53b
 7229 0e32 02       		.uleb128 0x2
 7230 0e33 91       		.byte	0x91
 7231 0e34 74       		.sleb128 -12
 7232 0e35 00       		.byte	0
 7233 0e36 1E       		.uleb128 0x1e
 7234 0e37 00020000 		.4byte	.LASF157
 7235 0e3b 01       		.byte	0x1
 7236 0e3c 2A0C     		.2byte	0xc2a
 7237 0e3e 00000000 		.4byte	.LFB96
 7238 0e42 30000000 		.4byte	.LFE96-.LFB96
 7239 0e46 01       		.uleb128 0x1
 7240 0e47 9C       		.byte	0x9c
 7241 0e48 5C0E0000 		.4byte	0xe5c
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 222
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 222
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 222
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 222
>>>>>>> parent of cb49844... test


 7242 0e4c 19       		.uleb128 0x19
 7243 0e4d B5080000 		.4byte	.LASF158
 7244 0e51 01       		.byte	0x1
 7245 0e52 2A0C     		.2byte	0xc2a
 7246 0e54 620E0000 		.4byte	0xe62
 7247 0e58 02       		.uleb128 0x2
 7248 0e59 91       		.byte	0x91
 7249 0e5a 74       		.sleb128 -12
 7250 0e5b 00       		.byte	0
 7251 0e5c 06       		.uleb128 0x6
 7252 0e5d 04       		.byte	0x4
 7253 0e5e 77030000 		.4byte	0x377
 7254 0e62 07       		.uleb128 0x7
 7255 0e63 5C0E0000 		.4byte	0xe5c
 7256 0e67 28       		.uleb128 0x28
 7257 0e68 F4080000 		.4byte	.LASF159
 7258 0e6c 01       		.byte	0x1
 7259 0e6d 360C     		.2byte	0xc36
 7260 0e6f 00000000 		.4byte	.LFB97
 7261 0e73 2C000000 		.4byte	.LFE97-.LFB97
 7262 0e77 01       		.uleb128 0x1
 7263 0e78 9C       		.byte	0x9c
 7264 0e79 8D0E0000 		.4byte	0xe8d
 7265 0e7d 19       		.uleb128 0x19
 7266 0e7e B5080000 		.4byte	.LASF158
 7267 0e82 01       		.byte	0x1
 7268 0e83 360C     		.2byte	0xc36
 7269 0e85 620E0000 		.4byte	0xe62
 7270 0e89 02       		.uleb128 0x2
 7271 0e8a 91       		.byte	0x91
 7272 0e8b 74       		.sleb128 -12
 7273 0e8c 00       		.byte	0
 7274 0e8d 18       		.uleb128 0x18
 7275 0e8e 290B0000 		.4byte	.LASF160
 7276 0e92 01       		.byte	0x1
 7277 0e93 3E0C     		.2byte	0xc3e
 7278 0e95 35010000 		.4byte	0x135
 7279 0e99 00000000 		.4byte	.LFB98
 7280 0e9d 8C000000 		.4byte	.LFE98-.LFB98
 7281 0ea1 01       		.uleb128 0x1
 7282 0ea2 9C       		.byte	0x9c
 7283 0ea3 FD0E0000 		.4byte	0xefd
 7284 0ea7 19       		.uleb128 0x19
 7285 0ea8 B5080000 		.4byte	.LASF158
 7286 0eac 01       		.byte	0x1
 7287 0ead 3E0C     		.2byte	0xc3e
 7288 0eaf 620E0000 		.4byte	0xe62
 7289 0eb3 02       		.uleb128 0x2
 7290 0eb4 91       		.byte	0x91
 7291 0eb5 64       		.sleb128 -28
 7292 0eb6 19       		.uleb128 0x19
 7293 0eb7 C20C0000 		.4byte	.LASF161
 7294 0ebb 01       		.byte	0x1
 7295 0ebc 3E0C     		.2byte	0xc3e
 7296 0ebe DD060000 		.4byte	0x6dd
 7297 0ec2 02       		.uleb128 0x2
 7298 0ec3 91       		.byte	0x91
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 223
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 223
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 223
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 223
>>>>>>> parent of cb49844... test


 7299 0ec4 60       		.sleb128 -32
 7300 0ec5 1A       		.uleb128 0x1a
 7301 0ec6 790B0000 		.4byte	.LASF93
 7302 0eca 01       		.byte	0x1
 7303 0ecb 400C     		.2byte	0xc40
 7304 0ecd 35010000 		.4byte	0x135
 7305 0ed1 02       		.uleb128 0x2
 7306 0ed2 91       		.byte	0x91
 7307 0ed3 74       		.sleb128 -12
 7308 0ed4 1B       		.uleb128 0x1b
 7309 0ed5 0E000000 		.4byte	.LBB49
 7310 0ed9 68000000 		.4byte	.LBE49-.LBB49
 7311 0edd 1A       		.uleb128 0x1a
 7312 0ede 8A050000 		.4byte	.LASF107
 7313 0ee2 01       		.byte	0x1
 7314 0ee3 480C     		.2byte	0xc48
 7315 0ee5 E2060000 		.4byte	0x6e2
 7316 0ee9 02       		.uleb128 0x2
 7317 0eea 91       		.byte	0x91
 7318 0eeb 70       		.sleb128 -16
 7319 0eec 1A       		.uleb128 0x1a
 7320 0eed 00040000 		.4byte	.LASF162
 7321 0ef1 01       		.byte	0x1
 7322 0ef2 490C     		.2byte	0xc49
 7323 0ef4 E2060000 		.4byte	0x6e2
 7324 0ef8 02       		.uleb128 0x2
 7325 0ef9 91       		.byte	0x91
 7326 0efa 6C       		.sleb128 -20
 7327 0efb 00       		.byte	0
 7328 0efc 00       		.byte	0
 7329 0efd 25       		.uleb128 0x25
 7330 0efe 8A0B0000 		.4byte	.LASF164
 7331 0f02 01       		.byte	0x1
 7332 0f03 7D0C     		.2byte	0xc7d
 7333 0f05 00000000 		.4byte	.LFB99
 7334 0f09 18000000 		.4byte	.LFE99-.LFB99
 7335 0f0d 01       		.uleb128 0x1
 7336 0f0e 9C       		.byte	0x9c
 7337 0f0f 1C       		.uleb128 0x1c
 7338 0f10 14070000 		.4byte	.LASF165
 7339 0f14 01       		.byte	0x1
 7340 0f15 B40C     		.2byte	0xcb4
 7341 0f17 00000000 		.4byte	.LFB100
 7342 0f1b 0E000000 		.4byte	.LFE100-.LFB100
 7343 0f1f 01       		.uleb128 0x1
 7344 0f20 9C       		.byte	0x9c
 7345 0f21 350F0000 		.4byte	0xf35
 7346 0f25 19       		.uleb128 0x19
 7347 0f26 610A0000 		.4byte	.LASF90
 7348 0f2a 01       		.byte	0x1
 7349 0f2b B40C     		.2byte	0xcb4
 7350 0f2d B0000000 		.4byte	0xb0
 7351 0f31 02       		.uleb128 0x2
 7352 0f32 91       		.byte	0x91
 7353 0f33 74       		.sleb128 -12
 7354 0f34 00       		.byte	0
 7355 0f35 1C       		.uleb128 0x1c
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 224
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 224
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 224
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 224
>>>>>>> parent of cb49844... test


 7356 0f36 930E0000 		.4byte	.LASF166
 7357 0f3a 01       		.byte	0x1
 7358 0f3b 880D     		.2byte	0xd88
 7359 0f3d 00000000 		.4byte	.LFB101
 7360 0f41 80000000 		.4byte	.LFE101-.LFB101
 7361 0f45 01       		.uleb128 0x1
 7362 0f46 9C       		.byte	0x9c
 7363 0f47 7F0F0000 		.4byte	0xf7f
 7364 0f4b 1A       		.uleb128 0x1a
 7365 0f4c 1B000000 		.4byte	.LASF47
 7366 0f50 01       		.byte	0x1
 7367 0f51 8A0D     		.2byte	0xd8a
 7368 0f53 40010000 		.4byte	0x140
 7369 0f57 02       		.uleb128 0x2
 7370 0f58 91       		.byte	0x91
 7371 0f59 74       		.sleb128 -12
 7372 0f5a 1A       		.uleb128 0x1a
 7373 0f5b 4B020000 		.4byte	.LASF167
 7374 0f5f 01       		.byte	0x1
 7375 0f60 8B0D     		.2byte	0xd8b
 7376 0f62 34020000 		.4byte	0x234
 7377 0f66 05       		.uleb128 0x5
 7378 0f67 03       		.byte	0x3
 7379 0f68 DC000000 		.4byte	xDelayedTaskList1.7292
 7380 0f6c 1A       		.uleb128 0x1a
 7381 0f6d 5D020000 		.4byte	.LASF168
 7382 0f71 01       		.byte	0x1
 7383 0f72 8C0D     		.2byte	0xd8c
 7384 0f74 34020000 		.4byte	0x234
 7385 0f78 05       		.uleb128 0x5
 7386 0f79 03       		.byte	0x3
 7387 0f7a F0000000 		.4byte	xDelayedTaskList2.7293
 7388 0f7e 00       		.byte	0
 7389 0f7f 1C       		.uleb128 0x1c
 7390 0f80 C80E0000 		.4byte	.LASF169
 7391 0f84 01       		.byte	0x1
 7392 0f85 AA0D     		.2byte	0xdaa
 7393 0f87 00000000 		.4byte	.LFB102
 7394 0f8b 58000000 		.4byte	.LFE102-.LFB102
 7395 0f8f 01       		.uleb128 0x1
 7396 0f90 9C       		.byte	0x9c
 7397 0f91 AF0F0000 		.4byte	0xfaf
 7398 0f95 1B       		.uleb128 0x1b
 7399 0f96 06000000 		.4byte	.LBB50
 7400 0f9a 3E000000 		.4byte	.LBE50-.LBB50
 7401 0f9e 1A       		.uleb128 0x1a
 7402 0f9f 580E0000 		.4byte	.LASF99
 7403 0fa3 01       		.byte	0x1
 7404 0fa4 B10D     		.2byte	0xdb1
 7405 0fa6 3B050000 		.4byte	0x53b
 7406 0faa 02       		.uleb128 0x2
 7407 0fab 91       		.byte	0x91
 7408 0fac 74       		.sleb128 -12
 7409 0fad 00       		.byte	0
 7410 0fae 00       		.byte	0
 7411 0faf 24       		.uleb128 0x24
<<<<<<< HEAD
 7412 0fb0 9F0D0000 		.4byte	.LASF171
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 225
=======
 7412 0fb0 8A0D0000 		.4byte	.LASF171
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 225
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 225
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 225
>>>>>>> parent of cb49844... test


 7413 0fb4 01       		.byte	0x1
 7414 0fb5 4A0E     		.2byte	0xe4a
 7415 0fb7 D5000000 		.4byte	0xd5
 7416 0fbb 00000000 		.4byte	.LFB103
 7417 0fbf 36000000 		.4byte	.LFE103-.LFB103
 7418 0fc3 01       		.uleb128 0x1
 7419 0fc4 9C       		.byte	0x9c
 7420 0fc5 E80F0000 		.4byte	0xfe8
 7421 0fc9 19       		.uleb128 0x19
 7422 0fca 53050000 		.4byte	.LASF172
 7423 0fce 01       		.byte	0x1
 7424 0fcf 4A0E     		.2byte	0xe4a
 7425 0fd1 E80F0000 		.4byte	0xfe8
 7426 0fd5 02       		.uleb128 0x2
 7427 0fd6 91       		.byte	0x91
 7428 0fd7 6C       		.sleb128 -20
 7429 0fd8 1A       		.uleb128 0x1a
 7430 0fd9 BD050000 		.4byte	.LASF173
 7431 0fdd 01       		.byte	0x1
 7432 0fde 4C0E     		.2byte	0xe4c
 7433 0fe0 EB000000 		.4byte	0xeb
 7434 0fe4 02       		.uleb128 0x2
 7435 0fe5 91       		.byte	0x91
 7436 0fe6 74       		.sleb128 -12
 7437 0fe7 00       		.byte	0
 7438 0fe8 06       		.uleb128 0x6
 7439 0fe9 04       		.byte	0x4
 7440 0fea EE0F0000 		.4byte	0xfee
 7441 0fee 07       		.uleb128 0x7
 7442 0fef CA000000 		.4byte	0xca
 7443 0ff3 18       		.uleb128 0x18
 7444 0ff4 07050000 		.4byte	.LASF174
 7445 0ff8 01       		.byte	0x1
 7446 0ff9 5E0E     		.2byte	0xe5e
 7447 0ffb 40010000 		.4byte	0x140
 7448 0fff 00000000 		.4byte	.LFB104
 7449 1003 38000000 		.4byte	.LFE104-.LFB104
 7450 1007 01       		.uleb128 0x1
 7451 1008 9C       		.byte	0x9c
 7452 1009 4A100000 		.4byte	0x104a
 7453 100d 19       		.uleb128 0x19
 7454 100e A5090000 		.4byte	.LASF112
 7455 1012 01       		.byte	0x1
 7456 1013 5E0E     		.2byte	0xe5e
 7457 1015 3F020000 		.4byte	0x23f
 7458 1019 02       		.uleb128 0x2
 7459 101a 91       		.byte	0x91
 7460 101b 64       		.sleb128 -28
 7461 101c 1A       		.uleb128 0x1a
 7462 101d 580E0000 		.4byte	.LASF99
 7463 1021 01       		.byte	0x1
 7464 1022 600E     		.2byte	0xe60
 7465 1024 3B050000 		.4byte	0x53b
 7466 1028 02       		.uleb128 0x2
 7467 1029 91       		.byte	0x91
 7468 102a 74       		.sleb128 -12
 7469 102b 1A       		.uleb128 0x1a
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 226
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 226
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 226
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 226
>>>>>>> parent of cb49844... test


 7470 102c E20B0000 		.4byte	.LASF175
 7471 1030 01       		.byte	0x1
 7472 1031 610E     		.2byte	0xe61
 7473 1033 56010000 		.4byte	0x156
 7474 1037 02       		.uleb128 0x2
 7475 1038 91       		.byte	0x91
 7476 1039 70       		.sleb128 -16
 7477 103a 1A       		.uleb128 0x1a
 7478 103b B9020000 		.4byte	.LASF118
 7479 103f 01       		.byte	0x1
 7480 1040 620E     		.2byte	0xe62
 7481 1042 40010000 		.4byte	0x140
 7482 1046 02       		.uleb128 0x2
 7483 1047 91       		.byte	0x91
 7484 1048 6C       		.sleb128 -20
 7485 1049 00       		.byte	0
 7486 104a 1C       		.uleb128 0x1c
 7487 104b 3D0D0000 		.4byte	.LASF176
 7488 104f 01       		.byte	0x1
 7489 1050 7A0E     		.2byte	0xe7a
 7490 1052 00000000 		.4byte	.LFB105
 7491 1056 20000000 		.4byte	.LFE105-.LFB105
 7492 105a 01       		.uleb128 0x1
 7493 105b 9C       		.byte	0x9c
 7494 105c 70100000 		.4byte	0x1070
 7495 1060 19       		.uleb128 0x19
 7496 1061 580E0000 		.4byte	.LASF99
 7497 1065 01       		.byte	0x1
 7498 1066 7A0E     		.2byte	0xe7a
 7499 1068 3B050000 		.4byte	0x53b
 7500 106c 02       		.uleb128 0x2
 7501 106d 91       		.byte	0x91
 7502 106e 74       		.sleb128 -12
 7503 106f 00       		.byte	0
 7504 1070 29       		.uleb128 0x29
 7505 1071 48080000 		.4byte	.LASF177
 7506 1075 01       		.byte	0x1
 7507 1076 B00E     		.2byte	0xeb0
 7508 1078 00000000 		.4byte	.LFB106
 7509 107c 40000000 		.4byte	.LFE106-.LFB106
 7510 1080 01       		.uleb128 0x1
 7511 1081 9C       		.byte	0x9c
 7512 1082 96100000 		.4byte	0x1096
 7513 1086 1A       		.uleb128 0x1a
 7514 1087 580E0000 		.4byte	.LASF99
 7515 108b 01       		.byte	0x1
 7516 108c B20E     		.2byte	0xeb2
 7517 108e 3B050000 		.4byte	0x53b
 7518 1092 02       		.uleb128 0x2
 7519 1093 91       		.byte	0x91
 7520 1094 74       		.sleb128 -12
 7521 1095 00       		.byte	0
 7522 1096 1F       		.uleb128 0x1f
 7523 1097 700D0000 		.4byte	.LASF178
 7524 109b 01       		.byte	0x1
 7525 109c CA0E     		.2byte	0xeca
 7526 109e 3F020000 		.4byte	0x23f
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 227
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 227
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 227
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 227
>>>>>>> parent of cb49844... test


 7527 10a2 00000000 		.4byte	.LFB107
 7528 10a6 1C000000 		.4byte	.LFE107-.LFB107
 7529 10aa 01       		.uleb128 0x1
 7530 10ab 9C       		.byte	0x9c
 7531 10ac C0100000 		.4byte	0x10c0
 7532 10b0 1A       		.uleb128 0x1a
 7533 10b1 790B0000 		.4byte	.LASF93
 7534 10b5 01       		.byte	0x1
 7535 10b6 CC0E     		.2byte	0xecc
 7536 10b8 3F020000 		.4byte	0x23f
 7537 10bc 02       		.uleb128 0x2
 7538 10bd 91       		.byte	0x91
 7539 10be 74       		.sleb128 -12
 7540 10bf 00       		.byte	0
 7541 10c0 18       		.uleb128 0x18
 7542 10c1 CD0B0000 		.4byte	.LASF179
 7543 10c5 01       		.byte	0x1
 7544 10c6 F70E     		.2byte	0xef7
 7545 10c8 35010000 		.4byte	0x135
 7546 10cc 00000000 		.4byte	.LFB108
 7547 10d0 00010000 		.4byte	.LFE108-.LFB108
 7548 10d4 01       		.uleb128 0x1
 7549 10d5 9C       		.byte	0x9c
 7550 10d6 08110000 		.4byte	0x1108
 7551 10da 19       		.uleb128 0x19
 7552 10db EE0A0000 		.4byte	.LASF180
 7553 10df 01       		.byte	0x1
 7554 10e0 F70E     		.2byte	0xef7
 7555 10e2 F4070000 		.4byte	0x7f4
 7556 10e6 02       		.uleb128 0x2
 7557 10e7 91       		.byte	0x91
 7558 10e8 6C       		.sleb128 -20
 7559 10e9 1A       		.uleb128 0x1a
 7560 10ea F00B0000 		.4byte	.LASF181
 7561 10ee 01       		.byte	0x1
 7562 10ef F90E     		.2byte	0xef9
 7563 10f1 BB090000 		.4byte	0x9bb
 7564 10f5 02       		.uleb128 0x2
 7565 10f6 91       		.byte	0x91
 7566 10f7 70       		.sleb128 -16
 7567 10f8 1A       		.uleb128 0x1a
 7568 10f9 790B0000 		.4byte	.LASF93
 7569 10fd 01       		.byte	0x1
 7570 10fe FA0E     		.2byte	0xefa
 7571 1100 35010000 		.4byte	0x135
 7572 1104 02       		.uleb128 0x2
 7573 1105 91       		.byte	0x91
 7574 1106 74       		.sleb128 -12
 7575 1107 00       		.byte	0
 7576 1108 18       		.uleb128 0x18
 7577 1109 78060000 		.4byte	.LASF182
 7578 110d 01       		.byte	0x1
 7579 110e 4E0F     		.2byte	0xf4e
 7580 1110 35010000 		.4byte	0x135
 7581 1114 00000000 		.4byte	.LFB109
 7582 1118 C8000000 		.4byte	.LFE109-.LFB109
 7583 111c 01       		.uleb128 0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 228
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 228
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 228
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 228
>>>>>>> parent of cb49844... test


 7584 111d 9C       		.byte	0x9c
 7585 111e 50110000 		.4byte	0x1150
 7586 1122 19       		.uleb128 0x19
 7587 1123 EE0A0000 		.4byte	.LASF180
 7588 1127 01       		.byte	0x1
 7589 1128 4E0F     		.2byte	0xf4e
 7590 112a F4070000 		.4byte	0x7f4
 7591 112e 02       		.uleb128 0x2
 7592 112f 91       		.byte	0x91
 7593 1130 6C       		.sleb128 -20
 7594 1131 1A       		.uleb128 0x1a
 7595 1132 580E0000 		.4byte	.LASF99
 7596 1136 01       		.byte	0x1
 7597 1137 500F     		.2byte	0xf50
 7598 1139 BB090000 		.4byte	0x9bb
 7599 113d 02       		.uleb128 0x2
 7600 113e 91       		.byte	0x91
 7601 113f 70       		.sleb128 -16
 7602 1140 1A       		.uleb128 0x1a
 7603 1141 790B0000 		.4byte	.LASF93
 7604 1145 01       		.byte	0x1
 7605 1146 510F     		.2byte	0xf51
 7606 1148 35010000 		.4byte	0x135
 7607 114c 02       		.uleb128 0x2
 7608 114d 91       		.byte	0x91
 7609 114e 74       		.sleb128 -12
 7610 114f 00       		.byte	0
 7611 1150 1E       		.uleb128 0x1e
 7612 1151 C0040000 		.4byte	.LASF183
 7613 1155 01       		.byte	0x1
 7614 1156 9E0F     		.2byte	0xf9e
 7615 1158 00000000 		.4byte	.LFB110
 7616 115c F0000000 		.4byte	.LFE110-.LFB110
 7617 1160 01       		.uleb128 0x1
 7618 1161 9C       		.byte	0x9c
 7619 1162 C1110000 		.4byte	0x11c1
 7620 1166 19       		.uleb128 0x19
 7621 1167 EE0A0000 		.4byte	.LASF180
 7622 116b 01       		.byte	0x1
 7623 116c 9E0F     		.2byte	0xf9e
 7624 116e F4070000 		.4byte	0x7f4
 7625 1172 02       		.uleb128 0x2
 7626 1173 91       		.byte	0x91
 7627 1174 64       		.sleb128 -28
 7628 1175 19       		.uleb128 0x19
 7629 1176 3A0A0000 		.4byte	.LASF184
 7630 117a 01       		.byte	0x1
 7631 117b 9E0F     		.2byte	0xf9e
 7632 117d 40010000 		.4byte	0x140
 7633 1181 02       		.uleb128 0x2
 7634 1182 91       		.byte	0x91
 7635 1183 60       		.sleb128 -32
 7636 1184 1A       		.uleb128 0x1a
 7637 1185 580E0000 		.4byte	.LASF99
 7638 1189 01       		.byte	0x1
 7639 118a A00F     		.2byte	0xfa0
 7640 118c BB090000 		.4byte	0x9bb
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 229
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 229
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 229
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 229
>>>>>>> parent of cb49844... test


 7641 1190 02       		.uleb128 0x2
 7642 1191 91       		.byte	0x91
 7643 1192 70       		.sleb128 -16
 7644 1193 1A       		.uleb128 0x1a
 7645 1194 0C0D0000 		.4byte	.LASF124
 7646 1198 01       		.byte	0x1
 7647 1199 A10F     		.2byte	0xfa1
 7648 119b 40010000 		.4byte	0x140
 7649 119f 02       		.uleb128 0x2
 7650 11a0 91       		.byte	0x91
 7651 11a1 68       		.sleb128 -24
 7652 11a2 1A       		.uleb128 0x1a
 7653 11a3 F7090000 		.4byte	.LASF185
 7654 11a7 01       		.byte	0x1
 7655 11a8 A10F     		.2byte	0xfa1
 7656 11aa 40010000 		.4byte	0x140
 7657 11ae 02       		.uleb128 0x2
 7658 11af 91       		.byte	0x91
 7659 11b0 74       		.sleb128 -12
 7660 11b1 1A       		.uleb128 0x1a
 7661 11b2 E4090000 		.4byte	.LASF186
 7662 11b6 01       		.byte	0x1
 7663 11b7 A20F     		.2byte	0xfa2
 7664 11b9 C1110000 		.4byte	0x11c1
 7665 11bd 02       		.uleb128 0x2
 7666 11be 91       		.byte	0x91
 7667 11bf 6C       		.sleb128 -20
 7668 11c0 00       		.byte	0
 7669 11c1 07       		.uleb128 0x7
 7670 11c2 40010000 		.4byte	0x140
 7671 11c6 1F       		.uleb128 0x1f
 7672 11c7 42090000 		.4byte	.LASF187
 7673 11cb 01       		.byte	0x1
 7674 11cc 3D11     		.2byte	0x113d
 7675 11ce 4B010000 		.4byte	0x14b
 7676 11d2 00000000 		.4byte	.LFB111
 7677 11d6 30000000 		.4byte	.LFE111-.LFB111
 7678 11da 01       		.uleb128 0x1
 7679 11db 9C       		.byte	0x9c
 7680 11dc F0110000 		.4byte	0x11f0
 7681 11e0 1A       		.uleb128 0x1a
 7682 11e1 B9020000 		.4byte	.LASF118
 7683 11e5 01       		.byte	0x1
 7684 11e6 3F11     		.2byte	0x113f
 7685 11e8 4B010000 		.4byte	0x14b
 7686 11ec 02       		.uleb128 0x2
 7687 11ed 91       		.byte	0x91
 7688 11ee 74       		.sleb128 -12
 7689 11ef 00       		.byte	0
 7690 11f0 26       		.uleb128 0x26
 7691 11f1 07060000 		.4byte	.LASF189
 7692 11f5 01       		.byte	0x1
 7693 11f6 4D11     		.2byte	0x114d
 7694 11f8 B0000000 		.4byte	0xb0
 7695 11fc 00000000 		.4byte	.LFB112
 7696 1200 28000000 		.4byte	.LFE112-.LFB112
 7697 1204 01       		.uleb128 0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 230
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 230
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 230
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 230
>>>>>>> parent of cb49844... test


 7698 1205 9C       		.byte	0x9c
 7699 1206 18       		.uleb128 0x18
 7700 1207 29070000 		.4byte	.LASF190
 7701 120b 01       		.byte	0x1
 7702 120c 5E11     		.2byte	0x115e
 7703 120e EB000000 		.4byte	0xeb
 7704 1212 00000000 		.4byte	.LFB113
 7705 1216 90000000 		.4byte	.LFE113-.LFB113
 7706 121a 01       		.uleb128 0x1
 7707 121b 9C       		.byte	0x9c
 7708 121c 4E120000 		.4byte	0x124e
 7709 1220 19       		.uleb128 0x19
 7710 1221 EE030000 		.4byte	.LASF191
 7711 1225 01       		.byte	0x1
 7712 1226 5E11     		.2byte	0x115e
 7713 1228 35010000 		.4byte	0x135
 7714 122c 02       		.uleb128 0x2
 7715 122d 91       		.byte	0x91
 7716 122e 6C       		.sleb128 -20
 7717 122f 19       		.uleb128 0x19
 7718 1230 280D0000 		.4byte	.LASF151
 7719 1234 01       		.byte	0x1
 7720 1235 5E11     		.2byte	0x115e
 7721 1237 4B010000 		.4byte	0x14b
 7722 123b 02       		.uleb128 0x2
 7723 123c 91       		.byte	0x91
 7724 123d 68       		.sleb128 -24
 7725 123e 1A       		.uleb128 0x1a
 7726 123f E80E0000 		.4byte	.LASF192
 7727 1243 01       		.byte	0x1
 7728 1244 6011     		.2byte	0x1160
 7729 1246 EB000000 		.4byte	0xeb
 7730 124a 02       		.uleb128 0x2
 7731 124b 91       		.byte	0x91
 7732 124c 74       		.sleb128 -12
 7733 124d 00       		.byte	0
 7734 124e 18       		.uleb128 0x18
 7735 124f 49070000 		.4byte	.LASF193
 7736 1253 01       		.byte	0x1
 7737 1254 A211     		.2byte	0x11a2
 7738 1256 35010000 		.4byte	0x135
 7739 125a 00000000 		.4byte	.LFB114
 7740 125e B4000000 		.4byte	.LFE114-.LFB114
 7741 1262 01       		.uleb128 0x1
 7742 1263 9C       		.byte	0x9c
 7743 1264 B4120000 		.4byte	0x12b4
 7744 1268 19       		.uleb128 0x19
 7745 1269 6A040000 		.4byte	.LASF194
 7746 126d 01       		.byte	0x1
 7747 126e A211     		.2byte	0x11a2
 7748 1270 EB000000 		.4byte	0xeb
 7749 1274 02       		.uleb128 0x2
 7750 1275 91       		.byte	0x91
 7751 1276 6C       		.sleb128 -20
 7752 1277 19       		.uleb128 0x19
 7753 1278 61000000 		.4byte	.LASF195
 7754 127c 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 231
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 231
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 231
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 231
>>>>>>> parent of cb49844... test


 7755 127d A211     		.2byte	0x11a2
 7756 127f EB000000 		.4byte	0xeb
 7757 1283 02       		.uleb128 0x2
 7758 1284 91       		.byte	0x91
 7759 1285 68       		.sleb128 -24
 7760 1286 19       		.uleb128 0x19
 7761 1287 640B0000 		.4byte	.LASF196
 7762 128b 01       		.byte	0x1
 7763 128c A211     		.2byte	0x11a2
 7764 128e B4120000 		.4byte	0x12b4
 7765 1292 02       		.uleb128 0x2
 7766 1293 91       		.byte	0x91
 7767 1294 64       		.sleb128 -28
 7768 1295 19       		.uleb128 0x19
 7769 1296 280D0000 		.4byte	.LASF151
 7770 129a 01       		.byte	0x1
 7771 129b A211     		.2byte	0x11a2
 7772 129d 4B010000 		.4byte	0x14b
 7773 12a1 02       		.uleb128 0x2
 7774 12a2 91       		.byte	0x91
 7775 12a3 60       		.sleb128 -32
 7776 12a4 1A       		.uleb128 0x1a
 7777 12a5 790B0000 		.4byte	.LASF93
 7778 12a9 01       		.byte	0x1
 7779 12aa A411     		.2byte	0x11a4
 7780 12ac 35010000 		.4byte	0x135
 7781 12b0 02       		.uleb128 0x2
 7782 12b1 91       		.byte	0x91
 7783 12b2 74       		.sleb128 -12
 7784 12b3 00       		.byte	0
 7785 12b4 06       		.uleb128 0x6
 7786 12b5 04       		.byte	0x4
 7787 12b6 EB000000 		.4byte	0xeb
 7788 12ba 18       		.uleb128 0x18
 7789 12bb B9030000 		.4byte	.LASF197
 7790 12bf 01       		.byte	0x1
 7791 12c0 F211     		.2byte	0x11f2
 7792 12c2 35010000 		.4byte	0x135
 7793 12c6 00000000 		.4byte	.LFB115
 7794 12ca 10010000 		.4byte	.LFE115-.LFB115
 7795 12ce 01       		.uleb128 0x1
 7796 12cf 9C       		.byte	0x9c
 7797 12d0 3E130000 		.4byte	0x133e
 7798 12d4 19       		.uleb128 0x19
 7799 12d5 97090000 		.4byte	.LASF198
 7800 12d9 01       		.byte	0x1
 7801 12da F211     		.2byte	0x11f2
 7802 12dc 3F020000 		.4byte	0x23f
 7803 12e0 02       		.uleb128 0x2
 7804 12e1 91       		.byte	0x91
 7805 12e2 64       		.sleb128 -28
 7806 12e3 19       		.uleb128 0x19
 7807 12e4 120B0000 		.4byte	.LASF199
 7808 12e8 01       		.byte	0x1
 7809 12e9 F211     		.2byte	0x11f2
 7810 12eb EB000000 		.4byte	0xeb
 7811 12ef 02       		.uleb128 0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 232
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 232
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 232
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 232
>>>>>>> parent of cb49844... test


 7812 12f0 91       		.byte	0x91
 7813 12f1 60       		.sleb128 -32
 7814 12f2 19       		.uleb128 0x19
 7815 12f3 2B090000 		.4byte	.LASF200
 7816 12f7 01       		.byte	0x1
 7817 12f8 F211     		.2byte	0x11f2
 7818 12fa 47030000 		.4byte	0x347
 7819 12fe 02       		.uleb128 0x2
 7820 12ff 91       		.byte	0x91
 7821 1300 5F       		.sleb128 -33
 7822 1301 19       		.uleb128 0x19
 7823 1302 98080000 		.4byte	.LASF201
 7824 1306 01       		.byte	0x1
 7825 1307 F211     		.2byte	0x11f2
 7826 1309 B4120000 		.4byte	0x12b4
 7827 130d 02       		.uleb128 0x2
 7828 130e 91       		.byte	0x91
 7829 130f 58       		.sleb128 -40
 7830 1310 1A       		.uleb128 0x1a
 7831 1311 580E0000 		.4byte	.LASF99
 7832 1315 01       		.byte	0x1
 7833 1316 F411     		.2byte	0x11f4
 7834 1318 3B050000 		.4byte	0x53b
 7835 131c 02       		.uleb128 0x2
 7836 131d 91       		.byte	0x91
 7837 131e 70       		.sleb128 -16
 7838 131f 1A       		.uleb128 0x1a
 7839 1320 790B0000 		.4byte	.LASF93
 7840 1324 01       		.byte	0x1
 7841 1325 F511     		.2byte	0x11f5
 7842 1327 35010000 		.4byte	0x135
 7843 132b 02       		.uleb128 0x2
 7844 132c 91       		.byte	0x91
 7845 132d 74       		.sleb128 -12
 7846 132e 1A       		.uleb128 0x1a
 7847 132f EA010000 		.4byte	.LASF202
 7848 1333 01       		.byte	0x1
 7849 1334 F611     		.2byte	0x11f6
 7850 1336 CA000000 		.4byte	0xca
 7851 133a 02       		.uleb128 0x2
 7852 133b 91       		.byte	0x91
 7853 133c 6F       		.sleb128 -17
 7854 133d 00       		.byte	0
 7855 133e 18       		.uleb128 0x18
 7856 133f 15020000 		.4byte	.LASF203
 7857 1343 01       		.byte	0x1
 7858 1344 6312     		.2byte	0x1263
 7859 1346 35010000 		.4byte	0x135
 7860 134a 00000000 		.4byte	.LFB116
 7861 134e 4C010000 		.4byte	.LFE116-.LFB116
 7862 1352 01       		.uleb128 0x1
 7863 1353 9C       		.byte	0x9c
 7864 1354 28140000 		.4byte	0x1428
 7865 1358 19       		.uleb128 0x19
 7866 1359 97090000 		.4byte	.LASF198
 7867 135d 01       		.byte	0x1
 7868 135e 6312     		.2byte	0x1263
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 233
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 233
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 233
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 233
>>>>>>> parent of cb49844... test


 7869 1360 3F020000 		.4byte	0x23f
 7870 1364 02       		.uleb128 0x2
 7871 1365 91       		.byte	0x91
 7872 1366 54       		.sleb128 -44
 7873 1367 19       		.uleb128 0x19
 7874 1368 120B0000 		.4byte	.LASF199
 7875 136c 01       		.byte	0x1
 7876 136d 6312     		.2byte	0x1263
 7877 136f EB000000 		.4byte	0xeb
 7878 1373 02       		.uleb128 0x2
 7879 1374 91       		.byte	0x91
 7880 1375 50       		.sleb128 -48
 7881 1376 19       		.uleb128 0x19
 7882 1377 2B090000 		.4byte	.LASF200
 7883 137b 01       		.byte	0x1
 7884 137c 6312     		.2byte	0x1263
 7885 137e 47030000 		.4byte	0x347
 7886 1382 02       		.uleb128 0x2
 7887 1383 91       		.byte	0x91
 7888 1384 4F       		.sleb128 -49
 7889 1385 19       		.uleb128 0x19
 7890 1386 98080000 		.4byte	.LASF201
 7891 138a 01       		.byte	0x1
 7892 138b 6312     		.2byte	0x1263
 7893 138d B4120000 		.4byte	0x12b4
 7894 1391 02       		.uleb128 0x2
 7895 1392 91       		.byte	0x91
 7896 1393 48       		.sleb128 -56
 7897 1394 19       		.uleb128 0x19
 7898 1395 8A000000 		.4byte	.LASF204
 7899 1399 01       		.byte	0x1
 7900 139a 6312     		.2byte	0x1263
 7901 139c 28140000 		.4byte	0x1428
 7902 13a0 02       		.uleb128 0x2
 7903 13a1 91       		.byte	0x91
 7904 13a2 00       		.sleb128 0
 7905 13a3 1A       		.uleb128 0x1a
 7906 13a4 580E0000 		.4byte	.LASF99
 7907 13a8 01       		.byte	0x1
 7908 13a9 6512     		.2byte	0x1265
 7909 13ab 3B050000 		.4byte	0x53b
 7910 13af 02       		.uleb128 0x2
 7911 13b0 91       		.byte	0x91
 7912 13b1 70       		.sleb128 -16
 7913 13b2 1A       		.uleb128 0x1a
 7914 13b3 EA010000 		.4byte	.LASF202
 7915 13b7 01       		.byte	0x1
 7916 13b8 6612     		.2byte	0x1266
 7917 13ba CA000000 		.4byte	0xca
 7918 13be 02       		.uleb128 0x2
 7919 13bf 91       		.byte	0x91
 7920 13c0 67       		.sleb128 -25
 7921 13c1 1A       		.uleb128 0x1a
 7922 13c2 790B0000 		.4byte	.LASF93
 7923 13c6 01       		.byte	0x1
 7924 13c7 6712     		.2byte	0x1267
 7925 13c9 35010000 		.4byte	0x135
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 234
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 234
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 234
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 234
>>>>>>> parent of cb49844... test


 7926 13cd 02       		.uleb128 0x2
 7927 13ce 91       		.byte	0x91
 7928 13cf 74       		.sleb128 -12
 7929 13d0 1A       		.uleb128 0x1a
 7930 13d1 6A030000 		.4byte	.LASF131
 7931 13d5 01       		.byte	0x1
 7932 13d6 6812     		.2byte	0x1268
 7933 13d8 40010000 		.4byte	0x140
 7934 13dc 02       		.uleb128 0x2
 7935 13dd 91       		.byte	0x91
 7936 13de 68       		.sleb128 -24
 7937 13df 20       		.uleb128 0x20
 7938 13e0 FC030000 		.4byte	0x3fc
 7939 13e4 18000000 		.4byte	.LBB51
 7940 13e8 1A000000 		.4byte	.LBE51-.LBB51
 7941 13ec 01       		.byte	0x1
 7942 13ed 8012     		.2byte	0x1280
 7943 13ef 0E140000 		.4byte	0x140e
 7944 13f3 1B       		.uleb128 0x1b
 7945 13f4 18000000 		.4byte	.LBB52
 7946 13f8 1A000000 		.4byte	.LBE52-.LBB52
 7947 13fc 21       		.uleb128 0x21
 7948 13fd 0C040000 		.4byte	0x40c
 7949 1401 02       		.uleb128 0x2
 7950 1402 91       		.byte	0x91
 7951 1403 60       		.sleb128 -32
 7952 1404 21       		.uleb128 0x21
 7953 1405 17040000 		.4byte	0x417
 7954 1409 02       		.uleb128 0x2
 7955 140a 91       		.byte	0x91
 7956 140b 5C       		.sleb128 -36
 7957 140c 00       		.byte	0
 7958 140d 00       		.byte	0
 7959 140e 22       		.uleb128 0x22
 7960 140f 23040000 		.4byte	0x423
 7961 1413 24010000 		.4byte	.LBB53
 7962 1417 06000000 		.4byte	.LBE53-.LBB53
 7963 141b 01       		.byte	0x1
 7964 141c D912     		.2byte	0x12d9
 7965 141e 23       		.uleb128 0x23
 7966 141f 2F040000 		.4byte	0x42f
 7967 1423 02       		.uleb128 0x2
 7968 1424 91       		.byte	0x91
 7969 1425 6C       		.sleb128 -20
 7970 1426 00       		.byte	0
 7971 1427 00       		.byte	0
 7972 1428 06       		.uleb128 0x6
 7973 1429 04       		.byte	0x4
 7974 142a 35010000 		.4byte	0x135
 7975 142e 1E       		.uleb128 0x1e
 7976 142f 9E0A0000 		.4byte	.LASF205
 7977 1433 01       		.byte	0x1
 7978 1434 E312     		.2byte	0x12e3
 7979 1436 00000000 		.4byte	.LFB117
 7980 143a E4000000 		.4byte	.LFE117-.LFB117
 7981 143e 01       		.uleb128 0x1
 7982 143f 9C       		.byte	0x9c
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 235
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 235
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 235
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 235
>>>>>>> parent of cb49844... test


 7983 1440 D8140000 		.4byte	0x14d8
 7984 1444 19       		.uleb128 0x19
 7985 1445 97090000 		.4byte	.LASF198
 7986 1449 01       		.byte	0x1
 7987 144a E312     		.2byte	0x12e3
 7988 144c 3F020000 		.4byte	0x23f
 7989 1450 02       		.uleb128 0x2
 7990 1451 91       		.byte	0x91
 7991 1452 5C       		.sleb128 -36
 7992 1453 19       		.uleb128 0x19
 7993 1454 8A000000 		.4byte	.LASF204
 7994 1458 01       		.byte	0x1
 7995 1459 E312     		.2byte	0x12e3
 7996 145b 28140000 		.4byte	0x1428
 7997 145f 02       		.uleb128 0x2
 7998 1460 91       		.byte	0x91
 7999 1461 58       		.sleb128 -40
 8000 1462 1A       		.uleb128 0x1a
 8001 1463 580E0000 		.4byte	.LASF99
 8002 1467 01       		.byte	0x1
 8003 1468 E512     		.2byte	0x12e5
 8004 146a 3B050000 		.4byte	0x53b
 8005 146e 02       		.uleb128 0x2
 8006 146f 91       		.byte	0x91
 8007 1470 74       		.sleb128 -12
 8008 1471 1A       		.uleb128 0x1a
 8009 1472 EA010000 		.4byte	.LASF202
 8010 1476 01       		.byte	0x1
 8011 1477 E612     		.2byte	0x12e6
 8012 1479 CA000000 		.4byte	0xca
 8013 147d 02       		.uleb128 0x2
 8014 147e 91       		.byte	0x91
 8015 147f 6B       		.sleb128 -21
 8016 1480 1A       		.uleb128 0x1a
 8017 1481 6A030000 		.4byte	.LASF131
 8018 1485 01       		.byte	0x1
 8019 1486 E712     		.2byte	0x12e7
 8020 1488 40010000 		.4byte	0x140
 8021 148c 02       		.uleb128 0x2
 8022 148d 91       		.byte	0x91
 8023 148e 6C       		.sleb128 -20
 8024 148f 20       		.uleb128 0x20
 8025 1490 FC030000 		.4byte	0x3fc
 8026 1494 0E000000 		.4byte	.LBB55
 8027 1498 1A000000 		.4byte	.LBE55-.LBB55
 8028 149c 01       		.byte	0x1
 8029 149d FF12     		.2byte	0x12ff
 8030 149f BE140000 		.4byte	0x14be
 8031 14a3 1B       		.uleb128 0x1b
 8032 14a4 0E000000 		.4byte	.LBB56
 8033 14a8 1A000000 		.4byte	.LBE56-.LBB56
 8034 14ac 21       		.uleb128 0x21
 8035 14ad 0C040000 		.4byte	0x40c
 8036 14b1 02       		.uleb128 0x2
 8037 14b2 91       		.byte	0x91
 8038 14b3 64       		.sleb128 -28
 8039 14b4 21       		.uleb128 0x21
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 236
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 236
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 236
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 236
>>>>>>> parent of cb49844... test


 8040 14b5 17040000 		.4byte	0x417
 8041 14b9 02       		.uleb128 0x2
 8042 14ba 91       		.byte	0x91
 8043 14bb 60       		.sleb128 -32
 8044 14bc 00       		.byte	0
 8045 14bd 00       		.byte	0
 8046 14be 22       		.uleb128 0x22
 8047 14bf 23040000 		.4byte	0x423
 8048 14c3 BC000000 		.4byte	.LBB57
 8049 14c7 06000000 		.4byte	.LBE57-.LBB57
 8050 14cb 01       		.byte	0x1
 8051 14cc 3113     		.2byte	0x1331
 8052 14ce 23       		.uleb128 0x23
 8053 14cf 2F040000 		.4byte	0x42f
 8054 14d3 02       		.uleb128 0x2
 8055 14d4 91       		.byte	0x91
 8056 14d5 70       		.sleb128 -16
 8057 14d6 00       		.byte	0
 8058 14d7 00       		.byte	0
 8059 14d8 18       		.uleb128 0x18
 8060 14d9 AC0C0000 		.4byte	.LASF206
 8061 14dd 01       		.byte	0x1
 8062 14de 3A13     		.2byte	0x133a
 8063 14e0 35010000 		.4byte	0x135
 8064 14e4 00000000 		.4byte	.LFB118
 8065 14e8 4C000000 		.4byte	.LFE118-.LFB118
 8066 14ec 01       		.uleb128 0x1
 8067 14ed 9C       		.byte	0x9c
 8068 14ee 20150000 		.4byte	0x1520
 8069 14f2 19       		.uleb128 0x19
 8070 14f3 A5090000 		.4byte	.LASF112
 8071 14f7 01       		.byte	0x1
 8072 14f8 3A13     		.2byte	0x133a
 8073 14fa 3F020000 		.4byte	0x23f
 8074 14fe 02       		.uleb128 0x2
 8075 14ff 91       		.byte	0x91
 8076 1500 6C       		.sleb128 -20
 8077 1501 1A       		.uleb128 0x1a
 8078 1502 580E0000 		.4byte	.LASF99
 8079 1506 01       		.byte	0x1
 8080 1507 3C13     		.2byte	0x133c
 8081 1509 3B050000 		.4byte	0x53b
 8082 150d 02       		.uleb128 0x2
 8083 150e 91       		.byte	0x91
 8084 150f 70       		.sleb128 -16
 8085 1510 1A       		.uleb128 0x1a
 8086 1511 790B0000 		.4byte	.LASF93
 8087 1515 01       		.byte	0x1
 8088 1516 3D13     		.2byte	0x133d
 8089 1518 35010000 		.4byte	0x135
 8090 151c 02       		.uleb128 0x2
 8091 151d 91       		.byte	0x91
 8092 151e 74       		.sleb128 -12
 8093 151f 00       		.byte	0
 8094 1520 1C       		.uleb128 0x1c
 8095 1521 AE0D0000 		.4byte	.LASF207
 8096 1525 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 237
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 237
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 237
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 237
>>>>>>> parent of cb49844... test


 8097 1526 5813     		.2byte	0x1358
 8098 1528 00000000 		.4byte	.LFB119
 8099 152c CC000000 		.4byte	.LFE119-.LFB119
 8100 1530 01       		.uleb128 0x1
 8101 1531 9C       		.byte	0x9c
 8102 1532 73150000 		.4byte	0x1573
 8103 1536 19       		.uleb128 0x19
 8104 1537 280D0000 		.4byte	.LASF151
 8105 153b 01       		.byte	0x1
 8106 153c 5813     		.2byte	0x1358
 8107 153e 4B010000 		.4byte	0x14b
 8108 1542 02       		.uleb128 0x2
 8109 1543 91       		.byte	0x91
 8110 1544 6C       		.sleb128 -20
 8111 1545 19       		.uleb128 0x19
 8112 1546 320C0000 		.4byte	.LASF208
 8113 154a 01       		.byte	0x1
 8114 154b 5813     		.2byte	0x1358
 8115 154d 73150000 		.4byte	0x1573
 8116 1551 02       		.uleb128 0x2
 8117 1552 91       		.byte	0x91
 8118 1553 68       		.sleb128 -24
 8119 1554 1A       		.uleb128 0x1a
 8120 1555 3D0E0000 		.4byte	.LASF104
 8121 1559 01       		.byte	0x1
 8122 155a 5A13     		.2byte	0x135a
 8123 155c 4B010000 		.4byte	0x14b
 8124 1560 02       		.uleb128 0x2
 8125 1561 91       		.byte	0x91
 8126 1562 70       		.sleb128 -16
 8127 1563 1A       		.uleb128 0x1a
 8128 1564 8A050000 		.4byte	.LASF107
 8129 1568 01       		.byte	0x1
 8130 1569 5B13     		.2byte	0x135b
 8131 156b E2060000 		.4byte	0x6e2
 8132 156f 02       		.uleb128 0x2
 8133 1570 91       		.byte	0x91
 8134 1571 74       		.sleb128 -12
 8135 1572 00       		.byte	0
 8136 1573 07       		.uleb128 0x7
 8137 1574 35010000 		.4byte	0x135
 8138 1578 11       		.uleb128 0x11
 8139 1579 34020000 		.4byte	0x234
 8140 157d 88150000 		.4byte	0x1588
 8141 1581 12       		.uleb128 0x12
 8142 1582 A9000000 		.4byte	0xa9
 8143 1586 04       		.byte	0x4
 8144 1587 00       		.byte	0
 8145 1588 1A       		.uleb128 0x1a
 8146 1589 4A010000 		.4byte	.LASF209
 8147 158d 01       		.byte	0x1
 8148 158e 5E01     		.2byte	0x15e
 8149 1590 78150000 		.4byte	0x1578
 8150 1594 05       		.uleb128 0x5
 8151 1595 03       		.byte	0x3
 8152 1596 04000000 		.4byte	pxReadyTasksLists
 8153 159a 1A       		.uleb128 0x1a
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 238
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 238
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 238
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 238
>>>>>>> parent of cb49844... test


 8154 159b B50A0000 		.4byte	.LASF210
 8155 159f 01       		.byte	0x1
 8156 15a0 5F01     		.2byte	0x15f
 8157 15a2 AC150000 		.4byte	0x15ac
 8158 15a6 05       		.uleb128 0x5
 8159 15a7 03       		.byte	0x3
 8160 15a8 68000000 		.4byte	pxDelayedTaskList
 8161 15ac 08       		.uleb128 0x8
 8162 15ad 720C0000 		.4byte	0xc72
 8163 15b1 1A       		.uleb128 0x1a
 8164 15b2 C5050000 		.4byte	.LASF211
 8165 15b6 01       		.byte	0x1
 8166 15b7 6001     		.2byte	0x160
 8167 15b9 AC150000 		.4byte	0x15ac
 8168 15bd 05       		.uleb128 0x5
 8169 15be 03       		.byte	0x3
 8170 15bf 6C000000 		.4byte	pxOverflowDelayedTaskList
 8171 15c3 1A       		.uleb128 0x1a
 8172 15c4 7F040000 		.4byte	.LASF212
 8173 15c8 01       		.byte	0x1
 8174 15c9 6101     		.2byte	0x161
 8175 15cb 34020000 		.4byte	0x234
 8176 15cf 05       		.uleb128 0x5
 8177 15d0 03       		.byte	0x3
 8178 15d1 70000000 		.4byte	xPendingReadyList
 8179 15d5 1A       		.uleb128 0x1a
 8180 15d6 9C040000 		.4byte	.LASF213
 8181 15da 01       		.byte	0x1
 8182 15db 6501     		.2byte	0x165
 8183 15dd 34020000 		.4byte	0x234
 8184 15e1 05       		.uleb128 0x5
 8185 15e2 03       		.byte	0x3
 8186 15e3 84000000 		.4byte	xTasksWaitingTermination
 8187 15e7 1A       		.uleb128 0x1a
 8188 15e8 18010000 		.4byte	.LASF214
 8189 15ec 01       		.byte	0x1
 8190 15ed 6601     		.2byte	0x166
 8191 15ef 29020000 		.4byte	0x229
 8192 15f3 05       		.uleb128 0x5
 8193 15f4 03       		.byte	0x3
 8194 15f5 98000000 		.4byte	uxDeletedTasksWaitingCleanUp
 8195 15f9 1A       		.uleb128 0x1a
 8196 15fa 9A050000 		.4byte	.LASF215
 8197 15fe 01       		.byte	0x1
 8198 15ff 6C01     		.2byte	0x16c
 8199 1601 34020000 		.4byte	0x234
 8200 1605 05       		.uleb128 0x5
 8201 1606 03       		.byte	0x3
 8202 1607 9C000000 		.4byte	xSuspendedTaskList
 8203 160b 1A       		.uleb128 0x1a
 8204 160c F80D0000 		.4byte	.LASF216
 8205 1610 01       		.byte	0x1
 8206 1611 7101     		.2byte	0x171
 8207 1613 29020000 		.4byte	0x229
 8208 1617 05       		.uleb128 0x5
 8209 1618 03       		.byte	0x3
 8210 1619 B0000000 		.4byte	uxCurrentNumberOfTasks
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 239
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 239
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 239
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 239
>>>>>>> parent of cb49844... test


 8211 161d 1A       		.uleb128 0x1a
 8212 161e E6070000 		.4byte	.LASF217
 8213 1622 01       		.byte	0x1
 8214 1623 7201     		.2byte	0x172
 8215 1625 2F160000 		.4byte	0x162f
 8216 1629 05       		.uleb128 0x5
 8217 162a 03       		.byte	0x3
 8218 162b B4000000 		.4byte	xTickCount
 8219 162f 08       		.uleb128 0x8
 8220 1630 4B010000 		.4byte	0x14b
 8221 1634 1A       		.uleb128 0x1a
 8222 1635 AE000000 		.4byte	.LASF218
 8223 1639 01       		.byte	0x1
 8224 163a 7301     		.2byte	0x173
 8225 163c 29020000 		.4byte	0x229
 8226 1640 05       		.uleb128 0x5
 8227 1641 03       		.byte	0x3
 8228 1642 B8000000 		.4byte	uxTopReadyPriority
 8229 1646 1A       		.uleb128 0x1a
 8230 1647 E8000000 		.4byte	.LASF219
 8231 164b 01       		.byte	0x1
 8232 164c 7401     		.2byte	0x174
 8233 164e 58160000 		.4byte	0x1658
 8234 1652 05       		.uleb128 0x5
 8235 1653 03       		.byte	0x3
 8236 1654 BC000000 		.4byte	xSchedulerRunning
 8237 1658 08       		.uleb128 0x8
 8238 1659 35010000 		.4byte	0x135
 8239 165d 1A       		.uleb128 0x1a
 8240 165e 9B0B0000 		.4byte	.LASF220
 8241 1662 01       		.byte	0x1
 8242 1663 7501     		.2byte	0x175
 8243 1665 29020000 		.4byte	0x229
 8244 1669 05       		.uleb128 0x5
 8245 166a 03       		.byte	0x3
 8246 166b C0000000 		.4byte	uxPendedTicks
 8247 166f 1A       		.uleb128 0x1a
 8248 1670 070F0000 		.4byte	.LASF221
 8249 1674 01       		.byte	0x1
 8250 1675 7601     		.2byte	0x176
 8251 1677 58160000 		.4byte	0x1658
 8252 167b 05       		.uleb128 0x5
 8253 167c 03       		.byte	0x3
 8254 167d C4000000 		.4byte	xYieldPending
 8255 1681 1A       		.uleb128 0x1a
 8256 1682 1A0A0000 		.4byte	.LASF222
 8257 1686 01       		.byte	0x1
 8258 1687 7701     		.2byte	0x177
 8259 1689 58160000 		.4byte	0x1658
 8260 168d 05       		.uleb128 0x5
 8261 168e 03       		.byte	0x3
 8262 168f C8000000 		.4byte	xNumOfOverflows
 8263 1693 1A       		.uleb128 0x1a
 8264 1694 11090000 		.4byte	.LASF223
 8265 1698 01       		.byte	0x1
 8266 1699 7801     		.2byte	0x178
 8267 169b 40010000 		.4byte	0x140
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 240
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 240
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 240
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 240
>>>>>>> parent of cb49844... test


 8268 169f 05       		.uleb128 0x5
 8269 16a0 03       		.byte	0x3
 8270 16a1 CC000000 		.4byte	uxTaskNumber
 8271 16a5 1A       		.uleb128 0x1a
 8272 16a6 BE070000 		.4byte	.LASF224
 8273 16aa 01       		.byte	0x1
 8274 16ab 7901     		.2byte	0x179
 8275 16ad 2F160000 		.4byte	0x162f
 8276 16b1 05       		.uleb128 0x5
 8277 16b2 03       		.byte	0x3
 8278 16b3 D0000000 		.4byte	xNextTaskUnblockTime
 8279 16b7 1A       		.uleb128 0x1a
 8280 16b8 2A0A0000 		.4byte	.LASF225
 8281 16bc 01       		.byte	0x1
 8282 16bd 7A01     		.2byte	0x17a
 8283 16bf 3F020000 		.4byte	0x23f
 8284 16c3 05       		.uleb128 0x5
 8285 16c4 03       		.byte	0x3
 8286 16c5 D4000000 		.4byte	xIdleTaskHandle
 8287 16c9 1A       		.uleb128 0x1a
 8288 16ca 650E0000 		.4byte	.LASF226
 8289 16ce 01       		.byte	0x1
 8290 16cf 8401     		.2byte	0x184
 8291 16d1 29020000 		.4byte	0x229
 8292 16d5 05       		.uleb128 0x5
 8293 16d6 03       		.byte	0x3
 8294 16d7 D8000000 		.4byte	uxSchedulerSuspended
 8295 16db 2A       		.uleb128 0x2a
 8296 16dc 820A0000 		.4byte	.LASF227
 8297 16e0 09       		.byte	0x9
 8298 16e1 9606     		.2byte	0x696
 8299 16e3 E7160000 		.4byte	0x16e7
 8300 16e7 08       		.uleb128 0x8
 8301 16e8 E0000000 		.4byte	0xe0
 8302 16ec 2B       		.uleb128 0x2b
 8303 16ed EB0D0000 		.4byte	.LASF228
 8304 16f1 01       		.byte	0x1
 8305 16f2 5B01     		.2byte	0x15b
 8306 16f4 FE160000 		.4byte	0x16fe
 8307 16f8 05       		.uleb128 0x5
 8308 16f9 03       		.byte	0x3
 8309 16fa 00000000 		.4byte	pxCurrentTCB
 8310 16fe 08       		.uleb128 0x8
 8311 16ff 3B050000 		.4byte	0x53b
 8312 1703 00       		.byte	0
 8313              		.section	.debug_abbrev,"",%progbits
 8314              	.Ldebug_abbrev0:
 8315 0000 01       		.uleb128 0x1
 8316 0001 11       		.uleb128 0x11
 8317 0002 01       		.byte	0x1
 8318 0003 25       		.uleb128 0x25
 8319 0004 0E       		.uleb128 0xe
 8320 0005 13       		.uleb128 0x13
 8321 0006 0B       		.uleb128 0xb
 8322 0007 03       		.uleb128 0x3
 8323 0008 0E       		.uleb128 0xe
 8324 0009 1B       		.uleb128 0x1b
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 241
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 241
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 241
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 241
>>>>>>> parent of cb49844... test


 8325 000a 0E       		.uleb128 0xe
 8326 000b 55       		.uleb128 0x55
 8327 000c 17       		.uleb128 0x17
 8328 000d 11       		.uleb128 0x11
 8329 000e 01       		.uleb128 0x1
 8330 000f 10       		.uleb128 0x10
 8331 0010 17       		.uleb128 0x17
 8332 0011 00       		.byte	0
 8333 0012 00       		.byte	0
 8334 0013 02       		.uleb128 0x2
 8335 0014 16       		.uleb128 0x16
 8336 0015 00       		.byte	0
 8337 0016 03       		.uleb128 0x3
 8338 0017 0E       		.uleb128 0xe
 8339 0018 3A       		.uleb128 0x3a
 8340 0019 0B       		.uleb128 0xb
 8341 001a 3B       		.uleb128 0x3b
 8342 001b 0B       		.uleb128 0xb
 8343 001c 49       		.uleb128 0x49
 8344 001d 13       		.uleb128 0x13
 8345 001e 00       		.byte	0
 8346 001f 00       		.byte	0
 8347 0020 03       		.uleb128 0x3
 8348 0021 24       		.uleb128 0x24
 8349 0022 00       		.byte	0
 8350 0023 0B       		.uleb128 0xb
 8351 0024 0B       		.uleb128 0xb
 8352 0025 3E       		.uleb128 0x3e
 8353 0026 0B       		.uleb128 0xb
 8354 0027 03       		.uleb128 0x3
 8355 0028 0E       		.uleb128 0xe
 8356 0029 00       		.byte	0
 8357 002a 00       		.byte	0
 8358 002b 04       		.uleb128 0x4
 8359 002c 24       		.uleb128 0x24
 8360 002d 00       		.byte	0
 8361 002e 0B       		.uleb128 0xb
 8362 002f 0B       		.uleb128 0xb
 8363 0030 3E       		.uleb128 0x3e
 8364 0031 0B       		.uleb128 0xb
 8365 0032 03       		.uleb128 0x3
 8366 0033 08       		.uleb128 0x8
 8367 0034 00       		.byte	0
 8368 0035 00       		.byte	0
 8369 0036 05       		.uleb128 0x5
 8370 0037 0F       		.uleb128 0xf
 8371 0038 00       		.byte	0
 8372 0039 0B       		.uleb128 0xb
 8373 003a 0B       		.uleb128 0xb
 8374 003b 00       		.byte	0
 8375 003c 00       		.byte	0
 8376 003d 06       		.uleb128 0x6
 8377 003e 0F       		.uleb128 0xf
 8378 003f 00       		.byte	0
 8379 0040 0B       		.uleb128 0xb
 8380 0041 0B       		.uleb128 0xb
 8381 0042 49       		.uleb128 0x49
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 242
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 242
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 242
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 242
>>>>>>> parent of cb49844... test


 8382 0043 13       		.uleb128 0x13
 8383 0044 00       		.byte	0
 8384 0045 00       		.byte	0
 8385 0046 07       		.uleb128 0x7
 8386 0047 26       		.uleb128 0x26
 8387 0048 00       		.byte	0
 8388 0049 49       		.uleb128 0x49
 8389 004a 13       		.uleb128 0x13
 8390 004b 00       		.byte	0
 8391 004c 00       		.byte	0
 8392 004d 08       		.uleb128 0x8
 8393 004e 35       		.uleb128 0x35
 8394 004f 00       		.byte	0
 8395 0050 49       		.uleb128 0x49
 8396 0051 13       		.uleb128 0x13
 8397 0052 00       		.byte	0
 8398 0053 00       		.byte	0
 8399 0054 09       		.uleb128 0x9
 8400 0055 15       		.uleb128 0x15
 8401 0056 01       		.byte	0x1
 8402 0057 27       		.uleb128 0x27
 8403 0058 19       		.uleb128 0x19
 8404 0059 01       		.uleb128 0x1
 8405 005a 13       		.uleb128 0x13
 8406 005b 00       		.byte	0
 8407 005c 00       		.byte	0
 8408 005d 0A       		.uleb128 0xa
 8409 005e 05       		.uleb128 0x5
 8410 005f 00       		.byte	0
 8411 0060 49       		.uleb128 0x49
 8412 0061 13       		.uleb128 0x13
 8413 0062 00       		.byte	0
 8414 0063 00       		.byte	0
 8415 0064 0B       		.uleb128 0xb
 8416 0065 13       		.uleb128 0x13
 8417 0066 01       		.byte	0x1
 8418 0067 03       		.uleb128 0x3
 8419 0068 0E       		.uleb128 0xe
 8420 0069 0B       		.uleb128 0xb
 8421 006a 0B       		.uleb128 0xb
 8422 006b 3A       		.uleb128 0x3a
 8423 006c 0B       		.uleb128 0xb
 8424 006d 3B       		.uleb128 0x3b
 8425 006e 0B       		.uleb128 0xb
 8426 006f 01       		.uleb128 0x1
 8427 0070 13       		.uleb128 0x13
 8428 0071 00       		.byte	0
 8429 0072 00       		.byte	0
 8430 0073 0C       		.uleb128 0xc
 8431 0074 0D       		.uleb128 0xd
 8432 0075 00       		.byte	0
 8433 0076 03       		.uleb128 0x3
 8434 0077 0E       		.uleb128 0xe
 8435 0078 3A       		.uleb128 0x3a
 8436 0079 0B       		.uleb128 0xb
 8437 007a 3B       		.uleb128 0x3b
 8438 007b 0B       		.uleb128 0xb
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 243
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 243
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 243
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 243
>>>>>>> parent of cb49844... test


 8439 007c 49       		.uleb128 0x49
 8440 007d 13       		.uleb128 0x13
 8441 007e 38       		.uleb128 0x38
 8442 007f 0B       		.uleb128 0xb
 8443 0080 00       		.byte	0
 8444 0081 00       		.byte	0
 8445 0082 0D       		.uleb128 0xd
 8446 0083 13       		.uleb128 0x13
 8447 0084 01       		.byte	0x1
 8448 0085 03       		.uleb128 0x3
 8449 0086 0E       		.uleb128 0xe
 8450 0087 0B       		.uleb128 0xb
 8451 0088 0B       		.uleb128 0xb
 8452 0089 3A       		.uleb128 0x3a
 8453 008a 0B       		.uleb128 0xb
 8454 008b 3B       		.uleb128 0x3b
 8455 008c 05       		.uleb128 0x5
 8456 008d 01       		.uleb128 0x1
 8457 008e 13       		.uleb128 0x13
 8458 008f 00       		.byte	0
 8459 0090 00       		.byte	0
 8460 0091 0E       		.uleb128 0xe
 8461 0092 0D       		.uleb128 0xd
 8462 0093 00       		.byte	0
 8463 0094 03       		.uleb128 0x3
 8464 0095 0E       		.uleb128 0xe
 8465 0096 3A       		.uleb128 0x3a
 8466 0097 0B       		.uleb128 0xb
 8467 0098 3B       		.uleb128 0x3b
 8468 0099 05       		.uleb128 0x5
 8469 009a 49       		.uleb128 0x49
 8470 009b 13       		.uleb128 0x13
 8471 009c 38       		.uleb128 0x38
 8472 009d 0B       		.uleb128 0xb
 8473 009e 00       		.byte	0
 8474 009f 00       		.byte	0
 8475 00a0 0F       		.uleb128 0xf
 8476 00a1 04       		.uleb128 0x4
 8477 00a2 01       		.byte	0x1
 8478 00a3 0B       		.uleb128 0xb
 8479 00a4 0B       		.uleb128 0xb
 8480 00a5 49       		.uleb128 0x49
 8481 00a6 13       		.uleb128 0x13
 8482 00a7 3A       		.uleb128 0x3a
 8483 00a8 0B       		.uleb128 0xb
 8484 00a9 3B       		.uleb128 0x3b
 8485 00aa 0B       		.uleb128 0xb
 8486 00ab 01       		.uleb128 0x1
 8487 00ac 13       		.uleb128 0x13
 8488 00ad 00       		.byte	0
 8489 00ae 00       		.byte	0
 8490 00af 10       		.uleb128 0x10
 8491 00b0 28       		.uleb128 0x28
 8492 00b1 00       		.byte	0
 8493 00b2 03       		.uleb128 0x3
 8494 00b3 0E       		.uleb128 0xe
 8495 00b4 1C       		.uleb128 0x1c
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 244
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 244
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 244
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 244
>>>>>>> parent of cb49844... test


 8496 00b5 0B       		.uleb128 0xb
 8497 00b6 00       		.byte	0
 8498 00b7 00       		.byte	0
 8499 00b8 11       		.uleb128 0x11
 8500 00b9 01       		.uleb128 0x1
 8501 00ba 01       		.byte	0x1
 8502 00bb 49       		.uleb128 0x49
 8503 00bc 13       		.uleb128 0x13
 8504 00bd 01       		.uleb128 0x1
 8505 00be 13       		.uleb128 0x13
 8506 00bf 00       		.byte	0
 8507 00c0 00       		.byte	0
 8508 00c1 12       		.uleb128 0x12
 8509 00c2 21       		.uleb128 0x21
 8510 00c3 00       		.byte	0
 8511 00c4 49       		.uleb128 0x49
 8512 00c5 13       		.uleb128 0x13
 8513 00c6 2F       		.uleb128 0x2f
 8514 00c7 0B       		.uleb128 0xb
 8515 00c8 00       		.byte	0
 8516 00c9 00       		.byte	0
 8517 00ca 13       		.uleb128 0x13
 8518 00cb 16       		.uleb128 0x16
 8519 00cc 00       		.byte	0
 8520 00cd 03       		.uleb128 0x3
 8521 00ce 0E       		.uleb128 0xe
 8522 00cf 3A       		.uleb128 0x3a
 8523 00d0 0B       		.uleb128 0xb
 8524 00d1 3B       		.uleb128 0x3b
 8525 00d2 05       		.uleb128 0x5
 8526 00d3 49       		.uleb128 0x49
 8527 00d4 13       		.uleb128 0x13
 8528 00d5 00       		.byte	0
 8529 00d6 00       		.byte	0
 8530 00d7 14       		.uleb128 0x14
 8531 00d8 2E       		.uleb128 0x2e
 8532 00d9 01       		.byte	0x1
 8533 00da 03       		.uleb128 0x3
 8534 00db 0E       		.uleb128 0xe
 8535 00dc 3A       		.uleb128 0x3a
 8536 00dd 0B       		.uleb128 0xb
 8537 00de 3B       		.uleb128 0x3b
 8538 00df 0B       		.uleb128 0xb
 8539 00e0 27       		.uleb128 0x27
 8540 00e1 19       		.uleb128 0x19
 8541 00e2 49       		.uleb128 0x49
 8542 00e3 13       		.uleb128 0x13
 8543 00e4 20       		.uleb128 0x20
 8544 00e5 0B       		.uleb128 0xb
 8545 00e6 01       		.uleb128 0x1
 8546 00e7 13       		.uleb128 0x13
 8547 00e8 00       		.byte	0
 8548 00e9 00       		.byte	0
 8549 00ea 15       		.uleb128 0x15
 8550 00eb 34       		.uleb128 0x34
 8551 00ec 00       		.byte	0
 8552 00ed 03       		.uleb128 0x3
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 245
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 245
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 245
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 245
>>>>>>> parent of cb49844... test


 8553 00ee 0E       		.uleb128 0xe
 8554 00ef 3A       		.uleb128 0x3a
 8555 00f0 0B       		.uleb128 0xb
 8556 00f1 3B       		.uleb128 0x3b
 8557 00f2 0B       		.uleb128 0xb
 8558 00f3 49       		.uleb128 0x49
 8559 00f4 13       		.uleb128 0x13
 8560 00f5 00       		.byte	0
 8561 00f6 00       		.byte	0
 8562 00f7 16       		.uleb128 0x16
 8563 00f8 2E       		.uleb128 0x2e
 8564 00f9 01       		.byte	0x1
 8565 00fa 03       		.uleb128 0x3
 8566 00fb 0E       		.uleb128 0xe
 8567 00fc 3A       		.uleb128 0x3a
 8568 00fd 0B       		.uleb128 0xb
 8569 00fe 3B       		.uleb128 0x3b
 8570 00ff 0B       		.uleb128 0xb
 8571 0100 27       		.uleb128 0x27
 8572 0101 19       		.uleb128 0x19
 8573 0102 20       		.uleb128 0x20
 8574 0103 0B       		.uleb128 0xb
 8575 0104 01       		.uleb128 0x1
 8576 0105 13       		.uleb128 0x13
 8577 0106 00       		.byte	0
 8578 0107 00       		.byte	0
 8579 0108 17       		.uleb128 0x17
 8580 0109 05       		.uleb128 0x5
 8581 010a 00       		.byte	0
 8582 010b 03       		.uleb128 0x3
 8583 010c 0E       		.uleb128 0xe
 8584 010d 3A       		.uleb128 0x3a
 8585 010e 0B       		.uleb128 0xb
 8586 010f 3B       		.uleb128 0x3b
 8587 0110 0B       		.uleb128 0xb
 8588 0111 49       		.uleb128 0x49
 8589 0112 13       		.uleb128 0x13
 8590 0113 00       		.byte	0
 8591 0114 00       		.byte	0
 8592 0115 18       		.uleb128 0x18
 8593 0116 2E       		.uleb128 0x2e
 8594 0117 01       		.byte	0x1
 8595 0118 3F       		.uleb128 0x3f
 8596 0119 19       		.uleb128 0x19
 8597 011a 03       		.uleb128 0x3
 8598 011b 0E       		.uleb128 0xe
 8599 011c 3A       		.uleb128 0x3a
 8600 011d 0B       		.uleb128 0xb
 8601 011e 3B       		.uleb128 0x3b
 8602 011f 05       		.uleb128 0x5
 8603 0120 27       		.uleb128 0x27
 8604 0121 19       		.uleb128 0x19
 8605 0122 49       		.uleb128 0x49
 8606 0123 13       		.uleb128 0x13
 8607 0124 11       		.uleb128 0x11
 8608 0125 01       		.uleb128 0x1
 8609 0126 12       		.uleb128 0x12
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 246
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 246
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 246
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 246
>>>>>>> parent of cb49844... test


 8610 0127 06       		.uleb128 0x6
 8611 0128 40       		.uleb128 0x40
 8612 0129 18       		.uleb128 0x18
 8613 012a 9642     		.uleb128 0x2116
 8614 012c 19       		.uleb128 0x19
 8615 012d 01       		.uleb128 0x1
 8616 012e 13       		.uleb128 0x13
 8617 012f 00       		.byte	0
 8618 0130 00       		.byte	0
 8619 0131 19       		.uleb128 0x19
 8620 0132 05       		.uleb128 0x5
 8621 0133 00       		.byte	0
 8622 0134 03       		.uleb128 0x3
 8623 0135 0E       		.uleb128 0xe
 8624 0136 3A       		.uleb128 0x3a
 8625 0137 0B       		.uleb128 0xb
 8626 0138 3B       		.uleb128 0x3b
 8627 0139 05       		.uleb128 0x5
 8628 013a 49       		.uleb128 0x49
 8629 013b 13       		.uleb128 0x13
 8630 013c 02       		.uleb128 0x2
 8631 013d 18       		.uleb128 0x18
 8632 013e 00       		.byte	0
 8633 013f 00       		.byte	0
 8634 0140 1A       		.uleb128 0x1a
 8635 0141 34       		.uleb128 0x34
 8636 0142 00       		.byte	0
 8637 0143 03       		.uleb128 0x3
 8638 0144 0E       		.uleb128 0xe
 8639 0145 3A       		.uleb128 0x3a
 8640 0146 0B       		.uleb128 0xb
 8641 0147 3B       		.uleb128 0x3b
 8642 0148 05       		.uleb128 0x5
 8643 0149 49       		.uleb128 0x49
 8644 014a 13       		.uleb128 0x13
 8645 014b 02       		.uleb128 0x2
 8646 014c 18       		.uleb128 0x18
 8647 014d 00       		.byte	0
 8648 014e 00       		.byte	0
 8649 014f 1B       		.uleb128 0x1b
 8650 0150 0B       		.uleb128 0xb
 8651 0151 01       		.byte	0x1
 8652 0152 11       		.uleb128 0x11
 8653 0153 01       		.uleb128 0x1
 8654 0154 12       		.uleb128 0x12
 8655 0155 06       		.uleb128 0x6
 8656 0156 00       		.byte	0
 8657 0157 00       		.byte	0
 8658 0158 1C       		.uleb128 0x1c
 8659 0159 2E       		.uleb128 0x2e
 8660 015a 01       		.byte	0x1
 8661 015b 03       		.uleb128 0x3
 8662 015c 0E       		.uleb128 0xe
 8663 015d 3A       		.uleb128 0x3a
 8664 015e 0B       		.uleb128 0xb
 8665 015f 3B       		.uleb128 0x3b
 8666 0160 05       		.uleb128 0x5
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 247
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 247
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 247
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 247
>>>>>>> parent of cb49844... test


 8667 0161 27       		.uleb128 0x27
 8668 0162 19       		.uleb128 0x19
 8669 0163 11       		.uleb128 0x11
 8670 0164 01       		.uleb128 0x1
 8671 0165 12       		.uleb128 0x12
 8672 0166 06       		.uleb128 0x6
 8673 0167 40       		.uleb128 0x40
 8674 0168 18       		.uleb128 0x18
 8675 0169 9642     		.uleb128 0x2116
 8676 016b 19       		.uleb128 0x19
 8677 016c 01       		.uleb128 0x1
 8678 016d 13       		.uleb128 0x13
 8679 016e 00       		.byte	0
 8680 016f 00       		.byte	0
 8681 0170 1D       		.uleb128 0x1d
 8682 0171 34       		.uleb128 0x34
 8683 0172 00       		.byte	0
 8684 0173 03       		.uleb128 0x3
 8685 0174 08       		.uleb128 0x8
 8686 0175 3A       		.uleb128 0x3a
 8687 0176 0B       		.uleb128 0xb
 8688 0177 3B       		.uleb128 0x3b
 8689 0178 05       		.uleb128 0x5
 8690 0179 49       		.uleb128 0x49
 8691 017a 13       		.uleb128 0x13
 8692 017b 02       		.uleb128 0x2
 8693 017c 18       		.uleb128 0x18
 8694 017d 00       		.byte	0
 8695 017e 00       		.byte	0
 8696 017f 1E       		.uleb128 0x1e
 8697 0180 2E       		.uleb128 0x2e
 8698 0181 01       		.byte	0x1
 8699 0182 3F       		.uleb128 0x3f
 8700 0183 19       		.uleb128 0x19
 8701 0184 03       		.uleb128 0x3
 8702 0185 0E       		.uleb128 0xe
 8703 0186 3A       		.uleb128 0x3a
 8704 0187 0B       		.uleb128 0xb
 8705 0188 3B       		.uleb128 0x3b
 8706 0189 05       		.uleb128 0x5
 8707 018a 27       		.uleb128 0x27
 8708 018b 19       		.uleb128 0x19
 8709 018c 11       		.uleb128 0x11
 8710 018d 01       		.uleb128 0x1
 8711 018e 12       		.uleb128 0x12
 8712 018f 06       		.uleb128 0x6
 8713 0190 40       		.uleb128 0x40
 8714 0191 18       		.uleb128 0x18
 8715 0192 9642     		.uleb128 0x2116
 8716 0194 19       		.uleb128 0x19
 8717 0195 01       		.uleb128 0x1
 8718 0196 13       		.uleb128 0x13
 8719 0197 00       		.byte	0
 8720 0198 00       		.byte	0
 8721 0199 1F       		.uleb128 0x1f
 8722 019a 2E       		.uleb128 0x2e
 8723 019b 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 248
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 248
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 248
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 248
>>>>>>> parent of cb49844... test


 8724 019c 3F       		.uleb128 0x3f
 8725 019d 19       		.uleb128 0x19
 8726 019e 03       		.uleb128 0x3
 8727 019f 0E       		.uleb128 0xe
 8728 01a0 3A       		.uleb128 0x3a
 8729 01a1 0B       		.uleb128 0xb
 8730 01a2 3B       		.uleb128 0x3b
 8731 01a3 05       		.uleb128 0x5
 8732 01a4 27       		.uleb128 0x27
 8733 01a5 19       		.uleb128 0x19
 8734 01a6 49       		.uleb128 0x49
 8735 01a7 13       		.uleb128 0x13
 8736 01a8 11       		.uleb128 0x11
 8737 01a9 01       		.uleb128 0x1
 8738 01aa 12       		.uleb128 0x12
 8739 01ab 06       		.uleb128 0x6
 8740 01ac 40       		.uleb128 0x40
 8741 01ad 18       		.uleb128 0x18
 8742 01ae 9742     		.uleb128 0x2117
 8743 01b0 19       		.uleb128 0x19
 8744 01b1 01       		.uleb128 0x1
 8745 01b2 13       		.uleb128 0x13
 8746 01b3 00       		.byte	0
 8747 01b4 00       		.byte	0
 8748 01b5 20       		.uleb128 0x20
 8749 01b6 1D       		.uleb128 0x1d
 8750 01b7 01       		.byte	0x1
 8751 01b8 31       		.uleb128 0x31
 8752 01b9 13       		.uleb128 0x13
 8753 01ba 11       		.uleb128 0x11
 8754 01bb 01       		.uleb128 0x1
 8755 01bc 12       		.uleb128 0x12
 8756 01bd 06       		.uleb128 0x6
 8757 01be 58       		.uleb128 0x58
 8758 01bf 0B       		.uleb128 0xb
 8759 01c0 59       		.uleb128 0x59
 8760 01c1 05       		.uleb128 0x5
 8761 01c2 01       		.uleb128 0x1
 8762 01c3 13       		.uleb128 0x13
 8763 01c4 00       		.byte	0
 8764 01c5 00       		.byte	0
 8765 01c6 21       		.uleb128 0x21
 8766 01c7 34       		.uleb128 0x34
 8767 01c8 00       		.byte	0
 8768 01c9 31       		.uleb128 0x31
 8769 01ca 13       		.uleb128 0x13
 8770 01cb 02       		.uleb128 0x2
 8771 01cc 18       		.uleb128 0x18
 8772 01cd 00       		.byte	0
 8773 01ce 00       		.byte	0
 8774 01cf 22       		.uleb128 0x22
 8775 01d0 1D       		.uleb128 0x1d
 8776 01d1 01       		.byte	0x1
 8777 01d2 31       		.uleb128 0x31
 8778 01d3 13       		.uleb128 0x13
 8779 01d4 11       		.uleb128 0x11
 8780 01d5 01       		.uleb128 0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 249
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 249
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 249
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 249
>>>>>>> parent of cb49844... test


 8781 01d6 12       		.uleb128 0x12
 8782 01d7 06       		.uleb128 0x6
 8783 01d8 58       		.uleb128 0x58
 8784 01d9 0B       		.uleb128 0xb
 8785 01da 59       		.uleb128 0x59
 8786 01db 05       		.uleb128 0x5
 8787 01dc 00       		.byte	0
 8788 01dd 00       		.byte	0
 8789 01de 23       		.uleb128 0x23
 8790 01df 05       		.uleb128 0x5
 8791 01e0 00       		.byte	0
 8792 01e1 31       		.uleb128 0x31
 8793 01e2 13       		.uleb128 0x13
 8794 01e3 02       		.uleb128 0x2
 8795 01e4 18       		.uleb128 0x18
 8796 01e5 00       		.byte	0
 8797 01e6 00       		.byte	0
 8798 01e7 24       		.uleb128 0x24
 8799 01e8 2E       		.uleb128 0x2e
 8800 01e9 01       		.byte	0x1
 8801 01ea 03       		.uleb128 0x3
 8802 01eb 0E       		.uleb128 0xe
 8803 01ec 3A       		.uleb128 0x3a
 8804 01ed 0B       		.uleb128 0xb
 8805 01ee 3B       		.uleb128 0x3b
 8806 01ef 05       		.uleb128 0x5
 8807 01f0 27       		.uleb128 0x27
 8808 01f1 19       		.uleb128 0x19
 8809 01f2 49       		.uleb128 0x49
 8810 01f3 13       		.uleb128 0x13
 8811 01f4 11       		.uleb128 0x11
 8812 01f5 01       		.uleb128 0x1
 8813 01f6 12       		.uleb128 0x12
 8814 01f7 06       		.uleb128 0x6
 8815 01f8 40       		.uleb128 0x40
 8816 01f9 18       		.uleb128 0x18
 8817 01fa 9742     		.uleb128 0x2117
 8818 01fc 19       		.uleb128 0x19
 8819 01fd 01       		.uleb128 0x1
 8820 01fe 13       		.uleb128 0x13
 8821 01ff 00       		.byte	0
 8822 0200 00       		.byte	0
 8823 0201 25       		.uleb128 0x25
 8824 0202 2E       		.uleb128 0x2e
 8825 0203 00       		.byte	0
 8826 0204 3F       		.uleb128 0x3f
 8827 0205 19       		.uleb128 0x19
 8828 0206 03       		.uleb128 0x3
 8829 0207 0E       		.uleb128 0xe
 8830 0208 3A       		.uleb128 0x3a
 8831 0209 0B       		.uleb128 0xb
 8832 020a 3B       		.uleb128 0x3b
 8833 020b 05       		.uleb128 0x5
 8834 020c 27       		.uleb128 0x27
 8835 020d 19       		.uleb128 0x19
 8836 020e 11       		.uleb128 0x11
 8837 020f 01       		.uleb128 0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 250
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 250
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 250
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 250
>>>>>>> parent of cb49844... test


 8838 0210 12       		.uleb128 0x12
 8839 0211 06       		.uleb128 0x6
 8840 0212 40       		.uleb128 0x40
 8841 0213 18       		.uleb128 0x18
 8842 0214 9742     		.uleb128 0x2117
 8843 0216 19       		.uleb128 0x19
 8844 0217 00       		.byte	0
 8845 0218 00       		.byte	0
 8846 0219 26       		.uleb128 0x26
 8847 021a 2E       		.uleb128 0x2e
 8848 021b 00       		.byte	0
 8849 021c 3F       		.uleb128 0x3f
 8850 021d 19       		.uleb128 0x19
 8851 021e 03       		.uleb128 0x3
 8852 021f 0E       		.uleb128 0xe
 8853 0220 3A       		.uleb128 0x3a
 8854 0221 0B       		.uleb128 0xb
 8855 0222 3B       		.uleb128 0x3b
 8856 0223 05       		.uleb128 0x5
 8857 0224 27       		.uleb128 0x27
 8858 0225 19       		.uleb128 0x19
 8859 0226 49       		.uleb128 0x49
 8860 0227 13       		.uleb128 0x13
 8861 0228 11       		.uleb128 0x11
 8862 0229 01       		.uleb128 0x1
 8863 022a 12       		.uleb128 0x12
 8864 022b 06       		.uleb128 0x6
 8865 022c 40       		.uleb128 0x40
 8866 022d 18       		.uleb128 0x18
 8867 022e 9742     		.uleb128 0x2117
 8868 0230 19       		.uleb128 0x19
 8869 0231 00       		.byte	0
 8870 0232 00       		.byte	0
 8871 0233 27       		.uleb128 0x27
 8872 0234 0B       		.uleb128 0xb
 8873 0235 01       		.byte	0x1
 8874 0236 11       		.uleb128 0x11
 8875 0237 01       		.uleb128 0x1
 8876 0238 12       		.uleb128 0x12
 8877 0239 06       		.uleb128 0x6
 8878 023a 01       		.uleb128 0x1
 8879 023b 13       		.uleb128 0x13
 8880 023c 00       		.byte	0
 8881 023d 00       		.byte	0
 8882 023e 28       		.uleb128 0x28
 8883 023f 2E       		.uleb128 0x2e
 8884 0240 01       		.byte	0x1
 8885 0241 3F       		.uleb128 0x3f
 8886 0242 19       		.uleb128 0x19
 8887 0243 03       		.uleb128 0x3
 8888 0244 0E       		.uleb128 0xe
 8889 0245 3A       		.uleb128 0x3a
 8890 0246 0B       		.uleb128 0xb
 8891 0247 3B       		.uleb128 0x3b
 8892 0248 05       		.uleb128 0x5
 8893 0249 27       		.uleb128 0x27
 8894 024a 19       		.uleb128 0x19
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 251
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 251
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 251
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 251
>>>>>>> parent of cb49844... test


 8895 024b 11       		.uleb128 0x11
 8896 024c 01       		.uleb128 0x1
 8897 024d 12       		.uleb128 0x12
 8898 024e 06       		.uleb128 0x6
 8899 024f 40       		.uleb128 0x40
 8900 0250 18       		.uleb128 0x18
 8901 0251 9742     		.uleb128 0x2117
 8902 0253 19       		.uleb128 0x19
 8903 0254 01       		.uleb128 0x1
 8904 0255 13       		.uleb128 0x13
 8905 0256 00       		.byte	0
 8906 0257 00       		.byte	0
 8907 0258 29       		.uleb128 0x29
 8908 0259 2E       		.uleb128 0x2e
 8909 025a 01       		.byte	0x1
 8910 025b 03       		.uleb128 0x3
 8911 025c 0E       		.uleb128 0xe
 8912 025d 3A       		.uleb128 0x3a
 8913 025e 0B       		.uleb128 0xb
 8914 025f 3B       		.uleb128 0x3b
 8915 0260 05       		.uleb128 0x5
 8916 0261 27       		.uleb128 0x27
 8917 0262 19       		.uleb128 0x19
 8918 0263 11       		.uleb128 0x11
 8919 0264 01       		.uleb128 0x1
 8920 0265 12       		.uleb128 0x12
 8921 0266 06       		.uleb128 0x6
 8922 0267 40       		.uleb128 0x40
 8923 0268 18       		.uleb128 0x18
 8924 0269 9742     		.uleb128 0x2117
 8925 026b 19       		.uleb128 0x19
 8926 026c 01       		.uleb128 0x1
 8927 026d 13       		.uleb128 0x13
 8928 026e 00       		.byte	0
 8929 026f 00       		.byte	0
 8930 0270 2A       		.uleb128 0x2a
 8931 0271 34       		.uleb128 0x34
 8932 0272 00       		.byte	0
 8933 0273 03       		.uleb128 0x3
 8934 0274 0E       		.uleb128 0xe
 8935 0275 3A       		.uleb128 0x3a
 8936 0276 0B       		.uleb128 0xb
 8937 0277 3B       		.uleb128 0x3b
 8938 0278 05       		.uleb128 0x5
 8939 0279 49       		.uleb128 0x49
 8940 027a 13       		.uleb128 0x13
 8941 027b 3F       		.uleb128 0x3f
 8942 027c 19       		.uleb128 0x19
 8943 027d 3C       		.uleb128 0x3c
 8944 027e 19       		.uleb128 0x19
 8945 027f 00       		.byte	0
 8946 0280 00       		.byte	0
 8947 0281 2B       		.uleb128 0x2b
 8948 0282 34       		.uleb128 0x34
 8949 0283 00       		.byte	0
 8950 0284 03       		.uleb128 0x3
 8951 0285 0E       		.uleb128 0xe
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 252
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 252
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 252
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 252
>>>>>>> parent of cb49844... test


 8952 0286 3A       		.uleb128 0x3a
 8953 0287 0B       		.uleb128 0xb
 8954 0288 3B       		.uleb128 0x3b
 8955 0289 05       		.uleb128 0x5
 8956 028a 49       		.uleb128 0x49
 8957 028b 13       		.uleb128 0x13
 8958 028c 3F       		.uleb128 0x3f
 8959 028d 19       		.uleb128 0x19
 8960 028e 02       		.uleb128 0x2
 8961 028f 18       		.uleb128 0x18
 8962 0290 00       		.byte	0
 8963 0291 00       		.byte	0
 8964 0292 00       		.byte	0
 8965              		.section	.debug_aranges,"",%progbits
 8966 0000 B4010000 		.4byte	0x1b4
 8967 0004 0200     		.2byte	0x2
 8968 0006 00000000 		.4byte	.Ldebug_info0
 8969 000a 04       		.byte	0x4
 8970 000b 00       		.byte	0
 8971 000c 0000     		.2byte	0
 8972 000e 0000     		.2byte	0
 8973 0010 00000000 		.4byte	.LFB68
 8974 0014 82000000 		.4byte	.LFE68-.LFB68
 8975 0018 00000000 		.4byte	.LFB69
 8976 001c EE000000 		.4byte	.LFE69-.LFB69
 8977 0020 00000000 		.4byte	.LFB70
 8978 0024 D4000000 		.4byte	.LFE70-.LFB70
 8979 0028 00000000 		.4byte	.LFB71
 8980 002c FC000000 		.4byte	.LFE71-.LFB71
 8981 0030 00000000 		.4byte	.LFB72
 8982 0034 A0000000 		.4byte	.LFE72-.LFB72
 8983 0038 00000000 		.4byte	.LFB73
 8984 003c 48000000 		.4byte	.LFE73-.LFB73
 8985 0040 00000000 		.4byte	.LFB74
 8986 0044 B0000000 		.4byte	.LFE74-.LFB74
 8987 0048 00000000 		.4byte	.LFB75
 8988 004c 34000000 		.4byte	.LFE75-.LFB75
 8989 0050 00000000 		.4byte	.LFB76
 8990 0054 54000000 		.4byte	.LFE76-.LFB76
 8991 0058 00000000 		.4byte	.LFB77
 8992 005c 38010000 		.4byte	.LFE77-.LFB77
 8993 0060 00000000 		.4byte	.LFB78
 8994 0064 04010000 		.4byte	.LFE78-.LFB78
 8995 0068 00000000 		.4byte	.LFB79
 8996 006c 44000000 		.4byte	.LFE79-.LFB79
 8997 0070 00000000 		.4byte	.LFB80
 8998 0074 A0000000 		.4byte	.LFE80-.LFB80
 8999 0078 00000000 		.4byte	.LFB81
 9000 007c C0000000 		.4byte	.LFE81-.LFB81
 9001 0080 00000000 		.4byte	.LFB82
 9002 0084 6C000000 		.4byte	.LFE82-.LFB82
 9003 0088 00000000 		.4byte	.LFB83
 9004 008c 30000000 		.4byte	.LFE83-.LFB83
 9005 0090 00000000 		.4byte	.LFB84
 9006 0094 1C000000 		.4byte	.LFE84-.LFB84
 9007 0098 00000000 		.4byte	.LFB85
 9008 009c 1C010000 		.4byte	.LFE85-.LFB85
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 253
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 253
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 253
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 253
>>>>>>> parent of cb49844... test


 9009 00a0 00000000 		.4byte	.LFB86
 9010 00a4 1C000000 		.4byte	.LFE86-.LFB86
 9011 00a8 00000000 		.4byte	.LFB87
 9012 00ac 20000000 		.4byte	.LFE87-.LFB87
 9013 00b0 00000000 		.4byte	.LFB88
 9014 00b4 14000000 		.4byte	.LFE88-.LFB88
 9015 00b8 00000000 		.4byte	.LFB89
 9016 00bc 2C000000 		.4byte	.LFE89-.LFB89
 9017 00c0 00000000 		.4byte	.LFB90
 9018 00c4 50010000 		.4byte	.LFE90-.LFB90
 9019 00c8 00000000 		.4byte	.LFB91
 9020 00cc D8000000 		.4byte	.LFE91-.LFB91
 9021 00d0 00000000 		.4byte	.LFB92
 9022 00d4 2C000000 		.4byte	.LFE92-.LFB92
 9023 00d8 00000000 		.4byte	.LFB93
 9024 00dc 3C000000 		.4byte	.LFE93-.LFB93
 9025 00e0 00000000 		.4byte	.LFB94
 9026 00e4 A8000000 		.4byte	.LFE94-.LFB94
 9027 00e8 00000000 		.4byte	.LFB95
 9028 00ec 84000000 		.4byte	.LFE95-.LFB95
 9029 00f0 00000000 		.4byte	.LFB96
 9030 00f4 30000000 		.4byte	.LFE96-.LFB96
 9031 00f8 00000000 		.4byte	.LFB97
 9032 00fc 2C000000 		.4byte	.LFE97-.LFB97
 9033 0100 00000000 		.4byte	.LFB98
 9034 0104 8C000000 		.4byte	.LFE98-.LFB98
 9035 0108 00000000 		.4byte	.LFB99
 9036 010c 18000000 		.4byte	.LFE99-.LFB99
 9037 0110 00000000 		.4byte	.LFB100
 9038 0114 0E000000 		.4byte	.LFE100-.LFB100
 9039 0118 00000000 		.4byte	.LFB101
 9040 011c 80000000 		.4byte	.LFE101-.LFB101
 9041 0120 00000000 		.4byte	.LFB102
 9042 0124 58000000 		.4byte	.LFE102-.LFB102
 9043 0128 00000000 		.4byte	.LFB103
 9044 012c 36000000 		.4byte	.LFE103-.LFB103
 9045 0130 00000000 		.4byte	.LFB104
 9046 0134 38000000 		.4byte	.LFE104-.LFB104
 9047 0138 00000000 		.4byte	.LFB105
 9048 013c 20000000 		.4byte	.LFE105-.LFB105
 9049 0140 00000000 		.4byte	.LFB106
 9050 0144 40000000 		.4byte	.LFE106-.LFB106
 9051 0148 00000000 		.4byte	.LFB107
 9052 014c 1C000000 		.4byte	.LFE107-.LFB107
 9053 0150 00000000 		.4byte	.LFB108
 9054 0154 00010000 		.4byte	.LFE108-.LFB108
 9055 0158 00000000 		.4byte	.LFB109
 9056 015c C8000000 		.4byte	.LFE109-.LFB109
 9057 0160 00000000 		.4byte	.LFB110
 9058 0164 F0000000 		.4byte	.LFE110-.LFB110
 9059 0168 00000000 		.4byte	.LFB111
 9060 016c 30000000 		.4byte	.LFE111-.LFB111
 9061 0170 00000000 		.4byte	.LFB112
 9062 0174 28000000 		.4byte	.LFE112-.LFB112
 9063 0178 00000000 		.4byte	.LFB113
 9064 017c 90000000 		.4byte	.LFE113-.LFB113
 9065 0180 00000000 		.4byte	.LFB114
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 254
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 254
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 254
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 254
>>>>>>> parent of cb49844... test


 9066 0184 B4000000 		.4byte	.LFE114-.LFB114
 9067 0188 00000000 		.4byte	.LFB115
 9068 018c 10010000 		.4byte	.LFE115-.LFB115
 9069 0190 00000000 		.4byte	.LFB116
 9070 0194 4C010000 		.4byte	.LFE116-.LFB116
 9071 0198 00000000 		.4byte	.LFB117
 9072 019c E4000000 		.4byte	.LFE117-.LFB117
 9073 01a0 00000000 		.4byte	.LFB118
 9074 01a4 4C000000 		.4byte	.LFE118-.LFB118
 9075 01a8 00000000 		.4byte	.LFB119
 9076 01ac CC000000 		.4byte	.LFE119-.LFB119
 9077 01b0 00000000 		.4byte	0
 9078 01b4 00000000 		.4byte	0
 9079              		.section	.debug_ranges,"",%progbits
 9080              	.Ldebug_ranges0:
 9081 0000 00000000 		.4byte	.LFB68
 9082 0004 82000000 		.4byte	.LFE68
 9083 0008 00000000 		.4byte	.LFB69
 9084 000c EE000000 		.4byte	.LFE69
 9085 0010 00000000 		.4byte	.LFB70
 9086 0014 D4000000 		.4byte	.LFE70
 9087 0018 00000000 		.4byte	.LFB71
 9088 001c FC000000 		.4byte	.LFE71
 9089 0020 00000000 		.4byte	.LFB72
 9090 0024 A0000000 		.4byte	.LFE72
 9091 0028 00000000 		.4byte	.LFB73
 9092 002c 48000000 		.4byte	.LFE73
 9093 0030 00000000 		.4byte	.LFB74
 9094 0034 B0000000 		.4byte	.LFE74
 9095 0038 00000000 		.4byte	.LFB75
 9096 003c 34000000 		.4byte	.LFE75
 9097 0040 00000000 		.4byte	.LFB76
 9098 0044 54000000 		.4byte	.LFE76
 9099 0048 00000000 		.4byte	.LFB77
 9100 004c 38010000 		.4byte	.LFE77
 9101 0050 00000000 		.4byte	.LFB78
 9102 0054 04010000 		.4byte	.LFE78
 9103 0058 00000000 		.4byte	.LFB79
 9104 005c 44000000 		.4byte	.LFE79
 9105 0060 00000000 		.4byte	.LFB80
 9106 0064 A0000000 		.4byte	.LFE80
 9107 0068 00000000 		.4byte	.LFB81
 9108 006c C0000000 		.4byte	.LFE81
 9109 0070 00000000 		.4byte	.LFB82
 9110 0074 6C000000 		.4byte	.LFE82
 9111 0078 00000000 		.4byte	.LFB83
 9112 007c 30000000 		.4byte	.LFE83
 9113 0080 00000000 		.4byte	.LFB84
 9114 0084 1C000000 		.4byte	.LFE84
 9115 0088 00000000 		.4byte	.LFB85
 9116 008c 1C010000 		.4byte	.LFE85
 9117 0090 00000000 		.4byte	.LFB86
 9118 0094 1C000000 		.4byte	.LFE86
 9119 0098 00000000 		.4byte	.LFB87
 9120 009c 20000000 		.4byte	.LFE87
 9121 00a0 00000000 		.4byte	.LFB88
 9122 00a4 14000000 		.4byte	.LFE88
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 255
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 255
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 255
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 255
>>>>>>> parent of cb49844... test


 9123 00a8 00000000 		.4byte	.LFB89
 9124 00ac 2C000000 		.4byte	.LFE89
 9125 00b0 00000000 		.4byte	.LFB90
 9126 00b4 50010000 		.4byte	.LFE90
 9127 00b8 00000000 		.4byte	.LFB91
 9128 00bc D8000000 		.4byte	.LFE91
 9129 00c0 00000000 		.4byte	.LFB92
 9130 00c4 2C000000 		.4byte	.LFE92
 9131 00c8 00000000 		.4byte	.LFB93
 9132 00cc 3C000000 		.4byte	.LFE93
 9133 00d0 00000000 		.4byte	.LFB94
 9134 00d4 A8000000 		.4byte	.LFE94
 9135 00d8 00000000 		.4byte	.LFB95
 9136 00dc 84000000 		.4byte	.LFE95
 9137 00e0 00000000 		.4byte	.LFB96
 9138 00e4 30000000 		.4byte	.LFE96
 9139 00e8 00000000 		.4byte	.LFB97
 9140 00ec 2C000000 		.4byte	.LFE97
 9141 00f0 00000000 		.4byte	.LFB98
 9142 00f4 8C000000 		.4byte	.LFE98
 9143 00f8 00000000 		.4byte	.LFB99
 9144 00fc 18000000 		.4byte	.LFE99
 9145 0100 00000000 		.4byte	.LFB100
 9146 0104 0E000000 		.4byte	.LFE100
 9147 0108 00000000 		.4byte	.LFB101
 9148 010c 80000000 		.4byte	.LFE101
 9149 0110 00000000 		.4byte	.LFB102
 9150 0114 58000000 		.4byte	.LFE102
 9151 0118 00000000 		.4byte	.LFB103
 9152 011c 36000000 		.4byte	.LFE103
 9153 0120 00000000 		.4byte	.LFB104
 9154 0124 38000000 		.4byte	.LFE104
 9155 0128 00000000 		.4byte	.LFB105
 9156 012c 20000000 		.4byte	.LFE105
 9157 0130 00000000 		.4byte	.LFB106
 9158 0134 40000000 		.4byte	.LFE106
 9159 0138 00000000 		.4byte	.LFB107
 9160 013c 1C000000 		.4byte	.LFE107
 9161 0140 00000000 		.4byte	.LFB108
 9162 0144 00010000 		.4byte	.LFE108
 9163 0148 00000000 		.4byte	.LFB109
 9164 014c C8000000 		.4byte	.LFE109
 9165 0150 00000000 		.4byte	.LFB110
 9166 0154 F0000000 		.4byte	.LFE110
 9167 0158 00000000 		.4byte	.LFB111
 9168 015c 30000000 		.4byte	.LFE111
 9169 0160 00000000 		.4byte	.LFB112
 9170 0164 28000000 		.4byte	.LFE112
 9171 0168 00000000 		.4byte	.LFB113
 9172 016c 90000000 		.4byte	.LFE113
 9173 0170 00000000 		.4byte	.LFB114
 9174 0174 B4000000 		.4byte	.LFE114
 9175 0178 00000000 		.4byte	.LFB115
 9176 017c 10010000 		.4byte	.LFE115
 9177 0180 00000000 		.4byte	.LFB116
 9178 0184 4C010000 		.4byte	.LFE116
 9179 0188 00000000 		.4byte	.LFB117
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 256
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 256
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 256
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 256
>>>>>>> parent of cb49844... test


 9180 018c E4000000 		.4byte	.LFE117
 9181 0190 00000000 		.4byte	.LFB118
 9182 0194 4C000000 		.4byte	.LFE118
 9183 0198 00000000 		.4byte	.LFB119
 9184 019c CC000000 		.4byte	.LFE119
 9185 01a0 00000000 		.4byte	0
 9186 01a4 00000000 		.4byte	0
 9187              		.section	.debug_line,"",%progbits
 9188              	.Ldebug_line0:
 9189 0000 A60A0000 		.section	.debug_str,"MS",%progbits,1
 9189      02005202 
 9189      00000201 
 9189      FB0E0D00 
 9189      01010101 
 9190              	.LASF49:
 9191 0000 70635461 		.ascii	"pcTaskName\000"
 9191      736B4E61 
 9191      6D6500
 9192              	.LASF35:
 9193 000b 75784E75 		.ascii	"uxNumberOfItems\000"
 9193      6D626572 
 9193      4F664974 
 9193      656D7300 
 9194              	.LASF47:
 9195 001b 75785072 		.ascii	"uxPriority\000"
 9195      696F7269 
 9195      747900
 9196              	.LASF148:
 9197 0026 7078436F 		.ascii	"pxConstList\000"
 9197      6E73744C 
 9197      69737400 
 9198              	.LASF114:
 9199 0032 70785374 		.ascii	"pxStateList\000"
 9199      6174654C 
 9199      69737400 
 9200              	.LASF57:
 9201 003e 65537573 		.ascii	"eSuspended\000"
 9201      70656E64 
 9201      656400
 9202              	.LASF59:
 9203 0049 65496E76 		.ascii	"eInvalid\000"
 9203      616C6964 
 9203      00
 9204              	.LASF135:
 9205 0052 75785065 		.ascii	"uxPendedCounts\000"
 9205      6E646564 
 9205      436F756E 
 9205      747300
 9206              	.LASF195:
 9207 0061 756C4269 		.ascii	"ulBitsToClearOnExit\000"
 9207      7473546F 
 9207      436C6561 
 9207      724F6E45 
 9207      78697400 
 9208              	.LASF96:
 9209 0075 70727649 		.ascii	"prvInitialiseNewTask\000"
 9209      6E697469 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 257
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 257
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 257
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 257
>>>>>>> parent of cb49844... test


 9209      616C6973 
 9209      654E6577 
 9209      5461736B 
 9210              	.LASF204:
 9211 008a 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 9211      67686572 
 9211      5072696F 
 9211      72697479 
 9211      5461736B 
 9212              	.LASF61:
 9213 00a4 654E6F41 		.ascii	"eNoAction\000"
 9213      6374696F 
 9213      6E00
 9214              	.LASF218:
 9215 00ae 7578546F 		.ascii	"uxTopReadyPriority\000"
 9215      70526561 
 9215      64795072 
 9215      696F7269 
 9215      747900
 9216              	.LASF115:
 9217 00c1 70784465 		.ascii	"pxDelayedList\000"
 9217      6C617965 
 9217      644C6973 
 9217      7400
 9218              	.LASF0:
 9219 00cf 756E7369 		.ascii	"unsigned int\000"
 9219      676E6564 
 9219      20696E74 
 9219      00
 9220              	.LASF150:
 9221 00dc 70784576 		.ascii	"pxEventList\000"
 9221      656E744C 
 9221      69737400 
 9222              	.LASF219:
 9223 00e8 78536368 		.ascii	"xSchedulerRunning\000"
 9223      6564756C 
 9223      65725275 
 9223      6E6E696E 
 9223      6700
 9224              	.LASF36:
 9225 00fa 7078496E 		.ascii	"pxIndex\000"
 9225      64657800 
 9226              	.LASF24:
 9227 0102 53746163 		.ascii	"StackType_t\000"
 9227      6B547970 
 9227      655F7400 
 9228              	.LASF67:
 9229 010e 7854494D 		.ascii	"xTIME_OUT\000"
 9229      455F4F55 
 9229      5400
 9230              	.LASF214:
 9231 0118 75784465 		.ascii	"uxDeletedTasksWaitingCleanUp\000"
 9231      6C657465 
 9231      64546173 
 9231      6B735761 
 9231      6974696E 
 9232              	.LASF10:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 258
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 258
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 258
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 258
>>>>>>> parent of cb49844... test


 9233 0135 5F5F696E 		.ascii	"__int32_t\000"
 9233      7433325F 
 9233      7400
 9234              	.LASF33:
 9235 013f 784C4953 		.ascii	"xLIST_ITEM\000"
 9235      545F4954 
 9235      454D00
 9236              	.LASF209:
 9237 014a 70785265 		.ascii	"pxReadyTasksLists\000"
 9237      61647954 
 9237      61736B73 
 9237      4C697374 
 9237      7300
 9238              	.LASF229:
 9239 015c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 9239      43313120 
 9239      352E342E 
 9239      31203230 
 9239      31363036 
 9240 018f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 9240      20726576 
 9240      6973696F 
 9240      6E203233 
 9240      37373135 
 9241 01c2 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 9241      66756E63 
 9241      74696F6E 
 9241      2D736563 
 9241      74696F6E 
 9242              	.LASF202:
 9243 01ea 75634F72 		.ascii	"ucOriginalNotifyState\000"
 9243      6967696E 
 9243      616C4E6F 
 9243      74696679 
 9243      53746174 
 9244              	.LASF157:
 9245 0200 76546173 		.ascii	"vTaskSetTimeOutState\000"
 9245      6B536574 
 9245      54696D65 
 9245      4F757453 
 9245      74617465 
 9246              	.LASF203:
 9247 0215 78546173 		.ascii	"xTaskGenericNotifyFromISR\000"
 9247      6B47656E 
 9247      65726963 
 9247      4E6F7469 
 9247      66794672 
 9248              	.LASF141:
 9249 022f 78546173 		.ascii	"xTaskIncrementTick\000"
 9249      6B496E63 
 9249      72656D65 
 9249      6E745469 
 9249      636B00
 9250              	.LASF85:
 9251 0242 756C4269 		.ascii	"ulBitmap\000"
 9251      746D6170 
 9251      00
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccxlF6oO.s 			page 259
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 259
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 259
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 259
>>>>>>> parent of cb49844... test


 9252              	.LASF167:
 9253 024b 7844656C 		.ascii	"xDelayedTaskList1\000"
 9253      61796564 
 9253      5461736B 
 9253      4C697374 
 9253      3100
 9254              	.LASF168:
 9255 025d 7844656C 		.ascii	"xDelayedTaskList2\000"
 9255      61796564 
 9255      5461736B 
 9255      4C697374 
 9255      3200
 9256              	.LASF68:
 9257 026f 784F7665 		.ascii	"xOverflowCount\000"
 9257      72666C6F 
 9257      77436F75 
 9257      6E7400
 9258              	.LASF116:
 9259 027e 70784F76 		.ascii	"pxOverflowedDelayedList\000"
 9259      6572666C 
 9259      6F776564 
 9259      44656C61 
 9259      7965644C 
 9260              	.LASF74:
 9261 0296 756C5061 		.ascii	"ulParameters\000"
 9261      72616D65 
 9261      74657273 
 9261      00
 9262              	.LASF113:
 9263 02a3 65526574 		.ascii	"eReturn\000"
 9263      75726E00 
 9264              	.LASF129:
 9265 02ab 78546173 		.ascii	"xTaskToResume\000"
 9265      6B546F52 
 9265      6573756D 
 9265      6500
 9266              	.LASF118:
 9267 02b9 75785265 		.ascii	"uxReturn\000"
 9267      7475726E 
 9267      00
 9268              	.LASF188:
 9269 02c2 75785461 		.ascii	"uxTaskGetNumberOfTasks\000"
 9269      736B4765 
 9269      744E756D 
 9269      6265724F 
 9269      66546173 
<<<<<<< HEAD
 9270              	.LASF88:
 9271 02d9 70634E61 		.ascii	"pcName\000"
 9271      6D6500
 9272              	.LASF76:
 9273 02e0 74736B54 		.ascii	"tskTCB\000"
 9273      434200
 9274              	.LASF131:
 9275 02e7 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9275      76656449 
 9275      6E746572 
 9275      72757074 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 260


 9275      53746174 
 9276              	.LASF20:
 9277 02fe 75696E74 		.ascii	"uint32_t\000"
 9277      33325F74 
 9277      00
 9278              	.LASF53:
 9279 0307 75634E6F 		.ascii	"ucNotifyState\000"
 9279      74696679 
=======
 9270              	.LASF231:
 9271 02d9 433A5C55 		.ascii	"C:\\Users\\shevi\\Documents\\GitHub\\FYP_POSCCreato"
 9271      73657273 
 9271      5C736865 
 9271      76695C44 
 9271      6F63756D 
 9272 0307 725F4D61 		.ascii	"r_Master\\FYP_PSOCCreator_Master\\CORTEX_CY8C5588_P"
 9272      73746572 
 9272      5C465950 
 9272      5F50534F 
 9272      43437265 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 260


 9273 0338 536F435F 		.ascii	"SoC_Creator_GCC\\FreeRTOS_Demo.cydsn\000"
 9273      43726561 
 9273      746F725F 
 9273      4743435C 
 9273      46726565 
 9274              	.LASF88:
 9275 035c 70634E61 		.ascii	"pcName\000"
 9275      6D6500
 9276              	.LASF76:
 9277 0363 74736B54 		.ascii	"tskTCB\000"
 9277      434200
 9278              	.LASF131:
 9279 036a 75785361 		.ascii	"uxSavedInterruptStatus\000"
 9279      76656449 
 9279      6E746572 
 9279      72757074 
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
 9279      53746174 
 9280              	.LASF20:
 9281 0381 75696E74 		.ascii	"uint32_t\000"
 9281      33325F74 
 9281      00
 9282              	.LASF53:
 9283 038a 75634E6F 		.ascii	"ucNotifyState\000"
 9283      74696679 
 9283      53746174 
 9283      6500
 9284              	.LASF125:
 9285 0398 78596965 		.ascii	"xYieldRequired\000"
 9285      6C645265 
 9285      71756972 
 9285      656400
 9286              	.LASF78:
 9287 03a7 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 9287      6967696E 
 9287      616C4241 
 9287      53455052 
 9287      4900
 9288              	.LASF197:
 9289 03b9 78546173 		.ascii	"xTaskGenericNotify\000"
 9289      6B47656E 
 9289      65726963 
 9289      4E6F7469 
 9289      667900
 9290              	.LASF21:
 9291 03cc 666C6F61 		.ascii	"float\000"
 9291      7400
 9292              	.LASF154:
 9293 03d2 7078556E 		.ascii	"pxUnblockedTCB\000"
 9293      626C6F63 
 9293      6B656454 
 9293      434200
 9294              	.LASF89:
 9295 03e1 75735374 		.ascii	"usStackDepth\000"
 9295      61636B44 
 9295      65707468 
 9295      00
<<<<<<< HEAD
 9296              	.LASF64:
 9297 038a 65536574 		.ascii	"eSetValueWithOverwrite\000"
 9297      56616C75 
 9297      65576974 
 9297      684F7665 
 9297      72777269 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 261


 9298              	.LASF14:
 9299 03a1 6C6F6E67 		.ascii	"long long unsigned int\000"
 9299      206C6F6E 
 9299      6720756E 
 9299      7369676E 
 9299      65642069 
 9300              	.LASF138:
 9301 03b8 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 9301      6B476574 
 9301      5469636B 
 9301      436F756E 
 9301      7446726F 
 9302              	.LASF120:
 9303 03d1 75785361 		.ascii	"uxSavedInterruptState\000"
 9303      76656449 
 9303      6E746572 
 9303      72757074 
 9303      53746174 
 9304              	.LASF194:
 9305 03e7 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 9305      7473546F 
 9305      436C6561 
 9305      724F6E45 
 9305      6E747279 
 9306              	.LASF212:
 9307 03fc 7850656E 		.ascii	"xPendingReadyList\000"
 9307      64696E67 
 9307      52656164 
 9307      794C6973 
 9307      7400
 9308              	.LASF30:
 9309 040e 70785072 		.ascii	"pxPrevious\000"
 9309      6576696F 
 9309      757300
 9310              	.LASF213:
 9311 0419 78546173 		.ascii	"xTasksWaitingTermination\000"
 9311      6B735761 
 9311      6974696E 
 9311      67546572 
 9311      6D696E61 
 9312              	.LASF8:
 9313 0432 5F5F7569 		.ascii	"__uint16_t\000"
 9313      6E743136 
 9313      5F7400
 9314              	.LASF183:
 9315 043d 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 9315      6B507269 
 9315      6F726974 
 9315      79446973 
 9315      696E6865 
 9316              	.LASF130:
 9317 0461 78546173 		.ascii	"xTaskResumeFromISR\000"
 9317      6B526573 
 9317      756D6546 
 9317      726F6D49 
 9317      535200
 9318              	.LASF163:
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 262


 9319 0474 76546173 		.ascii	"vTaskSuspendAll\000"
 9319      6B537573 
 9319      70656E64 
 9319      416C6C00 
 9320              	.LASF174:
 9321 0484 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 9321      736B4765 
 9321      74537461 
 9321      636B4869 
 9321      67685761 
 9322              	.LASF66:
 9323 04a0 654E6F74 		.ascii	"eNotifyAction\000"
 9323      69667941 
 9323      6374696F 
 9323      6E00
 9324              	.LASF4:
 9325 04ae 73697A65 		.ascii	"size_t\000"
 9325      5F7400
 9326              	.LASF63:
 9327 04b5 65496E63 		.ascii	"eIncrement\000"
 9327      72656D65 
 9327      6E7400
 9328              	.LASF39:
 9329 04c0 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9329      495F4C49 
 9329      53545F49 
 9329      54454D00 
 9330              	.LASF172:
 9331 04d0 70756353 		.ascii	"pucStackByte\000"
 9331      7461636B 
 9331      42797465 
 9331      00
 9332              	.LASF34:
 9333 04dd 784C4953 		.ascii	"xLIST\000"
 9333      5400
 9334              	.LASF133:
 9335 04e3 76546173 		.ascii	"vTaskEndScheduler\000"
 9335      6B456E64 
 9335      53636865 
 9335      64756C65 
 9335      7200
 9336              	.LASF117:
 9337 04f5 75785461 		.ascii	"uxTaskPriorityGet\000"
 9337      736B5072 
 9337      696F7269 
 9337      74794765 
 9337      7400
 9338              	.LASF107:
 9339 0507 78436F6E 		.ascii	"xConstTickCount\000"
 9339      73745469 
 9339      636B436F 
 9339      756E7400 
 9340              	.LASF215:
 9341 0517 78537573 		.ascii	"xSuspendedTaskList\000"
 9341      70656E64 
 9341      65645461 
 9341      736B4C69 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 263


 9341      737400
 9342              	.LASF80:
 9343 052a 76506F72 		.ascii	"vPortSetBASEPRI\000"
 9343      74536574 
 9343      42415345 
 9343      50524900 
 9344              	.LASF173:
 9345 053a 756C436F 		.ascii	"ulCount\000"
 9345      756E7400 
 9346              	.LASF211:
 9347 0542 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 9347      6572666C 
 9347      6F774465 
 9347      6C617965 
 9347      64546173 
 9348              	.LASF143:
 9349 055c 70785465 		.ascii	"pxTemp\000"
 9349      6D7000
 9350              	.LASF149:
 9351 0563 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 9351      6B506C61 
 9351      63654F6E 
 9351      4576656E 
 9351      744C6973 
 9352              	.LASF108:
 9353 0579 76546173 		.ascii	"vTaskDelay\000"
 9353      6B44656C 
 9353      617900
 9354              	.LASF189:
 9355 0584 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 9355      736B496E 
 9355      6372656D 
 9355      656E744D 
 9355      75746578 
 9356              	.LASF43:
 9357 05a2 5461736B 		.ascii	"TaskControlBlock_t\000"
 9357      436F6E74 
 9357      726F6C42 
 9357      6C6F636B 
 9357      5F7400
 9358              	.LASF52:
 9359 05b5 756C4E6F 		.ascii	"ulNotifiedValue\000"
 9359      74696669 
 9359      65645661 
 9359      6C756500 
 9360              	.LASF155:
 9361 05c5 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 9361      6B52656D 
 9361      6F766546 
 9361      726F6D55 
 9361      6E6F7264 
 9362              	.LASF51:
 9363 05e7 75784D75 		.ascii	"uxMutexesHeld\000"
 9363      74657865 
 9363      7348656C 
 9363      6400
 9364              	.LASF182:
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 264


 9365 05f5 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 9365      6B507269 
 9365      6F726974 
 9365      79446973 
 9365      696E6865 
 9366              	.LASF153:
 9367 060d 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9367      6B52656D 
 9367      6F766546 
 9367      726F6D45 
 9367      76656E74 
 9368              	.LASF16:
 9369 0626 63686172 		.ascii	"char\000"
 9369      00
 9370              	.LASF38:
 9371 062b 4C697374 		.ascii	"ListItem_t\000"
 9371      4974656D 
 9371      5F7400
 9372              	.LASF65:
 9373 0636 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 9373      56616C75 
 9373      65576974 
 9373      686F7574 
 9373      4F766572 
 9374              	.LASF79:
 9375 0650 756C4E65 		.ascii	"ulNewBASEPRI\000"
 9375      77424153 
 9375      45505249 
 9375      00
 9376              	.LASF26:
 9377 065d 55426173 		.ascii	"UBaseType_t\000"
 9377      65547970 
 9377      655F7400 
 9378              	.LASF94:
 9379 0669 756C5374 		.ascii	"ulStackDepth\000"
 9379      61636B44 
 9379      65707468 
=======
 9296              	.LASF191:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 261


 9297 03ee 78436C65 		.ascii	"xClearCountOnExit\000"
 9297      6172436F 
 9297      756E744F 
 9297      6E457869 
 9297      7400
 9298              	.LASF162:
 9299 0400 78456C61 		.ascii	"xElapsedTime\000"
 9299      70736564 
 9299      54696D65 
 9299      00
 9300              	.LASF64:
 9301 040d 65536574 		.ascii	"eSetValueWithOverwrite\000"
 9301      56616C75 
 9301      65576974 
 9301      684F7665 
 9301      72777269 
 9302              	.LASF14:
 9303 0424 6C6F6E67 		.ascii	"long long unsigned int\000"
 9303      206C6F6E 
 9303      6720756E 
 9303      7369676E 
 9303      65642069 
 9304              	.LASF138:
 9305 043b 78546173 		.ascii	"xTaskGetTickCountFromISR\000"
 9305      6B476574 
 9305      5469636B 
 9305      436F756E 
 9305      7446726F 
 9306              	.LASF120:
 9307 0454 75785361 		.ascii	"uxSavedInterruptState\000"
 9307      76656449 
 9307      6E746572 
 9307      72757074 
 9307      53746174 
 9308              	.LASF194:
 9309 046a 756C4269 		.ascii	"ulBitsToClearOnEntry\000"
 9309      7473546F 
 9309      436C6561 
 9309      724F6E45 
 9309      6E747279 
 9310              	.LASF212:
 9311 047f 7850656E 		.ascii	"xPendingReadyList\000"
 9311      64696E67 
 9311      52656164 
 9311      794C6973 
 9311      7400
 9312              	.LASF30:
 9313 0491 70785072 		.ascii	"pxPrevious\000"
 9313      6576696F 
 9313      757300
 9314              	.LASF213:
 9315 049c 78546173 		.ascii	"xTasksWaitingTermination\000"
 9315      6B735761 
 9315      6974696E 
 9315      67546572 
 9315      6D696E61 
 9316              	.LASF8:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 262


 9317 04b5 5F5F7569 		.ascii	"__uint16_t\000"
 9317      6E743136 
 9317      5F7400
 9318              	.LASF183:
 9319 04c0 76546173 		.ascii	"vTaskPriorityDisinheritAfterTimeout\000"
 9319      6B507269 
 9319      6F726974 
 9319      79446973 
 9319      696E6865 
 9320              	.LASF130:
 9321 04e4 78546173 		.ascii	"xTaskResumeFromISR\000"
 9321      6B526573 
 9321      756D6546 
 9321      726F6D49 
 9321      535200
 9322              	.LASF163:
 9323 04f7 76546173 		.ascii	"vTaskSuspendAll\000"
 9323      6B537573 
 9323      70656E64 
 9323      416C6C00 
 9324              	.LASF174:
 9325 0507 75785461 		.ascii	"uxTaskGetStackHighWaterMark\000"
 9325      736B4765 
 9325      74537461 
 9325      636B4869 
 9325      67685761 
 9326              	.LASF66:
 9327 0523 654E6F74 		.ascii	"eNotifyAction\000"
 9327      69667941 
 9327      6374696F 
 9327      6E00
 9328              	.LASF4:
 9329 0531 73697A65 		.ascii	"size_t\000"
 9329      5F7400
 9330              	.LASF63:
 9331 0538 65496E63 		.ascii	"eIncrement\000"
 9331      72656D65 
 9331      6E7400
 9332              	.LASF39:
 9333 0543 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 9333      495F4C49 
 9333      53545F49 
 9333      54454D00 
 9334              	.LASF172:
 9335 0553 70756353 		.ascii	"pucStackByte\000"
 9335      7461636B 
 9335      42797465 
 9335      00
 9336              	.LASF34:
 9337 0560 784C4953 		.ascii	"xLIST\000"
 9337      5400
 9338              	.LASF133:
 9339 0566 76546173 		.ascii	"vTaskEndScheduler\000"
 9339      6B456E64 
 9339      53636865 
 9339      64756C65 
 9339      7200
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 263


 9340              	.LASF117:
 9341 0578 75785461 		.ascii	"uxTaskPriorityGet\000"
 9341      736B5072 
 9341      696F7269 
 9341      74794765 
 9341      7400
 9342              	.LASF107:
 9343 058a 78436F6E 		.ascii	"xConstTickCount\000"
 9343      73745469 
 9343      636B436F 
 9343      756E7400 
 9344              	.LASF215:
 9345 059a 78537573 		.ascii	"xSuspendedTaskList\000"
 9345      70656E64 
 9345      65645461 
 9345      736B4C69 
 9345      737400
 9346              	.LASF80:
 9347 05ad 76506F72 		.ascii	"vPortSetBASEPRI\000"
 9347      74536574 
 9347      42415345 
 9347      50524900 
 9348              	.LASF173:
 9349 05bd 756C436F 		.ascii	"ulCount\000"
 9349      756E7400 
 9350              	.LASF211:
 9351 05c5 70784F76 		.ascii	"pxOverflowDelayedTaskList\000"
 9351      6572666C 
 9351      6F774465 
 9351      6C617965 
 9351      64546173 
 9352              	.LASF143:
 9353 05df 70785465 		.ascii	"pxTemp\000"
 9353      6D7000
 9354              	.LASF149:
 9355 05e6 76546173 		.ascii	"vTaskPlaceOnEventList\000"
 9355      6B506C61 
 9355      63654F6E 
 9355      4576656E 
 9355      744C6973 
 9356              	.LASF108:
 9357 05fc 76546173 		.ascii	"vTaskDelay\000"
 9357      6B44656C 
 9357      617900
 9358              	.LASF189:
 9359 0607 70765461 		.ascii	"pvTaskIncrementMutexHeldCount\000"
 9359      736B496E 
 9359      6372656D 
 9359      656E744D 
 9359      75746578 
 9360              	.LASF43:
 9361 0625 5461736B 		.ascii	"TaskControlBlock_t\000"
 9361      436F6E74 
 9361      726F6C42 
 9361      6C6F636B 
 9361      5F7400
 9362              	.LASF52:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 264


 9363 0638 756C4E6F 		.ascii	"ulNotifiedValue\000"
 9363      74696669 
 9363      65645661 
 9363      6C756500 
 9364              	.LASF155:
 9365 0648 76546173 		.ascii	"vTaskRemoveFromUnorderedEventList\000"
 9365      6B52656D 
 9365      6F766546 
 9365      726F6D55 
 9365      6E6F7264 
 9366              	.LASF51:
 9367 066a 75784D75 		.ascii	"uxMutexesHeld\000"
 9367      74657865 
 9367      7348656C 
 9367      6400
 9368              	.LASF182:
 9369 0678 78546173 		.ascii	"xTaskPriorityDisinherit\000"
 9369      6B507269 
 9369      6F726974 
 9369      79446973 
 9369      696E6865 
 9370              	.LASF153:
 9371 0690 78546173 		.ascii	"xTaskRemoveFromEventList\000"
 9371      6B52656D 
 9371      6F766546 
 9371      726F6D45 
 9371      76656E74 
 9372              	.LASF16:
 9373 06a9 63686172 		.ascii	"char\000"
 9373      00
 9374              	.LASF38:
 9375 06ae 4C697374 		.ascii	"ListItem_t\000"
 9375      4974656D 
 9375      5F7400
 9376              	.LASF65:
 9377 06b9 65536574 		.ascii	"eSetValueWithoutOverwrite\000"
 9377      56616C75 
 9377      65576974 
 9377      686F7574 
 9377      4F766572 
 9378              	.LASF79:
 9379 06d3 756C4E65 		.ascii	"ulNewBASEPRI\000"
 9379      77424153 
 9379      45505249 
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
 9379      00
 9380              	.LASF26:
 9381 06e0 55426173 		.ascii	"UBaseType_t\000"
 9381      65547970 
 9381      655F7400 
 9382              	.LASF94:
 9383 06ec 756C5374 		.ascii	"ulStackDepth\000"
 9383      61636B44 
 9383      65707468 
 9383      00
 9384              	.LASF72:
 9385 06f9 70764261 		.ascii	"pvBaseAddress\000"
 9385      73654164 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 265


 9385      64726573 
 9385      7300
 9386              	.LASF106:
 9387 0707 7853686F 		.ascii	"xShouldDelay\000"
 9387      756C6444 
 9387      656C6179 
 9387      00
<<<<<<< HEAD
 9388              	.LASF190:
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 265


 9389 06a6 756C5461 		.ascii	"ulTaskNotifyTake\000"
 9389      736B4E6F 
 9389      74696679 
 9389      54616B65 
 9389      00
 9390              	.LASF40:
 9391 06b7 4D696E69 		.ascii	"MiniListItem_t\000"
 9391      4C697374 
 9391      4974656D 
 9391      5F7400
 9392              	.LASF193:
 9393 06c6 78546173 		.ascii	"xTaskNotifyWait\000"
 9393      6B4E6F74 
 9393      69667957 
 9393      61697400 
 9394              	.LASF110:
 9395 06d6 78546173 		.ascii	"xTaskCreate\000"
 9395      6B437265 
 9395      61746500 
 9396              	.LASF97:
 9397 06e2 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 9397      64644E65 
 9397      77546173 
 9397      6B546F52 
 9397      65616479 
 9398              	.LASF17:
 9399 06fb 75696E74 		.ascii	"uint8_t\000"
 9399      385F7400 
 9400              	.LASF55:
 9401 0703 65526561 		.ascii	"eReady\000"
 9401      647900
 9402              	.LASF111:
 9403 070a 65546173 		.ascii	"eTaskGetState\000"
 9403      6B476574 
 9403      53746174 
 9403      6500
 9404              	.LASF92:
 9405 0718 70784E65 		.ascii	"pxNewTCB\000"
 9405      77544342 
 9405      00
 9406              	.LASF87:
 9407 0721 70785461 		.ascii	"pxTaskCode\000"
 9407      736B436F 
 9407      646500
 9408              	.LASF75:
 9409 072c 4D656D6F 		.ascii	"MemoryRegion_t\000"
 9409      72795265 
 9409      67696F6E 
 9409      5F7400
 9410              	.LASF224:
 9411 073b 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 9411      74546173 
 9411      6B556E62 
 9411      6C6F636B 
 9411      54696D65 
 9412              	.LASF82:
 9413 0750 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 266


 9413      72745261 
 9413      69736542 
 9413      41534550 
 9413      524900
 9414              	.LASF217:
 9415 0763 78546963 		.ascii	"xTickCount\000"
 9415      6B436F75 
 9415      6E7400
 9416              	.LASF1:
 9417 076e 6C6F6E67 		.ascii	"long long int\000"
 9417      206C6F6E 
 9417      6720696E 
 9417      7400
 9418              	.LASF58:
 9419 077c 6544656C 		.ascii	"eDeleted\000"
 9419      65746564 
 9419      00
 9420              	.LASF83:
 9421 0785 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 9421      7274436F 
 9421      756E744C 
 9421      65616469 
 9421      6E675A65 
 9422              	.LASF73:
 9423 079d 756C4C65 		.ascii	"ulLengthInBytes\000"
 9423      6E677468 
 9423      496E4279 
 9423      74657300 
 9424              	.LASF25:
 9425 07ad 42617365 		.ascii	"BaseType_t\000"
 9425      54797065 
 9425      5F7400
 9426              	.LASF146:
 9427 07b8 756C4368 		.ascii	"ulCheckValue\000"
 9427      65636B56 
 9427      616C7565 
 9427      00
 9428              	.LASF177:
 9429 07c5 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 9429      65736574 
 9429      4E657874 
 9429      5461736B 
 9429      556E626C 
 9430              	.LASF69:
 9431 07e1 7854696D 		.ascii	"xTimeOnEntering\000"
 9431      654F6E45 
 9431      6E746572 
 9431      696E6700 
 9432              	.LASF122:
 9433 07f1 75784E65 		.ascii	"uxNewPriority\000"
 9433      77507269 
 9433      6F726974 
 9433      7900
 9434              	.LASF23:
 9435 07ff 5461736B 		.ascii	"TaskFunction_t\000"
 9435      46756E63 
 9435      74696F6E 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 267


 9435      5F7400
 9436              	.LASF29:
 9437 080e 70784E65 		.ascii	"pxNext\000"
 9437      787400
 9438              	.LASF201:
 9439 0815 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 9439      72657669 
 9439      6F75734E 
 9439      6F746966 
 9439      69636174 
 9440              	.LASF158:
 9441 0832 70785469 		.ascii	"pxTimeOut\000"
 9441      6D654F75 
 9441      7400
 9442              	.LASF119:
 9443 083c 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 9443      736B5072 
 9443      696F7269 
 9443      74794765 
 9443      7446726F 
 9444              	.LASF136:
 9445 0855 78546173 		.ascii	"xTaskGetTickCount\000"
 9445      6B476574 
 9445      5469636B 
 9445      436F756E 
 9445      7400
 9446              	.LASF70:
 9447 0867 54696D65 		.ascii	"TimeOut_t\000"
 9447      4F75745F 
 9447      7400
 9448              	.LASF159:
 9449 0871 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 9449      6B496E74 
 9449      65726E61 
 9449      6C536574 
 9449      54696D65 
 9450              	.LASF223:
 9451 088e 75785461 		.ascii	"uxTaskNumber\000"
 9451      736B4E75 
 9451      6D626572 
 9451      00
 9452              	.LASF231:
 9453 089b 5C5C6164 		.ascii	"\\\\ad.monash.edu\\home\\User041\\sdsir3\\Documents"
 9453      2E6D6F6E 
 9453      6173682E 
 9453      6564755C 
 9453      686F6D65 
 9454 08c8 5C476974 		.ascii	"\\GitHub\\FYP_POSCCreator_Master\\FYP_PSOCCreator_M"
 9454      4875625C 
 9454      4659505F 
 9454      504F5343 
 9454      43726561 
 9455 08f8 61737465 		.ascii	"aster\\CORTEX_CY8C5588_PSoC_Creator_GCC\\FreeRTOS_D"
 9455      725C434F 
 9455      52544558 
 9455      5F435938 
 9455      43353538 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 268


 9456 0929 656D6F2E 		.ascii	"emo.cydsn\000"
 9456      63796473 
 9456      6E00
 9457              	.LASF42:
 9458 0933 5461736B 		.ascii	"TaskHandle_t\000"
 9458      48616E64 
 9458      6C655F74 
 9458      00
 9459              	.LASF200:
 9460 0940 65416374 		.ascii	"eAction\000"
 9460      696F6E00 
 9461              	.LASF84:
 9462 0948 756C4E65 		.ascii	"ulNewMaskValue\000"
 9462      774D6173 
 9462      6B56616C 
 9462      756500
 9463              	.LASF187:
 9464 0957 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 9464      736B5265 
 9464      73657445 
 9464      76656E74 
 9464      4974656D 
 9465              	.LASF121:
 9466 0971 76546173 		.ascii	"vTaskPrioritySet\000"
 9466      6B507269 
 9466      6F726974 
 9466      79536574 
 9466      00
 9467              	.LASF60:
 9468 0982 65546173 		.ascii	"eTaskState\000"
 9468      6B537461 
 9468      746500
 9469              	.LASF41:
 9470 098d 4C697374 		.ascii	"List_t\000"
 9470      5F7400
 9471              	.LASF140:
 9472 0994 78546173 		.ascii	"xTaskToQuery\000"
 9472      6B546F51 
 9472      75657279 
 9472      00
 9473              	.LASF27:
 9474 09a1 5469636B 		.ascii	"TickType_t\000"
 9474      54797065 
 9474      5F7400
 9475              	.LASF198:
 9476 09ac 78546173 		.ascii	"xTaskToNotify\000"
 9476      6B546F4E 
 9476      6F746966 
 9476      7900
 9477              	.LASF112:
 9478 09ba 78546173 		.ascii	"xTask\000"
 9478      6B00
 9479              	.LASF62:
 9480 09c0 65536574 		.ascii	"eSetBits\000"
 9480      42697473 
 9480      00
 9481              	.LASF2:
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 269


 9482 09c9 6C6F6E67 		.ascii	"long double\000"
 9482      20646F75 
 9482      626C6500 
 9483              	.LASF71:
 9484 09d5 784D454D 		.ascii	"xMEMORY_REGION\000"
 9484      4F52595F 
 9484      52454749 
 9484      4F4E00
 9485              	.LASF18:
 9486 09e4 75696E74 		.ascii	"uint16_t\000"
 9486      31365F74 
 9486      00
 9487              	.LASF100:
 9488 09ed 76546173 		.ascii	"vTaskDelete\000"
 9488      6B44656C 
 9488      65746500 
 9489              	.LASF186:
 9490 09f9 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 9490      6C794F6E 
 9490      654D7574 
 9490      65784865 
 9490      6C6400
 9491              	.LASF185:
 9492 0a0c 75785072 		.ascii	"uxPriorityToUse\000"
 9492      696F7269 
 9492      7479546F 
 9492      55736500 
 9493              	.LASF144:
 9494 0a1c 76546173 		.ascii	"vTaskSwitchContext\000"
 9494      6B537769 
 9494      74636843 
 9494      6F6E7465 
 9494      787400
 9495              	.LASF222:
 9496 0a2f 784E756D 		.ascii	"xNumOfOverflows\000"
 9496      4F664F76 
 9496      6572666C 
 9496      6F777300 
 9497              	.LASF225:
 9498 0a3f 7849646C 		.ascii	"xIdleTaskHandle\000"
 9498      65546173 
 9498      6B48616E 
 9498      646C6500 
 9499              	.LASF184:
 9500 0a4f 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 9500      67686573 
 9500      74507269 
 9500      6F726974 
 9500      79576169 
 9501              	.LASF7:
 9502 0a6c 73686F72 		.ascii	"short int\000"
 9502      7420696E 
 9502      7400
 9503              	.LASF90:
 9504 0a76 70765061 		.ascii	"pvParameters\000"
 9504      72616D65 
 9504      74657273 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 270


 9504      00
 9505              	.LASF28:
 9506 0a83 78497465 		.ascii	"xItemValue\000"
 9506      6D56616C 
 9506      756500
 9507              	.LASF11:
 9508 0a8e 6C6F6E67 		.ascii	"long int\000"
 9508      20696E74 
 9508      00
 9509              	.LASF227:
 9510 0a97 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9510      52784275 
 9510      66666572 
 9510      00
 9511              	.LASF134:
 9512 0aa4 78546173 		.ascii	"xTaskResumeAll\000"
 9512      6B526573 
 9512      756D6541 
 9512      6C6C00
 9513              	.LASF205:
 9514 0ab3 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 9514      6B4E6F74 
 9514      69667947 
 9514      69766546 
 9514      726F6D49 
 9515              	.LASF210:
 9516 0aca 70784465 		.ascii	"pxDelayedTaskList\000"
 9516      6C617965 
 9516      64546173 
 9516      6B4C6973 
 9516      7400
 9517              	.LASF170:
 9518 0adc 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 9518      61736B49 
 9518      73546173 
 9518      6B537573 
 9518      70656E64 
 9519              	.LASF142:
 9520 0af3 78537769 		.ascii	"xSwitchRequired\000"
 9520      74636852 
 9520      65717569 
 9520      72656400 
 9521              	.LASF180:
 9522 0b03 70784D75 		.ascii	"pxMutexHolder\000"
 9522      74657848 
 9522      6F6C6465 
 9522      7200
 9523              	.LASF48:
 9524 0b11 70785374 		.ascii	"pxStack\000"
 9524      61636B00 
 9525              	.LASF98:
 9526 0b19 78546173 		.ascii	"xTaskToDelete\000"
 9526      6B546F44 
 9526      656C6574 
 9526      6500
 9527              	.LASF199:
 9528 0b27 756C5661 		.ascii	"ulValue\000"
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 271


 9528      6C756500 
 9529              	.LASF127:
 9530 0b2f 78546173 		.ascii	"xTaskToSuspend\000"
 9530      6B546F53 
 9530      75737065 
 9530      6E6400
 9531              	.LASF160:
 9532 0b3e 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9532      6B436865 
 9532      636B466F 
 9532      7254696D 
 9532      654F7574 
 9533              	.LASF102:
 9534 0b53 70785072 		.ascii	"pxPreviousWakeTime\000"
 9534      6576696F 
 9534      75735761 
 9534      6B655469 
 9534      6D6500
 9535              	.LASF5:
 9536 0b66 5F5F7569 		.ascii	"__uint8_t\000"
 9536      6E74385F 
 9536      7400
 9537              	.LASF86:
 9538 0b70 75635265 		.ascii	"ucReturn\000"
 9538      7475726E 
 9538      00
 9539              	.LASF196:
 9540 0b79 70756C4E 		.ascii	"pulNotificationValue\000"
 9540      6F746966 
 9540      69636174 
 9540      696F6E56 
 9540      616C7565 
 9541              	.LASF93:
 9542 0b8e 78526574 		.ascii	"xReturn\000"
 9542      75726E00 
 9543              	.LASF15:
 9544 0b96 73697A65 		.ascii	"sizetype\000"
 9544      74797065 
 9544      00
 9545              	.LASF164:
 9546 0b9f 76546173 		.ascii	"vTaskMissedYield\000"
 9546      6B4D6973 
 9546      73656459 
 9546      69656C64 
 9546      00
 9547              	.LASF220:
 9548 0bb0 75785065 		.ascii	"uxPendedTicks\000"
 9548      6E646564 
 9548      5469636B 
 9548      7300
 9549              	.LASF13:
 9550 0bbe 6C6F6E67 		.ascii	"long unsigned int\000"
 9550      20756E73 
 9550      69676E65 
 9550      6420696E 
 9550      7400
 9551              	.LASF81:
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 272


 9552 0bd0 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 9552      74526169 
 9552      73654241 
 9552      53455052 
 9552      4900
 9553              	.LASF179:
 9554 0be2 78546173 		.ascii	"xTaskPriorityInherit\000"
 9554      6B507269 
 9554      6F726974 
 9554      79496E68 
 9554      65726974 
 9555              	.LASF175:
 9556 0bf7 70756345 		.ascii	"pucEndOfStack\000"
 9556      6E644F66 
 9556      53746163 
 9556      6B00
 9557              	.LASF181:
 9558 0c05 70784D75 		.ascii	"pxMutexHolderTCB\000"
 9558      74657848 
 9558      6F6C6465 
 9558      72544342 
 9558      00
 9559              	.LASF139:
 9560 0c16 70635461 		.ascii	"pcTaskGetName\000"
 9560      736B4765 
 9560      744E616D 
 9560      6500
 9561              	.LASF19:
 9562 0c24 696E7433 		.ascii	"int32_t\000"
 9562      325F7400 
 9563              	.LASF137:
 9564 0c2c 78546963 		.ascii	"xTicks\000"
 9564      6B7300
 9565              	.LASF132:
 9566 0c33 76546173 		.ascii	"vTaskStartScheduler\000"
 9566      6B537461 
 9566      72745363 
 9566      68656475 
 9566      6C657200 
 9567              	.LASF208:
 9568 0c47 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 9568      426C6F63 
 9568      6B496E64 
 9568      6566696E 
 9568      6974656C 
 9569              	.LASF54:
 9570 0c5d 6552756E 		.ascii	"eRunning\000"
 9570      6E696E67 
 9570      00
 9571              	.LASF145:
 9572 0c66 70756C53 		.ascii	"pulStack\000"
 9572      7461636B 
 9572      00
 9573              	.LASF32:
 9574 0c6f 7078436F 		.ascii	"pxContainer\000"
 9574      6E746169 
 9574      6E657200 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 273


 9575              	.LASF109:
 9576 0c7b 78546963 		.ascii	"xTicksToDelay\000"
 9576      6B73546F 
 9576      44656C61 
 9576      7900
 9577              	.LASF6:
 9578 0c89 756E7369 		.ascii	"unsigned char\000"
 9578      676E6564 
 9578      20636861 
 9578      7200
 9579              	.LASF152:
 9580 0c97 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 9580      6B506C61 
 9580      63654F6E 
 9580      556E6F72 
 9580      64657265 
 9581              	.LASF12:
 9582 0cb6 5F5F7569 		.ascii	"__uint32_t\000"
 9582      6E743332 
 9582      5F7400
 9583              	.LASF206:
 9584 0cc1 78546173 		.ascii	"xTaskNotifyStateClear\000"
 9584      6B4E6F74 
 9584      69667953 
 9584      74617465 
 9584      436C6561 
 9585              	.LASF161:
 9586 0cd7 70785469 		.ascii	"pxTicksToWait\000"
 9586      636B7354 
 9586      6F576169 
 9586      7400
 9587              	.LASF147:
 9588 0ce5 7578546F 		.ascii	"uxTopPriority\000"
 9588      70507269 
 9588      6F726974 
 9588      7900
 9589              	.LASF50:
 9590 0cf3 75784261 		.ascii	"uxBasePriority\000"
 9590      73655072 
 9590      696F7269 
 9590      747900
 9591              	.LASF101:
 9592 0d02 76546173 		.ascii	"vTaskDelayUntil\000"
 9592      6B44656C 
 9592      6179556E 
 9592      74696C00 
 9593              	.LASF46:
 9594 0d12 78457665 		.ascii	"xEventListItem\000"
 9594      6E744C69 
 9594      73744974 
 9594      656D00
 9595              	.LASF124:
 9596 0d21 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 9596      696F7269 
 9596      74795573 
 9596      65644F6E 
 9596      456E7472 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 274


 9597              	.LASF77:
 9598 0d37 5443425F 		.ascii	"TCB_t\000"
 9598      7400
 9599              	.LASF151:
 9600 0d3d 78546963 		.ascii	"xTicksToWait\000"
 9600      6B73546F 
 9600      57616974 
 9600      00
 9601              	.LASF31:
 9602 0d4a 70764F77 		.ascii	"pvOwner\000"
 9602      6E657200 
 9603              	.LASF176:
 9604 0d52 70727644 		.ascii	"prvDeleteTCB\000"
 9604      656C6574 
 9604      65544342 
 9604      00
 9605              	.LASF56:
 9606 0d5f 65426C6F 		.ascii	"eBlocked\000"
 9606      636B6564 
 9606      00
 9607              	.LASF126:
 9608 0d68 76546173 		.ascii	"vTaskSuspend\000"
 9608      6B537573 
 9608      70656E64 
 9608      00
 9609              	.LASF105:
 9610 0d75 78416C72 		.ascii	"xAlreadyYielded\000"
 9610      65616479 
 9610      5969656C 
 9610      64656400 
 9611              	.LASF178:
 9612 0d85 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9612      6B476574 
 9612      43757272 
 9612      656E7454 
 9612      61736B48 
 9613              	.LASF171:
 9614 0d9f 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 9614      61736B43 
 9614      6865636B 
 9614      46726565 
 9614      53746163 
 9615              	.LASF95:
 9616 0dba 78526567 		.ascii	"xRegions\000"
 9616      696F6E73 
 9616      00
 9617              	.LASF207:
 9618 0dc3 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 9618      64644375 
 9618      7272656E 
 9618      74546173 
 9618      6B546F44 
 9619              	.LASF230:
 9620 0de2 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS_Source\\tasks.c\000"
 9620      2E5C4672 
 9620      65655254 
 9620      4F535F53 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 275


 9620      6F757263 
 9621              	.LASF228:
 9622 0e00 70784375 		.ascii	"pxCurrentTCB\000"
 9622      7272656E 
 9622      74544342 
 9622      00
 9623              	.LASF216:
 9624 0e0d 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 9624      7272656E 
 9624      744E756D 
 9624      6265724F 
 9624      66546173 
 9625              	.LASF103:
 9626 0e24 7854696D 		.ascii	"xTimeIncrement\000"
 9626      65496E63 
 9626      72656D65 
 9626      6E7400
 9627              	.LASF3:
 9628 0e33 7369676E 		.ascii	"signed char\000"
 9628      65642063 
 9628      68617200 
 9629              	.LASF9:
 9630 0e3f 73686F72 		.ascii	"short unsigned int\000"
 9630      7420756E 
 9630      7369676E 
 9630      65642069 
 9630      6E7400
 9631              	.LASF104:
 9632 0e52 7854696D 		.ascii	"xTimeToWake\000"
 9632      65546F57 
 9632      616B6500 
 9633              	.LASF45:
 9634 0e5e 78537461 		.ascii	"xStateListItem\000"
 9634      74654C69 
 9634      73744974 
 9634      656D00
 9635              	.LASF99:
 9636 0e6d 70785443 		.ascii	"pxTCB\000"
 9636      4200
 9637              	.LASF22:
 9638 0e73 646F7562 		.ascii	"double\000"
 9638      6C6500
 9639              	.LASF226:
 9640 0e7a 75785363 		.ascii	"uxSchedulerSuspended\000"
 9640      68656475 
 9640      6C657253 
 9640      75737065 
 9640      6E646564 
 9641              	.LASF44:
 9642 0e8f 7078546F 		.ascii	"pxTopOfStack\000"
 9642      704F6653 
 9642      7461636B 
 9642      00
 9643              	.LASF128:
 9644 0e9c 76546173 		.ascii	"vTaskResume\000"
 9644      6B526573 
 9644      756D6500 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc5En26b.s 			page 276


 9645              	.LASF166:
 9646 0ea8 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9646      6E697469 
 9646      616C6973 
 9646      65546173 
 9646      6B4C6973 
 9647              	.LASF156:
 9648 0ebf 70784576 		.ascii	"pxEventListItem\000"
 9648      656E744C 
 9648      69737449 
 9648      74656D00 
 9649              	.LASF91:
 9650 0ecf 70784372 		.ascii	"pxCreatedTask\000"
 9650      65617465 
 9650      64546173 
 9650      6B00
 9651              	.LASF169:
 9652 0edd 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 9652      6865636B 
 9652      5461736B 
 9652      73576169 
 9652      74696E67 
 9653              	.LASF192:
 9654 0efd 756C5265 		.ascii	"ulReturn\000"
 9654      7475726E 
 9654      00
 9655              	.LASF123:
 9656 0f06 75784375 		.ascii	"uxCurrentBasePriority\000"
 9656      7272656E 
 9656      74426173 
 9656      65507269 
 9656      6F726974 
 9657              	.LASF221:
 9658 0f1c 78596965 		.ascii	"xYieldPending\000"
 9658      6C645065 
 9658      6E64696E 
 9658      6700
 9659              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
=======
 9388              	.LASF165:
 9389 0714 70727649 		.ascii	"prvIdleTask\000"
 9389      646C6554 
 9389      61736B00 
 9390              	.LASF37:
 9391 0720 784C6973 		.ascii	"xListEnd\000"
 9391      74456E64 
 9391      00
 9392              	.LASF190:
 9393 0729 756C5461 		.ascii	"ulTaskNotifyTake\000"
 9393      736B4E6F 
 9393      74696679 
 9393      54616B65 
 9393      00
 9394              	.LASF40:
 9395 073a 4D696E69 		.ascii	"MiniListItem_t\000"
 9395      4C697374 
 9395      4974656D 
 9395      5F7400
 9396              	.LASF193:
 9397 0749 78546173 		.ascii	"xTaskNotifyWait\000"
 9397      6B4E6F74 
 9397      69667957 
 9397      61697400 
 9398              	.LASF110:
 9399 0759 78546173 		.ascii	"xTaskCreate\000"
 9399      6B437265 
 9399      61746500 
 9400              	.LASF97:
 9401 0765 70727641 		.ascii	"prvAddNewTaskToReadyList\000"
 9401      64644E65 
 9401      77546173 
 9401      6B546F52 
 9401      65616479 
 9402              	.LASF17:
 9403 077e 75696E74 		.ascii	"uint8_t\000"
 9403      385F7400 
 9404              	.LASF55:
 9405 0786 65526561 		.ascii	"eReady\000"
 9405      647900
 9406              	.LASF111:
 9407 078d 65546173 		.ascii	"eTaskGetState\000"
 9407      6B476574 
 9407      53746174 
 9407      6500
 9408              	.LASF92:
 9409 079b 70784E65 		.ascii	"pxNewTCB\000"
 9409      77544342 
 9409      00
 9410              	.LASF87:
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 266


 9411 07a4 70785461 		.ascii	"pxTaskCode\000"
 9411      736B436F 
 9411      646500
 9412              	.LASF75:
 9413 07af 4D656D6F 		.ascii	"MemoryRegion_t\000"
 9413      72795265 
 9413      67696F6E 
 9413      5F7400
 9414              	.LASF224:
 9415 07be 784E6578 		.ascii	"xNextTaskUnblockTime\000"
 9415      74546173 
 9415      6B556E62 
 9415      6C6F636B 
 9415      54696D65 
 9416              	.LASF82:
 9417 07d3 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 9417      72745261 
 9417      69736542 
 9417      41534550 
 9417      524900
 9418              	.LASF217:
 9419 07e6 78546963 		.ascii	"xTickCount\000"
 9419      6B436F75 
 9419      6E7400
 9420              	.LASF1:
 9421 07f1 6C6F6E67 		.ascii	"long long int\000"
 9421      206C6F6E 
 9421      6720696E 
 9421      7400
 9422              	.LASF58:
 9423 07ff 6544656C 		.ascii	"eDeleted\000"
 9423      65746564 
 9423      00
 9424              	.LASF83:
 9425 0808 7563506F 		.ascii	"ucPortCountLeadingZeros\000"
 9425      7274436F 
 9425      756E744C 
 9425      65616469 
 9425      6E675A65 
 9426              	.LASF73:
 9427 0820 756C4C65 		.ascii	"ulLengthInBytes\000"
 9427      6E677468 
 9427      496E4279 
 9427      74657300 
 9428              	.LASF25:
 9429 0830 42617365 		.ascii	"BaseType_t\000"
 9429      54797065 
 9429      5F7400
 9430              	.LASF146:
 9431 083b 756C4368 		.ascii	"ulCheckValue\000"
 9431      65636B56 
 9431      616C7565 
 9431      00
 9432              	.LASF177:
 9433 0848 70727652 		.ascii	"prvResetNextTaskUnblockTime\000"
 9433      65736574 
 9433      4E657874 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 267


 9433      5461736B 
 9433      556E626C 
 9434              	.LASF69:
 9435 0864 7854696D 		.ascii	"xTimeOnEntering\000"
 9435      654F6E45 
 9435      6E746572 
 9435      696E6700 
 9436              	.LASF122:
 9437 0874 75784E65 		.ascii	"uxNewPriority\000"
 9437      77507269 
 9437      6F726974 
 9437      7900
 9438              	.LASF23:
 9439 0882 5461736B 		.ascii	"TaskFunction_t\000"
 9439      46756E63 
 9439      74696F6E 
 9439      5F7400
 9440              	.LASF29:
 9441 0891 70784E65 		.ascii	"pxNext\000"
 9441      787400
 9442              	.LASF201:
 9443 0898 70756C50 		.ascii	"pulPreviousNotificationValue\000"
 9443      72657669 
 9443      6F75734E 
 9443      6F746966 
 9443      69636174 
 9444              	.LASF158:
 9445 08b5 70785469 		.ascii	"pxTimeOut\000"
 9445      6D654F75 
 9445      7400
 9446              	.LASF119:
 9447 08bf 75785461 		.ascii	"uxTaskPriorityGetFromISR\000"
 9447      736B5072 
 9447      696F7269 
 9447      74794765 
 9447      7446726F 
 9448              	.LASF136:
 9449 08d8 78546173 		.ascii	"xTaskGetTickCount\000"
 9449      6B476574 
 9449      5469636B 
 9449      436F756E 
 9449      7400
 9450              	.LASF70:
 9451 08ea 54696D65 		.ascii	"TimeOut_t\000"
 9451      4F75745F 
 9451      7400
 9452              	.LASF159:
 9453 08f4 76546173 		.ascii	"vTaskInternalSetTimeOutState\000"
 9453      6B496E74 
 9453      65726E61 
 9453      6C536574 
 9453      54696D65 
 9454              	.LASF223:
 9455 0911 75785461 		.ascii	"uxTaskNumber\000"
 9455      736B4E75 
 9455      6D626572 
 9455      00
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 268


 9456              	.LASF42:
 9457 091e 5461736B 		.ascii	"TaskHandle_t\000"
 9457      48616E64 
 9457      6C655F74 
 9457      00
 9458              	.LASF200:
 9459 092b 65416374 		.ascii	"eAction\000"
 9459      696F6E00 
 9460              	.LASF84:
 9461 0933 756C4E65 		.ascii	"ulNewMaskValue\000"
 9461      774D6173 
 9461      6B56616C 
 9461      756500
 9462              	.LASF187:
 9463 0942 75785461 		.ascii	"uxTaskResetEventItemValue\000"
 9463      736B5265 
 9463      73657445 
 9463      76656E74 
 9463      4974656D 
 9464              	.LASF121:
 9465 095c 76546173 		.ascii	"vTaskPrioritySet\000"
 9465      6B507269 
 9465      6F726974 
 9465      79536574 
 9465      00
 9466              	.LASF60:
 9467 096d 65546173 		.ascii	"eTaskState\000"
 9467      6B537461 
 9467      746500
 9468              	.LASF41:
 9469 0978 4C697374 		.ascii	"List_t\000"
 9469      5F7400
 9470              	.LASF140:
 9471 097f 78546173 		.ascii	"xTaskToQuery\000"
 9471      6B546F51 
 9471      75657279 
 9471      00
 9472              	.LASF27:
 9473 098c 5469636B 		.ascii	"TickType_t\000"
 9473      54797065 
 9473      5F7400
 9474              	.LASF198:
 9475 0997 78546173 		.ascii	"xTaskToNotify\000"
 9475      6B546F4E 
 9475      6F746966 
 9475      7900
 9476              	.LASF112:
 9477 09a5 78546173 		.ascii	"xTask\000"
 9477      6B00
 9478              	.LASF62:
 9479 09ab 65536574 		.ascii	"eSetBits\000"
 9479      42697473 
 9479      00
 9480              	.LASF2:
 9481 09b4 6C6F6E67 		.ascii	"long double\000"
 9481      20646F75 
 9481      626C6500 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 269


 9482              	.LASF71:
 9483 09c0 784D454D 		.ascii	"xMEMORY_REGION\000"
 9483      4F52595F 
 9483      52454749 
 9483      4F4E00
 9484              	.LASF18:
 9485 09cf 75696E74 		.ascii	"uint16_t\000"
 9485      31365F74 
 9485      00
 9486              	.LASF100:
 9487 09d8 76546173 		.ascii	"vTaskDelete\000"
 9487      6B44656C 
 9487      65746500 
 9488              	.LASF186:
 9489 09e4 75784F6E 		.ascii	"uxOnlyOneMutexHeld\000"
 9489      6C794F6E 
 9489      654D7574 
 9489      65784865 
 9489      6C6400
 9490              	.LASF185:
 9491 09f7 75785072 		.ascii	"uxPriorityToUse\000"
 9491      696F7269 
 9491      7479546F 
 9491      55736500 
 9492              	.LASF144:
 9493 0a07 76546173 		.ascii	"vTaskSwitchContext\000"
 9493      6B537769 
 9493      74636843 
 9493      6F6E7465 
 9493      787400
 9494              	.LASF222:
 9495 0a1a 784E756D 		.ascii	"xNumOfOverflows\000"
 9495      4F664F76 
 9495      6572666C 
 9495      6F777300 
 9496              	.LASF225:
 9497 0a2a 7849646C 		.ascii	"xIdleTaskHandle\000"
 9497      65546173 
 9497      6B48616E 
 9497      646C6500 
 9498              	.LASF184:
 9499 0a3a 75784869 		.ascii	"uxHighestPriorityWaitingTask\000"
 9499      67686573 
 9499      74507269 
 9499      6F726974 
 9499      79576169 
 9500              	.LASF7:
 9501 0a57 73686F72 		.ascii	"short int\000"
 9501      7420696E 
 9501      7400
 9502              	.LASF90:
 9503 0a61 70765061 		.ascii	"pvParameters\000"
 9503      72616D65 
 9503      74657273 
 9503      00
 9504              	.LASF28:
 9505 0a6e 78497465 		.ascii	"xItemValue\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 270


 9505      6D56616C 
 9505      756500
 9506              	.LASF11:
 9507 0a79 6C6F6E67 		.ascii	"long int\000"
 9507      20696E74 
 9507      00
 9508              	.LASF227:
 9509 0a82 49544D5F 		.ascii	"ITM_RxBuffer\000"
 9509      52784275 
 9509      66666572 
 9509      00
 9510              	.LASF134:
 9511 0a8f 78546173 		.ascii	"xTaskResumeAll\000"
 9511      6B526573 
 9511      756D6541 
 9511      6C6C00
 9512              	.LASF205:
 9513 0a9e 76546173 		.ascii	"vTaskNotifyGiveFromISR\000"
 9513      6B4E6F74 
 9513      69667947 
 9513      69766546 
 9513      726F6D49 
 9514              	.LASF210:
 9515 0ab5 70784465 		.ascii	"pxDelayedTaskList\000"
 9515      6C617965 
 9515      64546173 
 9515      6B4C6973 
 9515      7400
 9516              	.LASF170:
 9517 0ac7 70727654 		.ascii	"prvTaskIsTaskSuspended\000"
 9517      61736B49 
 9517      73546173 
 9517      6B537573 
 9517      70656E64 
 9518              	.LASF142:
 9519 0ade 78537769 		.ascii	"xSwitchRequired\000"
 9519      74636852 
 9519      65717569 
 9519      72656400 
 9520              	.LASF180:
 9521 0aee 70784D75 		.ascii	"pxMutexHolder\000"
 9521      74657848 
 9521      6F6C6465 
 9521      7200
 9522              	.LASF48:
 9523 0afc 70785374 		.ascii	"pxStack\000"
 9523      61636B00 
 9524              	.LASF98:
 9525 0b04 78546173 		.ascii	"xTaskToDelete\000"
 9525      6B546F44 
 9525      656C6574 
 9525      6500
 9526              	.LASF199:
 9527 0b12 756C5661 		.ascii	"ulValue\000"
 9527      6C756500 
 9528              	.LASF127:
 9529 0b1a 78546173 		.ascii	"xTaskToSuspend\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 271


 9529      6B546F53 
 9529      75737065 
 9529      6E6400
 9530              	.LASF160:
 9531 0b29 78546173 		.ascii	"xTaskCheckForTimeOut\000"
 9531      6B436865 
 9531      636B466F 
 9531      7254696D 
 9531      654F7574 
 9532              	.LASF102:
 9533 0b3e 70785072 		.ascii	"pxPreviousWakeTime\000"
 9533      6576696F 
 9533      75735761 
 9533      6B655469 
 9533      6D6500
 9534              	.LASF5:
 9535 0b51 5F5F7569 		.ascii	"__uint8_t\000"
 9535      6E74385F 
 9535      7400
 9536              	.LASF86:
 9537 0b5b 75635265 		.ascii	"ucReturn\000"
 9537      7475726E 
 9537      00
 9538              	.LASF196:
 9539 0b64 70756C4E 		.ascii	"pulNotificationValue\000"
 9539      6F746966 
 9539      69636174 
 9539      696F6E56 
 9539      616C7565 
 9540              	.LASF93:
 9541 0b79 78526574 		.ascii	"xReturn\000"
 9541      75726E00 
 9542              	.LASF15:
 9543 0b81 73697A65 		.ascii	"sizetype\000"
 9543      74797065 
 9543      00
 9544              	.LASF164:
 9545 0b8a 76546173 		.ascii	"vTaskMissedYield\000"
 9545      6B4D6973 
 9545      73656459 
 9545      69656C64 
 9545      00
 9546              	.LASF220:
 9547 0b9b 75785065 		.ascii	"uxPendedTicks\000"
 9547      6E646564 
 9547      5469636B 
 9547      7300
 9548              	.LASF13:
 9549 0ba9 6C6F6E67 		.ascii	"long unsigned int\000"
 9549      20756E73 
 9549      69676E65 
 9549      6420696E 
 9549      7400
 9550              	.LASF81:
 9551 0bbb 76506F72 		.ascii	"vPortRaiseBASEPRI\000"
 9551      74526169 
 9551      73654241 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 272


 9551      53455052 
 9551      4900
 9552              	.LASF179:
 9553 0bcd 78546173 		.ascii	"xTaskPriorityInherit\000"
 9553      6B507269 
 9553      6F726974 
 9553      79496E68 
 9553      65726974 
 9554              	.LASF175:
 9555 0be2 70756345 		.ascii	"pucEndOfStack\000"
 9555      6E644F66 
 9555      53746163 
 9555      6B00
 9556              	.LASF181:
 9557 0bf0 70784D75 		.ascii	"pxMutexHolderTCB\000"
 9557      74657848 
 9557      6F6C6465 
 9557      72544342 
 9557      00
 9558              	.LASF139:
 9559 0c01 70635461 		.ascii	"pcTaskGetName\000"
 9559      736B4765 
 9559      744E616D 
 9559      6500
 9560              	.LASF19:
 9561 0c0f 696E7433 		.ascii	"int32_t\000"
 9561      325F7400 
 9562              	.LASF137:
 9563 0c17 78546963 		.ascii	"xTicks\000"
 9563      6B7300
 9564              	.LASF132:
 9565 0c1e 76546173 		.ascii	"vTaskStartScheduler\000"
 9565      6B537461 
 9565      72745363 
 9565      68656475 
 9565      6C657200 
 9566              	.LASF208:
 9567 0c32 7843616E 		.ascii	"xCanBlockIndefinitely\000"
 9567      426C6F63 
 9567      6B496E64 
 9567      6566696E 
 9567      6974656C 
 9568              	.LASF54:
 9569 0c48 6552756E 		.ascii	"eRunning\000"
 9569      6E696E67 
 9569      00
 9570              	.LASF145:
 9571 0c51 70756C53 		.ascii	"pulStack\000"
 9571      7461636B 
 9571      00
 9572              	.LASF32:
 9573 0c5a 7078436F 		.ascii	"pxContainer\000"
 9573      6E746169 
 9573      6E657200 
 9574              	.LASF109:
 9575 0c66 78546963 		.ascii	"xTicksToDelay\000"
 9575      6B73546F 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 273


 9575      44656C61 
 9575      7900
 9576              	.LASF6:
 9577 0c74 756E7369 		.ascii	"unsigned char\000"
 9577      676E6564 
 9577      20636861 
 9577      7200
 9578              	.LASF152:
 9579 0c82 76546173 		.ascii	"vTaskPlaceOnUnorderedEventList\000"
 9579      6B506C61 
 9579      63654F6E 
 9579      556E6F72 
 9579      64657265 
 9580              	.LASF12:
 9581 0ca1 5F5F7569 		.ascii	"__uint32_t\000"
 9581      6E743332 
 9581      5F7400
 9582              	.LASF206:
 9583 0cac 78546173 		.ascii	"xTaskNotifyStateClear\000"
 9583      6B4E6F74 
 9583      69667953 
 9583      74617465 
 9583      436C6561 
 9584              	.LASF161:
 9585 0cc2 70785469 		.ascii	"pxTicksToWait\000"
 9585      636B7354 
 9585      6F576169 
 9585      7400
 9586              	.LASF147:
 9587 0cd0 7578546F 		.ascii	"uxTopPriority\000"
 9587      70507269 
 9587      6F726974 
 9587      7900
 9588              	.LASF50:
 9589 0cde 75784261 		.ascii	"uxBasePriority\000"
 9589      73655072 
 9589      696F7269 
 9589      747900
 9590              	.LASF101:
 9591 0ced 76546173 		.ascii	"vTaskDelayUntil\000"
 9591      6B44656C 
 9591      6179556E 
 9591      74696C00 
 9592              	.LASF46:
 9593 0cfd 78457665 		.ascii	"xEventListItem\000"
 9593      6E744C69 
 9593      73744974 
 9593      656D00
 9594              	.LASF124:
 9595 0d0c 75785072 		.ascii	"uxPriorityUsedOnEntry\000"
 9595      696F7269 
 9595      74795573 
 9595      65644F6E 
 9595      456E7472 
 9596              	.LASF77:
 9597 0d22 5443425F 		.ascii	"TCB_t\000"
 9597      7400
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 274


 9598              	.LASF151:
 9599 0d28 78546963 		.ascii	"xTicksToWait\000"
 9599      6B73546F 
 9599      57616974 
 9599      00
 9600              	.LASF31:
 9601 0d35 70764F77 		.ascii	"pvOwner\000"
 9601      6E657200 
 9602              	.LASF176:
 9603 0d3d 70727644 		.ascii	"prvDeleteTCB\000"
 9603      656C6574 
 9603      65544342 
 9603      00
 9604              	.LASF56:
 9605 0d4a 65426C6F 		.ascii	"eBlocked\000"
 9605      636B6564 
 9605      00
 9606              	.LASF126:
 9607 0d53 76546173 		.ascii	"vTaskSuspend\000"
 9607      6B537573 
 9607      70656E64 
 9607      00
 9608              	.LASF105:
 9609 0d60 78416C72 		.ascii	"xAlreadyYielded\000"
 9609      65616479 
 9609      5969656C 
 9609      64656400 
 9610              	.LASF178:
 9611 0d70 78546173 		.ascii	"xTaskGetCurrentTaskHandle\000"
 9611      6B476574 
 9611      43757272 
 9611      656E7454 
 9611      61736B48 
 9612              	.LASF171:
 9613 0d8a 70727654 		.ascii	"prvTaskCheckFreeStackSpace\000"
 9613      61736B43 
 9613      6865636B 
 9613      46726565 
 9613      53746163 
 9614              	.LASF95:
 9615 0da5 78526567 		.ascii	"xRegions\000"
 9615      696F6E73 
 9615      00
 9616              	.LASF207:
 9617 0dae 70727641 		.ascii	"prvAddCurrentTaskToDelayedList\000"
 9617      64644375 
 9617      7272656E 
 9617      74546173 
 9617      6B546F44 
 9618              	.LASF230:
 9619 0dcd 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS_Source\\tasks.c\000"
 9619      2E5C4672 
 9619      65655254 
 9619      4F535F53 
 9619      6F757263 
 9620              	.LASF228:
 9621 0deb 70784375 		.ascii	"pxCurrentTCB\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 275


 9621      7272656E 
 9621      74544342 
 9621      00
 9622              	.LASF216:
 9623 0df8 75784375 		.ascii	"uxCurrentNumberOfTasks\000"
 9623      7272656E 
 9623      744E756D 
 9623      6265724F 
 9623      66546173 
 9624              	.LASF103:
 9625 0e0f 7854696D 		.ascii	"xTimeIncrement\000"
 9625      65496E63 
 9625      72656D65 
 9625      6E7400
 9626              	.LASF3:
 9627 0e1e 7369676E 		.ascii	"signed char\000"
 9627      65642063 
 9627      68617200 
 9628              	.LASF9:
 9629 0e2a 73686F72 		.ascii	"short unsigned int\000"
 9629      7420756E 
 9629      7369676E 
 9629      65642069 
 9629      6E7400
 9630              	.LASF104:
 9631 0e3d 7854696D 		.ascii	"xTimeToWake\000"
 9631      65546F57 
 9631      616B6500 
 9632              	.LASF45:
 9633 0e49 78537461 		.ascii	"xStateListItem\000"
 9633      74654C69 
 9633      73744974 
 9633      656D00
 9634              	.LASF99:
 9635 0e58 70785443 		.ascii	"pxTCB\000"
 9635      4200
 9636              	.LASF22:
 9637 0e5e 646F7562 		.ascii	"double\000"
 9637      6C6500
 9638              	.LASF226:
 9639 0e65 75785363 		.ascii	"uxSchedulerSuspended\000"
 9639      68656475 
 9639      6C657253 
 9639      75737065 
 9639      6E646564 
 9640              	.LASF44:
 9641 0e7a 7078546F 		.ascii	"pxTopOfStack\000"
 9641      704F6653 
 9641      7461636B 
 9641      00
 9642              	.LASF128:
 9643 0e87 76546173 		.ascii	"vTaskResume\000"
 9643      6B526573 
 9643      756D6500 
 9644              	.LASF166:
 9645 0e93 70727649 		.ascii	"prvInitialiseTaskLists\000"
 9645      6E697469 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccPTSKHY.s 			page 276


 9645      616C6973 
 9645      65546173 
 9645      6B4C6973 
 9646              	.LASF156:
 9647 0eaa 70784576 		.ascii	"pxEventListItem\000"
 9647      656E744C 
 9647      69737449 
 9647      74656D00 
 9648              	.LASF91:
 9649 0eba 70784372 		.ascii	"pxCreatedTask\000"
 9649      65617465 
 9649      64546173 
 9649      6B00
 9650              	.LASF169:
 9651 0ec8 70727643 		.ascii	"prvCheckTasksWaitingTermination\000"
 9651      6865636B 
 9651      5461736B 
 9651      73576169 
 9651      74696E67 
 9652              	.LASF192:
 9653 0ee8 756C5265 		.ascii	"ulReturn\000"
 9653      7475726E 
 9653      00
 9654              	.LASF123:
 9655 0ef1 75784375 		.ascii	"uxCurrentBasePriority\000"
 9655      7272656E 
 9655      74426173 
 9655      65507269 
 9655      6F726974 
 9656              	.LASF221:
 9657 0f07 78596965 		.ascii	"xYieldPending\000"
 9657      6C645065 
 9657      6E64696E 
 9657      6700
 9658              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
