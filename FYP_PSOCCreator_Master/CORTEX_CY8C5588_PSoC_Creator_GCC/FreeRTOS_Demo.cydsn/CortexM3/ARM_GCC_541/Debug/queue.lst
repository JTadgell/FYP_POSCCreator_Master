<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 1
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 1
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 1
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 1
>>>>>>> parent of cb49844... test


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.comm	xQueueRegistry,80,4
  20              		.section	.text.xQueueGenericReset,"ax",%progbits
  21              		.align	2
  22              		.global	xQueueGenericReset
  23              		.thumb
  24              		.thumb_func
  25              		.type	xQueueGenericReset, %function
  26              	xQueueGenericReset:
  27              	.LFB68:
  28              		.file 1 "..\\..\\FreeRTOS_Source\\queue.c"
   1:..\..\FreeRTOS_Source/queue.c **** /*
   2:..\..\FreeRTOS_Source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source/queue.c ****  *
   5:..\..\FreeRTOS_Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source/queue.c ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source/queue.c ****  *
  12:..\..\FreeRTOS_Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source/queue.c ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source/queue.c ****  *
  15:..\..\FreeRTOS_Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source/queue.c ****  *
  22:..\..\FreeRTOS_Source/queue.c ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source/queue.c ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source/queue.c ****  *
  25:..\..\FreeRTOS_Source/queue.c ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source/queue.c ****  */
  27:..\..\FreeRTOS_Source/queue.c **** 
  28:..\..\FreeRTOS_Source/queue.c **** #include <stdlib.h>
  29:..\..\FreeRTOS_Source/queue.c **** #include <string.h>
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 2
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 2
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 2
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 2
>>>>>>> parent of cb49844... test


  30:..\..\FreeRTOS_Source/queue.c **** 
  31:..\..\FreeRTOS_Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:..\..\FreeRTOS_Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
  33:..\..\FreeRTOS_Source/queue.c **** task.h is included from an application file. */
  34:..\..\FreeRTOS_Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:..\..\FreeRTOS_Source/queue.c **** 
  36:..\..\FreeRTOS_Source/queue.c **** #include "FreeRTOS.h"
  37:..\..\FreeRTOS_Source/queue.c **** #include "task.h"
  38:..\..\FreeRTOS_Source/queue.c **** #include "queue.h"
  39:..\..\FreeRTOS_Source/queue.c **** 
  40:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:..\..\FreeRTOS_Source/queue.c **** 	#include "croutine.h"
  42:..\..\FreeRTOS_Source/queue.c **** #endif
  43:..\..\FreeRTOS_Source/queue.c **** 
  44:..\..\FreeRTOS_Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:..\..\FreeRTOS_Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:..\..\FreeRTOS_Source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:..\..\FreeRTOS_Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:..\..\FreeRTOS_Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:..\..\FreeRTOS_Source/queue.c **** 
  50:..\..\FreeRTOS_Source/queue.c **** 
  51:..\..\FreeRTOS_Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:..\..\FreeRTOS_Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:..\..\FreeRTOS_Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:..\..\FreeRTOS_Source/queue.c **** 
  55:..\..\FreeRTOS_Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:..\..\FreeRTOS_Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:..\..\FreeRTOS_Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:..\..\FreeRTOS_Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:..\..\FreeRTOS_Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:..\..\FreeRTOS_Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:..\..\FreeRTOS_Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:..\..\FreeRTOS_Source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:..\..\FreeRTOS_Source/queue.c **** against the coding standard (although an exception to the standard has been
  64:..\..\FreeRTOS_Source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:..\..\FreeRTOS_Source/queue.c **** structure member). */
  66:..\..\FreeRTOS_Source/queue.c **** #define pxMutexHolder					pcTail
  67:..\..\FreeRTOS_Source/queue.c **** #define uxQueueType						pcHead
  68:..\..\FreeRTOS_Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:..\..\FreeRTOS_Source/queue.c **** 
  70:..\..\FreeRTOS_Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:..\..\FreeRTOS_Source/queue.c **** zero. */
  72:..\..\FreeRTOS_Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:..\..\FreeRTOS_Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:..\..\FreeRTOS_Source/queue.c **** 
  75:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:..\..\FreeRTOS_Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:..\..\FreeRTOS_Source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:..\..\FreeRTOS_Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:..\..\FreeRTOS_Source/queue.c **** #else
  80:..\..\FreeRTOS_Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:..\..\FreeRTOS_Source/queue.c **** #endif
  82:..\..\FreeRTOS_Source/queue.c **** 
  83:..\..\FreeRTOS_Source/queue.c **** /*
  84:..\..\FreeRTOS_Source/queue.c ****  * Definition of the queue used by the scheduler.
  85:..\..\FreeRTOS_Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:..\..\FreeRTOS_Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 3
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 3
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 3
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 3
>>>>>>> parent of cb49844... test


  87:..\..\FreeRTOS_Source/queue.c ****  */
  88:..\..\FreeRTOS_Source/queue.c **** typedef struct QueueDefinition
  89:..\..\FreeRTOS_Source/queue.c **** {
  90:..\..\FreeRTOS_Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:..\..\FreeRTOS_Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:..\..\FreeRTOS_Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:..\..\FreeRTOS_Source/queue.c **** 
  94:..\..\FreeRTOS_Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:..\..\FreeRTOS_Source/queue.c **** 	{
  96:..\..\FreeRTOS_Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:..\..\FreeRTOS_Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:..\..\FreeRTOS_Source/queue.c **** 	} u;
  99:..\..\FreeRTOS_Source/queue.c **** 
 100:..\..\FreeRTOS_Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:..\..\FreeRTOS_Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:..\..\FreeRTOS_Source/queue.c **** 
 103:..\..\FreeRTOS_Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:..\..\FreeRTOS_Source/queue.c **** 
 107:..\..\FreeRTOS_Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:..\..\FreeRTOS_Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:..\..\FreeRTOS_Source/queue.c **** 
 110:..\..\FreeRTOS_Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:..\..\FreeRTOS_Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:..\..\FreeRTOS_Source/queue.c **** 	#endif
 113:..\..\FreeRTOS_Source/queue.c **** 
 114:..\..\FreeRTOS_Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:..\..\FreeRTOS_Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:..\..\FreeRTOS_Source/queue.c **** 	#endif
 117:..\..\FreeRTOS_Source/queue.c **** 
 118:..\..\FreeRTOS_Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:..\..\FreeRTOS_Source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:..\..\FreeRTOS_Source/queue.c **** 		uint8_t ucQueueType;
 121:..\..\FreeRTOS_Source/queue.c **** 	#endif
 122:..\..\FreeRTOS_Source/queue.c **** 
 123:..\..\FreeRTOS_Source/queue.c **** } xQUEUE;
 124:..\..\FreeRTOS_Source/queue.c **** 
 125:..\..\FreeRTOS_Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:..\..\FreeRTOS_Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:..\..\FreeRTOS_Source/queue.c **** typedef xQUEUE Queue_t;
 128:..\..\FreeRTOS_Source/queue.c **** 
 129:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 130:..\..\FreeRTOS_Source/queue.c **** 
 131:..\..\FreeRTOS_Source/queue.c **** /*
 132:..\..\FreeRTOS_Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:..\..\FreeRTOS_Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:..\..\FreeRTOS_Source/queue.c ****  */
 135:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:..\..\FreeRTOS_Source/queue.c **** 
 137:..\..\FreeRTOS_Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:..\..\FreeRTOS_Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:..\..\FreeRTOS_Source/queue.c **** 	more user friendly. */
 140:..\..\FreeRTOS_Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:..\..\FreeRTOS_Source/queue.c **** 	{
 142:..\..\FreeRTOS_Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:..\..\FreeRTOS_Source/queue.c **** 		QueueHandle_t xHandle;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 4
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 4
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 4
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 4
>>>>>>> parent of cb49844... test


 144:..\..\FreeRTOS_Source/queue.c **** 	} xQueueRegistryItem;
 145:..\..\FreeRTOS_Source/queue.c **** 
 146:..\..\FreeRTOS_Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
 147:..\..\FreeRTOS_Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:..\..\FreeRTOS_Source/queue.c **** 	debuggers. */
 149:..\..\FreeRTOS_Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:..\..\FreeRTOS_Source/queue.c **** 
 151:..\..\FreeRTOS_Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:..\..\FreeRTOS_Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:..\..\FreeRTOS_Source/queue.c **** 	array position being vacant. */
 154:..\..\FreeRTOS_Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:..\..\FreeRTOS_Source/queue.c **** 
 156:..\..\FreeRTOS_Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:..\..\FreeRTOS_Source/queue.c **** 
 158:..\..\FreeRTOS_Source/queue.c **** /*
 159:..\..\FreeRTOS_Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:..\..\FreeRTOS_Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:..\..\FreeRTOS_Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:..\..\FreeRTOS_Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:..\..\FreeRTOS_Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:..\..\FreeRTOS_Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:..\..\FreeRTOS_Source/queue.c ****  */
 166:..\..\FreeRTOS_Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:..\..\FreeRTOS_Source/queue.c **** 
 168:..\..\FreeRTOS_Source/queue.c **** /*
 169:..\..\FreeRTOS_Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:..\..\FreeRTOS_Source/queue.c ****  *
 171:..\..\FreeRTOS_Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:..\..\FreeRTOS_Source/queue.c ****  */
 173:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:..\..\FreeRTOS_Source/queue.c **** 
 175:..\..\FreeRTOS_Source/queue.c **** /*
 176:..\..\FreeRTOS_Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:..\..\FreeRTOS_Source/queue.c ****  *
 178:..\..\FreeRTOS_Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:..\..\FreeRTOS_Source/queue.c ****  */
 180:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:..\..\FreeRTOS_Source/queue.c **** 
 182:..\..\FreeRTOS_Source/queue.c **** /*
 183:..\..\FreeRTOS_Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:..\..\FreeRTOS_Source/queue.c ****  * back of the queue.
 185:..\..\FreeRTOS_Source/queue.c ****  */
 186:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:..\..\FreeRTOS_Source/queue.c **** 
 188:..\..\FreeRTOS_Source/queue.c **** /*
 189:..\..\FreeRTOS_Source/queue.c ****  * Copies an item out of a queue.
 190:..\..\FreeRTOS_Source/queue.c ****  */
 191:..\..\FreeRTOS_Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:..\..\FreeRTOS_Source/queue.c **** 
 193:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:..\..\FreeRTOS_Source/queue.c **** 	/*
 195:..\..\FreeRTOS_Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:..\..\FreeRTOS_Source/queue.c **** 	 * the queue set that the queue contains data.
 197:..\..\FreeRTOS_Source/queue.c **** 	 */
 198:..\..\FreeRTOS_Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:..\..\FreeRTOS_Source/queue.c **** #endif
 200:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 5
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 5
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 5
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 5
>>>>>>> parent of cb49844... test


 201:..\..\FreeRTOS_Source/queue.c **** /*
 202:..\..\FreeRTOS_Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 203:..\..\FreeRTOS_Source/queue.c ****  * dynamically to fill in the structure's members.
 204:..\..\FreeRTOS_Source/queue.c ****  */
 205:..\..\FreeRTOS_Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:..\..\FreeRTOS_Source/queue.c **** 
 207:..\..\FreeRTOS_Source/queue.c **** /*
 208:..\..\FreeRTOS_Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:..\..\FreeRTOS_Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:..\..\FreeRTOS_Source/queue.c ****  * as a mutex.
 211:..\..\FreeRTOS_Source/queue.c ****  */
 212:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:..\..\FreeRTOS_Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:..\..\FreeRTOS_Source/queue.c **** #endif
 215:..\..\FreeRTOS_Source/queue.c **** 
 216:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:..\..\FreeRTOS_Source/queue.c **** 	/*
 218:..\..\FreeRTOS_Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:..\..\FreeRTOS_Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:..\..\FreeRTOS_Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:..\..\FreeRTOS_Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:..\..\FreeRTOS_Source/queue.c **** 	 * that priority.
 223:..\..\FreeRTOS_Source/queue.c **** 	 */
 224:..\..\FreeRTOS_Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:..\..\FreeRTOS_Source/queue.c **** #endif
 226:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 227:..\..\FreeRTOS_Source/queue.c **** 
 228:..\..\FreeRTOS_Source/queue.c **** /*
 229:..\..\FreeRTOS_Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:..\..\FreeRTOS_Source/queue.c ****  * accessing the queue event lists.
 231:..\..\FreeRTOS_Source/queue.c ****  */
 232:..\..\FreeRTOS_Source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();									\
 234:..\..\FreeRTOS_Source/queue.c **** 	{														\
 235:..\..\FreeRTOS_Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:..\..\FreeRTOS_Source/queue.c **** 		{													\
 237:..\..\FreeRTOS_Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:..\..\FreeRTOS_Source/queue.c **** 		}													\
 239:..\..\FreeRTOS_Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:..\..\FreeRTOS_Source/queue.c **** 		{													\
 241:..\..\FreeRTOS_Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:..\..\FreeRTOS_Source/queue.c **** 		}													\
 243:..\..\FreeRTOS_Source/queue.c **** 	}														\
 244:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL()
 245:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 246:..\..\FreeRTOS_Source/queue.c **** 
 247:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:..\..\FreeRTOS_Source/queue.c **** {
  29              		.loc 1 248 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 16
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33 0000 80B5     		push	{r7, lr}
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 84B0     		sub	sp, sp, #16
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 6
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 6
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 6
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 6
>>>>>>> parent of cb49844... test


  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 7860     		str	r0, [r7, #4]
  42 0008 3960     		str	r1, [r7]
 249:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
  43              		.loc 1 249 0
  44 000a 7B68     		ldr	r3, [r7, #4]
  45 000c FB60     		str	r3, [r7, #12]
 250:..\..\FreeRTOS_Source/queue.c **** 
 251:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
 252:..\..\FreeRTOS_Source/queue.c **** 
 253:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
  46              		.loc 1 253 0
  47 000e FFF7FEFF 		bl	vPortEnterCritical
 254:..\..\FreeRTOS_Source/queue.c **** 	{
 255:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  48              		.loc 1 255 0
  49 0012 FB68     		ldr	r3, [r7, #12]
  50 0014 1A68     		ldr	r2, [r3]
  51 0016 FB68     		ldr	r3, [r7, #12]
  52 0018 DB6B     		ldr	r3, [r3, #60]
  53 001a F968     		ldr	r1, [r7, #12]
  54 001c 096C     		ldr	r1, [r1, #64]
  55 001e 01FB03F3 		mul	r3, r1, r3
  56 0022 1A44     		add	r2, r2, r3
  57 0024 FB68     		ldr	r3, [r7, #12]
  58 0026 5A60     		str	r2, [r3, #4]
 256:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  59              		.loc 1 256 0
  60 0028 FB68     		ldr	r3, [r7, #12]
  61 002a 0022     		movs	r2, #0
  62 002c 9A63     		str	r2, [r3, #56]
 257:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
  63              		.loc 1 257 0
  64 002e FB68     		ldr	r3, [r7, #12]
  65 0030 1A68     		ldr	r2, [r3]
  66 0032 FB68     		ldr	r3, [r7, #12]
  67 0034 9A60     		str	r2, [r3, #8]
 258:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
  68              		.loc 1 258 0
  69 0036 FB68     		ldr	r3, [r7, #12]
  70 0038 1A68     		ldr	r2, [r3]
  71 003a FB68     		ldr	r3, [r7, #12]
  72 003c DB6B     		ldr	r3, [r3, #60]
  73 003e 013B     		subs	r3, r3, #1
  74 0040 F968     		ldr	r1, [r7, #12]
  75 0042 096C     		ldr	r1, [r1, #64]
  76 0044 01FB03F3 		mul	r3, r1, r3
  77 0048 1A44     		add	r2, r2, r3
  78 004a FB68     		ldr	r3, [r7, #12]
  79 004c DA60     		str	r2, [r3, #12]
 259:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
  80              		.loc 1 259 0
  81 004e FB68     		ldr	r3, [r7, #12]
  82 0050 FF22     		movs	r2, #255
  83 0052 83F84420 		strb	r2, [r3, #68]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 7
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 7
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 7
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 7
>>>>>>> parent of cb49844... test


 260:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
  84              		.loc 1 260 0
  85 0056 FB68     		ldr	r3, [r7, #12]
  86 0058 FF22     		movs	r2, #255
  87 005a 83F84520 		strb	r2, [r3, #69]
 261:..\..\FreeRTOS_Source/queue.c **** 
 262:..\..\FreeRTOS_Source/queue.c **** 		if( xNewQueue == pdFALSE )
  88              		.loc 1 262 0
  89 005e 3B68     		ldr	r3, [r7]
  90 0060 002B     		cmp	r3, #0
  91 0062 14D1     		bne	.L2
 263:..\..\FreeRTOS_Source/queue.c **** 		{
 264:..\..\FreeRTOS_Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:..\..\FreeRTOS_Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:..\..\FreeRTOS_Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:..\..\FreeRTOS_Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:..\..\FreeRTOS_Source/queue.c **** 			it will be possible to write to it. */
 269:..\..\FreeRTOS_Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  92              		.loc 1 269 0
  93 0064 FB68     		ldr	r3, [r7, #12]
  94 0066 1B69     		ldr	r3, [r3, #16]
  95 0068 002B     		cmp	r3, #0
  96 006a 1AD0     		beq	.L3
 270:..\..\FreeRTOS_Source/queue.c **** 			{
 271:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  97              		.loc 1 271 0
  98 006c FB68     		ldr	r3, [r7, #12]
  99 006e 1033     		adds	r3, r3, #16
 100 0070 1846     		mov	r0, r3
 101 0072 FFF7FEFF 		bl	xTaskRemoveFromEventList
 102 0076 0346     		mov	r3, r0
 103 0078 002B     		cmp	r3, #0
 104 007a 12D0     		beq	.L3
 272:..\..\FreeRTOS_Source/queue.c **** 				{
 273:..\..\FreeRTOS_Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 105              		.loc 1 273 0
 106 007c 0C4B     		ldr	r3, .L5
 107 007e 4FF08052 		mov	r2, #268435456
 108 0082 1A60     		str	r2, [r3]
 109              		.syntax unified
 110              	@ 273 "..\..\FreeRTOS_Source\queue.c" 1
 111 0084 BFF34F8F 		dsb
 112              	@ 0 "" 2
 113              	@ 273 "..\..\FreeRTOS_Source\queue.c" 1
 114 0088 BFF36F8F 		isb
 115              	@ 0 "" 2
 116              		.thumb
 117              		.syntax unified
 118 008c 09E0     		b	.L3
 119              	.L2:
 274:..\..\FreeRTOS_Source/queue.c **** 				}
 275:..\..\FreeRTOS_Source/queue.c **** 				else
 276:..\..\FreeRTOS_Source/queue.c **** 				{
 277:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:..\..\FreeRTOS_Source/queue.c **** 				}
 279:..\..\FreeRTOS_Source/queue.c **** 			}
 280:..\..\FreeRTOS_Source/queue.c **** 			else
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 8
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 8
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 8
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 8
>>>>>>> parent of cb49844... test


 281:..\..\FreeRTOS_Source/queue.c **** 			{
 282:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:..\..\FreeRTOS_Source/queue.c **** 			}
 284:..\..\FreeRTOS_Source/queue.c **** 		}
 285:..\..\FreeRTOS_Source/queue.c **** 		else
 286:..\..\FreeRTOS_Source/queue.c **** 		{
 287:..\..\FreeRTOS_Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:..\..\FreeRTOS_Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 120              		.loc 1 288 0
 121 008e FB68     		ldr	r3, [r7, #12]
 122 0090 1033     		adds	r3, r3, #16
 123 0092 1846     		mov	r0, r3
 124 0094 FFF7FEFF 		bl	vListInitialise
 289:..\..\FreeRTOS_Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 125              		.loc 1 289 0
 126 0098 FB68     		ldr	r3, [r7, #12]
 127 009a 2433     		adds	r3, r3, #36
 128 009c 1846     		mov	r0, r3
 129 009e FFF7FEFF 		bl	vListInitialise
 130              	.L3:
 290:..\..\FreeRTOS_Source/queue.c **** 		}
 291:..\..\FreeRTOS_Source/queue.c **** 	}
 292:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 131              		.loc 1 292 0
 132 00a2 FFF7FEFF 		bl	vPortExitCritical
 293:..\..\FreeRTOS_Source/queue.c **** 
 294:..\..\FreeRTOS_Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:..\..\FreeRTOS_Source/queue.c **** 	versions. */
 296:..\..\FreeRTOS_Source/queue.c **** 	return pdPASS;
 133              		.loc 1 296 0
 134 00a6 0123     		movs	r3, #1
 297:..\..\FreeRTOS_Source/queue.c **** }
 135              		.loc 1 297 0
 136 00a8 1846     		mov	r0, r3
 137 00aa 1037     		adds	r7, r7, #16
 138              		.cfi_def_cfa_offset 8
 139 00ac BD46     		mov	sp, r7
 140              		.cfi_def_cfa_register 13
 141              		@ sp needed
 142 00ae 80BD     		pop	{r7, pc}
 143              	.L6:
 144              		.align	2
 145              	.L5:
 146 00b0 04ED00E0 		.word	-536810236
 147              		.cfi_endproc
 148              	.LFE68:
 149              		.size	xQueueGenericReset, .-xQueueGenericReset
 150              		.section	.text.xQueueGenericCreate,"ax",%progbits
 151              		.align	2
 152              		.global	xQueueGenericCreate
 153              		.thumb
 154              		.thumb_func
 155              		.type	xQueueGenericCreate, %function
 156              	xQueueGenericCreate:
 157              	.LFB69:
 298:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 299:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 9
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 9
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 9
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 9
>>>>>>> parent of cb49844... test


 300:..\..\FreeRTOS_Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:..\..\FreeRTOS_Source/queue.c **** 
 302:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:..\..\FreeRTOS_Source/queue.c **** 	{
 304:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue = NULL;
 305:..\..\FreeRTOS_Source/queue.c **** 
 306:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:..\..\FreeRTOS_Source/queue.c **** 
 308:..\..\FreeRTOS_Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:..\..\FreeRTOS_Source/queue.c **** 		supplied. */
 310:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:..\..\FreeRTOS_Source/queue.c **** 
 312:..\..\FreeRTOS_Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:..\..\FreeRTOS_Source/queue.c **** 		should not be provided if the item size is 0. */
 314:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:..\..\FreeRTOS_Source/queue.c **** 
 317:..\..\FreeRTOS_Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
 318:..\..\FreeRTOS_Source/queue.c **** 		{
 319:..\..\FreeRTOS_Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:..\..\FreeRTOS_Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:..\..\FreeRTOS_Source/queue.c **** 			the real queue and semaphore structures. */
 322:..\..\FreeRTOS_Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:..\..\FreeRTOS_Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:..\..\FreeRTOS_Source/queue.c **** 		}
 325:..\..\FreeRTOS_Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:..\..\FreeRTOS_Source/queue.c **** 
 327:..\..\FreeRTOS_Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:..\..\FreeRTOS_Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:..\..\FreeRTOS_Source/queue.c **** 		but is already set. */
 330:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:..\..\FreeRTOS_Source/queue.c **** 
 332:..\..\FreeRTOS_Source/queue.c **** 		if( pxNewQueue != NULL )
 333:..\..\FreeRTOS_Source/queue.c **** 		{
 334:..\..\FreeRTOS_Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:..\..\FreeRTOS_Source/queue.c **** 			{
 336:..\..\FreeRTOS_Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:..\..\FreeRTOS_Source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:..\..\FreeRTOS_Source/queue.c **** 				later deleted. */
 339:..\..\FreeRTOS_Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:..\..\FreeRTOS_Source/queue.c **** 			}
 341:..\..\FreeRTOS_Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:..\..\FreeRTOS_Source/queue.c **** 
 343:..\..\FreeRTOS_Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:..\..\FreeRTOS_Source/queue.c **** 		}
 345:..\..\FreeRTOS_Source/queue.c **** 		else
 346:..\..\FreeRTOS_Source/queue.c **** 		{
 347:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 349:..\..\FreeRTOS_Source/queue.c **** 		}
 350:..\..\FreeRTOS_Source/queue.c **** 
 351:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 352:..\..\FreeRTOS_Source/queue.c **** 	}
 353:..\..\FreeRTOS_Source/queue.c **** 
 354:..\..\FreeRTOS_Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 355:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 356:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 10
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 10
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 10
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 10
>>>>>>> parent of cb49844... test


 357:..\..\FreeRTOS_Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 358:..\..\FreeRTOS_Source/queue.c **** 
 359:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 360:..\..\FreeRTOS_Source/queue.c **** 	{
 158              		.loc 1 360 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 32
 161              		@ frame_needed = 1, uses_anonymous_args = 0
 162 0000 80B5     		push	{r7, lr}
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 8AB0     		sub	sp, sp, #40
 167              		.cfi_def_cfa_offset 48
 168 0004 02AF     		add	r7, sp, #8
 169              		.cfi_def_cfa 7, 40
 170 0006 F860     		str	r0, [r7, #12]
 171 0008 B960     		str	r1, [r7, #8]
 172 000a 1346     		mov	r3, r2
 173 000c FB71     		strb	r3, [r7, #7]
 361:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue;
 362:..\..\FreeRTOS_Source/queue.c **** 	size_t xQueueSizeInBytes;
 363:..\..\FreeRTOS_Source/queue.c **** 	uint8_t *pucQueueStorage;
 364:..\..\FreeRTOS_Source/queue.c **** 
 365:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 366:..\..\FreeRTOS_Source/queue.c **** 
 367:..\..\FreeRTOS_Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 174              		.loc 1 367 0
 175 000e BB68     		ldr	r3, [r7, #8]
 176 0010 002B     		cmp	r3, #0
 177 0012 02D1     		bne	.L8
 368:..\..\FreeRTOS_Source/queue.c **** 		{
 369:..\..\FreeRTOS_Source/queue.c **** 			/* There is not going to be a queue storage area. */
 370:..\..\FreeRTOS_Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 178              		.loc 1 370 0
 179 0014 0023     		movs	r3, #0
 180 0016 FB61     		str	r3, [r7, #28]
 181 0018 04E0     		b	.L9
 182              	.L8:
 371:..\..\FreeRTOS_Source/queue.c **** 		}
 372:..\..\FreeRTOS_Source/queue.c **** 		else
 373:..\..\FreeRTOS_Source/queue.c **** 		{
 374:..\..\FreeRTOS_Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 375:..\..\FreeRTOS_Source/queue.c **** 			can be in the queue at any time. */
 376:..\..\FreeRTOS_Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 183              		.loc 1 376 0
 184 001a FB68     		ldr	r3, [r7, #12]
 185 001c BA68     		ldr	r2, [r7, #8]
 186 001e 02FB03F3 		mul	r3, r2, r3
 187 0022 FB61     		str	r3, [r7, #28]
 188              	.L9:
 377:..\..\FreeRTOS_Source/queue.c **** 		}
 378:..\..\FreeRTOS_Source/queue.c **** 
 379:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 189              		.loc 1 379 0
 190 0024 FB69     		ldr	r3, [r7, #28]
 191 0026 4833     		adds	r3, r3, #72
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 11
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 11
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 11
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 11
>>>>>>> parent of cb49844... test


 192 0028 1846     		mov	r0, r3
 193 002a FFF7FEFF 		bl	pvPortMalloc
 194 002e B861     		str	r0, [r7, #24]
 380:..\..\FreeRTOS_Source/queue.c **** 
 381:..\..\FreeRTOS_Source/queue.c **** 		if( pxNewQueue != NULL )
 195              		.loc 1 381 0
 196 0030 BB69     		ldr	r3, [r7, #24]
 197 0032 002B     		cmp	r3, #0
 198 0034 0BD0     		beq	.L10
 382:..\..\FreeRTOS_Source/queue.c **** 		{
 383:..\..\FreeRTOS_Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 384:..\..\FreeRTOS_Source/queue.c **** 			storage area. */
 385:..\..\FreeRTOS_Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 199              		.loc 1 385 0
 200 0036 BB69     		ldr	r3, [r7, #24]
 201 0038 4833     		adds	r3, r3, #72
 202 003a 7B61     		str	r3, [r7, #20]
 386:..\..\FreeRTOS_Source/queue.c **** 
 387:..\..\FreeRTOS_Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 388:..\..\FreeRTOS_Source/queue.c **** 			{
 389:..\..\FreeRTOS_Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 390:..\..\FreeRTOS_Source/queue.c **** 				note this task was created dynamically in case it is later
 391:..\..\FreeRTOS_Source/queue.c **** 				deleted. */
 392:..\..\FreeRTOS_Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 393:..\..\FreeRTOS_Source/queue.c **** 			}
 394:..\..\FreeRTOS_Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 395:..\..\FreeRTOS_Source/queue.c **** 
 396:..\..\FreeRTOS_Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 203              		.loc 1 396 0
 204 003c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 205 003e BB69     		ldr	r3, [r7, #24]
 206 0040 0093     		str	r3, [sp]
 207 0042 1346     		mov	r3, r2
 208 0044 7A69     		ldr	r2, [r7, #20]
 209 0046 B968     		ldr	r1, [r7, #8]
 210 0048 F868     		ldr	r0, [r7, #12]
 211 004a FFF7FEFF 		bl	prvInitialiseNewQueue
 212              	.L10:
 397:..\..\FreeRTOS_Source/queue.c **** 		}
 398:..\..\FreeRTOS_Source/queue.c **** 		else
 399:..\..\FreeRTOS_Source/queue.c **** 		{
 400:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 401:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
 402:..\..\FreeRTOS_Source/queue.c **** 		}
 403:..\..\FreeRTOS_Source/queue.c **** 
 404:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 213              		.loc 1 404 0
 214 004e BB69     		ldr	r3, [r7, #24]
 405:..\..\FreeRTOS_Source/queue.c **** 	}
 215              		.loc 1 405 0
 216 0050 1846     		mov	r0, r3
 217 0052 2037     		adds	r7, r7, #32
 218              		.cfi_def_cfa_offset 8
 219 0054 BD46     		mov	sp, r7
 220              		.cfi_def_cfa_register 13
 221              		@ sp needed
 222 0056 80BD     		pop	{r7, pc}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 12
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 12
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 12
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 12
>>>>>>> parent of cb49844... test


 223              		.cfi_endproc
 224              	.LFE69:
 225              		.size	xQueueGenericCreate, .-xQueueGenericCreate
 226              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 227              		.align	2
 228              		.thumb
 229              		.thumb_func
 230              		.type	prvInitialiseNewQueue, %function
 231              	prvInitialiseNewQueue:
 232              	.LFB70:
 406:..\..\FreeRTOS_Source/queue.c **** 
 407:..\..\FreeRTOS_Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 408:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 409:..\..\FreeRTOS_Source/queue.c **** 
 410:..\..\FreeRTOS_Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 411:..\..\FreeRTOS_Source/queue.c **** {
 233              		.loc 1 411 0
 234              		.cfi_startproc
 235              		@ args = 4, pretend = 0, frame = 16
 236              		@ frame_needed = 1, uses_anonymous_args = 0
 237 0000 80B5     		push	{r7, lr}
 238              		.cfi_def_cfa_offset 8
 239              		.cfi_offset 7, -8
 240              		.cfi_offset 14, -4
 241 0002 84B0     		sub	sp, sp, #16
 242              		.cfi_def_cfa_offset 24
 243 0004 00AF     		add	r7, sp, #0
 244              		.cfi_def_cfa_register 7
 245 0006 F860     		str	r0, [r7, #12]
 246 0008 B960     		str	r1, [r7, #8]
 247 000a 7A60     		str	r2, [r7, #4]
 248 000c FB70     		strb	r3, [r7, #3]
 412:..\..\FreeRTOS_Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 413:..\..\FreeRTOS_Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 414:..\..\FreeRTOS_Source/queue.c **** 	( void ) ucQueueType;
 415:..\..\FreeRTOS_Source/queue.c **** 
 416:..\..\FreeRTOS_Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 249              		.loc 1 416 0
 250 000e BB68     		ldr	r3, [r7, #8]
 251 0010 002B     		cmp	r3, #0
 252 0012 03D1     		bne	.L13
 417:..\..\FreeRTOS_Source/queue.c **** 	{
 418:..\..\FreeRTOS_Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 419:..\..\FreeRTOS_Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 420:..\..\FreeRTOS_Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 421:..\..\FreeRTOS_Source/queue.c **** 		value that is known to be within the memory map. */
 422:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 253              		.loc 1 422 0
 254 0014 BB69     		ldr	r3, [r7, #24]
 255 0016 BA69     		ldr	r2, [r7, #24]
 256 0018 1A60     		str	r2, [r3]
 257 001a 02E0     		b	.L14
 258              	.L13:
 423:..\..\FreeRTOS_Source/queue.c **** 	}
 424:..\..\FreeRTOS_Source/queue.c **** 	else
 425:..\..\FreeRTOS_Source/queue.c **** 	{
 426:..\..\FreeRTOS_Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 13
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 13
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 13
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 13
>>>>>>> parent of cb49844... test


 427:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 259              		.loc 1 427 0
 260 001c BB69     		ldr	r3, [r7, #24]
 261 001e 7A68     		ldr	r2, [r7, #4]
 262 0020 1A60     		str	r2, [r3]
 263              	.L14:
 428:..\..\FreeRTOS_Source/queue.c **** 	}
 429:..\..\FreeRTOS_Source/queue.c **** 
 430:..\..\FreeRTOS_Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 431:..\..\FreeRTOS_Source/queue.c **** 	defined. */
 432:..\..\FreeRTOS_Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 264              		.loc 1 432 0
 265 0022 BB69     		ldr	r3, [r7, #24]
 266 0024 FA68     		ldr	r2, [r7, #12]
 267 0026 DA63     		str	r2, [r3, #60]
 433:..\..\FreeRTOS_Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 268              		.loc 1 433 0
 269 0028 BB69     		ldr	r3, [r7, #24]
 270 002a BA68     		ldr	r2, [r7, #8]
 271 002c 1A64     		str	r2, [r3, #64]
 434:..\..\FreeRTOS_Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 272              		.loc 1 434 0
 273 002e 0121     		movs	r1, #1
 274 0030 B869     		ldr	r0, [r7, #24]
 275 0032 FFF7FEFF 		bl	xQueueGenericReset
 435:..\..\FreeRTOS_Source/queue.c **** 
 436:..\..\FreeRTOS_Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 437:..\..\FreeRTOS_Source/queue.c **** 	{
 438:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 439:..\..\FreeRTOS_Source/queue.c **** 	}
 440:..\..\FreeRTOS_Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 441:..\..\FreeRTOS_Source/queue.c **** 
 442:..\..\FreeRTOS_Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 443:..\..\FreeRTOS_Source/queue.c **** 	{
 444:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 445:..\..\FreeRTOS_Source/queue.c **** 	}
 446:..\..\FreeRTOS_Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 447:..\..\FreeRTOS_Source/queue.c **** 
 448:..\..\FreeRTOS_Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 449:..\..\FreeRTOS_Source/queue.c **** }
 276              		.loc 1 449 0
 277 0036 00BF     		nop
 278 0038 1037     		adds	r7, r7, #16
 279              		.cfi_def_cfa_offset 8
 280 003a BD46     		mov	sp, r7
 281              		.cfi_def_cfa_register 13
 282              		@ sp needed
 283 003c 80BD     		pop	{r7, pc}
 284              		.cfi_endproc
 285              	.LFE70:
 286              		.size	prvInitialiseNewQueue, .-prvInitialiseNewQueue
 287 003e 00BF     		.section	.text.prvInitialiseMutex,"ax",%progbits
 288              		.align	2
 289              		.thumb
 290              		.thumb_func
 291              		.type	prvInitialiseMutex, %function
 292              	prvInitialiseMutex:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 14
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 14
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 14
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 14
>>>>>>> parent of cb49844... test


 293              	.LFB71:
 450:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 451:..\..\FreeRTOS_Source/queue.c **** 
 452:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 453:..\..\FreeRTOS_Source/queue.c **** 
 454:..\..\FreeRTOS_Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 455:..\..\FreeRTOS_Source/queue.c **** 	{
 294              		.loc 1 455 0
 295              		.cfi_startproc
 296              		@ args = 0, pretend = 0, frame = 8
 297              		@ frame_needed = 1, uses_anonymous_args = 0
 298 0000 80B5     		push	{r7, lr}
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 7, -8
 301              		.cfi_offset 14, -4
 302 0002 82B0     		sub	sp, sp, #8
 303              		.cfi_def_cfa_offset 16
 304 0004 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
 306 0006 7860     		str	r0, [r7, #4]
 456:..\..\FreeRTOS_Source/queue.c **** 		if( pxNewQueue != NULL )
 307              		.loc 1 456 0
 308 0008 7B68     		ldr	r3, [r7, #4]
 309 000a 002B     		cmp	r3, #0
 310 000c 0ED0     		beq	.L17
 457:..\..\FreeRTOS_Source/queue.c **** 		{
 458:..\..\FreeRTOS_Source/queue.c **** 			/* The queue create function will set all the queue structure members
 459:..\..\FreeRTOS_Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 460:..\..\FreeRTOS_Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 461:..\..\FreeRTOS_Source/queue.c **** 			in particular the information required for priority inheritance. */
 462:..\..\FreeRTOS_Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 311              		.loc 1 462 0
 312 000e 7B68     		ldr	r3, [r7, #4]
 313 0010 0022     		movs	r2, #0
 314 0012 5A60     		str	r2, [r3, #4]
 463:..\..\FreeRTOS_Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 315              		.loc 1 463 0
 316 0014 7B68     		ldr	r3, [r7, #4]
 317 0016 0022     		movs	r2, #0
 318 0018 1A60     		str	r2, [r3]
 464:..\..\FreeRTOS_Source/queue.c **** 
 465:..\..\FreeRTOS_Source/queue.c **** 			/* In case this is a recursive mutex. */
 466:..\..\FreeRTOS_Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 319              		.loc 1 466 0
 320 001a 7B68     		ldr	r3, [r7, #4]
 321 001c 0022     		movs	r2, #0
 322 001e DA60     		str	r2, [r3, #12]
 467:..\..\FreeRTOS_Source/queue.c **** 
 468:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 469:..\..\FreeRTOS_Source/queue.c **** 
 470:..\..\FreeRTOS_Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 471:..\..\FreeRTOS_Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 323              		.loc 1 471 0
 324 0020 0023     		movs	r3, #0
 325 0022 0022     		movs	r2, #0
 326 0024 0021     		movs	r1, #0
 327 0026 7868     		ldr	r0, [r7, #4]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 15
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 15
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 15
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 15
>>>>>>> parent of cb49844... test


 328 0028 FFF7FEFF 		bl	xQueueGenericSend
 329              	.L17:
 472:..\..\FreeRTOS_Source/queue.c **** 		}
 473:..\..\FreeRTOS_Source/queue.c **** 		else
 474:..\..\FreeRTOS_Source/queue.c **** 		{
 475:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 476:..\..\FreeRTOS_Source/queue.c **** 		}
 477:..\..\FreeRTOS_Source/queue.c **** 	}
 330              		.loc 1 477 0
 331 002c 00BF     		nop
 332 002e 0837     		adds	r7, r7, #8
 333              		.cfi_def_cfa_offset 8
 334 0030 BD46     		mov	sp, r7
 335              		.cfi_def_cfa_register 13
 336              		@ sp needed
 337 0032 80BD     		pop	{r7, pc}
 338              		.cfi_endproc
 339              	.LFE71:
 340              		.size	prvInitialiseMutex, .-prvInitialiseMutex
 341              		.section	.text.xQueueCreateMutex,"ax",%progbits
 342              		.align	2
 343              		.global	xQueueCreateMutex
 344              		.thumb
 345              		.thumb_func
 346              		.type	xQueueCreateMutex, %function
 347              	xQueueCreateMutex:
 348              	.LFB72:
 478:..\..\FreeRTOS_Source/queue.c **** 
 479:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
 480:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 481:..\..\FreeRTOS_Source/queue.c **** 
 482:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 483:..\..\FreeRTOS_Source/queue.c **** 
 484:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 485:..\..\FreeRTOS_Source/queue.c **** 	{
 349              		.loc 1 485 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 24
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353 0000 80B5     		push	{r7, lr}
 354              		.cfi_def_cfa_offset 8
 355              		.cfi_offset 7, -8
 356              		.cfi_offset 14, -4
 357 0002 86B0     		sub	sp, sp, #24
 358              		.cfi_def_cfa_offset 32
 359 0004 00AF     		add	r7, sp, #0
 360              		.cfi_def_cfa_register 7
 361 0006 0346     		mov	r3, r0
 362 0008 FB71     		strb	r3, [r7, #7]
 486:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue;
 487:..\..\FreeRTOS_Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 363              		.loc 1 487 0
 364 000a 0123     		movs	r3, #1
 365 000c 7B61     		str	r3, [r7, #20]
 366 000e 0023     		movs	r3, #0
 367 0010 3B61     		str	r3, [r7, #16]
 488:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 16
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 16
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 16
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 16
>>>>>>> parent of cb49844... test


 489:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 368              		.loc 1 489 0
 369 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 370 0014 1A46     		mov	r2, r3
 371 0016 3969     		ldr	r1, [r7, #16]
 372 0018 7869     		ldr	r0, [r7, #20]
 373 001a FFF7FEFF 		bl	xQueueGenericCreate
 374 001e F860     		str	r0, [r7, #12]
 490:..\..\FreeRTOS_Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 375              		.loc 1 490 0
 376 0020 F868     		ldr	r0, [r7, #12]
 377 0022 FFF7FEFF 		bl	prvInitialiseMutex
 491:..\..\FreeRTOS_Source/queue.c **** 
 492:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 378              		.loc 1 492 0
 379 0026 FB68     		ldr	r3, [r7, #12]
 493:..\..\FreeRTOS_Source/queue.c **** 	}
 380              		.loc 1 493 0
 381 0028 1846     		mov	r0, r3
 382 002a 1837     		adds	r7, r7, #24
 383              		.cfi_def_cfa_offset 8
 384 002c BD46     		mov	sp, r7
 385              		.cfi_def_cfa_register 13
 386              		@ sp needed
 387 002e 80BD     		pop	{r7, pc}
 388              		.cfi_endproc
 389              	.LFE72:
 390              		.size	xQueueCreateMutex, .-xQueueCreateMutex
 391              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 392              		.align	2
 393              		.global	xQueueGiveMutexRecursive
 394              		.thumb
 395              		.thumb_func
 396              		.type	xQueueGiveMutexRecursive, %function
 397              	xQueueGiveMutexRecursive:
 398              	.LFB73:
 494:..\..\FreeRTOS_Source/queue.c **** 
 495:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
 496:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 497:..\..\FreeRTOS_Source/queue.c **** 
 498:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 499:..\..\FreeRTOS_Source/queue.c **** 
 500:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 501:..\..\FreeRTOS_Source/queue.c **** 	{
 502:..\..\FreeRTOS_Source/queue.c **** 	Queue_t *pxNewQueue;
 503:..\..\FreeRTOS_Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 504:..\..\FreeRTOS_Source/queue.c **** 
 505:..\..\FreeRTOS_Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 506:..\..\FreeRTOS_Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 507:..\..\FreeRTOS_Source/queue.c **** 		( void ) ucQueueType;
 508:..\..\FreeRTOS_Source/queue.c **** 
 509:..\..\FreeRTOS_Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 510:..\..\FreeRTOS_Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 511:..\..\FreeRTOS_Source/queue.c **** 
 512:..\..\FreeRTOS_Source/queue.c **** 		return pxNewQueue;
 513:..\..\FreeRTOS_Source/queue.c **** 	}
 514:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 17
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 17
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 17
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 17
>>>>>>> parent of cb49844... test


 515:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
 516:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 517:..\..\FreeRTOS_Source/queue.c **** 
 518:..\..\FreeRTOS_Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 519:..\..\FreeRTOS_Source/queue.c **** 
 520:..\..\FreeRTOS_Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 521:..\..\FreeRTOS_Source/queue.c **** 	{
 522:..\..\FreeRTOS_Source/queue.c **** 	void *pxReturn;
 523:..\..\FreeRTOS_Source/queue.c **** 
 524:..\..\FreeRTOS_Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 525:..\..\FreeRTOS_Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 526:..\..\FreeRTOS_Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 527:..\..\FreeRTOS_Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 528:..\..\FreeRTOS_Source/queue.c **** 		following critical section exiting and the function returning. */
 529:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 530:..\..\FreeRTOS_Source/queue.c **** 		{
 531:..\..\FreeRTOS_Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 532:..\..\FreeRTOS_Source/queue.c **** 			{
 533:..\..\FreeRTOS_Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 534:..\..\FreeRTOS_Source/queue.c **** 			}
 535:..\..\FreeRTOS_Source/queue.c **** 			else
 536:..\..\FreeRTOS_Source/queue.c **** 			{
 537:..\..\FreeRTOS_Source/queue.c **** 				pxReturn = NULL;
 538:..\..\FreeRTOS_Source/queue.c **** 			}
 539:..\..\FreeRTOS_Source/queue.c **** 		}
 540:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 541:..\..\FreeRTOS_Source/queue.c **** 
 542:..\..\FreeRTOS_Source/queue.c **** 		return pxReturn;
 543:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 544:..\..\FreeRTOS_Source/queue.c **** 
 545:..\..\FreeRTOS_Source/queue.c **** #endif
 546:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 547:..\..\FreeRTOS_Source/queue.c **** 
 548:..\..\FreeRTOS_Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 549:..\..\FreeRTOS_Source/queue.c **** 
 550:..\..\FreeRTOS_Source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 551:..\..\FreeRTOS_Source/queue.c **** 	{
 552:..\..\FreeRTOS_Source/queue.c **** 	void *pxReturn;
 553:..\..\FreeRTOS_Source/queue.c **** 
 554:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( xSemaphore );
 555:..\..\FreeRTOS_Source/queue.c **** 
 556:..\..\FreeRTOS_Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 557:..\..\FreeRTOS_Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 558:..\..\FreeRTOS_Source/queue.c **** 		not required here. */
 559:..\..\FreeRTOS_Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 560:..\..\FreeRTOS_Source/queue.c **** 		{
 561:..\..\FreeRTOS_Source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 562:..\..\FreeRTOS_Source/queue.c **** 		}
 563:..\..\FreeRTOS_Source/queue.c **** 		else
 564:..\..\FreeRTOS_Source/queue.c **** 		{
 565:..\..\FreeRTOS_Source/queue.c **** 			pxReturn = NULL;
 566:..\..\FreeRTOS_Source/queue.c **** 		}
 567:..\..\FreeRTOS_Source/queue.c **** 
 568:..\..\FreeRTOS_Source/queue.c **** 		return pxReturn;
 569:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 570:..\..\FreeRTOS_Source/queue.c **** 
 571:..\..\FreeRTOS_Source/queue.c **** #endif
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 18
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 18
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 18
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 18
>>>>>>> parent of cb49844... test


 572:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 573:..\..\FreeRTOS_Source/queue.c **** 
 574:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 575:..\..\FreeRTOS_Source/queue.c **** 
 576:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 577:..\..\FreeRTOS_Source/queue.c **** 	{
 399              		.loc 1 577 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 16
 402              		@ frame_needed = 1, uses_anonymous_args = 0
 403 0000 90B5     		push	{r4, r7, lr}
 404              		.cfi_def_cfa_offset 12
 405              		.cfi_offset 4, -12
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 85B0     		sub	sp, sp, #20
 409              		.cfi_def_cfa_offset 32
 410 0004 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 412 0006 7860     		str	r0, [r7, #4]
 578:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
 579:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 413              		.loc 1 579 0
 414 0008 7B68     		ldr	r3, [r7, #4]
 415 000a BB60     		str	r3, [r7, #8]
 580:..\..\FreeRTOS_Source/queue.c **** 
 581:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( pxMutex );
 582:..\..\FreeRTOS_Source/queue.c **** 
 583:..\..\FreeRTOS_Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 584:..\..\FreeRTOS_Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 585:..\..\FreeRTOS_Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 586:..\..\FreeRTOS_Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 587:..\..\FreeRTOS_Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 588:..\..\FreeRTOS_Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 589:..\..\FreeRTOS_Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 416              		.loc 1 589 0
 417 000c BB68     		ldr	r3, [r7, #8]
 418 000e 5C68     		ldr	r4, [r3, #4]
 419 0010 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 420 0014 0346     		mov	r3, r0
 421 0016 9C42     		cmp	r4, r3
 422 0018 11D1     		bne	.L21
 590:..\..\FreeRTOS_Source/queue.c **** 		{
 591:..\..\FreeRTOS_Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 592:..\..\FreeRTOS_Source/queue.c **** 
 593:..\..\FreeRTOS_Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 594:..\..\FreeRTOS_Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 595:..\..\FreeRTOS_Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 596:..\..\FreeRTOS_Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 597:..\..\FreeRTOS_Source/queue.c **** 			uxRecursiveCallCount member. */
 598:..\..\FreeRTOS_Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 423              		.loc 1 598 0
 424 001a BB68     		ldr	r3, [r7, #8]
 425 001c DB68     		ldr	r3, [r3, #12]
 426 001e 5A1E     		subs	r2, r3, #1
 427 0020 BB68     		ldr	r3, [r7, #8]
 428 0022 DA60     		str	r2, [r3, #12]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 19
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 19
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 19
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 19
>>>>>>> parent of cb49844... test


 599:..\..\FreeRTOS_Source/queue.c **** 
 600:..\..\FreeRTOS_Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 601:..\..\FreeRTOS_Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 429              		.loc 1 601 0
 430 0024 BB68     		ldr	r3, [r7, #8]
 431 0026 DB68     		ldr	r3, [r3, #12]
 432 0028 002B     		cmp	r3, #0
 433 002a 05D1     		bne	.L22
 602:..\..\FreeRTOS_Source/queue.c **** 			{
 603:..\..\FreeRTOS_Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 604:..\..\FreeRTOS_Source/queue.c **** 				task that might be waiting to access the mutex. */
 605:..\..\FreeRTOS_Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 434              		.loc 1 605 0
 435 002c 0023     		movs	r3, #0
 436 002e 0022     		movs	r2, #0
 437 0030 0021     		movs	r1, #0
 438 0032 B868     		ldr	r0, [r7, #8]
 439 0034 FFF7FEFF 		bl	xQueueGenericSend
 440              	.L22:
 606:..\..\FreeRTOS_Source/queue.c **** 			}
 607:..\..\FreeRTOS_Source/queue.c **** 			else
 608:..\..\FreeRTOS_Source/queue.c **** 			{
 609:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 610:..\..\FreeRTOS_Source/queue.c **** 			}
 611:..\..\FreeRTOS_Source/queue.c **** 
 612:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 441              		.loc 1 612 0
 442 0038 0123     		movs	r3, #1
 443 003a FB60     		str	r3, [r7, #12]
 444 003c 01E0     		b	.L23
 445              	.L21:
 613:..\..\FreeRTOS_Source/queue.c **** 		}
 614:..\..\FreeRTOS_Source/queue.c **** 		else
 615:..\..\FreeRTOS_Source/queue.c **** 		{
 616:..\..\FreeRTOS_Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 617:..\..\FreeRTOS_Source/queue.c **** 			holder. */
 618:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
 446              		.loc 1 618 0
 447 003e 0023     		movs	r3, #0
 448 0040 FB60     		str	r3, [r7, #12]
 449              	.L23:
 619:..\..\FreeRTOS_Source/queue.c **** 
 620:..\..\FreeRTOS_Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 621:..\..\FreeRTOS_Source/queue.c **** 		}
 622:..\..\FreeRTOS_Source/queue.c **** 
 623:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
 450              		.loc 1 623 0
 451 0042 FB68     		ldr	r3, [r7, #12]
 624:..\..\FreeRTOS_Source/queue.c **** 	}
 452              		.loc 1 624 0
 453 0044 1846     		mov	r0, r3
 454 0046 1437     		adds	r7, r7, #20
 455              		.cfi_def_cfa_offset 12
 456 0048 BD46     		mov	sp, r7
 457              		.cfi_def_cfa_register 13
 458              		@ sp needed
 459 004a 90BD     		pop	{r4, r7, pc}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 20
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 20
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 20
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 20
>>>>>>> parent of cb49844... test


 460              		.cfi_endproc
 461              	.LFE73:
 462              		.size	xQueueGiveMutexRecursive, .-xQueueGiveMutexRecursive
 463              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 464              		.align	2
 465              		.global	xQueueTakeMutexRecursive
 466              		.thumb
 467              		.thumb_func
 468              		.type	xQueueTakeMutexRecursive, %function
 469              	xQueueTakeMutexRecursive:
 470              	.LFB74:
 625:..\..\FreeRTOS_Source/queue.c **** 
 626:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 627:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 628:..\..\FreeRTOS_Source/queue.c **** 
 629:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 630:..\..\FreeRTOS_Source/queue.c **** 
 631:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 632:..\..\FreeRTOS_Source/queue.c **** 	{
 471              		.loc 1 632 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 16
 474              		@ frame_needed = 1, uses_anonymous_args = 0
 475 0000 90B5     		push	{r4, r7, lr}
 476              		.cfi_def_cfa_offset 12
 477              		.cfi_offset 4, -12
 478              		.cfi_offset 7, -8
 479              		.cfi_offset 14, -4
 480 0002 85B0     		sub	sp, sp, #20
 481              		.cfi_def_cfa_offset 32
 482 0004 00AF     		add	r7, sp, #0
 483              		.cfi_def_cfa_register 7
 484 0006 7860     		str	r0, [r7, #4]
 485 0008 3960     		str	r1, [r7]
 633:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
 634:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 486              		.loc 1 634 0
 487 000a 7B68     		ldr	r3, [r7, #4]
 488 000c BB60     		str	r3, [r7, #8]
 635:..\..\FreeRTOS_Source/queue.c **** 
 636:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( pxMutex );
 637:..\..\FreeRTOS_Source/queue.c **** 
 638:..\..\FreeRTOS_Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 639:..\..\FreeRTOS_Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 640:..\..\FreeRTOS_Source/queue.c **** 
 641:..\..\FreeRTOS_Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 642:..\..\FreeRTOS_Source/queue.c **** 
 643:..\..\FreeRTOS_Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 489              		.loc 1 643 0
 490 000e BB68     		ldr	r3, [r7, #8]
 491 0010 5C68     		ldr	r4, [r3, #4]
 492 0012 FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 493 0016 0346     		mov	r3, r0
 494 0018 9C42     		cmp	r4, r3
 495 001a 07D1     		bne	.L26
 644:..\..\FreeRTOS_Source/queue.c **** 		{
 645:..\..\FreeRTOS_Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 21
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 21
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 21
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 21
>>>>>>> parent of cb49844... test


 496              		.loc 1 645 0
 497 001c BB68     		ldr	r3, [r7, #8]
 498 001e DB68     		ldr	r3, [r3, #12]
 499 0020 5A1C     		adds	r2, r3, #1
 500 0022 BB68     		ldr	r3, [r7, #8]
 501 0024 DA60     		str	r2, [r3, #12]
 646:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 502              		.loc 1 646 0
 503 0026 0123     		movs	r3, #1
 504 0028 FB60     		str	r3, [r7, #12]
 505 002a 0CE0     		b	.L27
 506              	.L26:
 647:..\..\FreeRTOS_Source/queue.c **** 		}
 648:..\..\FreeRTOS_Source/queue.c **** 		else
 649:..\..\FreeRTOS_Source/queue.c **** 		{
 650:..\..\FreeRTOS_Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 507              		.loc 1 650 0
 508 002c 3968     		ldr	r1, [r7]
 509 002e B868     		ldr	r0, [r7, #8]
 510 0030 FFF7FEFF 		bl	xQueueSemaphoreTake
 511 0034 F860     		str	r0, [r7, #12]
 651:..\..\FreeRTOS_Source/queue.c **** 
 652:..\..\FreeRTOS_Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 653:..\..\FreeRTOS_Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 654:..\..\FreeRTOS_Source/queue.c **** 			before reaching here. */
 655:..\..\FreeRTOS_Source/queue.c **** 			if( xReturn != pdFAIL )
 512              		.loc 1 655 0
 513 0036 FB68     		ldr	r3, [r7, #12]
 514 0038 002B     		cmp	r3, #0
 515 003a 04D0     		beq	.L27
 656:..\..\FreeRTOS_Source/queue.c **** 			{
 657:..\..\FreeRTOS_Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 516              		.loc 1 657 0
 517 003c BB68     		ldr	r3, [r7, #8]
 518 003e DB68     		ldr	r3, [r3, #12]
 519 0040 5A1C     		adds	r2, r3, #1
 520 0042 BB68     		ldr	r3, [r7, #8]
 521 0044 DA60     		str	r2, [r3, #12]
 522              	.L27:
 658:..\..\FreeRTOS_Source/queue.c **** 			}
 659:..\..\FreeRTOS_Source/queue.c **** 			else
 660:..\..\FreeRTOS_Source/queue.c **** 			{
 661:..\..\FreeRTOS_Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
 662:..\..\FreeRTOS_Source/queue.c **** 			}
 663:..\..\FreeRTOS_Source/queue.c **** 		}
 664:..\..\FreeRTOS_Source/queue.c **** 
 665:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
 523              		.loc 1 665 0
 524 0046 FB68     		ldr	r3, [r7, #12]
 666:..\..\FreeRTOS_Source/queue.c **** 	}
 525              		.loc 1 666 0
 526 0048 1846     		mov	r0, r3
 527 004a 1437     		adds	r7, r7, #20
 528              		.cfi_def_cfa_offset 12
 529 004c BD46     		mov	sp, r7
 530              		.cfi_def_cfa_register 13
 531              		@ sp needed
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 22
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 22
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 22
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 22
>>>>>>> parent of cb49844... test


 532 004e 90BD     		pop	{r4, r7, pc}
 533              		.cfi_endproc
 534              	.LFE74:
 535              		.size	xQueueTakeMutexRecursive, .-xQueueTakeMutexRecursive
 536              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 537              		.align	2
 538              		.global	xQueueCreateCountingSemaphore
 539              		.thumb
 540              		.thumb_func
 541              		.type	xQueueCreateCountingSemaphore, %function
 542              	xQueueCreateCountingSemaphore:
 543              	.LFB75:
 667:..\..\FreeRTOS_Source/queue.c **** 
 668:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 669:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 670:..\..\FreeRTOS_Source/queue.c **** 
 671:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 672:..\..\FreeRTOS_Source/queue.c **** 
 673:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 674:..\..\FreeRTOS_Source/queue.c **** 	{
 675:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xHandle;
 676:..\..\FreeRTOS_Source/queue.c **** 
 677:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 678:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 679:..\..\FreeRTOS_Source/queue.c **** 
 680:..\..\FreeRTOS_Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 681:..\..\FreeRTOS_Source/queue.c **** 
 682:..\..\FreeRTOS_Source/queue.c **** 		if( xHandle != NULL )
 683:..\..\FreeRTOS_Source/queue.c **** 		{
 684:..\..\FreeRTOS_Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 685:..\..\FreeRTOS_Source/queue.c **** 
 686:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 687:..\..\FreeRTOS_Source/queue.c **** 		}
 688:..\..\FreeRTOS_Source/queue.c **** 		else
 689:..\..\FreeRTOS_Source/queue.c **** 		{
 690:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 691:..\..\FreeRTOS_Source/queue.c **** 		}
 692:..\..\FreeRTOS_Source/queue.c **** 
 693:..\..\FreeRTOS_Source/queue.c **** 		return xHandle;
 694:..\..\FreeRTOS_Source/queue.c **** 	}
 695:..\..\FreeRTOS_Source/queue.c **** 
 696:..\..\FreeRTOS_Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 697:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 698:..\..\FreeRTOS_Source/queue.c **** 
 699:..\..\FreeRTOS_Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 700:..\..\FreeRTOS_Source/queue.c **** 
 701:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 702:..\..\FreeRTOS_Source/queue.c **** 	{
 544              		.loc 1 702 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 16
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548 0000 80B5     		push	{r7, lr}
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 7, -8
 551              		.cfi_offset 14, -4
 552 0002 84B0     		sub	sp, sp, #16
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 23
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 23
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 23
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 23
>>>>>>> parent of cb49844... test


 553              		.cfi_def_cfa_offset 24
 554 0004 00AF     		add	r7, sp, #0
 555              		.cfi_def_cfa_register 7
 556 0006 7860     		str	r0, [r7, #4]
 557 0008 3960     		str	r1, [r7]
 703:..\..\FreeRTOS_Source/queue.c **** 	QueueHandle_t xHandle;
 704:..\..\FreeRTOS_Source/queue.c **** 
 705:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 706:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 707:..\..\FreeRTOS_Source/queue.c **** 
 708:..\..\FreeRTOS_Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 558              		.loc 1 708 0
 559 000a 0222     		movs	r2, #2
 560 000c 0021     		movs	r1, #0
 561 000e 7868     		ldr	r0, [r7, #4]
 562 0010 FFF7FEFF 		bl	xQueueGenericCreate
 563 0014 F860     		str	r0, [r7, #12]
 709:..\..\FreeRTOS_Source/queue.c **** 
 710:..\..\FreeRTOS_Source/queue.c **** 		if( xHandle != NULL )
 564              		.loc 1 710 0
 565 0016 FB68     		ldr	r3, [r7, #12]
 566 0018 002B     		cmp	r3, #0
 567 001a 02D0     		beq	.L30
 711:..\..\FreeRTOS_Source/queue.c **** 		{
 712:..\..\FreeRTOS_Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 568              		.loc 1 712 0
 569 001c FB68     		ldr	r3, [r7, #12]
 570 001e 3A68     		ldr	r2, [r7]
 571 0020 9A63     		str	r2, [r3, #56]
 572              	.L30:
 713:..\..\FreeRTOS_Source/queue.c **** 
 714:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 715:..\..\FreeRTOS_Source/queue.c **** 		}
 716:..\..\FreeRTOS_Source/queue.c **** 		else
 717:..\..\FreeRTOS_Source/queue.c **** 		{
 718:..\..\FreeRTOS_Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 719:..\..\FreeRTOS_Source/queue.c **** 		}
 720:..\..\FreeRTOS_Source/queue.c **** 
 721:..\..\FreeRTOS_Source/queue.c **** 		return xHandle;
 573              		.loc 1 721 0
 574 0022 FB68     		ldr	r3, [r7, #12]
 722:..\..\FreeRTOS_Source/queue.c **** 	}
 575              		.loc 1 722 0
 576 0024 1846     		mov	r0, r3
 577 0026 1037     		adds	r7, r7, #16
 578              		.cfi_def_cfa_offset 8
 579 0028 BD46     		mov	sp, r7
 580              		.cfi_def_cfa_register 13
 581              		@ sp needed
 582 002a 80BD     		pop	{r7, pc}
 583              		.cfi_endproc
 584              	.LFE75:
 585              		.size	xQueueCreateCountingSemaphore, .-xQueueCreateCountingSemaphore
 586              		.section	.text.xQueueGenericSend,"ax",%progbits
 587              		.align	2
 588              		.global	xQueueGenericSend
 589              		.thumb
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 24
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 24
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 24
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 24
>>>>>>> parent of cb49844... test


 590              		.thumb_func
 591              		.type	xQueueGenericSend, %function
 592              	xQueueGenericSend:
 593              	.LFB76:
 723:..\..\FreeRTOS_Source/queue.c **** 
 724:..\..\FreeRTOS_Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 725:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 726:..\..\FreeRTOS_Source/queue.c **** 
 727:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 728:..\..\FreeRTOS_Source/queue.c **** {
 594              		.loc 1 728 0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 40
 597              		@ frame_needed = 1, uses_anonymous_args = 0
 598 0000 80B5     		push	{r7, lr}
 599              		.cfi_def_cfa_offset 8
 600              		.cfi_offset 7, -8
 601              		.cfi_offset 14, -4
 602 0002 8AB0     		sub	sp, sp, #40
 603              		.cfi_def_cfa_offset 48
 604 0004 00AF     		add	r7, sp, #0
 605              		.cfi_def_cfa_register 7
 606 0006 F860     		str	r0, [r7, #12]
 607 0008 B960     		str	r1, [r7, #8]
 608 000a 7A60     		str	r2, [r7, #4]
 609 000c 3B60     		str	r3, [r7]
 729:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 610              		.loc 1 729 0
 611 000e 0023     		movs	r3, #0
 612 0010 7B62     		str	r3, [r7, #36]
 730:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
 731:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 613              		.loc 1 731 0
 614 0012 FB68     		ldr	r3, [r7, #12]
 615 0014 3B62     		str	r3, [r7, #32]
 616              	.L47:
 732:..\..\FreeRTOS_Source/queue.c **** 
 733:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
 734:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 735:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 736:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 737:..\..\FreeRTOS_Source/queue.c **** 	{
 738:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 739:..\..\FreeRTOS_Source/queue.c **** 	}
 740:..\..\FreeRTOS_Source/queue.c **** 	#endif
 741:..\..\FreeRTOS_Source/queue.c **** 
 742:..\..\FreeRTOS_Source/queue.c **** 
 743:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 744:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
 745:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
 746:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
 747:..\..\FreeRTOS_Source/queue.c **** 	{
 748:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 617              		.loc 1 748 0
 618 0016 FFF7FEFF 		bl	vPortEnterCritical
 749:..\..\FreeRTOS_Source/queue.c **** 		{
 750:..\..\FreeRTOS_Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 25
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 25
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 25
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 25
>>>>>>> parent of cb49844... test


 751:..\..\FreeRTOS_Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 752:..\..\FreeRTOS_Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 753:..\..\FreeRTOS_Source/queue.c **** 			queue is full. */
 754:..\..\FreeRTOS_Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 619              		.loc 1 754 0
 620 001a 3B6A     		ldr	r3, [r7, #32]
 621 001c 9A6B     		ldr	r2, [r3, #56]
 622 001e 3B6A     		ldr	r3, [r7, #32]
 623 0020 DB6B     		ldr	r3, [r3, #60]
 624 0022 9A42     		cmp	r2, r3
 625 0024 02D3     		bcc	.L33
 626              		.loc 1 754 0 is_stmt 0 discriminator 1
 627 0026 3B68     		ldr	r3, [r7]
 628 0028 022B     		cmp	r3, #2
 629 002a 29D1     		bne	.L34
 630              	.L33:
 755:..\..\FreeRTOS_Source/queue.c **** 			{
 756:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 757:..\..\FreeRTOS_Source/queue.c **** 
 758:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 759:..\..\FreeRTOS_Source/queue.c **** 				{
 760:..\..\FreeRTOS_Source/queue.c **** 				UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 761:..\..\FreeRTOS_Source/queue.c **** 
 762:..\..\FreeRTOS_Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 763:..\..\FreeRTOS_Source/queue.c **** 
 764:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 765:..\..\FreeRTOS_Source/queue.c **** 					{
 766:..\..\FreeRTOS_Source/queue.c **** 						if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 )
 767:..\..\FreeRTOS_Source/queue.c **** 						{
 768:..\..\FreeRTOS_Source/queue.c **** 							/* Do not notify the queue set as an existing item
 769:..\..\FreeRTOS_Source/queue.c **** 							was overwritten in the queue so the number of items
 770:..\..\FreeRTOS_Source/queue.c **** 							in the queue has not changed. */
 771:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 772:..\..\FreeRTOS_Source/queue.c **** 						}
 773:..\..\FreeRTOS_Source/queue.c **** 						else if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 774:..\..\FreeRTOS_Source/queue.c **** 						{
 775:..\..\FreeRTOS_Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 776:..\..\FreeRTOS_Source/queue.c **** 							to the queue set caused a higher priority task to
 777:..\..\FreeRTOS_Source/queue.c **** 							unblock. A context switch is required. */
 778:..\..\FreeRTOS_Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 779:..\..\FreeRTOS_Source/queue.c **** 						}
 780:..\..\FreeRTOS_Source/queue.c **** 						else
 781:..\..\FreeRTOS_Source/queue.c **** 						{
 782:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 783:..\..\FreeRTOS_Source/queue.c **** 						}
 784:..\..\FreeRTOS_Source/queue.c **** 					}
 785:..\..\FreeRTOS_Source/queue.c **** 					else
 786:..\..\FreeRTOS_Source/queue.c **** 					{
 787:..\..\FreeRTOS_Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 788:..\..\FreeRTOS_Source/queue.c **** 						queue then unblock it now. */
 789:..\..\FreeRTOS_Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 790:..\..\FreeRTOS_Source/queue.c **** 						{
 791:..\..\FreeRTOS_Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 792:..\..\FreeRTOS_Source/queue.c **** 							{
 793:..\..\FreeRTOS_Source/queue.c **** 								/* The unblocked task has a priority higher than
 794:..\..\FreeRTOS_Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 795:..\..\FreeRTOS_Source/queue.c **** 								do this from within the critical section - the
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 26
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 26
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 26
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 26
>>>>>>> parent of cb49844... test


 796:..\..\FreeRTOS_Source/queue.c **** 								kernel takes care of that. */
 797:..\..\FreeRTOS_Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 798:..\..\FreeRTOS_Source/queue.c **** 							}
 799:..\..\FreeRTOS_Source/queue.c **** 							else
 800:..\..\FreeRTOS_Source/queue.c **** 							{
 801:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 802:..\..\FreeRTOS_Source/queue.c **** 							}
 803:..\..\FreeRTOS_Source/queue.c **** 						}
 804:..\..\FreeRTOS_Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 805:..\..\FreeRTOS_Source/queue.c **** 						{
 806:..\..\FreeRTOS_Source/queue.c **** 							/* This path is a special case that will only get
 807:..\..\FreeRTOS_Source/queue.c **** 							executed if the task was holding multiple mutexes
 808:..\..\FreeRTOS_Source/queue.c **** 							and the mutexes were given back in an order that is
 809:..\..\FreeRTOS_Source/queue.c **** 							different to that in which they were taken. */
 810:..\..\FreeRTOS_Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 811:..\..\FreeRTOS_Source/queue.c **** 						}
 812:..\..\FreeRTOS_Source/queue.c **** 						else
 813:..\..\FreeRTOS_Source/queue.c **** 						{
 814:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 815:..\..\FreeRTOS_Source/queue.c **** 						}
 816:..\..\FreeRTOS_Source/queue.c **** 					}
 817:..\..\FreeRTOS_Source/queue.c **** 				}
 818:..\..\FreeRTOS_Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 819:..\..\FreeRTOS_Source/queue.c **** 				{
 820:..\..\FreeRTOS_Source/queue.c **** 					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 631              		.loc 1 820 0 is_stmt 1
 632 002c 3A68     		ldr	r2, [r7]
 633 002e B968     		ldr	r1, [r7, #8]
 634 0030 386A     		ldr	r0, [r7, #32]
 635 0032 FFF7FEFF 		bl	prvCopyDataToQueue
 636 0036 F861     		str	r0, [r7, #28]
 821:..\..\FreeRTOS_Source/queue.c **** 
 822:..\..\FreeRTOS_Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 823:..\..\FreeRTOS_Source/queue.c **** 					queue then unblock it now. */
 824:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 637              		.loc 1 824 0
 638 0038 3B6A     		ldr	r3, [r7, #32]
 639 003a 5B6A     		ldr	r3, [r3, #36]
 640 003c 002B     		cmp	r3, #0
 641 003e 10D0     		beq	.L35
 825:..\..\FreeRTOS_Source/queue.c **** 					{
 826:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 642              		.loc 1 826 0
 643 0040 3B6A     		ldr	r3, [r7, #32]
 644 0042 2433     		adds	r3, r3, #36
 645 0044 1846     		mov	r0, r3
 646 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 647 004a 0346     		mov	r3, r0
 648 004c 002B     		cmp	r3, #0
 649 004e 13D0     		beq	.L36
 827:..\..\FreeRTOS_Source/queue.c **** 						{
 828:..\..\FreeRTOS_Source/queue.c **** 							/* The unblocked task has a priority higher than
 829:..\..\FreeRTOS_Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 830:..\..\FreeRTOS_Source/queue.c **** 							this from within the critical section - the kernel
 831:..\..\FreeRTOS_Source/queue.c **** 							takes care of that. */
 832:..\..\FreeRTOS_Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 650              		.loc 1 832 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 27
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 27
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 27
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 27
>>>>>>> parent of cb49844... test


 651 0050 3F4B     		ldr	r3, .L49
 652 0052 4FF08052 		mov	r2, #268435456
 653 0056 1A60     		str	r2, [r3]
 654              		.syntax unified
 655              	@ 832 "..\..\FreeRTOS_Source\queue.c" 1
 656 0058 BFF34F8F 		dsb
 657              	@ 0 "" 2
 658              	@ 832 "..\..\FreeRTOS_Source\queue.c" 1
 659 005c BFF36F8F 		isb
 660              	@ 0 "" 2
 661              		.thumb
 662              		.syntax unified
 663 0060 0AE0     		b	.L36
 664              	.L35:
 833:..\..\FreeRTOS_Source/queue.c **** 						}
 834:..\..\FreeRTOS_Source/queue.c **** 						else
 835:..\..\FreeRTOS_Source/queue.c **** 						{
 836:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 837:..\..\FreeRTOS_Source/queue.c **** 						}
 838:..\..\FreeRTOS_Source/queue.c **** 					}
 839:..\..\FreeRTOS_Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 665              		.loc 1 839 0
 666 0062 FB69     		ldr	r3, [r7, #28]
 667 0064 002B     		cmp	r3, #0
 668 0066 07D0     		beq	.L36
 840:..\..\FreeRTOS_Source/queue.c **** 					{
 841:..\..\FreeRTOS_Source/queue.c **** 						/* This path is a special case that will only get
 842:..\..\FreeRTOS_Source/queue.c **** 						executed if the task was holding multiple mutexes and
 843:..\..\FreeRTOS_Source/queue.c **** 						the mutexes were given back in an order that is
 844:..\..\FreeRTOS_Source/queue.c **** 						different to that in which they were taken. */
 845:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 669              		.loc 1 845 0
 670 0068 394B     		ldr	r3, .L49
 671 006a 4FF08052 		mov	r2, #268435456
 672 006e 1A60     		str	r2, [r3]
 673              		.syntax unified
 674              	@ 845 "..\..\FreeRTOS_Source\queue.c" 1
 675 0070 BFF34F8F 		dsb
 676              	@ 0 "" 2
 677              	@ 845 "..\..\FreeRTOS_Source\queue.c" 1
 678 0074 BFF36F8F 		isb
 679              	@ 0 "" 2
 680              		.thumb
 681              		.syntax unified
 682              	.L36:
 846:..\..\FreeRTOS_Source/queue.c **** 					}
 847:..\..\FreeRTOS_Source/queue.c **** 					else
 848:..\..\FreeRTOS_Source/queue.c **** 					{
 849:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 850:..\..\FreeRTOS_Source/queue.c **** 					}
 851:..\..\FreeRTOS_Source/queue.c **** 				}
 852:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 853:..\..\FreeRTOS_Source/queue.c **** 
 854:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 683              		.loc 1 854 0
 684 0078 FFF7FEFF 		bl	vPortExitCritical
 855:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 28
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 28
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 28
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 28
>>>>>>> parent of cb49844... test


 685              		.loc 1 855 0
 686 007c 0123     		movs	r3, #1
 687 007e 63E0     		b	.L48
 688              	.L34:
 856:..\..\FreeRTOS_Source/queue.c **** 			}
 857:..\..\FreeRTOS_Source/queue.c **** 			else
 858:..\..\FreeRTOS_Source/queue.c **** 			{
 859:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 689              		.loc 1 859 0
 690 0080 7B68     		ldr	r3, [r7, #4]
 691 0082 002B     		cmp	r3, #0
 692 0084 03D1     		bne	.L38
 860:..\..\FreeRTOS_Source/queue.c **** 				{
 861:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was full and no block time is specified (or
 862:..\..\FreeRTOS_Source/queue.c **** 					the block time has expired) so leave now. */
 863:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 693              		.loc 1 863 0
 694 0086 FFF7FEFF 		bl	vPortExitCritical
 864:..\..\FreeRTOS_Source/queue.c **** 
 865:..\..\FreeRTOS_Source/queue.c **** 					/* Return to the original privilege level before exiting
 866:..\..\FreeRTOS_Source/queue.c **** 					the function. */
 867:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 868:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_FULL;
 695              		.loc 1 868 0
 696 008a 0023     		movs	r3, #0
 697 008c 5CE0     		b	.L48
 698              	.L38:
 869:..\..\FreeRTOS_Source/queue.c **** 				}
 870:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 699              		.loc 1 870 0
 700 008e 7B6A     		ldr	r3, [r7, #36]
 701 0090 002B     		cmp	r3, #0
 702 0092 06D1     		bne	.L39
 871:..\..\FreeRTOS_Source/queue.c **** 				{
 872:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was full and a block time was specified so
 873:..\..\FreeRTOS_Source/queue.c **** 					configure the timeout structure. */
 874:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 703              		.loc 1 874 0
 704 0094 07F11403 		add	r3, r7, #20
 705 0098 1846     		mov	r0, r3
 706 009a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 875:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 707              		.loc 1 875 0
 708 009e 0123     		movs	r3, #1
 709 00a0 7B62     		str	r3, [r7, #36]
 710              	.L39:
 876:..\..\FreeRTOS_Source/queue.c **** 				}
 877:..\..\FreeRTOS_Source/queue.c **** 				else
 878:..\..\FreeRTOS_Source/queue.c **** 				{
 879:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
 880:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 881:..\..\FreeRTOS_Source/queue.c **** 				}
 882:..\..\FreeRTOS_Source/queue.c **** 			}
 883:..\..\FreeRTOS_Source/queue.c **** 		}
 884:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 711              		.loc 1 884 0
 712 00a2 FFF7FEFF 		bl	vPortExitCritical
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 29
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 29
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 29
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 29
>>>>>>> parent of cb49844... test


 885:..\..\FreeRTOS_Source/queue.c **** 
 886:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 887:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
 888:..\..\FreeRTOS_Source/queue.c **** 
 889:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 713              		.loc 1 889 0
 714 00a6 FFF7FEFF 		bl	vTaskSuspendAll
 890:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
 715              		.loc 1 890 0
 716 00aa FFF7FEFF 		bl	vPortEnterCritical
 717 00ae 3B6A     		ldr	r3, [r7, #32]
 718 00b0 93F84430 		ldrb	r3, [r3, #68]
 719 00b4 5BB2     		sxtb	r3, r3
 720 00b6 B3F1FF3F 		cmp	r3, #-1
 721 00ba 03D1     		bne	.L40
 722              		.loc 1 890 0 is_stmt 0 discriminator 1
 723 00bc 3B6A     		ldr	r3, [r7, #32]
 724 00be 0022     		movs	r2, #0
 725 00c0 83F84420 		strb	r2, [r3, #68]
 726              	.L40:
 727              		.loc 1 890 0 discriminator 3
 728 00c4 3B6A     		ldr	r3, [r7, #32]
 729 00c6 93F84530 		ldrb	r3, [r3, #69]
 730 00ca 5BB2     		sxtb	r3, r3
 731 00cc B3F1FF3F 		cmp	r3, #-1
 732 00d0 03D1     		bne	.L41
 733              		.loc 1 890 0 discriminator 4
 734 00d2 3B6A     		ldr	r3, [r7, #32]
 735 00d4 0022     		movs	r2, #0
 736 00d6 83F84520 		strb	r2, [r3, #69]
 737              	.L41:
 738              		.loc 1 890 0 discriminator 6
 739 00da FFF7FEFF 		bl	vPortExitCritical
 891:..\..\FreeRTOS_Source/queue.c **** 
 892:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 893:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 740              		.loc 1 893 0 is_stmt 1 discriminator 6
 741 00de 3A1D     		adds	r2, r7, #4
 742 00e0 07F11403 		add	r3, r7, #20
 743 00e4 1146     		mov	r1, r2
 744 00e6 1846     		mov	r0, r3
 745 00e8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 746 00ec 0346     		mov	r3, r0
 747 00ee 002B     		cmp	r3, #0
 748 00f0 24D1     		bne	.L42
 894:..\..\FreeRTOS_Source/queue.c **** 		{
 895:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 749              		.loc 1 895 0
 750 00f2 386A     		ldr	r0, [r7, #32]
 751 00f4 FFF7FEFF 		bl	prvIsQueueFull
 752 00f8 0346     		mov	r3, r0
 753 00fa 002B     		cmp	r3, #0
 754 00fc 18D0     		beq	.L43
 896:..\..\FreeRTOS_Source/queue.c **** 			{
 897:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 898:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 755              		.loc 1 898 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 30
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 30
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 30
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 30
>>>>>>> parent of cb49844... test


 756 00fe 3B6A     		ldr	r3, [r7, #32]
 757 0100 1033     		adds	r3, r3, #16
 758 0102 7A68     		ldr	r2, [r7, #4]
 759 0104 1146     		mov	r1, r2
 760 0106 1846     		mov	r0, r3
 761 0108 FFF7FEFF 		bl	vTaskPlaceOnEventList
 899:..\..\FreeRTOS_Source/queue.c **** 
 900:..\..\FreeRTOS_Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 901:..\..\FreeRTOS_Source/queue.c **** 				event list.  It is possible that interrupts occurring now
 902:..\..\FreeRTOS_Source/queue.c **** 				remove this task from the event list again - but as the
 903:..\..\FreeRTOS_Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 904:..\..\FreeRTOS_Source/queue.c **** 				ready last instead of the actual ready list. */
 905:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 762              		.loc 1 905 0
 763 010c 386A     		ldr	r0, [r7, #32]
 764 010e FFF7FEFF 		bl	prvUnlockQueue
 906:..\..\FreeRTOS_Source/queue.c **** 
 907:..\..\FreeRTOS_Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 908:..\..\FreeRTOS_Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 909:..\..\FreeRTOS_Source/queue.c **** 				task is already in a ready list before it yields - in which
 910:..\..\FreeRTOS_Source/queue.c **** 				case the yield will not cause a context switch unless there
 911:..\..\FreeRTOS_Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 912:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 765              		.loc 1 912 0
 766 0112 FFF7FEFF 		bl	xTaskResumeAll
 767 0116 0346     		mov	r3, r0
 768 0118 002B     		cmp	r3, #0
 769 011a 7FF47CAF 		bne	.L47
 913:..\..\FreeRTOS_Source/queue.c **** 				{
 914:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 770              		.loc 1 914 0
 771 011e 0C4B     		ldr	r3, .L49
 772 0120 4FF08052 		mov	r2, #268435456
 773 0124 1A60     		str	r2, [r3]
 774              		.syntax unified
 775              	@ 914 "..\..\FreeRTOS_Source\queue.c" 1
 776 0126 BFF34F8F 		dsb
 777              	@ 0 "" 2
 778              	@ 914 "..\..\FreeRTOS_Source\queue.c" 1
 779 012a BFF36F8F 		isb
 780              	@ 0 "" 2
 781              		.thumb
 782              		.syntax unified
 783 012e 72E7     		b	.L47
 784              	.L43:
 915:..\..\FreeRTOS_Source/queue.c **** 				}
 916:..\..\FreeRTOS_Source/queue.c **** 			}
 917:..\..\FreeRTOS_Source/queue.c **** 			else
 918:..\..\FreeRTOS_Source/queue.c **** 			{
 919:..\..\FreeRTOS_Source/queue.c **** 				/* Try again. */
 920:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 785              		.loc 1 920 0
 786 0130 386A     		ldr	r0, [r7, #32]
 787 0132 FFF7FEFF 		bl	prvUnlockQueue
 921:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 788              		.loc 1 921 0
 789 0136 FFF7FEFF 		bl	xTaskResumeAll
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 31
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 31
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 31
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 31
>>>>>>> parent of cb49844... test


 790 013a 6CE7     		b	.L47
 791              	.L42:
 922:..\..\FreeRTOS_Source/queue.c **** 			}
 923:..\..\FreeRTOS_Source/queue.c **** 		}
 924:..\..\FreeRTOS_Source/queue.c **** 		else
 925:..\..\FreeRTOS_Source/queue.c **** 		{
 926:..\..\FreeRTOS_Source/queue.c **** 			/* The timeout has expired. */
 927:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
 792              		.loc 1 927 0
 793 013c 386A     		ldr	r0, [r7, #32]
 794 013e FFF7FEFF 		bl	prvUnlockQueue
 928:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 795              		.loc 1 928 0
 796 0142 FFF7FEFF 		bl	xTaskResumeAll
 929:..\..\FreeRTOS_Source/queue.c **** 
 930:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 931:..\..\FreeRTOS_Source/queue.c **** 			return errQUEUE_FULL;
 797              		.loc 1 931 0
 798 0146 0023     		movs	r3, #0
 799              	.L48:
 932:..\..\FreeRTOS_Source/queue.c **** 		}
 933:..\..\FreeRTOS_Source/queue.c **** 	}
 934:..\..\FreeRTOS_Source/queue.c **** }
 800              		.loc 1 934 0 discriminator 3
 801 0148 1846     		mov	r0, r3
 802 014a 2837     		adds	r7, r7, #40
 803              		.cfi_def_cfa_offset 8
 804 014c BD46     		mov	sp, r7
 805              		.cfi_def_cfa_register 13
 806              		@ sp needed
 807 014e 80BD     		pop	{r7, pc}
 808              	.L50:
 809              		.align	2
 810              	.L49:
 811 0150 04ED00E0 		.word	-536810236
 812              		.cfi_endproc
 813              	.LFE76:
 814              		.size	xQueueGenericSend, .-xQueueGenericSend
 815              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 816              		.align	2
 817              		.global	xQueueGenericSendFromISR
 818              		.thumb
 819              		.thumb_func
 820              		.type	xQueueGenericSendFromISR, %function
 821              	xQueueGenericSendFromISR:
 822              	.LFB77:
 935:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
 936:..\..\FreeRTOS_Source/queue.c **** 
 937:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 938:..\..\FreeRTOS_Source/queue.c **** {
 823              		.loc 1 938 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 48
 826              		@ frame_needed = 1, uses_anonymous_args = 0
 827 0000 80B5     		push	{r7, lr}
 828              		.cfi_def_cfa_offset 8
 829              		.cfi_offset 7, -8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 32
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 32
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 32
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 32
>>>>>>> parent of cb49844... test


 830              		.cfi_offset 14, -4
 831 0002 8CB0     		sub	sp, sp, #48
 832              		.cfi_def_cfa_offset 56
 833 0004 00AF     		add	r7, sp, #0
 834              		.cfi_def_cfa_register 7
 835 0006 F860     		str	r0, [r7, #12]
 836 0008 B960     		str	r1, [r7, #8]
 837 000a 7A60     		str	r2, [r7, #4]
 838 000c 3B60     		str	r3, [r7]
 939:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
 940:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 941:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 839              		.loc 1 941 0
 840 000e FB68     		ldr	r3, [r7, #12]
 841 0010 BB62     		str	r3, [r7, #40]
 842              	.LBB23:
 843              	.LBB24:
 844              		.file 2 "..\\..\\FreeRTOS_Source\\portable\\GCC\\ARM_CM3/portmacro.h"
   1:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*
   2:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
   5:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * subject to the following conditions:
  11:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  12:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * copies or substantial portions of the Software.
  14:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  15:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  22:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://www.FreeRTOS.org
  23:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * http://aws.amazon.com/freertos
  24:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  25:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * 1 tab == 4 spaces!
  26:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  27:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  28:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  29:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef PORTMACRO_H
  30:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define PORTMACRO_H
  31:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  32:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef __cplusplus
  33:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern "C" {
  34:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  35:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  36:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------
  37:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * Port specific definitions.
  38:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  39:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 33
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 33
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 33
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 33
>>>>>>> parent of cb49844... test


  40:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * given hardware and compiler.
  41:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *
  42:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  * These settings should not be altered.
  43:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  *-----------------------------------------------------------
  44:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h ****  */
  45:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  46:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Type definitions. */
  47:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCHAR		char
  48:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portFLOAT		float
  49:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDOUBLE		double
  50:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portLONG		long
  51:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSHORT		short
  52:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBASE_TYPE	long
  54:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  55:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef long BaseType_t;
  57:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** typedef unsigned long UBaseType_t;
  58:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  59:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint16_t TickType_t;
  61:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #else
  63:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	typedef uint32_t TickType_t;
  64:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  66:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	not need to be guarded with a critical section. */
  68:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
  70:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  71:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  72:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specifics. */
  73:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  77:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  78:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Scheduler utilities. */
  79:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD() 															\
  80:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {																				\
  81:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 																				\
  84:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "isb" );													\
  88:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
  89:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  90:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
  95:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
  96:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Critical section management. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 34
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 34
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 34
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 34
>>>>>>> parent of cb49844... test


  97:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortEnterCritical( void );
  98:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** extern void vPortExitCritical( void );
  99:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 106:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 107:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 108:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** (which build with all the ports) will build. */
 111:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 114:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 115:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Tickless idle/low power functionality. */
 116:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 120:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 121:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 122:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* Architecture specific optimisations. */
 123:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 126:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 127:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 129:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Generic helper function. */
 130:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 132:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	uint8_t ucReturn;
 133:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 134:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		return ucReturn;
 136:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 137:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 138:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Check the configuration. */
 139:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#endif
 142:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 143:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 147:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 149:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 151:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 153:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 35
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 35
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 35
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 35
>>>>>>> parent of cb49844... test


 154:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 155:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifdef configASSERT
 156:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 159:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 160:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /* portNOP() is not required by this port. */
 161:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portNOP()
 162:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 163:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #define portINLINE	__inline
 164:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 165:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #ifndef portFORCE_INLINE
 166:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** #endif
 168:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 169:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 171:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** BaseType_t xReturn;
 173:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 174:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 177:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 179:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdFALSE;
 180:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 181:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	else
 182:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	{
 183:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		xReturn = pdTRUE;
 184:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	}
 185:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 186:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return xReturn;
 187:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 188:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 189:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 190:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 191:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 193:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulNewBASEPRI;
 194:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 195:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 196:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 197:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %0, %1												\n" \
 198:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 200:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 201:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 203:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 204:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 205:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 206:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 207:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 209:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 36
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 36
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 36
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 36
>>>>>>> parent of cb49844... test


 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 845              		.loc 2 211 0
 846              		.syntax unified
 847              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 848 0012 EFF31182 			mrs r2, basepri											
 849 0016 4FF0A003 		mov r3, #160												
 850 001a 83F31188 		msr basepri, r3											
 851 001e BFF36F8F 		isb														
 852 0022 BFF34F8F 		dsb														
 853              	
 854              	@ 0 "" 2
 855              		.thumb
 856              		.syntax unified
 857 0026 BA61     		str	r2, [r7, #24]
 858 0028 7B61     		str	r3, [r7, #20]
 212:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 213:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	mov %1, %2												\n" \
 215:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	isb														\n" \
 217:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		"	dsb														\n" \
 218:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	);
 220:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 221:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	warnings. */
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	return ulOriginalBASEPRI;
 859              		.loc 2 223 0
 860 002a BB69     		ldr	r3, [r7, #24]
 861              	.LBE24:
 862              	.LBE23:
 942:..\..\FreeRTOS_Source/queue.c **** 
 943:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
 944:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 945:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 946:..\..\FreeRTOS_Source/queue.c **** 
 947:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 948:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 949:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 950:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 951:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 952:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 953:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 954:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 955:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 956:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 957:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 958:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
 959:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 960:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 961:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 962:..\..\FreeRTOS_Source/queue.c **** 
 963:..\..\FreeRTOS_Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 964:..\..\FreeRTOS_Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 965:..\..\FreeRTOS_Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 966:..\..\FreeRTOS_Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 967:..\..\FreeRTOS_Source/queue.c **** 	post). */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 37
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 37
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 37
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 37
>>>>>>> parent of cb49844... test


 968:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 863              		.loc 1 968 0
 864 002c 3B62     		str	r3, [r7, #32]
 969:..\..\FreeRTOS_Source/queue.c **** 	{
 970:..\..\FreeRTOS_Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 865              		.loc 1 970 0
 866 002e BB6A     		ldr	r3, [r7, #40]
 867 0030 9A6B     		ldr	r2, [r3, #56]
 868 0032 BB6A     		ldr	r3, [r7, #40]
 869 0034 DB6B     		ldr	r3, [r3, #60]
 870 0036 9A42     		cmp	r2, r3
 871 0038 02D3     		bcc	.L53
 872              		.loc 1 970 0 is_stmt 0 discriminator 1
 873 003a 3B68     		ldr	r3, [r7]
 874 003c 022B     		cmp	r3, #2
 875 003e 2AD1     		bne	.L54
 876              	.L53:
 877              	.LBB25:
 971:..\..\FreeRTOS_Source/queue.c **** 		{
 972:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 878              		.loc 1 972 0 is_stmt 1
 879 0040 BB6A     		ldr	r3, [r7, #40]
 880 0042 93F84530 		ldrb	r3, [r3, #69]
 881 0046 FB77     		strb	r3, [r7, #31]
 973:..\..\FreeRTOS_Source/queue.c **** 
 974:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 975:..\..\FreeRTOS_Source/queue.c **** 
 976:..\..\FreeRTOS_Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 977:..\..\FreeRTOS_Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 978:..\..\FreeRTOS_Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 979:..\..\FreeRTOS_Source/queue.c **** 			called here even though the disinherit function does not check if
 980:..\..\FreeRTOS_Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 981:..\..\FreeRTOS_Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 882              		.loc 1 981 0
 883 0048 3A68     		ldr	r2, [r7]
 884 004a B968     		ldr	r1, [r7, #8]
 885 004c B86A     		ldr	r0, [r7, #40]
 886 004e FFF7FEFF 		bl	prvCopyDataToQueue
 982:..\..\FreeRTOS_Source/queue.c **** 
 983:..\..\FreeRTOS_Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 984:..\..\FreeRTOS_Source/queue.c **** 			be done when the queue is unlocked later. */
 985:..\..\FreeRTOS_Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 887              		.loc 1 985 0
 888 0052 97F91F30 		ldrsb	r3, [r7, #31]
 889 0056 B3F1FF3F 		cmp	r3, #-1
 890 005a 12D1     		bne	.L55
 986:..\..\FreeRTOS_Source/queue.c **** 			{
 987:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 988:..\..\FreeRTOS_Source/queue.c **** 				{
 989:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 990:..\..\FreeRTOS_Source/queue.c **** 					{
 991:..\..\FreeRTOS_Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 992:..\..\FreeRTOS_Source/queue.c **** 						{
 993:..\..\FreeRTOS_Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 994:..\..\FreeRTOS_Source/queue.c **** 							to the queue set caused a higher priority task to
 995:..\..\FreeRTOS_Source/queue.c **** 							unblock.  A context switch is required. */
 996:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 38
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 38
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 38
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 38
>>>>>>> parent of cb49844... test


 997:..\..\FreeRTOS_Source/queue.c **** 							{
 998:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 999:..\..\FreeRTOS_Source/queue.c **** 							}
1000:..\..\FreeRTOS_Source/queue.c **** 							else
1001:..\..\FreeRTOS_Source/queue.c **** 							{
1002:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1003:..\..\FreeRTOS_Source/queue.c **** 							}
1004:..\..\FreeRTOS_Source/queue.c **** 						}
1005:..\..\FreeRTOS_Source/queue.c **** 						else
1006:..\..\FreeRTOS_Source/queue.c **** 						{
1007:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1008:..\..\FreeRTOS_Source/queue.c **** 						}
1009:..\..\FreeRTOS_Source/queue.c **** 					}
1010:..\..\FreeRTOS_Source/queue.c **** 					else
1011:..\..\FreeRTOS_Source/queue.c **** 					{
1012:..\..\FreeRTOS_Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1013:..\..\FreeRTOS_Source/queue.c **** 						{
1014:..\..\FreeRTOS_Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1015:..\..\FreeRTOS_Source/queue.c **** 							{
1016:..\..\FreeRTOS_Source/queue.c **** 								/* The task waiting has a higher priority so
1017:..\..\FreeRTOS_Source/queue.c **** 								record that a context switch is required. */
1018:..\..\FreeRTOS_Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1019:..\..\FreeRTOS_Source/queue.c **** 								{
1020:..\..\FreeRTOS_Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1021:..\..\FreeRTOS_Source/queue.c **** 								}
1022:..\..\FreeRTOS_Source/queue.c **** 								else
1023:..\..\FreeRTOS_Source/queue.c **** 								{
1024:..\..\FreeRTOS_Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1025:..\..\FreeRTOS_Source/queue.c **** 								}
1026:..\..\FreeRTOS_Source/queue.c **** 							}
1027:..\..\FreeRTOS_Source/queue.c **** 							else
1028:..\..\FreeRTOS_Source/queue.c **** 							{
1029:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1030:..\..\FreeRTOS_Source/queue.c **** 							}
1031:..\..\FreeRTOS_Source/queue.c **** 						}
1032:..\..\FreeRTOS_Source/queue.c **** 						else
1033:..\..\FreeRTOS_Source/queue.c **** 						{
1034:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1035:..\..\FreeRTOS_Source/queue.c **** 						}
1036:..\..\FreeRTOS_Source/queue.c **** 					}
1037:..\..\FreeRTOS_Source/queue.c **** 				}
1038:..\..\FreeRTOS_Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1039:..\..\FreeRTOS_Source/queue.c **** 				{
1040:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 891              		.loc 1 1040 0
 892 005c BB6A     		ldr	r3, [r7, #40]
 893 005e 5B6A     		ldr	r3, [r3, #36]
 894 0060 002B     		cmp	r3, #0
 895 0062 15D0     		beq	.L56
1041:..\..\FreeRTOS_Source/queue.c **** 					{
1042:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 896              		.loc 1 1042 0
 897 0064 BB6A     		ldr	r3, [r7, #40]
 898 0066 2433     		adds	r3, r3, #36
 899 0068 1846     		mov	r0, r3
 900 006a FFF7FEFF 		bl	xTaskRemoveFromEventList
 901 006e 0346     		mov	r3, r0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 39
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 39
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 39
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 39
>>>>>>> parent of cb49844... test


 902 0070 002B     		cmp	r3, #0
 903 0072 0DD0     		beq	.L56
1043:..\..\FreeRTOS_Source/queue.c **** 						{
1044:..\..\FreeRTOS_Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1045:..\..\FreeRTOS_Source/queue.c **** 							context	switch is required. */
1046:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 904              		.loc 1 1046 0
 905 0074 7B68     		ldr	r3, [r7, #4]
 906 0076 002B     		cmp	r3, #0
 907 0078 0AD0     		beq	.L56
1047:..\..\FreeRTOS_Source/queue.c **** 							{
1048:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 908              		.loc 1 1048 0
 909 007a 7B68     		ldr	r3, [r7, #4]
 910 007c 0122     		movs	r2, #1
 911 007e 1A60     		str	r2, [r3]
 912 0080 06E0     		b	.L56
 913              	.L55:
1049:..\..\FreeRTOS_Source/queue.c **** 							}
1050:..\..\FreeRTOS_Source/queue.c **** 							else
1051:..\..\FreeRTOS_Source/queue.c **** 							{
1052:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1053:..\..\FreeRTOS_Source/queue.c **** 							}
1054:..\..\FreeRTOS_Source/queue.c **** 						}
1055:..\..\FreeRTOS_Source/queue.c **** 						else
1056:..\..\FreeRTOS_Source/queue.c **** 						{
1057:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1058:..\..\FreeRTOS_Source/queue.c **** 						}
1059:..\..\FreeRTOS_Source/queue.c **** 					}
1060:..\..\FreeRTOS_Source/queue.c **** 					else
1061:..\..\FreeRTOS_Source/queue.c **** 					{
1062:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1063:..\..\FreeRTOS_Source/queue.c **** 					}
1064:..\..\FreeRTOS_Source/queue.c **** 				}
1065:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1066:..\..\FreeRTOS_Source/queue.c **** 			}
1067:..\..\FreeRTOS_Source/queue.c **** 			else
1068:..\..\FreeRTOS_Source/queue.c **** 			{
1069:..\..\FreeRTOS_Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1070:..\..\FreeRTOS_Source/queue.c **** 				knows that data was posted while it was locked. */
1071:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 914              		.loc 1 1071 0
 915 0082 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 916 0084 0133     		adds	r3, r3, #1
 917 0086 DBB2     		uxtb	r3, r3
 918 0088 5AB2     		sxtb	r2, r3
 919 008a BB6A     		ldr	r3, [r7, #40]
 920 008c 83F84520 		strb	r2, [r3, #69]
 921              	.L56:
1072:..\..\FreeRTOS_Source/queue.c **** 			}
1073:..\..\FreeRTOS_Source/queue.c **** 
1074:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 922              		.loc 1 1074 0
 923 0090 0123     		movs	r3, #1
 924 0092 FB62     		str	r3, [r7, #44]
 925              	.LBE25:
 971:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 40
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 40
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 40
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 40
>>>>>>> parent of cb49844... test


 926              		.loc 1 971 0
 927 0094 01E0     		b	.L57
 928              	.L54:
1075:..\..\FreeRTOS_Source/queue.c **** 		}
1076:..\..\FreeRTOS_Source/queue.c **** 		else
1077:..\..\FreeRTOS_Source/queue.c **** 		{
1078:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1079:..\..\FreeRTOS_Source/queue.c **** 			xReturn = errQUEUE_FULL;
 929              		.loc 1 1079 0
 930 0096 0023     		movs	r3, #0
 931 0098 FB62     		str	r3, [r7, #44]
 932              	.L57:
 933 009a 3B6A     		ldr	r3, [r7, #32]
 934 009c 7B62     		str	r3, [r7, #36]
 935              	.LBB26:
 936              	.LBB27:
 224:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 225:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** /*-----------------------------------------------------------*/
 226:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 
 227:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** {
 229:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	__asm volatile
 937              		.loc 2 229 0
 938 009e 7B6A     		ldr	r3, [r7, #36]
 939              		.syntax unified
 940              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 941 00a0 83F31188 			msr basepri, r3	
 942              	@ 0 "" 2
 943              		.thumb
 944              		.syntax unified
 945              	.LBE27:
 946              	.LBE26:
1080:..\..\FreeRTOS_Source/queue.c **** 		}
1081:..\..\FreeRTOS_Source/queue.c **** 	}
1082:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1083:..\..\FreeRTOS_Source/queue.c **** 
1084:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 947              		.loc 1 1084 0
 948 00a4 FB6A     		ldr	r3, [r7, #44]
1085:..\..\FreeRTOS_Source/queue.c **** }
 949              		.loc 1 1085 0
 950 00a6 1846     		mov	r0, r3
 951 00a8 3037     		adds	r7, r7, #48
 952              		.cfi_def_cfa_offset 8
 953 00aa BD46     		mov	sp, r7
 954              		.cfi_def_cfa_register 13
 955              		@ sp needed
 956 00ac 80BD     		pop	{r7, pc}
 957              		.cfi_endproc
 958              	.LFE77:
 959              		.size	xQueueGenericSendFromISR, .-xQueueGenericSendFromISR
 960 00ae 00BF     		.section	.text.xQueueGiveFromISR,"ax",%progbits
 961              		.align	2
 962              		.global	xQueueGiveFromISR
 963              		.thumb
 964              		.thumb_func
 965              		.type	xQueueGiveFromISR, %function
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 41
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 41
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 41
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 41
>>>>>>> parent of cb49844... test


 966              	xQueueGiveFromISR:
 967              	.LFB78:
1086:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1087:..\..\FreeRTOS_Source/queue.c **** 
1088:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1089:..\..\FreeRTOS_Source/queue.c **** {
 968              		.loc 1 1089 0
 969              		.cfi_startproc
 970              		@ args = 0, pretend = 0, frame = 40
 971              		@ frame_needed = 1, uses_anonymous_args = 0
 972 0000 80B5     		push	{r7, lr}
 973              		.cfi_def_cfa_offset 8
 974              		.cfi_offset 7, -8
 975              		.cfi_offset 14, -4
 976 0002 8AB0     		sub	sp, sp, #40
 977              		.cfi_def_cfa_offset 48
 978 0004 00AF     		add	r7, sp, #0
 979              		.cfi_def_cfa_register 7
 980 0006 7860     		str	r0, [r7, #4]
 981 0008 3960     		str	r1, [r7]
1090:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
1091:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1092:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 982              		.loc 1 1092 0
 983 000a 7B68     		ldr	r3, [r7, #4]
 984 000c 3B62     		str	r3, [r7, #32]
 985              	.LBB28:
 986              	.LBB29:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 987              		.loc 2 211 0
 988              		.syntax unified
 989              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 990 000e EFF31182 			mrs r2, basepri											
 991 0012 4FF0A003 		mov r3, #160												
 992 0016 83F31188 		msr basepri, r3											
 993 001a BFF36F8F 		isb														
 994 001e BFF34F8F 		dsb														
 995              	
 996              	@ 0 "" 2
 997              		.thumb
 998              		.syntax unified
 999 0022 FA60     		str	r2, [r7, #12]
 1000 0024 BB60     		str	r3, [r7, #8]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1001              		.loc 2 223 0
 1002 0026 FB68     		ldr	r3, [r7, #12]
 1003              	.LBE29:
 1004              	.LBE28:
1093:..\..\FreeRTOS_Source/queue.c **** 
1094:..\..\FreeRTOS_Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1095:..\..\FreeRTOS_Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1096:..\..\FreeRTOS_Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1097:..\..\FreeRTOS_Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1098:..\..\FreeRTOS_Source/queue.c **** 	post). */
1099:..\..\FreeRTOS_Source/queue.c **** 
1100:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1101:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 42
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 42
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 42
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 42
>>>>>>> parent of cb49844... test


1102:..\..\FreeRTOS_Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1103:..\..\FreeRTOS_Source/queue.c **** 	if the item size is not 0. */
1104:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1105:..\..\FreeRTOS_Source/queue.c **** 
1106:..\..\FreeRTOS_Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1107:..\..\FreeRTOS_Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1108:..\..\FreeRTOS_Source/queue.c **** 	interrupts, only tasks. */
1109:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1110:..\..\FreeRTOS_Source/queue.c **** 
1111:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1112:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1113:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1114:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1115:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1116:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1117:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1118:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1119:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1120:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1121:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1122:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1123:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1124:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1125:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1126:..\..\FreeRTOS_Source/queue.c **** 
1127:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1005              		.loc 1 1127 0
 1006 0028 BB61     		str	r3, [r7, #24]
 1007              	.LBB30:
1128:..\..\FreeRTOS_Source/queue.c **** 	{
1129:..\..\FreeRTOS_Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1008              		.loc 1 1129 0
 1009 002a 3B6A     		ldr	r3, [r7, #32]
 1010 002c 9B6B     		ldr	r3, [r3, #56]
 1011 002e 7B61     		str	r3, [r7, #20]
1130:..\..\FreeRTOS_Source/queue.c **** 
1131:..\..\FreeRTOS_Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1132:..\..\FreeRTOS_Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1133:..\..\FreeRTOS_Source/queue.c **** 		space'. */
1134:..\..\FreeRTOS_Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
 1012              		.loc 1 1134 0
 1013 0030 3B6A     		ldr	r3, [r7, #32]
 1014 0032 DA6B     		ldr	r2, [r3, #60]
 1015 0034 7B69     		ldr	r3, [r7, #20]
 1016 0036 9A42     		cmp	r2, r3
 1017 0038 29D9     		bls	.L61
 1018              	.LBB31:
1135:..\..\FreeRTOS_Source/queue.c **** 		{
1136:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 1019              		.loc 1 1136 0
 1020 003a 3B6A     		ldr	r3, [r7, #32]
 1021 003c 93F84530 		ldrb	r3, [r3, #69]
 1022 0040 FB74     		strb	r3, [r7, #19]
1137:..\..\FreeRTOS_Source/queue.c **** 
1138:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1139:..\..\FreeRTOS_Source/queue.c **** 
1140:..\..\FreeRTOS_Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 43
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 43
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 43
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 43
>>>>>>> parent of cb49844... test


1141:..\..\FreeRTOS_Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1142:..\..\FreeRTOS_Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1143:..\..\FreeRTOS_Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1144:..\..\FreeRTOS_Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1145:..\..\FreeRTOS_Source/queue.c **** 			messages (semaphores) available. */
1146:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 1023              		.loc 1 1146 0
 1024 0042 7B69     		ldr	r3, [r7, #20]
 1025 0044 5A1C     		adds	r2, r3, #1
 1026 0046 3B6A     		ldr	r3, [r7, #32]
 1027 0048 9A63     		str	r2, [r3, #56]
1147:..\..\FreeRTOS_Source/queue.c **** 
1148:..\..\FreeRTOS_Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1149:..\..\FreeRTOS_Source/queue.c **** 			be done when the queue is unlocked later. */
1150:..\..\FreeRTOS_Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 1028              		.loc 1 1150 0
 1029 004a 97F91330 		ldrsb	r3, [r7, #19]
 1030 004e B3F1FF3F 		cmp	r3, #-1
 1031 0052 12D1     		bne	.L62
1151:..\..\FreeRTOS_Source/queue.c **** 			{
1152:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1153:..\..\FreeRTOS_Source/queue.c **** 				{
1154:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1155:..\..\FreeRTOS_Source/queue.c **** 					{
1156:..\..\FreeRTOS_Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1157:..\..\FreeRTOS_Source/queue.c **** 						{
1158:..\..\FreeRTOS_Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1159:..\..\FreeRTOS_Source/queue.c **** 							posting	to the queue set caused a higher priority
1160:..\..\FreeRTOS_Source/queue.c **** 							task to	unblock.  A context switch is required. */
1161:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1162:..\..\FreeRTOS_Source/queue.c **** 							{
1163:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1164:..\..\FreeRTOS_Source/queue.c **** 							}
1165:..\..\FreeRTOS_Source/queue.c **** 							else
1166:..\..\FreeRTOS_Source/queue.c **** 							{
1167:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1168:..\..\FreeRTOS_Source/queue.c **** 							}
1169:..\..\FreeRTOS_Source/queue.c **** 						}
1170:..\..\FreeRTOS_Source/queue.c **** 						else
1171:..\..\FreeRTOS_Source/queue.c **** 						{
1172:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1173:..\..\FreeRTOS_Source/queue.c **** 						}
1174:..\..\FreeRTOS_Source/queue.c **** 					}
1175:..\..\FreeRTOS_Source/queue.c **** 					else
1176:..\..\FreeRTOS_Source/queue.c **** 					{
1177:..\..\FreeRTOS_Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1178:..\..\FreeRTOS_Source/queue.c **** 						{
1179:..\..\FreeRTOS_Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1180:..\..\FreeRTOS_Source/queue.c **** 							{
1181:..\..\FreeRTOS_Source/queue.c **** 								/* The task waiting has a higher priority so
1182:..\..\FreeRTOS_Source/queue.c **** 								record that a context switch is required. */
1183:..\..\FreeRTOS_Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1184:..\..\FreeRTOS_Source/queue.c **** 								{
1185:..\..\FreeRTOS_Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1186:..\..\FreeRTOS_Source/queue.c **** 								}
1187:..\..\FreeRTOS_Source/queue.c **** 								else
1188:..\..\FreeRTOS_Source/queue.c **** 								{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 44
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 44
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 44
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 44
>>>>>>> parent of cb49844... test


1189:..\..\FreeRTOS_Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1190:..\..\FreeRTOS_Source/queue.c **** 								}
1191:..\..\FreeRTOS_Source/queue.c **** 							}
1192:..\..\FreeRTOS_Source/queue.c **** 							else
1193:..\..\FreeRTOS_Source/queue.c **** 							{
1194:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1195:..\..\FreeRTOS_Source/queue.c **** 							}
1196:..\..\FreeRTOS_Source/queue.c **** 						}
1197:..\..\FreeRTOS_Source/queue.c **** 						else
1198:..\..\FreeRTOS_Source/queue.c **** 						{
1199:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1200:..\..\FreeRTOS_Source/queue.c **** 						}
1201:..\..\FreeRTOS_Source/queue.c **** 					}
1202:..\..\FreeRTOS_Source/queue.c **** 				}
1203:..\..\FreeRTOS_Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1204:..\..\FreeRTOS_Source/queue.c **** 				{
1205:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1032              		.loc 1 1205 0
 1033 0054 3B6A     		ldr	r3, [r7, #32]
 1034 0056 5B6A     		ldr	r3, [r3, #36]
 1035 0058 002B     		cmp	r3, #0
 1036 005a 15D0     		beq	.L63
1206:..\..\FreeRTOS_Source/queue.c **** 					{
1207:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1037              		.loc 1 1207 0
 1038 005c 3B6A     		ldr	r3, [r7, #32]
 1039 005e 2433     		adds	r3, r3, #36
 1040 0060 1846     		mov	r0, r3
 1041 0062 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1042 0066 0346     		mov	r3, r0
 1043 0068 002B     		cmp	r3, #0
 1044 006a 0DD0     		beq	.L63
1208:..\..\FreeRTOS_Source/queue.c **** 						{
1209:..\..\FreeRTOS_Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1210:..\..\FreeRTOS_Source/queue.c **** 							context	switch is required. */
1211:..\..\FreeRTOS_Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 1045              		.loc 1 1211 0
 1046 006c 3B68     		ldr	r3, [r7]
 1047 006e 002B     		cmp	r3, #0
 1048 0070 0AD0     		beq	.L63
1212:..\..\FreeRTOS_Source/queue.c **** 							{
1213:..\..\FreeRTOS_Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 1049              		.loc 1 1213 0
 1050 0072 3B68     		ldr	r3, [r7]
 1051 0074 0122     		movs	r2, #1
 1052 0076 1A60     		str	r2, [r3]
 1053 0078 06E0     		b	.L63
 1054              	.L62:
1214:..\..\FreeRTOS_Source/queue.c **** 							}
1215:..\..\FreeRTOS_Source/queue.c **** 							else
1216:..\..\FreeRTOS_Source/queue.c **** 							{
1217:..\..\FreeRTOS_Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1218:..\..\FreeRTOS_Source/queue.c **** 							}
1219:..\..\FreeRTOS_Source/queue.c **** 						}
1220:..\..\FreeRTOS_Source/queue.c **** 						else
1221:..\..\FreeRTOS_Source/queue.c **** 						{
1222:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 45
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 45
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 45
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 45
>>>>>>> parent of cb49844... test


1223:..\..\FreeRTOS_Source/queue.c **** 						}
1224:..\..\FreeRTOS_Source/queue.c **** 					}
1225:..\..\FreeRTOS_Source/queue.c **** 					else
1226:..\..\FreeRTOS_Source/queue.c **** 					{
1227:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1228:..\..\FreeRTOS_Source/queue.c **** 					}
1229:..\..\FreeRTOS_Source/queue.c **** 				}
1230:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1231:..\..\FreeRTOS_Source/queue.c **** 			}
1232:..\..\FreeRTOS_Source/queue.c **** 			else
1233:..\..\FreeRTOS_Source/queue.c **** 			{
1234:..\..\FreeRTOS_Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1235:..\..\FreeRTOS_Source/queue.c **** 				knows that data was posted while it was locked. */
1236:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 1055              		.loc 1 1236 0
 1056 007a FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 1057 007c 0133     		adds	r3, r3, #1
 1058 007e DBB2     		uxtb	r3, r3
 1059 0080 5AB2     		sxtb	r2, r3
 1060 0082 3B6A     		ldr	r3, [r7, #32]
 1061 0084 83F84520 		strb	r2, [r3, #69]
 1062              	.L63:
1237:..\..\FreeRTOS_Source/queue.c **** 			}
1238:..\..\FreeRTOS_Source/queue.c **** 
1239:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 1063              		.loc 1 1239 0
 1064 0088 0123     		movs	r3, #1
 1065 008a 7B62     		str	r3, [r7, #36]
 1066              	.LBE31:
 1067 008c 01E0     		b	.L64
 1068              	.L61:
1240:..\..\FreeRTOS_Source/queue.c **** 		}
1241:..\..\FreeRTOS_Source/queue.c **** 		else
1242:..\..\FreeRTOS_Source/queue.c **** 		{
1243:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1244:..\..\FreeRTOS_Source/queue.c **** 			xReturn = errQUEUE_FULL;
 1069              		.loc 1 1244 0
 1070 008e 0023     		movs	r3, #0
 1071 0090 7B62     		str	r3, [r7, #36]
 1072              	.L64:
 1073 0092 BB69     		ldr	r3, [r7, #24]
 1074 0094 FB61     		str	r3, [r7, #28]
 1075              	.LBE30:
 1076              	.LBB32:
 1077              	.LBB33:
 1078              		.loc 2 229 0
 1079 0096 FB69     		ldr	r3, [r7, #28]
 1080              		.syntax unified
 1081              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1082 0098 83F31188 			msr basepri, r3	
 1083              	@ 0 "" 2
 1084              		.thumb
 1085              		.syntax unified
 1086              	.LBE33:
 1087              	.LBE32:
1245:..\..\FreeRTOS_Source/queue.c **** 		}
1246:..\..\FreeRTOS_Source/queue.c **** 	}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 46
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 46
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 46
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 46
>>>>>>> parent of cb49844... test


1247:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1248:..\..\FreeRTOS_Source/queue.c **** 
1249:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 1088              		.loc 1 1249 0
 1089 009c 7B6A     		ldr	r3, [r7, #36]
1250:..\..\FreeRTOS_Source/queue.c **** }
 1090              		.loc 1 1250 0
 1091 009e 1846     		mov	r0, r3
 1092 00a0 2837     		adds	r7, r7, #40
 1093              		.cfi_def_cfa_offset 8
 1094 00a2 BD46     		mov	sp, r7
 1095              		.cfi_def_cfa_register 13
 1096              		@ sp needed
 1097 00a4 80BD     		pop	{r7, pc}
 1098              		.cfi_endproc
 1099              	.LFE78:
 1100              		.size	xQueueGiveFromISR, .-xQueueGiveFromISR
 1101 00a6 00BF     		.section	.text.xQueueReceive,"ax",%progbits
 1102              		.align	2
 1103              		.global	xQueueReceive
 1104              		.thumb
 1105              		.thumb_func
 1106              		.type	xQueueReceive, %function
 1107              	xQueueReceive:
 1108              	.LFB79:
1251:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1252:..\..\FreeRTOS_Source/queue.c **** 
1253:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1254:..\..\FreeRTOS_Source/queue.c **** {
 1109              		.loc 1 1254 0
 1110              		.cfi_startproc
 1111              		@ args = 0, pretend = 0, frame = 40
 1112              		@ frame_needed = 1, uses_anonymous_args = 0
 1113 0000 80B5     		push	{r7, lr}
 1114              		.cfi_def_cfa_offset 8
 1115              		.cfi_offset 7, -8
 1116              		.cfi_offset 14, -4
 1117 0002 8AB0     		sub	sp, sp, #40
 1118              		.cfi_def_cfa_offset 48
 1119 0004 00AF     		add	r7, sp, #0
 1120              		.cfi_def_cfa_register 7
 1121 0006 F860     		str	r0, [r7, #12]
 1122 0008 B960     		str	r1, [r7, #8]
 1123 000a 7A60     		str	r2, [r7, #4]
1255:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1124              		.loc 1 1255 0
 1125 000c 0023     		movs	r3, #0
 1126 000e 7B62     		str	r3, [r7, #36]
1256:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
1257:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1127              		.loc 1 1257 0
 1128 0010 FB68     		ldr	r3, [r7, #12]
 1129 0012 3B62     		str	r3, [r7, #32]
 1130              	.L78:
1258:..\..\FreeRTOS_Source/queue.c **** 
1259:..\..\FreeRTOS_Source/queue.c **** 	/* Check the pointer is not NULL. */
1260:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( ( pxQueue ) );
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 47
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 47
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 47
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 47
>>>>>>> parent of cb49844... test


1261:..\..\FreeRTOS_Source/queue.c **** 
1262:..\..\FreeRTOS_Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1263:..\..\FreeRTOS_Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1264:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1265:..\..\FreeRTOS_Source/queue.c **** 
1266:..\..\FreeRTOS_Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1267:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1268:..\..\FreeRTOS_Source/queue.c **** 	{
1269:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1270:..\..\FreeRTOS_Source/queue.c **** 	}
1271:..\..\FreeRTOS_Source/queue.c **** 	#endif
1272:..\..\FreeRTOS_Source/queue.c **** 
1273:..\..\FreeRTOS_Source/queue.c **** 
1274:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1275:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
1276:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
1277:..\..\FreeRTOS_Source/queue.c **** 
1278:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
1279:..\..\FreeRTOS_Source/queue.c **** 	{
1280:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 1131              		.loc 1 1280 0
 1132 0014 FFF7FEFF 		bl	vPortEnterCritical
 1133              	.LBB34:
1281:..\..\FreeRTOS_Source/queue.c **** 		{
1282:..\..\FreeRTOS_Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1134              		.loc 1 1282 0
 1135 0018 3B6A     		ldr	r3, [r7, #32]
 1136 001a 9B6B     		ldr	r3, [r3, #56]
 1137 001c FB61     		str	r3, [r7, #28]
1283:..\..\FreeRTOS_Source/queue.c **** 
1284:..\..\FreeRTOS_Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1285:..\..\FreeRTOS_Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1286:..\..\FreeRTOS_Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1138              		.loc 1 1286 0
 1139 001e FB69     		ldr	r3, [r7, #28]
 1140 0020 002B     		cmp	r3, #0
 1141 0022 1FD0     		beq	.L67
1287:..\..\FreeRTOS_Source/queue.c **** 			{
1288:..\..\FreeRTOS_Source/queue.c **** 				/* Data available, remove one item. */
1289:..\..\FreeRTOS_Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1142              		.loc 1 1289 0
 1143 0024 B968     		ldr	r1, [r7, #8]
 1144 0026 386A     		ldr	r0, [r7, #32]
 1145 0028 FFF7FEFF 		bl	prvCopyDataFromQueue
1290:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1291:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1146              		.loc 1 1291 0
 1147 002c FB69     		ldr	r3, [r7, #28]
 1148 002e 5A1E     		subs	r2, r3, #1
 1149 0030 3B6A     		ldr	r3, [r7, #32]
 1150 0032 9A63     		str	r2, [r3, #56]
1292:..\..\FreeRTOS_Source/queue.c **** 
1293:..\..\FreeRTOS_Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1294:..\..\FreeRTOS_Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1295:..\..\FreeRTOS_Source/queue.c **** 				task. */
1296:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1151              		.loc 1 1296 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 48
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 48
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 48
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 48
>>>>>>> parent of cb49844... test


 1152 0034 3B6A     		ldr	r3, [r7, #32]
 1153 0036 1B69     		ldr	r3, [r3, #16]
 1154 0038 002B     		cmp	r3, #0
 1155 003a 0FD0     		beq	.L68
1297:..\..\FreeRTOS_Source/queue.c **** 				{
1298:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1156              		.loc 1 1298 0
 1157 003c 3B6A     		ldr	r3, [r7, #32]
 1158 003e 1033     		adds	r3, r3, #16
 1159 0040 1846     		mov	r0, r3
 1160 0042 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1161 0046 0346     		mov	r3, r0
 1162 0048 002B     		cmp	r3, #0
 1163 004a 07D0     		beq	.L68
1299:..\..\FreeRTOS_Source/queue.c **** 					{
1300:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1164              		.loc 1 1300 0
 1165 004c 3C4B     		ldr	r3, .L80
 1166 004e 4FF08052 		mov	r2, #268435456
 1167 0052 1A60     		str	r2, [r3]
 1168              		.syntax unified
 1169              	@ 1300 "..\..\FreeRTOS_Source\queue.c" 1
 1170 0054 BFF34F8F 		dsb
 1171              	@ 0 "" 2
 1172              	@ 1300 "..\..\FreeRTOS_Source\queue.c" 1
 1173 0058 BFF36F8F 		isb
 1174              	@ 0 "" 2
 1175              		.thumb
 1176              		.syntax unified
 1177              	.L68:
1301:..\..\FreeRTOS_Source/queue.c **** 					}
1302:..\..\FreeRTOS_Source/queue.c **** 					else
1303:..\..\FreeRTOS_Source/queue.c **** 					{
1304:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1305:..\..\FreeRTOS_Source/queue.c **** 					}
1306:..\..\FreeRTOS_Source/queue.c **** 				}
1307:..\..\FreeRTOS_Source/queue.c **** 				else
1308:..\..\FreeRTOS_Source/queue.c **** 				{
1309:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1310:..\..\FreeRTOS_Source/queue.c **** 				}
1311:..\..\FreeRTOS_Source/queue.c **** 
1312:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 1178              		.loc 1 1312 0
 1179 005c FFF7FEFF 		bl	vPortExitCritical
1313:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
 1180              		.loc 1 1313 0
 1181 0060 0123     		movs	r3, #1
 1182 0062 69E0     		b	.L79
 1183              	.L67:
1314:..\..\FreeRTOS_Source/queue.c **** 			}
1315:..\..\FreeRTOS_Source/queue.c **** 			else
1316:..\..\FreeRTOS_Source/queue.c **** 			{
1317:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1184              		.loc 1 1317 0
 1185 0064 7B68     		ldr	r3, [r7, #4]
 1186 0066 002B     		cmp	r3, #0
 1187 0068 03D1     		bne	.L70
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 49
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 49
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 49
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 49
>>>>>>> parent of cb49844... test


1318:..\..\FreeRTOS_Source/queue.c **** 				{
1319:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1320:..\..\FreeRTOS_Source/queue.c **** 					the block time has expired) so leave now. */
1321:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 1188              		.loc 1 1321 0
 1189 006a FFF7FEFF 		bl	vPortExitCritical
1322:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1323:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_EMPTY;
 1190              		.loc 1 1323 0
 1191 006e 0023     		movs	r3, #0
 1192 0070 62E0     		b	.L79
 1193              	.L70:
1324:..\..\FreeRTOS_Source/queue.c **** 				}
1325:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1194              		.loc 1 1325 0
 1195 0072 7B6A     		ldr	r3, [r7, #36]
 1196 0074 002B     		cmp	r3, #0
 1197 0076 06D1     		bne	.L71
1326:..\..\FreeRTOS_Source/queue.c **** 				{
1327:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and a block time was specified so
1328:..\..\FreeRTOS_Source/queue.c **** 					configure the timeout structure. */
1329:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1198              		.loc 1 1329 0
 1199 0078 07F11403 		add	r3, r7, #20
 1200 007c 1846     		mov	r0, r3
 1201 007e FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1330:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1202              		.loc 1 1330 0
 1203 0082 0123     		movs	r3, #1
 1204 0084 7B62     		str	r3, [r7, #36]
 1205              	.L71:
 1206              	.LBE34:
1331:..\..\FreeRTOS_Source/queue.c **** 				}
1332:..\..\FreeRTOS_Source/queue.c **** 				else
1333:..\..\FreeRTOS_Source/queue.c **** 				{
1334:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
1335:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1336:..\..\FreeRTOS_Source/queue.c **** 				}
1337:..\..\FreeRTOS_Source/queue.c **** 			}
1338:..\..\FreeRTOS_Source/queue.c **** 		}
1339:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 1207              		.loc 1 1339 0
 1208 0086 FFF7FEFF 		bl	vPortExitCritical
1340:..\..\FreeRTOS_Source/queue.c **** 
1341:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1342:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
1343:..\..\FreeRTOS_Source/queue.c **** 
1344:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 1209              		.loc 1 1344 0
 1210 008a FFF7FEFF 		bl	vTaskSuspendAll
1345:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
 1211              		.loc 1 1345 0
 1212 008e FFF7FEFF 		bl	vPortEnterCritical
 1213 0092 3B6A     		ldr	r3, [r7, #32]
 1214 0094 93F84430 		ldrb	r3, [r3, #68]
 1215 0098 5BB2     		sxtb	r3, r3
 1216 009a B3F1FF3F 		cmp	r3, #-1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 50
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 50
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 50
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 50
>>>>>>> parent of cb49844... test


 1217 009e 03D1     		bne	.L72
 1218              		.loc 1 1345 0 is_stmt 0 discriminator 1
 1219 00a0 3B6A     		ldr	r3, [r7, #32]
 1220 00a2 0022     		movs	r2, #0
 1221 00a4 83F84420 		strb	r2, [r3, #68]
 1222              	.L72:
 1223              		.loc 1 1345 0 discriminator 3
 1224 00a8 3B6A     		ldr	r3, [r7, #32]
 1225 00aa 93F84530 		ldrb	r3, [r3, #69]
 1226 00ae 5BB2     		sxtb	r3, r3
 1227 00b0 B3F1FF3F 		cmp	r3, #-1
 1228 00b4 03D1     		bne	.L73
 1229              		.loc 1 1345 0 discriminator 4
 1230 00b6 3B6A     		ldr	r3, [r7, #32]
 1231 00b8 0022     		movs	r2, #0
 1232 00ba 83F84520 		strb	r2, [r3, #69]
 1233              	.L73:
 1234              		.loc 1 1345 0 discriminator 6
 1235 00be FFF7FEFF 		bl	vPortExitCritical
1346:..\..\FreeRTOS_Source/queue.c **** 
1347:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1348:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1236              		.loc 1 1348 0 is_stmt 1 discriminator 6
 1237 00c2 3A1D     		adds	r2, r7, #4
 1238 00c4 07F11403 		add	r3, r7, #20
 1239 00c8 1146     		mov	r1, r2
 1240 00ca 1846     		mov	r0, r3
 1241 00cc FFF7FEFF 		bl	xTaskCheckForTimeOut
 1242 00d0 0346     		mov	r3, r0
 1243 00d2 002B     		cmp	r3, #0
 1244 00d4 23D1     		bne	.L74
1349:..\..\FreeRTOS_Source/queue.c **** 		{
1350:..\..\FreeRTOS_Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1351:..\..\FreeRTOS_Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1352:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1245              		.loc 1 1352 0
 1246 00d6 386A     		ldr	r0, [r7, #32]
 1247 00d8 FFF7FEFF 		bl	prvIsQueueEmpty
 1248 00dc 0346     		mov	r3, r0
 1249 00de 002B     		cmp	r3, #0
 1250 00e0 17D0     		beq	.L75
1353:..\..\FreeRTOS_Source/queue.c **** 			{
1354:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1355:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1251              		.loc 1 1355 0
 1252 00e2 3B6A     		ldr	r3, [r7, #32]
 1253 00e4 2433     		adds	r3, r3, #36
 1254 00e6 7A68     		ldr	r2, [r7, #4]
 1255 00e8 1146     		mov	r1, r2
 1256 00ea 1846     		mov	r0, r3
 1257 00ec FFF7FEFF 		bl	vTaskPlaceOnEventList
1356:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1258              		.loc 1 1356 0
 1259 00f0 386A     		ldr	r0, [r7, #32]
 1260 00f2 FFF7FEFF 		bl	prvUnlockQueue
1357:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1261              		.loc 1 1357 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 51
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 51
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 51
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 51
>>>>>>> parent of cb49844... test


 1262 00f6 FFF7FEFF 		bl	xTaskResumeAll
 1263 00fa 0346     		mov	r3, r0
 1264 00fc 002B     		cmp	r3, #0
 1265 00fe 89D1     		bne	.L78
1358:..\..\FreeRTOS_Source/queue.c **** 				{
1359:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 1266              		.loc 1 1359 0
 1267 0100 0F4B     		ldr	r3, .L80
 1268 0102 4FF08052 		mov	r2, #268435456
 1269 0106 1A60     		str	r2, [r3]
 1270              		.syntax unified
 1271              	@ 1359 "..\..\FreeRTOS_Source\queue.c" 1
 1272 0108 BFF34F8F 		dsb
 1273              	@ 0 "" 2
 1274              	@ 1359 "..\..\FreeRTOS_Source\queue.c" 1
 1275 010c BFF36F8F 		isb
 1276              	@ 0 "" 2
 1277              		.thumb
 1278              		.syntax unified
 1279 0110 80E7     		b	.L78
 1280              	.L75:
1360:..\..\FreeRTOS_Source/queue.c **** 				}
1361:..\..\FreeRTOS_Source/queue.c **** 				else
1362:..\..\FreeRTOS_Source/queue.c **** 				{
1363:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1364:..\..\FreeRTOS_Source/queue.c **** 				}
1365:..\..\FreeRTOS_Source/queue.c **** 			}
1366:..\..\FreeRTOS_Source/queue.c **** 			else
1367:..\..\FreeRTOS_Source/queue.c **** 			{
1368:..\..\FreeRTOS_Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1369:..\..\FreeRTOS_Source/queue.c **** 				data. */
1370:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1281              		.loc 1 1370 0
 1282 0112 386A     		ldr	r0, [r7, #32]
 1283 0114 FFF7FEFF 		bl	prvUnlockQueue
1371:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 1284              		.loc 1 1371 0
 1285 0118 FFF7FEFF 		bl	xTaskResumeAll
 1286 011c 7AE7     		b	.L78
 1287              	.L74:
1372:..\..\FreeRTOS_Source/queue.c **** 			}
1373:..\..\FreeRTOS_Source/queue.c **** 		}
1374:..\..\FreeRTOS_Source/queue.c **** 		else
1375:..\..\FreeRTOS_Source/queue.c **** 		{
1376:..\..\FreeRTOS_Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1377:..\..\FreeRTOS_Source/queue.c **** 			back and attempt to read the data. */
1378:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1288              		.loc 1 1378 0
 1289 011e 386A     		ldr	r0, [r7, #32]
 1290 0120 FFF7FEFF 		bl	prvUnlockQueue
1379:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 1291              		.loc 1 1379 0
 1292 0124 FFF7FEFF 		bl	xTaskResumeAll
1380:..\..\FreeRTOS_Source/queue.c **** 
1381:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1293              		.loc 1 1381 0
 1294 0128 386A     		ldr	r0, [r7, #32]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 52
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 52
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 52
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 52
>>>>>>> parent of cb49844... test


 1295 012a FFF7FEFF 		bl	prvIsQueueEmpty
 1296 012e 0346     		mov	r3, r0
 1297 0130 002B     		cmp	r3, #0
 1298 0132 3FF46FAF 		beq	.L78
1382:..\..\FreeRTOS_Source/queue.c **** 			{
1383:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1384:..\..\FreeRTOS_Source/queue.c **** 				return errQUEUE_EMPTY;
 1299              		.loc 1 1384 0
 1300 0136 0023     		movs	r3, #0
 1301              	.L79:
1385:..\..\FreeRTOS_Source/queue.c **** 			}
1386:..\..\FreeRTOS_Source/queue.c **** 			else
1387:..\..\FreeRTOS_Source/queue.c **** 			{
1388:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1389:..\..\FreeRTOS_Source/queue.c **** 			}
1390:..\..\FreeRTOS_Source/queue.c **** 		}
1391:..\..\FreeRTOS_Source/queue.c **** 	}
1392:..\..\FreeRTOS_Source/queue.c **** }
 1302              		.loc 1 1392 0 discriminator 3
 1303 0138 1846     		mov	r0, r3
 1304 013a 2837     		adds	r7, r7, #40
 1305              		.cfi_def_cfa_offset 8
 1306 013c BD46     		mov	sp, r7
 1307              		.cfi_def_cfa_register 13
 1308              		@ sp needed
 1309 013e 80BD     		pop	{r7, pc}
 1310              	.L81:
 1311              		.align	2
 1312              	.L80:
 1313 0140 04ED00E0 		.word	-536810236
 1314              		.cfi_endproc
 1315              	.LFE79:
 1316              		.size	xQueueReceive, .-xQueueReceive
 1317              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 1318              		.align	2
 1319              		.global	xQueueSemaphoreTake
 1320              		.thumb
 1321              		.thumb_func
 1322              		.type	xQueueSemaphoreTake, %function
 1323              	xQueueSemaphoreTake:
 1324              	.LFB80:
1393:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1394:..\..\FreeRTOS_Source/queue.c **** 
1395:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1396:..\..\FreeRTOS_Source/queue.c **** {
 1325              		.loc 1 1396 0
 1326              		.cfi_startproc
 1327              		@ args = 0, pretend = 0, frame = 40
 1328              		@ frame_needed = 1, uses_anonymous_args = 0
 1329 0000 80B5     		push	{r7, lr}
 1330              		.cfi_def_cfa_offset 8
 1331              		.cfi_offset 7, -8
 1332              		.cfi_offset 14, -4
 1333 0002 8AB0     		sub	sp, sp, #40
 1334              		.cfi_def_cfa_offset 48
 1335 0004 00AF     		add	r7, sp, #0
 1336              		.cfi_def_cfa_register 7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 53
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 53
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 53
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 53
>>>>>>> parent of cb49844... test


 1337 0006 7860     		str	r0, [r7, #4]
 1338 0008 3960     		str	r1, [r7]
1397:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1339              		.loc 1 1397 0
 1340 000a 0023     		movs	r3, #0
 1341 000c 7B62     		str	r3, [r7, #36]
1398:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
1399:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1342              		.loc 1 1399 0
 1343 000e 7B68     		ldr	r3, [r7, #4]
 1344 0010 FB61     		str	r3, [r7, #28]
1400:..\..\FreeRTOS_Source/queue.c **** 
1401:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1402:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
 1345              		.loc 1 1402 0
 1346 0012 0023     		movs	r3, #0
 1347 0014 3B62     		str	r3, [r7, #32]
 1348              	.L97:
1403:..\..\FreeRTOS_Source/queue.c **** #endif
1404:..\..\FreeRTOS_Source/queue.c **** 
1405:..\..\FreeRTOS_Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1406:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( ( pxQueue ) );
1407:..\..\FreeRTOS_Source/queue.c **** 
1408:..\..\FreeRTOS_Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1409:..\..\FreeRTOS_Source/queue.c **** 	0. */
1410:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1411:..\..\FreeRTOS_Source/queue.c **** 
1412:..\..\FreeRTOS_Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1413:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1414:..\..\FreeRTOS_Source/queue.c **** 	{
1415:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1416:..\..\FreeRTOS_Source/queue.c **** 	}
1417:..\..\FreeRTOS_Source/queue.c **** 	#endif
1418:..\..\FreeRTOS_Source/queue.c **** 
1419:..\..\FreeRTOS_Source/queue.c **** 
1420:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1421:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
1422:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
1423:..\..\FreeRTOS_Source/queue.c **** 
1424:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
1425:..\..\FreeRTOS_Source/queue.c **** 	{
1426:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 1349              		.loc 1 1426 0
 1350 0016 FFF7FEFF 		bl	vPortEnterCritical
 1351              	.LBB35:
1427:..\..\FreeRTOS_Source/queue.c **** 		{
1428:..\..\FreeRTOS_Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1429:..\..\FreeRTOS_Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1430:..\..\FreeRTOS_Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 1352              		.loc 1 1430 0
 1353 001a FB69     		ldr	r3, [r7, #28]
 1354 001c 9B6B     		ldr	r3, [r3, #56]
 1355 001e BB61     		str	r3, [r7, #24]
1431:..\..\FreeRTOS_Source/queue.c **** 
1432:..\..\FreeRTOS_Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1433:..\..\FreeRTOS_Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1434:..\..\FreeRTOS_Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 54
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 54
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 54
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 54
>>>>>>> parent of cb49844... test


 1356              		.loc 1 1434 0
 1357 0020 BB69     		ldr	r3, [r7, #24]
 1358 0022 002B     		cmp	r3, #0
 1359 0024 24D0     		beq	.L83
1435:..\..\FreeRTOS_Source/queue.c **** 			{
1436:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1437:..\..\FreeRTOS_Source/queue.c **** 
1438:..\..\FreeRTOS_Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1439:..\..\FreeRTOS_Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1440:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 1360              		.loc 1 1440 0
 1361 0026 BB69     		ldr	r3, [r7, #24]
 1362 0028 5A1E     		subs	r2, r3, #1
 1363 002a FB69     		ldr	r3, [r7, #28]
 1364 002c 9A63     		str	r2, [r3, #56]
1441:..\..\FreeRTOS_Source/queue.c **** 
1442:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1443:..\..\FreeRTOS_Source/queue.c **** 				{
1444:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1365              		.loc 1 1444 0
 1366 002e FB69     		ldr	r3, [r7, #28]
 1367 0030 1B68     		ldr	r3, [r3]
 1368 0032 002B     		cmp	r3, #0
 1369 0034 04D1     		bne	.L84
1445:..\..\FreeRTOS_Source/queue.c **** 					{
1446:..\..\FreeRTOS_Source/queue.c **** 						/* Record the information required to implement
1447:..\..\FreeRTOS_Source/queue.c **** 						priority inheritance should it become necessary. */
1448:..\..\FreeRTOS_Source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
 1370              		.loc 1 1448 0
 1371 0036 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 1372 003a 0246     		mov	r2, r0
 1373 003c FB69     		ldr	r3, [r7, #28]
 1374 003e 5A60     		str	r2, [r3, #4]
 1375              	.L84:
1449:..\..\FreeRTOS_Source/queue.c **** 					}
1450:..\..\FreeRTOS_Source/queue.c **** 					else
1451:..\..\FreeRTOS_Source/queue.c **** 					{
1452:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1453:..\..\FreeRTOS_Source/queue.c **** 					}
1454:..\..\FreeRTOS_Source/queue.c **** 				}
1455:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1456:..\..\FreeRTOS_Source/queue.c **** 
1457:..\..\FreeRTOS_Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1458:..\..\FreeRTOS_Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1459:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1376              		.loc 1 1459 0
 1377 0040 FB69     		ldr	r3, [r7, #28]
 1378 0042 1B69     		ldr	r3, [r3, #16]
 1379 0044 002B     		cmp	r3, #0
 1380 0046 0FD0     		beq	.L85
1460:..\..\FreeRTOS_Source/queue.c **** 				{
1461:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1381              		.loc 1 1461 0
 1382 0048 FB69     		ldr	r3, [r7, #28]
 1383 004a 1033     		adds	r3, r3, #16
 1384 004c 1846     		mov	r0, r3
 1385 004e FFF7FEFF 		bl	xTaskRemoveFromEventList
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 55
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 55
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 55
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 55
>>>>>>> parent of cb49844... test


 1386 0052 0346     		mov	r3, r0
 1387 0054 002B     		cmp	r3, #0
 1388 0056 07D0     		beq	.L85
1462:..\..\FreeRTOS_Source/queue.c **** 					{
1463:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1389              		.loc 1 1463 0
 1390 0058 4C4B     		ldr	r3, .L99
 1391 005a 4FF08052 		mov	r2, #268435456
 1392 005e 1A60     		str	r2, [r3]
 1393              		.syntax unified
 1394              	@ 1463 "..\..\FreeRTOS_Source\queue.c" 1
 1395 0060 BFF34F8F 		dsb
 1396              	@ 0 "" 2
 1397              	@ 1463 "..\..\FreeRTOS_Source\queue.c" 1
 1398 0064 BFF36F8F 		isb
 1399              	@ 0 "" 2
 1400              		.thumb
 1401              		.syntax unified
 1402              	.L85:
1464:..\..\FreeRTOS_Source/queue.c **** 					}
1465:..\..\FreeRTOS_Source/queue.c **** 					else
1466:..\..\FreeRTOS_Source/queue.c **** 					{
1467:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1468:..\..\FreeRTOS_Source/queue.c **** 					}
1469:..\..\FreeRTOS_Source/queue.c **** 				}
1470:..\..\FreeRTOS_Source/queue.c **** 				else
1471:..\..\FreeRTOS_Source/queue.c **** 				{
1472:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1473:..\..\FreeRTOS_Source/queue.c **** 				}
1474:..\..\FreeRTOS_Source/queue.c **** 
1475:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 1403              		.loc 1 1475 0
 1404 0068 FFF7FEFF 		bl	vPortExitCritical
1476:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
 1405              		.loc 1 1476 0
 1406 006c 0123     		movs	r3, #1
 1407 006e 89E0     		b	.L98
 1408              	.L83:
1477:..\..\FreeRTOS_Source/queue.c **** 			}
1478:..\..\FreeRTOS_Source/queue.c **** 			else
1479:..\..\FreeRTOS_Source/queue.c **** 			{
1480:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1409              		.loc 1 1480 0
 1410 0070 3B68     		ldr	r3, [r7]
 1411 0072 002B     		cmp	r3, #0
 1412 0074 03D1     		bne	.L87
1481:..\..\FreeRTOS_Source/queue.c **** 				{
1482:..\..\FreeRTOS_Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1483:..\..\FreeRTOS_Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1484:..\..\FreeRTOS_Source/queue.c **** 					if it were 0 the function would have exited. */
1485:..\..\FreeRTOS_Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1486:..\..\FreeRTOS_Source/queue.c **** 					{
1487:..\..\FreeRTOS_Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1488:..\..\FreeRTOS_Source/queue.c **** 					}
1489:..\..\FreeRTOS_Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1490:..\..\FreeRTOS_Source/queue.c **** 
1491:..\..\FreeRTOS_Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 56
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 56
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 56
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 56
>>>>>>> parent of cb49844... test


1492:..\..\FreeRTOS_Source/queue.c **** 					(or the block time has expired) so exit now. */
1493:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 1413              		.loc 1 1493 0
 1414 0076 FFF7FEFF 		bl	vPortExitCritical
1494:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1495:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_EMPTY;
 1415              		.loc 1 1495 0
 1416 007a 0023     		movs	r3, #0
 1417 007c 82E0     		b	.L98
 1418              	.L87:
1496:..\..\FreeRTOS_Source/queue.c **** 				}
1497:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1419              		.loc 1 1497 0
 1420 007e 7B6A     		ldr	r3, [r7, #36]
 1421 0080 002B     		cmp	r3, #0
 1422 0082 06D1     		bne	.L88
1498:..\..\FreeRTOS_Source/queue.c **** 				{
1499:..\..\FreeRTOS_Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1500:..\..\FreeRTOS_Source/queue.c **** 					so configure the timeout structure ready to block. */
1501:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1423              		.loc 1 1501 0
 1424 0084 07F10C03 		add	r3, r7, #12
 1425 0088 1846     		mov	r0, r3
 1426 008a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1502:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1427              		.loc 1 1502 0
 1428 008e 0123     		movs	r3, #1
 1429 0090 7B62     		str	r3, [r7, #36]
 1430              	.L88:
 1431              	.LBE35:
1503:..\..\FreeRTOS_Source/queue.c **** 				}
1504:..\..\FreeRTOS_Source/queue.c **** 				else
1505:..\..\FreeRTOS_Source/queue.c **** 				{
1506:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
1507:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1508:..\..\FreeRTOS_Source/queue.c **** 				}
1509:..\..\FreeRTOS_Source/queue.c **** 			}
1510:..\..\FreeRTOS_Source/queue.c **** 		}
1511:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 1432              		.loc 1 1511 0
 1433 0092 FFF7FEFF 		bl	vPortExitCritical
1512:..\..\FreeRTOS_Source/queue.c **** 
1513:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1514:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
1515:..\..\FreeRTOS_Source/queue.c **** 
1516:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 1434              		.loc 1 1516 0
 1435 0096 FFF7FEFF 		bl	vTaskSuspendAll
1517:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
 1436              		.loc 1 1517 0
 1437 009a FFF7FEFF 		bl	vPortEnterCritical
 1438 009e FB69     		ldr	r3, [r7, #28]
 1439 00a0 93F84430 		ldrb	r3, [r3, #68]
 1440 00a4 5BB2     		sxtb	r3, r3
 1441 00a6 B3F1FF3F 		cmp	r3, #-1
 1442 00aa 03D1     		bne	.L89
 1443              		.loc 1 1517 0 is_stmt 0 discriminator 1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 57
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 57
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 57
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 57
>>>>>>> parent of cb49844... test


 1444 00ac FB69     		ldr	r3, [r7, #28]
 1445 00ae 0022     		movs	r2, #0
 1446 00b0 83F84420 		strb	r2, [r3, #68]
 1447              	.L89:
 1448              		.loc 1 1517 0 discriminator 3
 1449 00b4 FB69     		ldr	r3, [r7, #28]
 1450 00b6 93F84530 		ldrb	r3, [r3, #69]
 1451 00ba 5BB2     		sxtb	r3, r3
 1452 00bc B3F1FF3F 		cmp	r3, #-1
 1453 00c0 03D1     		bne	.L90
 1454              		.loc 1 1517 0 discriminator 4
 1455 00c2 FB69     		ldr	r3, [r7, #28]
 1456 00c4 0022     		movs	r2, #0
 1457 00c6 83F84520 		strb	r2, [r3, #69]
 1458              	.L90:
 1459              		.loc 1 1517 0 discriminator 6
 1460 00ca FFF7FEFF 		bl	vPortExitCritical
1518:..\..\FreeRTOS_Source/queue.c **** 
1519:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1520:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1461              		.loc 1 1520 0 is_stmt 1 discriminator 6
 1462 00ce 3A46     		mov	r2, r7
 1463 00d0 07F10C03 		add	r3, r7, #12
 1464 00d4 1146     		mov	r1, r2
 1465 00d6 1846     		mov	r0, r3
 1466 00d8 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1467 00dc 0346     		mov	r3, r0
 1468 00de 002B     		cmp	r3, #0
 1469 00e0 32D1     		bne	.L91
1521:..\..\FreeRTOS_Source/queue.c **** 		{
1522:..\..\FreeRTOS_Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1523:..\..\FreeRTOS_Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1524:..\..\FreeRTOS_Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1525:..\..\FreeRTOS_Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1526:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1470              		.loc 1 1526 0
 1471 00e2 F869     		ldr	r0, [r7, #28]
 1472 00e4 FFF7FEFF 		bl	prvIsQueueEmpty
 1473 00e8 0346     		mov	r3, r0
 1474 00ea 002B     		cmp	r3, #0
 1475 00ec 26D0     		beq	.L92
1527:..\..\FreeRTOS_Source/queue.c **** 			{
1528:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1529:..\..\FreeRTOS_Source/queue.c **** 
1530:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1531:..\..\FreeRTOS_Source/queue.c **** 				{
1532:..\..\FreeRTOS_Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 1476              		.loc 1 1532 0
 1477 00ee FB69     		ldr	r3, [r7, #28]
 1478 00f0 1B68     		ldr	r3, [r3]
 1479 00f2 002B     		cmp	r3, #0
 1480 00f4 09D1     		bne	.L93
1533:..\..\FreeRTOS_Source/queue.c **** 					{
1534:..\..\FreeRTOS_Source/queue.c **** 						taskENTER_CRITICAL();
 1481              		.loc 1 1534 0
 1482 00f6 FFF7FEFF 		bl	vPortEnterCritical
1535:..\..\FreeRTOS_Source/queue.c **** 						{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 58
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 58
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 58
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 58
>>>>>>> parent of cb49844... test


1536:..\..\FreeRTOS_Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 1483              		.loc 1 1536 0
 1484 00fa FB69     		ldr	r3, [r7, #28]
 1485 00fc 5B68     		ldr	r3, [r3, #4]
 1486 00fe 1846     		mov	r0, r3
 1487 0100 FFF7FEFF 		bl	xTaskPriorityInherit
 1488 0104 3862     		str	r0, [r7, #32]
1537:..\..\FreeRTOS_Source/queue.c **** 						}
1538:..\..\FreeRTOS_Source/queue.c **** 						taskEXIT_CRITICAL();
 1489              		.loc 1 1538 0
 1490 0106 FFF7FEFF 		bl	vPortExitCritical
 1491              	.L93:
1539:..\..\FreeRTOS_Source/queue.c **** 					}
1540:..\..\FreeRTOS_Source/queue.c **** 					else
1541:..\..\FreeRTOS_Source/queue.c **** 					{
1542:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1543:..\..\FreeRTOS_Source/queue.c **** 					}
1544:..\..\FreeRTOS_Source/queue.c **** 				}
1545:..\..\FreeRTOS_Source/queue.c **** 				#endif
1546:..\..\FreeRTOS_Source/queue.c **** 
1547:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1492              		.loc 1 1547 0
 1493 010a FB69     		ldr	r3, [r7, #28]
 1494 010c 2433     		adds	r3, r3, #36
 1495 010e 3A68     		ldr	r2, [r7]
 1496 0110 1146     		mov	r1, r2
 1497 0112 1846     		mov	r0, r3
 1498 0114 FFF7FEFF 		bl	vTaskPlaceOnEventList
1548:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1499              		.loc 1 1548 0
 1500 0118 F869     		ldr	r0, [r7, #28]
 1501 011a FFF7FEFF 		bl	prvUnlockQueue
1549:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1502              		.loc 1 1549 0
 1503 011e FFF7FEFF 		bl	xTaskResumeAll
 1504 0122 0346     		mov	r3, r0
 1505 0124 002B     		cmp	r3, #0
 1506 0126 7FF476AF 		bne	.L97
1550:..\..\FreeRTOS_Source/queue.c **** 				{
1551:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 1507              		.loc 1 1551 0
 1508 012a 184B     		ldr	r3, .L99
 1509 012c 4FF08052 		mov	r2, #268435456
 1510 0130 1A60     		str	r2, [r3]
 1511              		.syntax unified
 1512              	@ 1551 "..\..\FreeRTOS_Source\queue.c" 1
 1513 0132 BFF34F8F 		dsb
 1514              	@ 0 "" 2
 1515              	@ 1551 "..\..\FreeRTOS_Source\queue.c" 1
 1516 0136 BFF36F8F 		isb
 1517              	@ 0 "" 2
 1518              		.thumb
 1519              		.syntax unified
 1520 013a 6CE7     		b	.L97
 1521              	.L92:
1552:..\..\FreeRTOS_Source/queue.c **** 				}
1553:..\..\FreeRTOS_Source/queue.c **** 				else
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 59
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 59
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 59
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 59
>>>>>>> parent of cb49844... test


1554:..\..\FreeRTOS_Source/queue.c **** 				{
1555:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1556:..\..\FreeRTOS_Source/queue.c **** 				}
1557:..\..\FreeRTOS_Source/queue.c **** 			}
1558:..\..\FreeRTOS_Source/queue.c **** 			else
1559:..\..\FreeRTOS_Source/queue.c **** 			{
1560:..\..\FreeRTOS_Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1561:..\..\FreeRTOS_Source/queue.c **** 				attempt to take the semaphore again. */
1562:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1522              		.loc 1 1562 0
 1523 013c F869     		ldr	r0, [r7, #28]
 1524 013e FFF7FEFF 		bl	prvUnlockQueue
1563:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 1525              		.loc 1 1563 0
 1526 0142 FFF7FEFF 		bl	xTaskResumeAll
 1527 0146 66E7     		b	.L97
 1528              	.L91:
1564:..\..\FreeRTOS_Source/queue.c **** 			}
1565:..\..\FreeRTOS_Source/queue.c **** 		}
1566:..\..\FreeRTOS_Source/queue.c **** 		else
1567:..\..\FreeRTOS_Source/queue.c **** 		{
1568:..\..\FreeRTOS_Source/queue.c **** 			/* Timed out. */
1569:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1529              		.loc 1 1569 0
 1530 0148 F869     		ldr	r0, [r7, #28]
 1531 014a FFF7FEFF 		bl	prvUnlockQueue
1570:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 1532              		.loc 1 1570 0
 1533 014e FFF7FEFF 		bl	xTaskResumeAll
1571:..\..\FreeRTOS_Source/queue.c **** 
1572:..\..\FreeRTOS_Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1573:..\..\FreeRTOS_Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1574:..\..\FreeRTOS_Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1575:..\..\FreeRTOS_Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1576:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1534              		.loc 1 1576 0
 1535 0152 F869     		ldr	r0, [r7, #28]
 1536 0154 FFF7FEFF 		bl	prvIsQueueEmpty
 1537 0158 0346     		mov	r3, r0
 1538 015a 002B     		cmp	r3, #0
 1539 015c 3FF45BAF 		beq	.L97
1577:..\..\FreeRTOS_Source/queue.c **** 			{
1578:..\..\FreeRTOS_Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1579:..\..\FreeRTOS_Source/queue.c **** 				{
1580:..\..\FreeRTOS_Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1581:..\..\FreeRTOS_Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1582:..\..\FreeRTOS_Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1583:..\..\FreeRTOS_Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
 1540              		.loc 1 1583 0
 1541 0160 3B6A     		ldr	r3, [r7, #32]
 1542 0162 002B     		cmp	r3, #0
 1543 0164 0DD0     		beq	.L96
1584:..\..\FreeRTOS_Source/queue.c **** 					{
1585:..\..\FreeRTOS_Source/queue.c **** 						taskENTER_CRITICAL();
 1544              		.loc 1 1585 0
 1545 0166 FFF7FEFF 		bl	vPortEnterCritical
 1546              	.LBB36:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 60
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 60
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 60
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 60
>>>>>>> parent of cb49844... test


1586:..\..\FreeRTOS_Source/queue.c **** 						{
1587:..\..\FreeRTOS_Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1588:..\..\FreeRTOS_Source/queue.c **** 
1589:..\..\FreeRTOS_Source/queue.c **** 							/* This task blocking on the mutex caused another
1590:..\..\FreeRTOS_Source/queue.c **** 							task to inherit this task's priority.  Now this task
1591:..\..\FreeRTOS_Source/queue.c **** 							has timed out the priority should be disinherited
1592:..\..\FreeRTOS_Source/queue.c **** 							again, but only as low as the next highest priority
1593:..\..\FreeRTOS_Source/queue.c **** 							task that is waiting for the same mutex. */
1594:..\..\FreeRTOS_Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 1547              		.loc 1 1594 0
 1548 016a F869     		ldr	r0, [r7, #28]
 1549 016c FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 1550 0170 7861     		str	r0, [r7, #20]
1595:..\..\FreeRTOS_Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
 1551              		.loc 1 1595 0
 1552 0172 FB69     		ldr	r3, [r7, #28]
 1553 0174 5B68     		ldr	r3, [r3, #4]
 1554 0176 7969     		ldr	r1, [r7, #20]
 1555 0178 1846     		mov	r0, r3
 1556 017a FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 1557              	.LBE36:
1596:..\..\FreeRTOS_Source/queue.c **** 						}
1597:..\..\FreeRTOS_Source/queue.c **** 						taskEXIT_CRITICAL();
 1558              		.loc 1 1597 0
 1559 017e FFF7FEFF 		bl	vPortExitCritical
 1560              	.L96:
1598:..\..\FreeRTOS_Source/queue.c **** 					}
1599:..\..\FreeRTOS_Source/queue.c **** 				}
1600:..\..\FreeRTOS_Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1601:..\..\FreeRTOS_Source/queue.c **** 
1602:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1603:..\..\FreeRTOS_Source/queue.c **** 				return errQUEUE_EMPTY;
 1561              		.loc 1 1603 0
 1562 0182 0023     		movs	r3, #0
 1563              	.L98:
1604:..\..\FreeRTOS_Source/queue.c **** 			}
1605:..\..\FreeRTOS_Source/queue.c **** 			else
1606:..\..\FreeRTOS_Source/queue.c **** 			{
1607:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1608:..\..\FreeRTOS_Source/queue.c **** 			}
1609:..\..\FreeRTOS_Source/queue.c **** 		}
1610:..\..\FreeRTOS_Source/queue.c **** 	}
1611:..\..\FreeRTOS_Source/queue.c **** }
 1564              		.loc 1 1611 0 discriminator 3
 1565 0184 1846     		mov	r0, r3
 1566 0186 2837     		adds	r7, r7, #40
 1567              		.cfi_def_cfa_offset 8
 1568 0188 BD46     		mov	sp, r7
 1569              		.cfi_def_cfa_register 13
 1570              		@ sp needed
 1571 018a 80BD     		pop	{r7, pc}
 1572              	.L100:
 1573              		.align	2
 1574              	.L99:
 1575 018c 04ED00E0 		.word	-536810236
 1576              		.cfi_endproc
 1577              	.LFE80:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 61
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 61
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 61
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 61
>>>>>>> parent of cb49844... test


 1578              		.size	xQueueSemaphoreTake, .-xQueueSemaphoreTake
 1579              		.section	.text.xQueuePeek,"ax",%progbits
 1580              		.align	2
 1581              		.global	xQueuePeek
 1582              		.thumb
 1583              		.thumb_func
 1584              		.type	xQueuePeek, %function
 1585              	xQueuePeek:
 1586              	.LFB81:
1612:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1613:..\..\FreeRTOS_Source/queue.c **** 
1614:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1615:..\..\FreeRTOS_Source/queue.c **** {
 1587              		.loc 1 1615 0
 1588              		.cfi_startproc
 1589              		@ args = 0, pretend = 0, frame = 40
 1590              		@ frame_needed = 1, uses_anonymous_args = 0
 1591 0000 80B5     		push	{r7, lr}
 1592              		.cfi_def_cfa_offset 8
 1593              		.cfi_offset 7, -8
 1594              		.cfi_offset 14, -4
 1595 0002 8AB0     		sub	sp, sp, #40
 1596              		.cfi_def_cfa_offset 48
 1597 0004 00AF     		add	r7, sp, #0
 1598              		.cfi_def_cfa_register 7
 1599 0006 F860     		str	r0, [r7, #12]
 1600 0008 B960     		str	r1, [r7, #8]
 1601 000a 7A60     		str	r2, [r7, #4]
1616:..\..\FreeRTOS_Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1602              		.loc 1 1616 0
 1603 000c 0023     		movs	r3, #0
 1604 000e 7B62     		str	r3, [r7, #36]
1617:..\..\FreeRTOS_Source/queue.c **** TimeOut_t xTimeOut;
1618:..\..\FreeRTOS_Source/queue.c **** int8_t *pcOriginalReadPosition;
1619:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1605              		.loc 1 1619 0
 1606 0010 FB68     		ldr	r3, [r7, #12]
 1607 0012 3B62     		str	r3, [r7, #32]
 1608              	.L113:
1620:..\..\FreeRTOS_Source/queue.c **** 
1621:..\..\FreeRTOS_Source/queue.c **** 	/* Check the pointer is not NULL. */
1622:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( ( pxQueue ) );
1623:..\..\FreeRTOS_Source/queue.c **** 
1624:..\..\FreeRTOS_Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1625:..\..\FreeRTOS_Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1626:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1627:..\..\FreeRTOS_Source/queue.c **** 
1628:..\..\FreeRTOS_Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1629:..\..\FreeRTOS_Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1630:..\..\FreeRTOS_Source/queue.c **** 	{
1631:..\..\FreeRTOS_Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1632:..\..\FreeRTOS_Source/queue.c **** 	}
1633:..\..\FreeRTOS_Source/queue.c **** 	#endif
1634:..\..\FreeRTOS_Source/queue.c **** 
1635:..\..\FreeRTOS_Source/queue.c **** 
1636:..\..\FreeRTOS_Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1637:..\..\FreeRTOS_Source/queue.c **** 	statements within the function itself.  This is done in the interest
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 62
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 62
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 62
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 62
>>>>>>> parent of cb49844... test


1638:..\..\FreeRTOS_Source/queue.c **** 	of execution time efficiency. */
1639:..\..\FreeRTOS_Source/queue.c **** 
1640:..\..\FreeRTOS_Source/queue.c **** 	for( ;; )
1641:..\..\FreeRTOS_Source/queue.c **** 	{
1642:..\..\FreeRTOS_Source/queue.c **** 		taskENTER_CRITICAL();
 1609              		.loc 1 1642 0
 1610 0014 FFF7FEFF 		bl	vPortEnterCritical
 1611              	.LBB37:
1643:..\..\FreeRTOS_Source/queue.c **** 		{
1644:..\..\FreeRTOS_Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1612              		.loc 1 1644 0
 1613 0018 3B6A     		ldr	r3, [r7, #32]
 1614 001a 9B6B     		ldr	r3, [r3, #56]
 1615 001c FB61     		str	r3, [r7, #28]
1645:..\..\FreeRTOS_Source/queue.c **** 
1646:..\..\FreeRTOS_Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1647:..\..\FreeRTOS_Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1648:..\..\FreeRTOS_Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1616              		.loc 1 1648 0
 1617 001e FB69     		ldr	r3, [r7, #28]
 1618 0020 002B     		cmp	r3, #0
 1619 0022 21D0     		beq	.L102
1649:..\..\FreeRTOS_Source/queue.c **** 			{
1650:..\..\FreeRTOS_Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1651:..\..\FreeRTOS_Source/queue.c **** 				is read from the queue as this function is only peeking the
1652:..\..\FreeRTOS_Source/queue.c **** 				data, not removing it. */
1653:..\..\FreeRTOS_Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1620              		.loc 1 1653 0
 1621 0024 3B6A     		ldr	r3, [r7, #32]
 1622 0026 DB68     		ldr	r3, [r3, #12]
 1623 0028 BB61     		str	r3, [r7, #24]
1654:..\..\FreeRTOS_Source/queue.c **** 
1655:..\..\FreeRTOS_Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
 1624              		.loc 1 1655 0
 1625 002a B968     		ldr	r1, [r7, #8]
 1626 002c 386A     		ldr	r0, [r7, #32]
 1627 002e FFF7FEFF 		bl	prvCopyDataFromQueue
1656:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1657:..\..\FreeRTOS_Source/queue.c **** 
1658:..\..\FreeRTOS_Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1659:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 1628              		.loc 1 1659 0
 1629 0032 3B6A     		ldr	r3, [r7, #32]
 1630 0034 BA69     		ldr	r2, [r7, #24]
 1631 0036 DA60     		str	r2, [r3, #12]
1660:..\..\FreeRTOS_Source/queue.c **** 
1661:..\..\FreeRTOS_Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1662:..\..\FreeRTOS_Source/queue.c **** 				any other tasks waiting for the data. */
1663:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 1632              		.loc 1 1663 0
 1633 0038 3B6A     		ldr	r3, [r7, #32]
 1634 003a 5B6A     		ldr	r3, [r3, #36]
 1635 003c 002B     		cmp	r3, #0
 1636 003e 0FD0     		beq	.L103
1664:..\..\FreeRTOS_Source/queue.c **** 				{
1665:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 1637              		.loc 1 1665 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 63
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 63
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 63
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 63
>>>>>>> parent of cb49844... test


 1638 0040 3B6A     		ldr	r3, [r7, #32]
 1639 0042 2433     		adds	r3, r3, #36
 1640 0044 1846     		mov	r0, r3
 1641 0046 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1642 004a 0346     		mov	r3, r0
 1643 004c 002B     		cmp	r3, #0
 1644 004e 07D0     		beq	.L103
1666:..\..\FreeRTOS_Source/queue.c **** 					{
1667:..\..\FreeRTOS_Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1668:..\..\FreeRTOS_Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 1645              		.loc 1 1668 0
 1646 0050 3C4B     		ldr	r3, .L115
 1647 0052 4FF08052 		mov	r2, #268435456
 1648 0056 1A60     		str	r2, [r3]
 1649              		.syntax unified
 1650              	@ 1668 "..\..\FreeRTOS_Source\queue.c" 1
 1651 0058 BFF34F8F 		dsb
 1652              	@ 0 "" 2
 1653              	@ 1668 "..\..\FreeRTOS_Source\queue.c" 1
 1654 005c BFF36F8F 		isb
 1655              	@ 0 "" 2
 1656              		.thumb
 1657              		.syntax unified
 1658              	.L103:
1669:..\..\FreeRTOS_Source/queue.c **** 					}
1670:..\..\FreeRTOS_Source/queue.c **** 					else
1671:..\..\FreeRTOS_Source/queue.c **** 					{
1672:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1673:..\..\FreeRTOS_Source/queue.c **** 					}
1674:..\..\FreeRTOS_Source/queue.c **** 				}
1675:..\..\FreeRTOS_Source/queue.c **** 				else
1676:..\..\FreeRTOS_Source/queue.c **** 				{
1677:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1678:..\..\FreeRTOS_Source/queue.c **** 				}
1679:..\..\FreeRTOS_Source/queue.c **** 
1680:..\..\FreeRTOS_Source/queue.c **** 				taskEXIT_CRITICAL();
 1659              		.loc 1 1680 0
 1660 0060 FFF7FEFF 		bl	vPortExitCritical
1681:..\..\FreeRTOS_Source/queue.c **** 				return pdPASS;
 1661              		.loc 1 1681 0
 1662 0064 0123     		movs	r3, #1
 1663 0066 69E0     		b	.L114
 1664              	.L102:
1682:..\..\FreeRTOS_Source/queue.c **** 			}
1683:..\..\FreeRTOS_Source/queue.c **** 			else
1684:..\..\FreeRTOS_Source/queue.c **** 			{
1685:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 1665              		.loc 1 1685 0
 1666 0068 7B68     		ldr	r3, [r7, #4]
 1667 006a 002B     		cmp	r3, #0
 1668 006c 03D1     		bne	.L105
1686:..\..\FreeRTOS_Source/queue.c **** 				{
1687:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1688:..\..\FreeRTOS_Source/queue.c **** 					the block time has expired) so leave now. */
1689:..\..\FreeRTOS_Source/queue.c **** 					taskEXIT_CRITICAL();
 1669              		.loc 1 1689 0
 1670 006e FFF7FEFF 		bl	vPortExitCritical
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 64
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 64
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 64
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 64
>>>>>>> parent of cb49844... test


1690:..\..\FreeRTOS_Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1691:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_EMPTY;
 1671              		.loc 1 1691 0
 1672 0072 0023     		movs	r3, #0
 1673 0074 62E0     		b	.L114
 1674              	.L105:
1692:..\..\FreeRTOS_Source/queue.c **** 				}
1693:..\..\FreeRTOS_Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 1675              		.loc 1 1693 0
 1676 0076 7B6A     		ldr	r3, [r7, #36]
 1677 0078 002B     		cmp	r3, #0
 1678 007a 06D1     		bne	.L106
1694:..\..\FreeRTOS_Source/queue.c **** 				{
1695:..\..\FreeRTOS_Source/queue.c **** 					/* The queue was empty and a block time was specified so
1696:..\..\FreeRTOS_Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1697:..\..\FreeRTOS_Source/queue.c **** 					state. */
1698:..\..\FreeRTOS_Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 1679              		.loc 1 1698 0
 1680 007c 07F11003 		add	r3, r7, #16
 1681 0080 1846     		mov	r0, r3
 1682 0082 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
1699:..\..\FreeRTOS_Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1683              		.loc 1 1699 0
 1684 0086 0123     		movs	r3, #1
 1685 0088 7B62     		str	r3, [r7, #36]
 1686              	.L106:
 1687              	.LBE37:
1700:..\..\FreeRTOS_Source/queue.c **** 				}
1701:..\..\FreeRTOS_Source/queue.c **** 				else
1702:..\..\FreeRTOS_Source/queue.c **** 				{
1703:..\..\FreeRTOS_Source/queue.c **** 					/* Entry time was already set. */
1704:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1705:..\..\FreeRTOS_Source/queue.c **** 				}
1706:..\..\FreeRTOS_Source/queue.c **** 			}
1707:..\..\FreeRTOS_Source/queue.c **** 		}
1708:..\..\FreeRTOS_Source/queue.c **** 		taskEXIT_CRITICAL();
 1688              		.loc 1 1708 0
 1689 008a FFF7FEFF 		bl	vPortExitCritical
1709:..\..\FreeRTOS_Source/queue.c **** 
1710:..\..\FreeRTOS_Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1711:..\..\FreeRTOS_Source/queue.c **** 		now the critical section has been exited. */
1712:..\..\FreeRTOS_Source/queue.c **** 
1713:..\..\FreeRTOS_Source/queue.c **** 		vTaskSuspendAll();
 1690              		.loc 1 1713 0
 1691 008e FFF7FEFF 		bl	vTaskSuspendAll
1714:..\..\FreeRTOS_Source/queue.c **** 		prvLockQueue( pxQueue );
 1692              		.loc 1 1714 0
 1693 0092 FFF7FEFF 		bl	vPortEnterCritical
 1694 0096 3B6A     		ldr	r3, [r7, #32]
 1695 0098 93F84430 		ldrb	r3, [r3, #68]
 1696 009c 5BB2     		sxtb	r3, r3
 1697 009e B3F1FF3F 		cmp	r3, #-1
 1698 00a2 03D1     		bne	.L107
 1699              		.loc 1 1714 0 is_stmt 0 discriminator 1
 1700 00a4 3B6A     		ldr	r3, [r7, #32]
 1701 00a6 0022     		movs	r2, #0
 1702 00a8 83F84420 		strb	r2, [r3, #68]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 65
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 65
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 65
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 65
>>>>>>> parent of cb49844... test


 1703              	.L107:
 1704              		.loc 1 1714 0 discriminator 3
 1705 00ac 3B6A     		ldr	r3, [r7, #32]
 1706 00ae 93F84530 		ldrb	r3, [r3, #69]
 1707 00b2 5BB2     		sxtb	r3, r3
 1708 00b4 B3F1FF3F 		cmp	r3, #-1
 1709 00b8 03D1     		bne	.L108
 1710              		.loc 1 1714 0 discriminator 4
 1711 00ba 3B6A     		ldr	r3, [r7, #32]
 1712 00bc 0022     		movs	r2, #0
 1713 00be 83F84520 		strb	r2, [r3, #69]
 1714              	.L108:
 1715              		.loc 1 1714 0 discriminator 6
 1716 00c2 FFF7FEFF 		bl	vPortExitCritical
1715:..\..\FreeRTOS_Source/queue.c **** 
1716:..\..\FreeRTOS_Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1717:..\..\FreeRTOS_Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 1717              		.loc 1 1717 0 is_stmt 1 discriminator 6
 1718 00c6 3A1D     		adds	r2, r7, #4
 1719 00c8 07F11003 		add	r3, r7, #16
 1720 00cc 1146     		mov	r1, r2
 1721 00ce 1846     		mov	r0, r3
 1722 00d0 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1723 00d4 0346     		mov	r3, r0
 1724 00d6 002B     		cmp	r3, #0
 1725 00d8 23D1     		bne	.L109
1718:..\..\FreeRTOS_Source/queue.c **** 		{
1719:..\..\FreeRTOS_Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1720:..\..\FreeRTOS_Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1721:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1726              		.loc 1 1721 0
 1727 00da 386A     		ldr	r0, [r7, #32]
 1728 00dc FFF7FEFF 		bl	prvIsQueueEmpty
 1729 00e0 0346     		mov	r3, r0
 1730 00e2 002B     		cmp	r3, #0
 1731 00e4 17D0     		beq	.L110
1722:..\..\FreeRTOS_Source/queue.c **** 			{
1723:..\..\FreeRTOS_Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1724:..\..\FreeRTOS_Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 1732              		.loc 1 1724 0
 1733 00e6 3B6A     		ldr	r3, [r7, #32]
 1734 00e8 2433     		adds	r3, r3, #36
 1735 00ea 7A68     		ldr	r2, [r7, #4]
 1736 00ec 1146     		mov	r1, r2
 1737 00ee 1846     		mov	r0, r3
 1738 00f0 FFF7FEFF 		bl	vTaskPlaceOnEventList
1725:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1739              		.loc 1 1725 0
 1740 00f4 386A     		ldr	r0, [r7, #32]
 1741 00f6 FFF7FEFF 		bl	prvUnlockQueue
1726:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1742              		.loc 1 1726 0
 1743 00fa FFF7FEFF 		bl	xTaskResumeAll
 1744 00fe 0346     		mov	r3, r0
 1745 0100 002B     		cmp	r3, #0
 1746 0102 87D1     		bne	.L113
1727:..\..\FreeRTOS_Source/queue.c **** 				{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 66
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 66
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 66
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 66
>>>>>>> parent of cb49844... test


1728:..\..\FreeRTOS_Source/queue.c **** 					portYIELD_WITHIN_API();
 1747              		.loc 1 1728 0
 1748 0104 0F4B     		ldr	r3, .L115
 1749 0106 4FF08052 		mov	r2, #268435456
 1750 010a 1A60     		str	r2, [r3]
 1751              		.syntax unified
 1752              	@ 1728 "..\..\FreeRTOS_Source\queue.c" 1
 1753 010c BFF34F8F 		dsb
 1754              	@ 0 "" 2
 1755              	@ 1728 "..\..\FreeRTOS_Source\queue.c" 1
 1756 0110 BFF36F8F 		isb
 1757              	@ 0 "" 2
 1758              		.thumb
 1759              		.syntax unified
 1760 0114 7EE7     		b	.L113
 1761              	.L110:
1729:..\..\FreeRTOS_Source/queue.c **** 				}
1730:..\..\FreeRTOS_Source/queue.c **** 				else
1731:..\..\FreeRTOS_Source/queue.c **** 				{
1732:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1733:..\..\FreeRTOS_Source/queue.c **** 				}
1734:..\..\FreeRTOS_Source/queue.c **** 			}
1735:..\..\FreeRTOS_Source/queue.c **** 			else
1736:..\..\FreeRTOS_Source/queue.c **** 			{
1737:..\..\FreeRTOS_Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1738:..\..\FreeRTOS_Source/queue.c **** 				state, instead return to try and obtain the data. */
1739:..\..\FreeRTOS_Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1762              		.loc 1 1739 0
 1763 0116 386A     		ldr	r0, [r7, #32]
 1764 0118 FFF7FEFF 		bl	prvUnlockQueue
1740:..\..\FreeRTOS_Source/queue.c **** 				( void ) xTaskResumeAll();
 1765              		.loc 1 1740 0
 1766 011c FFF7FEFF 		bl	xTaskResumeAll
 1767 0120 78E7     		b	.L113
 1768              	.L109:
1741:..\..\FreeRTOS_Source/queue.c **** 			}
1742:..\..\FreeRTOS_Source/queue.c **** 		}
1743:..\..\FreeRTOS_Source/queue.c **** 		else
1744:..\..\FreeRTOS_Source/queue.c **** 		{
1745:..\..\FreeRTOS_Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1746:..\..\FreeRTOS_Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1747:..\..\FreeRTOS_Source/queue.c **** 			prvUnlockQueue( pxQueue );
 1769              		.loc 1 1747 0
 1770 0122 386A     		ldr	r0, [r7, #32]
 1771 0124 FFF7FEFF 		bl	prvUnlockQueue
1748:..\..\FreeRTOS_Source/queue.c **** 			( void ) xTaskResumeAll();
 1772              		.loc 1 1748 0
 1773 0128 FFF7FEFF 		bl	xTaskResumeAll
1749:..\..\FreeRTOS_Source/queue.c **** 
1750:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 1774              		.loc 1 1750 0
 1775 012c 386A     		ldr	r0, [r7, #32]
 1776 012e FFF7FEFF 		bl	prvIsQueueEmpty
 1777 0132 0346     		mov	r3, r0
 1778 0134 002B     		cmp	r3, #0
 1779 0136 3FF46DAF 		beq	.L113
1751:..\..\FreeRTOS_Source/queue.c **** 			{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 67
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 67
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 67
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 67
>>>>>>> parent of cb49844... test


1752:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1753:..\..\FreeRTOS_Source/queue.c **** 				return errQUEUE_EMPTY;
 1780              		.loc 1 1753 0
 1781 013a 0023     		movs	r3, #0
 1782              	.L114:
1754:..\..\FreeRTOS_Source/queue.c **** 			}
1755:..\..\FreeRTOS_Source/queue.c **** 			else
1756:..\..\FreeRTOS_Source/queue.c **** 			{
1757:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1758:..\..\FreeRTOS_Source/queue.c **** 			}
1759:..\..\FreeRTOS_Source/queue.c **** 		}
1760:..\..\FreeRTOS_Source/queue.c **** 	}
1761:..\..\FreeRTOS_Source/queue.c **** }
 1783              		.loc 1 1761 0 discriminator 3
 1784 013c 1846     		mov	r0, r3
 1785 013e 2837     		adds	r7, r7, #40
 1786              		.cfi_def_cfa_offset 8
 1787 0140 BD46     		mov	sp, r7
 1788              		.cfi_def_cfa_register 13
 1789              		@ sp needed
 1790 0142 80BD     		pop	{r7, pc}
 1791              	.L116:
 1792              		.align	2
 1793              	.L115:
 1794 0144 04ED00E0 		.word	-536810236
 1795              		.cfi_endproc
 1796              	.LFE81:
 1797              		.size	xQueuePeek, .-xQueuePeek
 1798              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 1799              		.align	2
 1800              		.global	xQueueReceiveFromISR
 1801              		.thumb
 1802              		.thumb_func
 1803              		.type	xQueueReceiveFromISR, %function
 1804              	xQueueReceiveFromISR:
 1805              	.LFB82:
1762:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1763:..\..\FreeRTOS_Source/queue.c **** 
1764:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1765:..\..\FreeRTOS_Source/queue.c **** {
 1806              		.loc 1 1765 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 48
 1809              		@ frame_needed = 1, uses_anonymous_args = 0
 1810 0000 80B5     		push	{r7, lr}
 1811              		.cfi_def_cfa_offset 8
 1812              		.cfi_offset 7, -8
 1813              		.cfi_offset 14, -4
 1814 0002 8CB0     		sub	sp, sp, #48
 1815              		.cfi_def_cfa_offset 56
 1816 0004 00AF     		add	r7, sp, #0
 1817              		.cfi_def_cfa_register 7
 1818 0006 F860     		str	r0, [r7, #12]
 1819 0008 B960     		str	r1, [r7, #8]
 1820 000a 7A60     		str	r2, [r7, #4]
1766:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
1767:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 68
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 68
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 68
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 68
>>>>>>> parent of cb49844... test


1768:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1821              		.loc 1 1768 0
 1822 000c FB68     		ldr	r3, [r7, #12]
 1823 000e BB62     		str	r3, [r7, #40]
 1824              	.LBB38:
 1825              	.LBB39:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1826              		.loc 2 211 0
 1827              		.syntax unified
 1828              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1829 0010 EFF31182 			mrs r2, basepri											
 1830 0014 4FF0A003 		mov r3, #160												
 1831 0018 83F31188 		msr basepri, r3											
 1832 001c BFF36F8F 		isb														
 1833 0020 BFF34F8F 		dsb														
 1834              	
 1835              	@ 0 "" 2
 1836              		.thumb
 1837              		.syntax unified
 1838 0024 7A61     		str	r2, [r7, #20]
 1839 0026 3B61     		str	r3, [r7, #16]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1840              		.loc 2 223 0
 1841 0028 7B69     		ldr	r3, [r7, #20]
 1842              	.LBE39:
 1843              	.LBE38:
1769:..\..\FreeRTOS_Source/queue.c **** 
1770:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1771:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1772:..\..\FreeRTOS_Source/queue.c **** 
1773:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1774:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1775:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1776:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1777:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1778:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1779:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1780:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1781:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1782:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1783:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1784:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1785:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1786:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1787:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1788:..\..\FreeRTOS_Source/queue.c **** 
1789:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 1844              		.loc 1 1789 0
 1845 002a 3B62     		str	r3, [r7, #32]
 1846              	.LBB40:
1790:..\..\FreeRTOS_Source/queue.c **** 	{
1791:..\..\FreeRTOS_Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 1847              		.loc 1 1791 0
 1848 002c BB6A     		ldr	r3, [r7, #40]
 1849 002e 9B6B     		ldr	r3, [r3, #56]
 1850 0030 FB61     		str	r3, [r7, #28]
1792:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 69
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 69
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 69
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 69
>>>>>>> parent of cb49844... test


1793:..\..\FreeRTOS_Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1794:..\..\FreeRTOS_Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 1851              		.loc 1 1794 0
 1852 0032 FB69     		ldr	r3, [r7, #28]
 1853 0034 002B     		cmp	r3, #0
 1854 0036 2DD0     		beq	.L119
 1855              	.LBB41:
1795:..\..\FreeRTOS_Source/queue.c **** 		{
1796:..\..\FreeRTOS_Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
 1856              		.loc 1 1796 0
 1857 0038 BB6A     		ldr	r3, [r7, #40]
 1858 003a 93F84430 		ldrb	r3, [r3, #68]
 1859 003e FB76     		strb	r3, [r7, #27]
1797:..\..\FreeRTOS_Source/queue.c **** 
1798:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1799:..\..\FreeRTOS_Source/queue.c **** 
1800:..\..\FreeRTOS_Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1860              		.loc 1 1800 0
 1861 0040 B968     		ldr	r1, [r7, #8]
 1862 0042 B86A     		ldr	r0, [r7, #40]
 1863 0044 FFF7FEFF 		bl	prvCopyDataFromQueue
1801:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 1864              		.loc 1 1801 0
 1865 0048 FB69     		ldr	r3, [r7, #28]
 1866 004a 5A1E     		subs	r2, r3, #1
 1867 004c BB6A     		ldr	r3, [r7, #40]
 1868 004e 9A63     		str	r2, [r3, #56]
1802:..\..\FreeRTOS_Source/queue.c **** 
1803:..\..\FreeRTOS_Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1804:..\..\FreeRTOS_Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1805:..\..\FreeRTOS_Source/queue.c **** 			will know that an ISR has removed data while the queue was
1806:..\..\FreeRTOS_Source/queue.c **** 			locked. */
1807:..\..\FreeRTOS_Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
 1869              		.loc 1 1807 0
 1870 0050 97F91B30 		ldrsb	r3, [r7, #27]
 1871 0054 B3F1FF3F 		cmp	r3, #-1
 1872 0058 12D1     		bne	.L120
1808:..\..\FreeRTOS_Source/queue.c **** 			{
1809:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 1873              		.loc 1 1809 0
 1874 005a BB6A     		ldr	r3, [r7, #40]
 1875 005c 1B69     		ldr	r3, [r3, #16]
 1876 005e 002B     		cmp	r3, #0
 1877 0060 15D0     		beq	.L121
1810:..\..\FreeRTOS_Source/queue.c **** 				{
1811:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 1878              		.loc 1 1811 0
 1879 0062 BB6A     		ldr	r3, [r7, #40]
 1880 0064 1033     		adds	r3, r3, #16
 1881 0066 1846     		mov	r0, r3
 1882 0068 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1883 006c 0346     		mov	r3, r0
 1884 006e 002B     		cmp	r3, #0
 1885 0070 0DD0     		beq	.L121
1812:..\..\FreeRTOS_Source/queue.c **** 					{
1813:..\..\FreeRTOS_Source/queue.c **** 						/* The task waiting has a higher priority than us so
1814:..\..\FreeRTOS_Source/queue.c **** 						force a context switch. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 70
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 70
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 70
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 70
>>>>>>> parent of cb49844... test


1815:..\..\FreeRTOS_Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
 1886              		.loc 1 1815 0
 1887 0072 7B68     		ldr	r3, [r7, #4]
 1888 0074 002B     		cmp	r3, #0
 1889 0076 0AD0     		beq	.L121
1816:..\..\FreeRTOS_Source/queue.c **** 						{
1817:..\..\FreeRTOS_Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
 1890              		.loc 1 1817 0
 1891 0078 7B68     		ldr	r3, [r7, #4]
 1892 007a 0122     		movs	r2, #1
 1893 007c 1A60     		str	r2, [r3]
 1894 007e 06E0     		b	.L121
 1895              	.L120:
1818:..\..\FreeRTOS_Source/queue.c **** 						}
1819:..\..\FreeRTOS_Source/queue.c **** 						else
1820:..\..\FreeRTOS_Source/queue.c **** 						{
1821:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1822:..\..\FreeRTOS_Source/queue.c **** 						}
1823:..\..\FreeRTOS_Source/queue.c **** 					}
1824:..\..\FreeRTOS_Source/queue.c **** 					else
1825:..\..\FreeRTOS_Source/queue.c **** 					{
1826:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1827:..\..\FreeRTOS_Source/queue.c **** 					}
1828:..\..\FreeRTOS_Source/queue.c **** 				}
1829:..\..\FreeRTOS_Source/queue.c **** 				else
1830:..\..\FreeRTOS_Source/queue.c **** 				{
1831:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1832:..\..\FreeRTOS_Source/queue.c **** 				}
1833:..\..\FreeRTOS_Source/queue.c **** 			}
1834:..\..\FreeRTOS_Source/queue.c **** 			else
1835:..\..\FreeRTOS_Source/queue.c **** 			{
1836:..\..\FreeRTOS_Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1837:..\..\FreeRTOS_Source/queue.c **** 				knows that data was removed while it was locked. */
1838:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 1896              		.loc 1 1838 0
 1897 0080 FB7E     		ldrb	r3, [r7, #27]	@ zero_extendqisi2
 1898 0082 0133     		adds	r3, r3, #1
 1899 0084 DBB2     		uxtb	r3, r3
 1900 0086 5AB2     		sxtb	r2, r3
 1901 0088 BB6A     		ldr	r3, [r7, #40]
 1902 008a 83F84420 		strb	r2, [r3, #68]
 1903              	.L121:
1839:..\..\FreeRTOS_Source/queue.c **** 			}
1840:..\..\FreeRTOS_Source/queue.c **** 
1841:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 1904              		.loc 1 1841 0
 1905 008e 0123     		movs	r3, #1
 1906 0090 FB62     		str	r3, [r7, #44]
 1907              	.LBE41:
 1908 0092 01E0     		b	.L122
 1909              	.L119:
1842:..\..\FreeRTOS_Source/queue.c **** 		}
1843:..\..\FreeRTOS_Source/queue.c **** 		else
1844:..\..\FreeRTOS_Source/queue.c **** 		{
1845:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
 1910              		.loc 1 1845 0
 1911 0094 0023     		movs	r3, #0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 71
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 71
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 71
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 71
>>>>>>> parent of cb49844... test


 1912 0096 FB62     		str	r3, [r7, #44]
 1913              	.L122:
 1914 0098 3B6A     		ldr	r3, [r7, #32]
 1915 009a 7B62     		str	r3, [r7, #36]
 1916              	.LBE40:
 1917              	.LBB42:
 1918              	.LBB43:
 1919              		.loc 2 229 0
 1920 009c 7B6A     		ldr	r3, [r7, #36]
 1921              		.syntax unified
 1922              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1923 009e 83F31188 			msr basepri, r3	
 1924              	@ 0 "" 2
 1925              		.thumb
 1926              		.syntax unified
 1927              	.LBE43:
 1928              	.LBE42:
1846:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1847:..\..\FreeRTOS_Source/queue.c **** 		}
1848:..\..\FreeRTOS_Source/queue.c **** 	}
1849:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1850:..\..\FreeRTOS_Source/queue.c **** 
1851:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 1929              		.loc 1 1851 0
 1930 00a2 FB6A     		ldr	r3, [r7, #44]
1852:..\..\FreeRTOS_Source/queue.c **** }
 1931              		.loc 1 1852 0
 1932 00a4 1846     		mov	r0, r3
 1933 00a6 3037     		adds	r7, r7, #48
 1934              		.cfi_def_cfa_offset 8
 1935 00a8 BD46     		mov	sp, r7
 1936              		.cfi_def_cfa_register 13
 1937              		@ sp needed
 1938 00aa 80BD     		pop	{r7, pc}
 1939              		.cfi_endproc
 1940              	.LFE82:
 1941              		.size	xQueueReceiveFromISR, .-xQueueReceiveFromISR
 1942              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 1943              		.align	2
 1944              		.global	xQueuePeekFromISR
 1945              		.thumb
 1946              		.thumb_func
 1947              		.type	xQueuePeekFromISR, %function
 1948              	xQueuePeekFromISR:
 1949              	.LFB83:
1853:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1854:..\..\FreeRTOS_Source/queue.c **** 
1855:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1856:..\..\FreeRTOS_Source/queue.c **** {
 1950              		.loc 1 1856 0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 40
 1953              		@ frame_needed = 1, uses_anonymous_args = 0
 1954 0000 80B5     		push	{r7, lr}
 1955              		.cfi_def_cfa_offset 8
 1956              		.cfi_offset 7, -8
 1957              		.cfi_offset 14, -4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 72
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 72
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 72
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 72
>>>>>>> parent of cb49844... test


 1958 0002 8AB0     		sub	sp, sp, #40
 1959              		.cfi_def_cfa_offset 48
 1960 0004 00AF     		add	r7, sp, #0
 1961              		.cfi_def_cfa_register 7
 1962 0006 7860     		str	r0, [r7, #4]
 1963 0008 3960     		str	r1, [r7]
1857:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
1858:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1859:..\..\FreeRTOS_Source/queue.c **** int8_t *pcOriginalReadPosition;
1860:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 1964              		.loc 1 1860 0
 1965 000a 7B68     		ldr	r3, [r7, #4]
 1966 000c 3B62     		str	r3, [r7, #32]
 1967              	.LBB44:
 1968              	.LBB45:
 211:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** 	(
 1969              		.loc 2 211 0
 1970              		.syntax unified
 1971              	@ 211 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 1972 000e EFF31182 			mrs r2, basepri											
 1973 0012 4FF0A003 		mov r3, #160												
 1974 0016 83F31188 		msr basepri, r3											
 1975 001a BFF36F8F 		isb														
 1976 001e BFF34F8F 		dsb														
 1977              	
 1978              	@ 0 "" 2
 1979              		.thumb
 1980              		.syntax unified
 1981 0022 3A61     		str	r2, [r7, #16]
 1982 0024 FB60     		str	r3, [r7, #12]
 223:..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h **** }
 1983              		.loc 2 223 0
 1984 0026 3B69     		ldr	r3, [r7, #16]
 1985              	.LBE45:
 1986              	.LBE44:
1861:..\..\FreeRTOS_Source/queue.c **** 
1862:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1863:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1864:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1865:..\..\FreeRTOS_Source/queue.c **** 
1866:..\..\FreeRTOS_Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1867:..\..\FreeRTOS_Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1868:..\..\FreeRTOS_Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1869:..\..\FreeRTOS_Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1870:..\..\FreeRTOS_Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1871:..\..\FreeRTOS_Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1872:..\..\FreeRTOS_Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1873:..\..\FreeRTOS_Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1874:..\..\FreeRTOS_Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1875:..\..\FreeRTOS_Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1876:..\..\FreeRTOS_Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1877:..\..\FreeRTOS_Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1878:..\..\FreeRTOS_Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1879:..\..\FreeRTOS_Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1880:..\..\FreeRTOS_Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1881:..\..\FreeRTOS_Source/queue.c **** 
1882:..\..\FreeRTOS_Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 73
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 73
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 73
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 73
>>>>>>> parent of cb49844... test


 1987              		.loc 1 1882 0
 1988 0028 BB61     		str	r3, [r7, #24]
1883:..\..\FreeRTOS_Source/queue.c **** 	{
1884:..\..\FreeRTOS_Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1885:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 1989              		.loc 1 1885 0
 1990 002a 3B6A     		ldr	r3, [r7, #32]
 1991 002c 9B6B     		ldr	r3, [r3, #56]
 1992 002e 002B     		cmp	r3, #0
 1993 0030 0CD0     		beq	.L126
1886:..\..\FreeRTOS_Source/queue.c **** 		{
1887:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1888:..\..\FreeRTOS_Source/queue.c **** 
1889:..\..\FreeRTOS_Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1890:..\..\FreeRTOS_Source/queue.c **** 			actually being removed from the queue. */
1891:..\..\FreeRTOS_Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 1994              		.loc 1 1891 0
 1995 0032 3B6A     		ldr	r3, [r7, #32]
 1996 0034 DB68     		ldr	r3, [r3, #12]
 1997 0036 7B61     		str	r3, [r7, #20]
1892:..\..\FreeRTOS_Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 1998              		.loc 1 1892 0
 1999 0038 3968     		ldr	r1, [r7]
 2000 003a 386A     		ldr	r0, [r7, #32]
 2001 003c FFF7FEFF 		bl	prvCopyDataFromQueue
1893:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 2002              		.loc 1 1893 0
 2003 0040 3B6A     		ldr	r3, [r7, #32]
 2004 0042 7A69     		ldr	r2, [r7, #20]
 2005 0044 DA60     		str	r2, [r3, #12]
1894:..\..\FreeRTOS_Source/queue.c **** 
1895:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
 2006              		.loc 1 1895 0
 2007 0046 0123     		movs	r3, #1
 2008 0048 7B62     		str	r3, [r7, #36]
 2009 004a 01E0     		b	.L127
 2010              	.L126:
1896:..\..\FreeRTOS_Source/queue.c **** 		}
1897:..\..\FreeRTOS_Source/queue.c **** 		else
1898:..\..\FreeRTOS_Source/queue.c **** 		{
1899:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
 2011              		.loc 1 1899 0
 2012 004c 0023     		movs	r3, #0
 2013 004e 7B62     		str	r3, [r7, #36]
 2014              	.L127:
 2015 0050 BB69     		ldr	r3, [r7, #24]
 2016 0052 FB61     		str	r3, [r7, #28]
 2017              	.LBB46:
 2018              	.LBB47:
 2019              		.loc 2 229 0
 2020 0054 FB69     		ldr	r3, [r7, #28]
 2021              		.syntax unified
 2022              	@ 229 "..\..\FreeRTOS_Source\portable\GCC\ARM_CM3/portmacro.h" 1
 2023 0056 83F31188 			msr basepri, r3	
 2024              	@ 0 "" 2
 2025              		.thumb
 2026              		.syntax unified
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 74
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 74
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 74
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 74
>>>>>>> parent of cb49844... test


 2027              	.LBE47:
 2028              	.LBE46:
1900:..\..\FreeRTOS_Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1901:..\..\FreeRTOS_Source/queue.c **** 		}
1902:..\..\FreeRTOS_Source/queue.c **** 	}
1903:..\..\FreeRTOS_Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1904:..\..\FreeRTOS_Source/queue.c **** 
1905:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2029              		.loc 1 1905 0
 2030 005a 7B6A     		ldr	r3, [r7, #36]
1906:..\..\FreeRTOS_Source/queue.c **** }
 2031              		.loc 1 1906 0
 2032 005c 1846     		mov	r0, r3
 2033 005e 2837     		adds	r7, r7, #40
 2034              		.cfi_def_cfa_offset 8
 2035 0060 BD46     		mov	sp, r7
 2036              		.cfi_def_cfa_register 13
 2037              		@ sp needed
 2038 0062 80BD     		pop	{r7, pc}
 2039              		.cfi_endproc
 2040              	.LFE83:
 2041              		.size	xQueuePeekFromISR, .-xQueuePeekFromISR
 2042              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 2043              		.align	2
 2044              		.global	uxQueueMessagesWaiting
 2045              		.thumb
 2046              		.thumb_func
 2047              		.type	uxQueueMessagesWaiting, %function
 2048              	uxQueueMessagesWaiting:
 2049              	.LFB84:
1907:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1908:..\..\FreeRTOS_Source/queue.c **** 
1909:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1910:..\..\FreeRTOS_Source/queue.c **** {
 2050              		.loc 1 1910 0
 2051              		.cfi_startproc
 2052              		@ args = 0, pretend = 0, frame = 16
 2053              		@ frame_needed = 1, uses_anonymous_args = 0
 2054 0000 80B5     		push	{r7, lr}
 2055              		.cfi_def_cfa_offset 8
 2056              		.cfi_offset 7, -8
 2057              		.cfi_offset 14, -4
 2058 0002 84B0     		sub	sp, sp, #16
 2059              		.cfi_def_cfa_offset 24
 2060 0004 00AF     		add	r7, sp, #0
 2061              		.cfi_def_cfa_register 7
 2062 0006 7860     		str	r0, [r7, #4]
1911:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxReturn;
1912:..\..\FreeRTOS_Source/queue.c **** 
1913:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
1914:..\..\FreeRTOS_Source/queue.c **** 
1915:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2063              		.loc 1 1915 0
 2064 0008 FFF7FEFF 		bl	vPortEnterCritical
1916:..\..\FreeRTOS_Source/queue.c **** 	{
1917:..\..\FreeRTOS_Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2065              		.loc 1 1917 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 75
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 75
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 75
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 75
>>>>>>> parent of cb49844... test


 2066 000c 7B68     		ldr	r3, [r7, #4]
 2067 000e 9B6B     		ldr	r3, [r3, #56]
 2068 0010 FB60     		str	r3, [r7, #12]
1918:..\..\FreeRTOS_Source/queue.c **** 	}
1919:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2069              		.loc 1 1919 0
 2070 0012 FFF7FEFF 		bl	vPortExitCritical
1920:..\..\FreeRTOS_Source/queue.c **** 
1921:..\..\FreeRTOS_Source/queue.c **** 	return uxReturn;
 2071              		.loc 1 1921 0
 2072 0016 FB68     		ldr	r3, [r7, #12]
1922:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2073              		.loc 1 1922 0
 2074 0018 1846     		mov	r0, r3
 2075 001a 1037     		adds	r7, r7, #16
 2076              		.cfi_def_cfa_offset 8
 2077 001c BD46     		mov	sp, r7
 2078              		.cfi_def_cfa_register 13
 2079              		@ sp needed
 2080 001e 80BD     		pop	{r7, pc}
 2081              		.cfi_endproc
 2082              	.LFE84:
 2083              		.size	uxQueueMessagesWaiting, .-uxQueueMessagesWaiting
 2084              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 2085              		.align	2
 2086              		.global	uxQueueSpacesAvailable
 2087              		.thumb
 2088              		.thumb_func
 2089              		.type	uxQueueSpacesAvailable, %function
 2090              	uxQueueSpacesAvailable:
 2091              	.LFB85:
1923:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1924:..\..\FreeRTOS_Source/queue.c **** 
1925:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1926:..\..\FreeRTOS_Source/queue.c **** {
 2092              		.loc 1 1926 0
 2093              		.cfi_startproc
 2094              		@ args = 0, pretend = 0, frame = 16
 2095              		@ frame_needed = 1, uses_anonymous_args = 0
 2096 0000 80B5     		push	{r7, lr}
 2097              		.cfi_def_cfa_offset 8
 2098              		.cfi_offset 7, -8
 2099              		.cfi_offset 14, -4
 2100 0002 84B0     		sub	sp, sp, #16
 2101              		.cfi_def_cfa_offset 24
 2102 0004 00AF     		add	r7, sp, #0
 2103              		.cfi_def_cfa_register 7
 2104 0006 7860     		str	r0, [r7, #4]
1927:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxReturn;
1928:..\..\FreeRTOS_Source/queue.c **** Queue_t *pxQueue;
1929:..\..\FreeRTOS_Source/queue.c **** 
1930:..\..\FreeRTOS_Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
 2105              		.loc 1 1930 0
 2106 0008 7B68     		ldr	r3, [r7, #4]
 2107 000a FB60     		str	r3, [r7, #12]
1931:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1932:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 76
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 76
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 76
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 76
>>>>>>> parent of cb49844... test


1933:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2108              		.loc 1 1933 0
 2109 000c FFF7FEFF 		bl	vPortEnterCritical
1934:..\..\FreeRTOS_Source/queue.c **** 	{
1935:..\..\FreeRTOS_Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 2110              		.loc 1 1935 0
 2111 0010 FB68     		ldr	r3, [r7, #12]
 2112 0012 DA6B     		ldr	r2, [r3, #60]
 2113 0014 FB68     		ldr	r3, [r7, #12]
 2114 0016 9B6B     		ldr	r3, [r3, #56]
 2115 0018 D31A     		subs	r3, r2, r3
 2116 001a BB60     		str	r3, [r7, #8]
1936:..\..\FreeRTOS_Source/queue.c **** 	}
1937:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2117              		.loc 1 1937 0
 2118 001c FFF7FEFF 		bl	vPortExitCritical
1938:..\..\FreeRTOS_Source/queue.c **** 
1939:..\..\FreeRTOS_Source/queue.c **** 	return uxReturn;
 2119              		.loc 1 1939 0
 2120 0020 BB68     		ldr	r3, [r7, #8]
1940:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2121              		.loc 1 1940 0
 2122 0022 1846     		mov	r0, r3
 2123 0024 1037     		adds	r7, r7, #16
 2124              		.cfi_def_cfa_offset 8
 2125 0026 BD46     		mov	sp, r7
 2126              		.cfi_def_cfa_register 13
 2127              		@ sp needed
 2128 0028 80BD     		pop	{r7, pc}
 2129              		.cfi_endproc
 2130              	.LFE85:
 2131              		.size	uxQueueSpacesAvailable, .-uxQueueSpacesAvailable
 2132 002a 00BF     		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
 2133              		.align	2
 2134              		.global	uxQueueMessagesWaitingFromISR
 2135              		.thumb
 2136              		.thumb_func
 2137              		.type	uxQueueMessagesWaitingFromISR, %function
 2138              	uxQueueMessagesWaitingFromISR:
 2139              	.LFB86:
1941:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1942:..\..\FreeRTOS_Source/queue.c **** 
1943:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1944:..\..\FreeRTOS_Source/queue.c **** {
 2140              		.loc 1 1944 0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 16
 2143              		@ frame_needed = 1, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
 2145 0000 80B4     		push	{r7}
 2146              		.cfi_def_cfa_offset 4
 2147              		.cfi_offset 7, -4
 2148 0002 85B0     		sub	sp, sp, #20
 2149              		.cfi_def_cfa_offset 24
 2150 0004 00AF     		add	r7, sp, #0
 2151              		.cfi_def_cfa_register 7
 2152 0006 7860     		str	r0, [r7, #4]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 77
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 77
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 77
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 77
>>>>>>> parent of cb49844... test


1945:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxReturn;
1946:..\..\FreeRTOS_Source/queue.c **** 
1947:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
1948:..\..\FreeRTOS_Source/queue.c **** 
1949:..\..\FreeRTOS_Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 2153              		.loc 1 1949 0
 2154 0008 7B68     		ldr	r3, [r7, #4]
 2155 000a 9B6B     		ldr	r3, [r3, #56]
 2156 000c FB60     		str	r3, [r7, #12]
1950:..\..\FreeRTOS_Source/queue.c **** 
1951:..\..\FreeRTOS_Source/queue.c **** 	return uxReturn;
 2157              		.loc 1 1951 0
 2158 000e FB68     		ldr	r3, [r7, #12]
1952:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 2159              		.loc 1 1952 0
 2160 0010 1846     		mov	r0, r3
 2161 0012 1437     		adds	r7, r7, #20
 2162              		.cfi_def_cfa_offset 4
 2163 0014 BD46     		mov	sp, r7
 2164              		.cfi_def_cfa_register 13
 2165              		@ sp needed
 2166 0016 80BC     		pop	{r7}
 2167              		.cfi_restore 7
 2168              		.cfi_def_cfa_offset 0
 2169 0018 7047     		bx	lr
 2170              		.cfi_endproc
 2171              	.LFE86:
 2172              		.size	uxQueueMessagesWaitingFromISR, .-uxQueueMessagesWaitingFromISR
 2173 001a 00BF     		.section	.text.vQueueDelete,"ax",%progbits
 2174              		.align	2
 2175              		.global	vQueueDelete
 2176              		.thumb
 2177              		.thumb_func
 2178              		.type	vQueueDelete, %function
 2179              	vQueueDelete:
 2180              	.LFB87:
1953:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1954:..\..\FreeRTOS_Source/queue.c **** 
1955:..\..\FreeRTOS_Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1956:..\..\FreeRTOS_Source/queue.c **** {
 2181              		.loc 1 1956 0
 2182              		.cfi_startproc
 2183              		@ args = 0, pretend = 0, frame = 16
 2184              		@ frame_needed = 1, uses_anonymous_args = 0
 2185 0000 80B5     		push	{r7, lr}
 2186              		.cfi_def_cfa_offset 8
 2187              		.cfi_offset 7, -8
 2188              		.cfi_offset 14, -4
 2189 0002 84B0     		sub	sp, sp, #16
 2190              		.cfi_def_cfa_offset 24
 2191 0004 00AF     		add	r7, sp, #0
 2192              		.cfi_def_cfa_register 7
 2193 0006 7860     		str	r0, [r7, #4]
1957:..\..\FreeRTOS_Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 2194              		.loc 1 1957 0
 2195 0008 7B68     		ldr	r3, [r7, #4]
 2196 000a FB60     		str	r3, [r7, #12]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 78
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 78
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 78
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 78
>>>>>>> parent of cb49844... test


1958:..\..\FreeRTOS_Source/queue.c **** 
1959:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( pxQueue );
1960:..\..\FreeRTOS_Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1961:..\..\FreeRTOS_Source/queue.c **** 
1962:..\..\FreeRTOS_Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1963:..\..\FreeRTOS_Source/queue.c **** 	{
1964:..\..\FreeRTOS_Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
 2197              		.loc 1 1964 0
 2198 000c F868     		ldr	r0, [r7, #12]
 2199 000e FFF7FEFF 		bl	vQueueUnregisterQueue
1965:..\..\FreeRTOS_Source/queue.c **** 	}
1966:..\..\FreeRTOS_Source/queue.c **** 	#endif
1967:..\..\FreeRTOS_Source/queue.c **** 
1968:..\..\FreeRTOS_Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1969:..\..\FreeRTOS_Source/queue.c **** 	{
1970:..\..\FreeRTOS_Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1971:..\..\FreeRTOS_Source/queue.c **** 		again. */
1972:..\..\FreeRTOS_Source/queue.c **** 		vPortFree( pxQueue );
 2200              		.loc 1 1972 0
 2201 0012 F868     		ldr	r0, [r7, #12]
 2202 0014 FFF7FEFF 		bl	vPortFree
1973:..\..\FreeRTOS_Source/queue.c **** 	}
1974:..\..\FreeRTOS_Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1975:..\..\FreeRTOS_Source/queue.c **** 	{
1976:..\..\FreeRTOS_Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1977:..\..\FreeRTOS_Source/queue.c **** 		check before attempting to free the memory. */
1978:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1979:..\..\FreeRTOS_Source/queue.c **** 		{
1980:..\..\FreeRTOS_Source/queue.c **** 			vPortFree( pxQueue );
1981:..\..\FreeRTOS_Source/queue.c **** 		}
1982:..\..\FreeRTOS_Source/queue.c **** 		else
1983:..\..\FreeRTOS_Source/queue.c **** 		{
1984:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
1985:..\..\FreeRTOS_Source/queue.c **** 		}
1986:..\..\FreeRTOS_Source/queue.c **** 	}
1987:..\..\FreeRTOS_Source/queue.c **** 	#else
1988:..\..\FreeRTOS_Source/queue.c **** 	{
1989:..\..\FreeRTOS_Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1990:..\..\FreeRTOS_Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1991:..\..\FreeRTOS_Source/queue.c **** 		( void ) pxQueue;
1992:..\..\FreeRTOS_Source/queue.c **** 	}
1993:..\..\FreeRTOS_Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1994:..\..\FreeRTOS_Source/queue.c **** }
 2203              		.loc 1 1994 0
 2204 0018 00BF     		nop
 2205 001a 1037     		adds	r7, r7, #16
 2206              		.cfi_def_cfa_offset 8
 2207 001c BD46     		mov	sp, r7
 2208              		.cfi_def_cfa_register 13
 2209              		@ sp needed
 2210 001e 80BD     		pop	{r7, pc}
 2211              		.cfi_endproc
 2212              	.LFE87:
 2213              		.size	vQueueDelete, .-vQueueDelete
 2214              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
 2215              		.align	2
 2216              		.thumb
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 79
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 79
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 79
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 79
>>>>>>> parent of cb49844... test


 2217              		.thumb_func
 2218              		.type	prvGetDisinheritPriorityAfterTimeout, %function
 2219              	prvGetDisinheritPriorityAfterTimeout:
 2220              	.LFB88:
1995:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
1996:..\..\FreeRTOS_Source/queue.c **** 
1997:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1998:..\..\FreeRTOS_Source/queue.c **** 
1999:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
2000:..\..\FreeRTOS_Source/queue.c **** 	{
2001:..\..\FreeRTOS_Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
2002:..\..\FreeRTOS_Source/queue.c **** 	}
2003:..\..\FreeRTOS_Source/queue.c **** 
2004:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2005:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2006:..\..\FreeRTOS_Source/queue.c **** 
2007:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2008:..\..\FreeRTOS_Source/queue.c **** 
2009:..\..\FreeRTOS_Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
2010:..\..\FreeRTOS_Source/queue.c **** 	{
2011:..\..\FreeRTOS_Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
2012:..\..\FreeRTOS_Source/queue.c **** 	}
2013:..\..\FreeRTOS_Source/queue.c **** 
2014:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2015:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2016:..\..\FreeRTOS_Source/queue.c **** 
2017:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2018:..\..\FreeRTOS_Source/queue.c **** 
2019:..\..\FreeRTOS_Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2020:..\..\FreeRTOS_Source/queue.c **** 	{
2021:..\..\FreeRTOS_Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2022:..\..\FreeRTOS_Source/queue.c **** 	}
2023:..\..\FreeRTOS_Source/queue.c **** 
2024:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2025:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2026:..\..\FreeRTOS_Source/queue.c **** 
2027:..\..\FreeRTOS_Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2028:..\..\FreeRTOS_Source/queue.c **** 
2029:..\..\FreeRTOS_Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2030:..\..\FreeRTOS_Source/queue.c **** 	{
 2221              		.loc 1 2030 0
 2222              		.cfi_startproc
 2223              		@ args = 0, pretend = 0, frame = 16
 2224              		@ frame_needed = 1, uses_anonymous_args = 0
 2225              		@ link register save eliminated.
 2226 0000 80B4     		push	{r7}
 2227              		.cfi_def_cfa_offset 4
 2228              		.cfi_offset 7, -4
 2229 0002 85B0     		sub	sp, sp, #20
 2230              		.cfi_def_cfa_offset 24
 2231 0004 00AF     		add	r7, sp, #0
 2232              		.cfi_def_cfa_register 7
 2233 0006 7860     		str	r0, [r7, #4]
2031:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2032:..\..\FreeRTOS_Source/queue.c **** 
2033:..\..\FreeRTOS_Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2034:..\..\FreeRTOS_Source/queue.c **** 		priority, but the waiting task times out, then the holder should
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 80
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 80
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 80
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 80
>>>>>>> parent of cb49844... test


2035:..\..\FreeRTOS_Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
2036:..\..\FreeRTOS_Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2037:..\..\FreeRTOS_Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2038:..\..\FreeRTOS_Source/queue.c **** 		mutex. */
2039:..\..\FreeRTOS_Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 2234              		.loc 1 2039 0
 2235 0008 7B68     		ldr	r3, [r7, #4]
 2236 000a 5B6A     		ldr	r3, [r3, #36]
 2237 000c 002B     		cmp	r3, #0
 2238 000e 06D0     		beq	.L137
2040:..\..\FreeRTOS_Source/queue.c **** 		{
2041:..\..\FreeRTOS_Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
 2239              		.loc 1 2041 0
 2240 0010 7B68     		ldr	r3, [r7, #4]
 2241 0012 1B6B     		ldr	r3, [r3, #48]
 2242 0014 1B68     		ldr	r3, [r3]
 2243 0016 C3F10503 		rsb	r3, r3, #5
 2244 001a FB60     		str	r3, [r7, #12]
 2245 001c 01E0     		b	.L138
 2246              	.L137:
2042:..\..\FreeRTOS_Source/queue.c **** 		}
2043:..\..\FreeRTOS_Source/queue.c **** 		else
2044:..\..\FreeRTOS_Source/queue.c **** 		{
2045:..\..\FreeRTOS_Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 2247              		.loc 1 2045 0
 2248 001e 0023     		movs	r3, #0
 2249 0020 FB60     		str	r3, [r7, #12]
 2250              	.L138:
2046:..\..\FreeRTOS_Source/queue.c **** 		}
2047:..\..\FreeRTOS_Source/queue.c **** 
2048:..\..\FreeRTOS_Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
 2251              		.loc 1 2048 0
 2252 0022 FB68     		ldr	r3, [r7, #12]
2049:..\..\FreeRTOS_Source/queue.c **** 	}
 2253              		.loc 1 2049 0
 2254 0024 1846     		mov	r0, r3
 2255 0026 1437     		adds	r7, r7, #20
 2256              		.cfi_def_cfa_offset 4
 2257 0028 BD46     		mov	sp, r7
 2258              		.cfi_def_cfa_register 13
 2259              		@ sp needed
 2260 002a 80BC     		pop	{r7}
 2261              		.cfi_restore 7
 2262              		.cfi_def_cfa_offset 0
 2263 002c 7047     		bx	lr
 2264              		.cfi_endproc
 2265              	.LFE88:
 2266              		.size	prvGetDisinheritPriorityAfterTimeout, .-prvGetDisinheritPriorityAfterTimeout
 2267 002e 00BF     		.section	.text.prvCopyDataToQueue,"ax",%progbits
 2268              		.align	2
 2269              		.thumb
 2270              		.thumb_func
 2271              		.type	prvCopyDataToQueue, %function
 2272              	prvCopyDataToQueue:
 2273              	.LFB89:
2050:..\..\FreeRTOS_Source/queue.c **** 
2051:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_MUTEXES */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 81
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 81
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 81
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 81
>>>>>>> parent of cb49844... test


2052:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2053:..\..\FreeRTOS_Source/queue.c **** 
2054:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2055:..\..\FreeRTOS_Source/queue.c **** {
 2274              		.loc 1 2055 0
 2275              		.cfi_startproc
 2276              		@ args = 0, pretend = 0, frame = 24
 2277              		@ frame_needed = 1, uses_anonymous_args = 0
 2278 0000 80B5     		push	{r7, lr}
 2279              		.cfi_def_cfa_offset 8
 2280              		.cfi_offset 7, -8
 2281              		.cfi_offset 14, -4
 2282 0002 86B0     		sub	sp, sp, #24
 2283              		.cfi_def_cfa_offset 32
 2284 0004 00AF     		add	r7, sp, #0
 2285              		.cfi_def_cfa_register 7
 2286 0006 F860     		str	r0, [r7, #12]
 2287 0008 B960     		str	r1, [r7, #8]
 2288 000a 7A60     		str	r2, [r7, #4]
2056:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn = pdFALSE;
 2289              		.loc 1 2056 0
 2290 000c 0023     		movs	r3, #0
 2291 000e 7B61     		str	r3, [r7, #20]
2057:..\..\FreeRTOS_Source/queue.c **** UBaseType_t uxMessagesWaiting;
2058:..\..\FreeRTOS_Source/queue.c **** 
2059:..\..\FreeRTOS_Source/queue.c **** 	/* This function is called from a critical section. */
2060:..\..\FreeRTOS_Source/queue.c **** 
2061:..\..\FreeRTOS_Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 2292              		.loc 1 2061 0
 2293 0010 FB68     		ldr	r3, [r7, #12]
 2294 0012 9B6B     		ldr	r3, [r3, #56]
 2295 0014 3B61     		str	r3, [r7, #16]
2062:..\..\FreeRTOS_Source/queue.c **** 
2063:..\..\FreeRTOS_Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 2296              		.loc 1 2063 0
 2297 0016 FB68     		ldr	r3, [r7, #12]
 2298 0018 1B6C     		ldr	r3, [r3, #64]
 2299 001a 002B     		cmp	r3, #0
 2300 001c 0DD1     		bne	.L141
2064:..\..\FreeRTOS_Source/queue.c **** 	{
2065:..\..\FreeRTOS_Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
2066:..\..\FreeRTOS_Source/queue.c **** 		{
2067:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 2301              		.loc 1 2067 0
 2302 001e FB68     		ldr	r3, [r7, #12]
 2303 0020 1B68     		ldr	r3, [r3]
 2304 0022 002B     		cmp	r3, #0
 2305 0024 4DD1     		bne	.L142
2068:..\..\FreeRTOS_Source/queue.c **** 			{
2069:..\..\FreeRTOS_Source/queue.c **** 				/* The mutex is no longer being held. */
2070:..\..\FreeRTOS_Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 2306              		.loc 1 2070 0
 2307 0026 FB68     		ldr	r3, [r7, #12]
 2308 0028 5B68     		ldr	r3, [r3, #4]
 2309 002a 1846     		mov	r0, r3
 2310 002c FFF7FEFF 		bl	xTaskPriorityDisinherit
 2311 0030 7861     		str	r0, [r7, #20]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 82
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 82
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 82
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 82
>>>>>>> parent of cb49844... test


2071:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 2312              		.loc 1 2071 0
 2313 0032 FB68     		ldr	r3, [r7, #12]
 2314 0034 0022     		movs	r2, #0
 2315 0036 5A60     		str	r2, [r3, #4]
 2316 0038 43E0     		b	.L142
 2317              	.L141:
2072:..\..\FreeRTOS_Source/queue.c **** 			}
2073:..\..\FreeRTOS_Source/queue.c **** 			else
2074:..\..\FreeRTOS_Source/queue.c **** 			{
2075:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2076:..\..\FreeRTOS_Source/queue.c **** 			}
2077:..\..\FreeRTOS_Source/queue.c **** 		}
2078:..\..\FreeRTOS_Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2079:..\..\FreeRTOS_Source/queue.c **** 	}
2080:..\..\FreeRTOS_Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
 2318              		.loc 1 2080 0
 2319 003a 7B68     		ldr	r3, [r7, #4]
 2320 003c 002B     		cmp	r3, #0
 2321 003e 19D1     		bne	.L143
2081:..\..\FreeRTOS_Source/queue.c **** 	{
2082:..\..\FreeRTOS_Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
 2322              		.loc 1 2082 0
 2323 0040 FB68     		ldr	r3, [r7, #12]
 2324 0042 9868     		ldr	r0, [r3, #8]
 2325 0044 FB68     		ldr	r3, [r7, #12]
 2326 0046 1B6C     		ldr	r3, [r3, #64]
 2327 0048 1A46     		mov	r2, r3
 2328 004a B968     		ldr	r1, [r7, #8]
 2329 004c FFF7FEFF 		bl	memcpy
2083:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 2330              		.loc 1 2083 0
 2331 0050 FB68     		ldr	r3, [r7, #12]
 2332 0052 9A68     		ldr	r2, [r3, #8]
 2333 0054 FB68     		ldr	r3, [r7, #12]
 2334 0056 1B6C     		ldr	r3, [r3, #64]
 2335 0058 1A44     		add	r2, r2, r3
 2336 005a FB68     		ldr	r3, [r7, #12]
 2337 005c 9A60     		str	r2, [r3, #8]
2084:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 2338              		.loc 1 2084 0
 2339 005e FB68     		ldr	r3, [r7, #12]
 2340 0060 9A68     		ldr	r2, [r3, #8]
 2341 0062 FB68     		ldr	r3, [r7, #12]
 2342 0064 5B68     		ldr	r3, [r3, #4]
 2343 0066 9A42     		cmp	r2, r3
 2344 0068 2BD3     		bcc	.L142
2085:..\..\FreeRTOS_Source/queue.c **** 		{
2086:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
 2345              		.loc 1 2086 0
 2346 006a FB68     		ldr	r3, [r7, #12]
 2347 006c 1A68     		ldr	r2, [r3]
 2348 006e FB68     		ldr	r3, [r7, #12]
 2349 0070 9A60     		str	r2, [r3, #8]
 2350 0072 26E0     		b	.L142
 2351              	.L143:
2087:..\..\FreeRTOS_Source/queue.c **** 		}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 83
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 83
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 83
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 83
>>>>>>> parent of cb49844... test


2088:..\..\FreeRTOS_Source/queue.c **** 		else
2089:..\..\FreeRTOS_Source/queue.c **** 		{
2090:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2091:..\..\FreeRTOS_Source/queue.c **** 		}
2092:..\..\FreeRTOS_Source/queue.c **** 	}
2093:..\..\FreeRTOS_Source/queue.c **** 	else
2094:..\..\FreeRTOS_Source/queue.c **** 	{
2095:..\..\FreeRTOS_Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
 2352              		.loc 1 2095 0
 2353 0074 FB68     		ldr	r3, [r7, #12]
 2354 0076 D868     		ldr	r0, [r3, #12]
 2355 0078 FB68     		ldr	r3, [r7, #12]
 2356 007a 1B6C     		ldr	r3, [r3, #64]
 2357 007c 1A46     		mov	r2, r3
 2358 007e B968     		ldr	r1, [r7, #8]
 2359 0080 FFF7FEFF 		bl	memcpy
2096:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 2360              		.loc 1 2096 0
 2361 0084 FB68     		ldr	r3, [r7, #12]
 2362 0086 DA68     		ldr	r2, [r3, #12]
 2363 0088 FB68     		ldr	r3, [r7, #12]
 2364 008a 1B6C     		ldr	r3, [r3, #64]
 2365 008c 5B42     		negs	r3, r3
 2366 008e 1A44     		add	r2, r2, r3
 2367 0090 FB68     		ldr	r3, [r7, #12]
 2368 0092 DA60     		str	r2, [r3, #12]
2097:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 2369              		.loc 1 2097 0
 2370 0094 FB68     		ldr	r3, [r7, #12]
 2371 0096 DA68     		ldr	r2, [r3, #12]
 2372 0098 FB68     		ldr	r3, [r7, #12]
 2373 009a 1B68     		ldr	r3, [r3]
 2374 009c 9A42     		cmp	r2, r3
 2375 009e 07D2     		bcs	.L144
2098:..\..\FreeRTOS_Source/queue.c **** 		{
2099:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 2376              		.loc 1 2099 0
 2377 00a0 FB68     		ldr	r3, [r7, #12]
 2378 00a2 5A68     		ldr	r2, [r3, #4]
 2379 00a4 FB68     		ldr	r3, [r7, #12]
 2380 00a6 1B6C     		ldr	r3, [r3, #64]
 2381 00a8 5B42     		negs	r3, r3
 2382 00aa 1A44     		add	r2, r2, r3
 2383 00ac FB68     		ldr	r3, [r7, #12]
 2384 00ae DA60     		str	r2, [r3, #12]
 2385              	.L144:
2100:..\..\FreeRTOS_Source/queue.c **** 		}
2101:..\..\FreeRTOS_Source/queue.c **** 		else
2102:..\..\FreeRTOS_Source/queue.c **** 		{
2103:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2104:..\..\FreeRTOS_Source/queue.c **** 		}
2105:..\..\FreeRTOS_Source/queue.c **** 
2106:..\..\FreeRTOS_Source/queue.c **** 		if( xPosition == queueOVERWRITE )
 2386              		.loc 1 2106 0
 2387 00b0 7B68     		ldr	r3, [r7, #4]
 2388 00b2 022B     		cmp	r3, #2
 2389 00b4 05D1     		bne	.L142
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 84
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 84
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 84
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 84
>>>>>>> parent of cb49844... test


2107:..\..\FreeRTOS_Source/queue.c **** 		{
2108:..\..\FreeRTOS_Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 2390              		.loc 1 2108 0
 2391 00b6 3B69     		ldr	r3, [r7, #16]
 2392 00b8 002B     		cmp	r3, #0
 2393 00ba 02D0     		beq	.L142
2109:..\..\FreeRTOS_Source/queue.c **** 			{
2110:..\..\FreeRTOS_Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2111:..\..\FreeRTOS_Source/queue.c **** 				one from the recorded number of items in the queue so when
2112:..\..\FreeRTOS_Source/queue.c **** 				one is added again below the number of recorded items remains
2113:..\..\FreeRTOS_Source/queue.c **** 				correct. */
2114:..\..\FreeRTOS_Source/queue.c **** 				--uxMessagesWaiting;
 2394              		.loc 1 2114 0
 2395 00bc 3B69     		ldr	r3, [r7, #16]
 2396 00be 013B     		subs	r3, r3, #1
 2397 00c0 3B61     		str	r3, [r7, #16]
 2398              	.L142:
2115:..\..\FreeRTOS_Source/queue.c **** 			}
2116:..\..\FreeRTOS_Source/queue.c **** 			else
2117:..\..\FreeRTOS_Source/queue.c **** 			{
2118:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2119:..\..\FreeRTOS_Source/queue.c **** 			}
2120:..\..\FreeRTOS_Source/queue.c **** 		}
2121:..\..\FreeRTOS_Source/queue.c **** 		else
2122:..\..\FreeRTOS_Source/queue.c **** 		{
2123:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2124:..\..\FreeRTOS_Source/queue.c **** 		}
2125:..\..\FreeRTOS_Source/queue.c **** 	}
2126:..\..\FreeRTOS_Source/queue.c **** 
2127:..\..\FreeRTOS_Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 2399              		.loc 1 2127 0
 2400 00c2 3B69     		ldr	r3, [r7, #16]
 2401 00c4 5A1C     		adds	r2, r3, #1
 2402 00c6 FB68     		ldr	r3, [r7, #12]
 2403 00c8 9A63     		str	r2, [r3, #56]
2128:..\..\FreeRTOS_Source/queue.c **** 
2129:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2404              		.loc 1 2129 0
 2405 00ca 7B69     		ldr	r3, [r7, #20]
2130:..\..\FreeRTOS_Source/queue.c **** }
 2406              		.loc 1 2130 0
 2407 00cc 1846     		mov	r0, r3
 2408 00ce 1837     		adds	r7, r7, #24
 2409              		.cfi_def_cfa_offset 8
 2410 00d0 BD46     		mov	sp, r7
 2411              		.cfi_def_cfa_register 13
 2412              		@ sp needed
 2413 00d2 80BD     		pop	{r7, pc}
 2414              		.cfi_endproc
 2415              	.LFE89:
 2416              		.size	prvCopyDataToQueue, .-prvCopyDataToQueue
 2417              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 2418              		.align	2
 2419              		.thumb
 2420              		.thumb_func
 2421              		.type	prvCopyDataFromQueue, %function
 2422              	prvCopyDataFromQueue:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 85
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 85
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 85
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 85
>>>>>>> parent of cb49844... test


 2423              	.LFB90:
2131:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2132:..\..\FreeRTOS_Source/queue.c **** 
2133:..\..\FreeRTOS_Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2134:..\..\FreeRTOS_Source/queue.c **** {
 2424              		.loc 1 2134 0
 2425              		.cfi_startproc
 2426              		@ args = 0, pretend = 0, frame = 8
 2427              		@ frame_needed = 1, uses_anonymous_args = 0
 2428 0000 80B5     		push	{r7, lr}
 2429              		.cfi_def_cfa_offset 8
 2430              		.cfi_offset 7, -8
 2431              		.cfi_offset 14, -4
 2432 0002 82B0     		sub	sp, sp, #8
 2433              		.cfi_def_cfa_offset 16
 2434 0004 00AF     		add	r7, sp, #0
 2435              		.cfi_def_cfa_register 7
 2436 0006 7860     		str	r0, [r7, #4]
 2437 0008 3960     		str	r1, [r7]
2135:..\..\FreeRTOS_Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 2438              		.loc 1 2135 0
 2439 000a 7B68     		ldr	r3, [r7, #4]
 2440 000c 1B6C     		ldr	r3, [r3, #64]
 2441 000e 002B     		cmp	r3, #0
 2442 0010 18D0     		beq	.L149
2136:..\..\FreeRTOS_Source/queue.c **** 	{
2137:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 2443              		.loc 1 2137 0
 2444 0012 7B68     		ldr	r3, [r7, #4]
 2445 0014 DA68     		ldr	r2, [r3, #12]
 2446 0016 7B68     		ldr	r3, [r7, #4]
 2447 0018 1B6C     		ldr	r3, [r3, #64]
 2448 001a 1A44     		add	r2, r2, r3
 2449 001c 7B68     		ldr	r3, [r7, #4]
 2450 001e DA60     		str	r2, [r3, #12]
2138:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 2451              		.loc 1 2138 0
 2452 0020 7B68     		ldr	r3, [r7, #4]
 2453 0022 DA68     		ldr	r2, [r3, #12]
 2454 0024 7B68     		ldr	r3, [r7, #4]
 2455 0026 5B68     		ldr	r3, [r3, #4]
 2456 0028 9A42     		cmp	r2, r3
 2457 002a 03D3     		bcc	.L148
2139:..\..\FreeRTOS_Source/queue.c **** 		{
2140:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 2458              		.loc 1 2140 0
 2459 002c 7B68     		ldr	r3, [r7, #4]
 2460 002e 1A68     		ldr	r2, [r3]
 2461 0030 7B68     		ldr	r3, [r7, #4]
 2462 0032 DA60     		str	r2, [r3, #12]
 2463              	.L148:
2141:..\..\FreeRTOS_Source/queue.c **** 		}
2142:..\..\FreeRTOS_Source/queue.c **** 		else
2143:..\..\FreeRTOS_Source/queue.c **** 		{
2144:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2145:..\..\FreeRTOS_Source/queue.c **** 		}
2146:..\..\FreeRTOS_Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 86
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 86
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 86
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 86
>>>>>>> parent of cb49844... test


 2464              		.loc 1 2146 0
 2465 0034 7B68     		ldr	r3, [r7, #4]
 2466 0036 D968     		ldr	r1, [r3, #12]
 2467 0038 7B68     		ldr	r3, [r7, #4]
 2468 003a 1B6C     		ldr	r3, [r3, #64]
 2469 003c 1A46     		mov	r2, r3
 2470 003e 3868     		ldr	r0, [r7]
 2471 0040 FFF7FEFF 		bl	memcpy
 2472              	.L149:
2147:..\..\FreeRTOS_Source/queue.c **** 	}
2148:..\..\FreeRTOS_Source/queue.c **** }
 2473              		.loc 1 2148 0
 2474 0044 00BF     		nop
 2475 0046 0837     		adds	r7, r7, #8
 2476              		.cfi_def_cfa_offset 8
 2477 0048 BD46     		mov	sp, r7
 2478              		.cfi_def_cfa_register 13
 2479              		@ sp needed
 2480 004a 80BD     		pop	{r7, pc}
 2481              		.cfi_endproc
 2482              	.LFE90:
 2483              		.size	prvCopyDataFromQueue, .-prvCopyDataFromQueue
 2484              		.section	.text.prvUnlockQueue,"ax",%progbits
 2485              		.align	2
 2486              		.thumb
 2487              		.thumb_func
 2488              		.type	prvUnlockQueue, %function
 2489              	prvUnlockQueue:
 2490              	.LFB91:
2149:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2150:..\..\FreeRTOS_Source/queue.c **** 
2151:..\..\FreeRTOS_Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2152:..\..\FreeRTOS_Source/queue.c **** {
 2491              		.loc 1 2152 0
 2492              		.cfi_startproc
 2493              		@ args = 0, pretend = 0, frame = 16
 2494              		@ frame_needed = 1, uses_anonymous_args = 0
 2495 0000 80B5     		push	{r7, lr}
 2496              		.cfi_def_cfa_offset 8
 2497              		.cfi_offset 7, -8
 2498              		.cfi_offset 14, -4
 2499 0002 84B0     		sub	sp, sp, #16
 2500              		.cfi_def_cfa_offset 24
 2501 0004 00AF     		add	r7, sp, #0
 2502              		.cfi_def_cfa_register 7
 2503 0006 7860     		str	r0, [r7, #4]
2153:..\..\FreeRTOS_Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2154:..\..\FreeRTOS_Source/queue.c **** 
2155:..\..\FreeRTOS_Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2156:..\..\FreeRTOS_Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2157:..\..\FreeRTOS_Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2158:..\..\FreeRTOS_Source/queue.c **** 	updated. */
2159:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2504              		.loc 1 2159 0
 2505 0008 FFF7FEFF 		bl	vPortEnterCritical
 2506              	.LBB48:
2160:..\..\FreeRTOS_Source/queue.c **** 	{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 87
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 87
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 87
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 87
>>>>>>> parent of cb49844... test


2161:..\..\FreeRTOS_Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
 2507              		.loc 1 2161 0
 2508 000c 7B68     		ldr	r3, [r7, #4]
 2509 000e 93F84530 		ldrb	r3, [r3, #69]
 2510 0012 FB73     		strb	r3, [r7, #15]
2162:..\..\FreeRTOS_Source/queue.c **** 
2163:..\..\FreeRTOS_Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2164:..\..\FreeRTOS_Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
 2511              		.loc 1 2164 0
 2512 0014 11E0     		b	.L151
 2513              	.L155:
2165:..\..\FreeRTOS_Source/queue.c **** 		{
2166:..\..\FreeRTOS_Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2167:..\..\FreeRTOS_Source/queue.c **** 			blocked waiting for data to become available? */
2168:..\..\FreeRTOS_Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2169:..\..\FreeRTOS_Source/queue.c **** 			{
2170:..\..\FreeRTOS_Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2171:..\..\FreeRTOS_Source/queue.c **** 				{
2172:..\..\FreeRTOS_Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2173:..\..\FreeRTOS_Source/queue.c **** 					{
2174:..\..\FreeRTOS_Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2175:..\..\FreeRTOS_Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2176:..\..\FreeRTOS_Source/queue.c **** 						A context switch is required. */
2177:..\..\FreeRTOS_Source/queue.c **** 						vTaskMissedYield();
2178:..\..\FreeRTOS_Source/queue.c **** 					}
2179:..\..\FreeRTOS_Source/queue.c **** 					else
2180:..\..\FreeRTOS_Source/queue.c **** 					{
2181:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2182:..\..\FreeRTOS_Source/queue.c **** 					}
2183:..\..\FreeRTOS_Source/queue.c **** 				}
2184:..\..\FreeRTOS_Source/queue.c **** 				else
2185:..\..\FreeRTOS_Source/queue.c **** 				{
2186:..\..\FreeRTOS_Source/queue.c **** 					/* Tasks that are removed from the event list will get
2187:..\..\FreeRTOS_Source/queue.c **** 					added to the pending ready list as the scheduler is still
2188:..\..\FreeRTOS_Source/queue.c **** 					suspended. */
2189:..\..\FreeRTOS_Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2190:..\..\FreeRTOS_Source/queue.c **** 					{
2191:..\..\FreeRTOS_Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2192:..\..\FreeRTOS_Source/queue.c **** 						{
2193:..\..\FreeRTOS_Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2194:..\..\FreeRTOS_Source/queue.c **** 							context	switch is required. */
2195:..\..\FreeRTOS_Source/queue.c **** 							vTaskMissedYield();
2196:..\..\FreeRTOS_Source/queue.c **** 						}
2197:..\..\FreeRTOS_Source/queue.c **** 						else
2198:..\..\FreeRTOS_Source/queue.c **** 						{
2199:..\..\FreeRTOS_Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2200:..\..\FreeRTOS_Source/queue.c **** 						}
2201:..\..\FreeRTOS_Source/queue.c **** 					}
2202:..\..\FreeRTOS_Source/queue.c **** 					else
2203:..\..\FreeRTOS_Source/queue.c **** 					{
2204:..\..\FreeRTOS_Source/queue.c **** 						break;
2205:..\..\FreeRTOS_Source/queue.c **** 					}
2206:..\..\FreeRTOS_Source/queue.c **** 				}
2207:..\..\FreeRTOS_Source/queue.c **** 			}
2208:..\..\FreeRTOS_Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2209:..\..\FreeRTOS_Source/queue.c **** 			{
2210:..\..\FreeRTOS_Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 88
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 88
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 88
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 88
>>>>>>> parent of cb49844... test


2211:..\..\FreeRTOS_Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2212:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 2514              		.loc 1 2212 0
 2515 0016 7B68     		ldr	r3, [r7, #4]
 2516 0018 5B6A     		ldr	r3, [r3, #36]
 2517 001a 002B     		cmp	r3, #0
 2518 001c 12D0     		beq	.L161
2213:..\..\FreeRTOS_Source/queue.c **** 				{
2214:..\..\FreeRTOS_Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 2519              		.loc 1 2214 0
 2520 001e 7B68     		ldr	r3, [r7, #4]
 2521 0020 2433     		adds	r3, r3, #36
 2522 0022 1846     		mov	r0, r3
 2523 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2524 0028 0346     		mov	r3, r0
 2525 002a 002B     		cmp	r3, #0
 2526 002c 01D0     		beq	.L153
2215:..\..\FreeRTOS_Source/queue.c **** 					{
2216:..\..\FreeRTOS_Source/queue.c **** 						/* The task waiting has a higher priority so record that
2217:..\..\FreeRTOS_Source/queue.c **** 						a context switch is required. */
2218:..\..\FreeRTOS_Source/queue.c **** 						vTaskMissedYield();
 2527              		.loc 1 2218 0
 2528 002e FFF7FEFF 		bl	vTaskMissedYield
 2529              	.L153:
2219:..\..\FreeRTOS_Source/queue.c **** 					}
2220:..\..\FreeRTOS_Source/queue.c **** 					else
2221:..\..\FreeRTOS_Source/queue.c **** 					{
2222:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2223:..\..\FreeRTOS_Source/queue.c **** 					}
2224:..\..\FreeRTOS_Source/queue.c **** 				}
2225:..\..\FreeRTOS_Source/queue.c **** 				else
2226:..\..\FreeRTOS_Source/queue.c **** 				{
2227:..\..\FreeRTOS_Source/queue.c **** 					break;
2228:..\..\FreeRTOS_Source/queue.c **** 				}
2229:..\..\FreeRTOS_Source/queue.c **** 			}
2230:..\..\FreeRTOS_Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2231:..\..\FreeRTOS_Source/queue.c **** 
2232:..\..\FreeRTOS_Source/queue.c **** 			--cTxLock;
 2530              		.loc 1 2232 0
 2531 0032 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2532 0034 013B     		subs	r3, r3, #1
 2533 0036 DBB2     		uxtb	r3, r3
 2534 0038 FB73     		strb	r3, [r7, #15]
 2535              	.L151:
2164:..\..\FreeRTOS_Source/queue.c **** 		{
 2536              		.loc 1 2164 0
 2537 003a 97F90F30 		ldrsb	r3, [r7, #15]
 2538 003e 002B     		cmp	r3, #0
 2539 0040 E9DC     		bgt	.L155
 2540 0042 00E0     		b	.L154
 2541              	.L161:
2227:..\..\FreeRTOS_Source/queue.c **** 				}
 2542              		.loc 1 2227 0
 2543 0044 00BF     		nop
 2544              	.L154:
2233:..\..\FreeRTOS_Source/queue.c **** 		}
2234:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 89
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 89
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 89
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 89
>>>>>>> parent of cb49844... test


2235:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 2545              		.loc 1 2235 0
 2546 0046 7B68     		ldr	r3, [r7, #4]
 2547 0048 FF22     		movs	r2, #255
 2548 004a 83F84520 		strb	r2, [r3, #69]
 2549              	.LBE48:
2236:..\..\FreeRTOS_Source/queue.c **** 	}
2237:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2550              		.loc 1 2237 0
 2551 004e FFF7FEFF 		bl	vPortExitCritical
2238:..\..\FreeRTOS_Source/queue.c **** 
2239:..\..\FreeRTOS_Source/queue.c **** 	/* Do the same for the Rx lock. */
2240:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2552              		.loc 1 2240 0
 2553 0052 FFF7FEFF 		bl	vPortEnterCritical
 2554              	.LBB49:
2241:..\..\FreeRTOS_Source/queue.c **** 	{
2242:..\..\FreeRTOS_Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
 2555              		.loc 1 2242 0
 2556 0056 7B68     		ldr	r3, [r7, #4]
 2557 0058 93F84430 		ldrb	r3, [r3, #68]
 2558 005c BB73     		strb	r3, [r7, #14]
2243:..\..\FreeRTOS_Source/queue.c **** 
2244:..\..\FreeRTOS_Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
 2559              		.loc 1 2244 0
 2560 005e 11E0     		b	.L156
 2561              	.L160:
2245:..\..\FreeRTOS_Source/queue.c **** 		{
2246:..\..\FreeRTOS_Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 2562              		.loc 1 2246 0
 2563 0060 7B68     		ldr	r3, [r7, #4]
 2564 0062 1B69     		ldr	r3, [r3, #16]
 2565 0064 002B     		cmp	r3, #0
 2566 0066 12D0     		beq	.L162
2247:..\..\FreeRTOS_Source/queue.c **** 			{
2248:..\..\FreeRTOS_Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 2567              		.loc 1 2248 0
 2568 0068 7B68     		ldr	r3, [r7, #4]
 2569 006a 1033     		adds	r3, r3, #16
 2570 006c 1846     		mov	r0, r3
 2571 006e FFF7FEFF 		bl	xTaskRemoveFromEventList
 2572 0072 0346     		mov	r3, r0
 2573 0074 002B     		cmp	r3, #0
 2574 0076 01D0     		beq	.L158
2249:..\..\FreeRTOS_Source/queue.c **** 				{
2250:..\..\FreeRTOS_Source/queue.c **** 					vTaskMissedYield();
 2575              		.loc 1 2250 0
 2576 0078 FFF7FEFF 		bl	vTaskMissedYield
 2577              	.L158:
2251:..\..\FreeRTOS_Source/queue.c **** 				}
2252:..\..\FreeRTOS_Source/queue.c **** 				else
2253:..\..\FreeRTOS_Source/queue.c **** 				{
2254:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2255:..\..\FreeRTOS_Source/queue.c **** 				}
2256:..\..\FreeRTOS_Source/queue.c **** 
2257:..\..\FreeRTOS_Source/queue.c **** 				--cRxLock;
 2578              		.loc 1 2257 0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 90
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 90
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 90
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 90
>>>>>>> parent of cb49844... test


 2579 007c BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2580 007e 013B     		subs	r3, r3, #1
 2581 0080 DBB2     		uxtb	r3, r3
 2582 0082 BB73     		strb	r3, [r7, #14]
 2583              	.L156:
2244:..\..\FreeRTOS_Source/queue.c **** 		{
 2584              		.loc 1 2244 0
 2585 0084 97F90E30 		ldrsb	r3, [r7, #14]
 2586 0088 002B     		cmp	r3, #0
 2587 008a E9DC     		bgt	.L160
 2588 008c 00E0     		b	.L159
 2589              	.L162:
2258:..\..\FreeRTOS_Source/queue.c **** 			}
2259:..\..\FreeRTOS_Source/queue.c **** 			else
2260:..\..\FreeRTOS_Source/queue.c **** 			{
2261:..\..\FreeRTOS_Source/queue.c **** 				break;
 2590              		.loc 1 2261 0
 2591 008e 00BF     		nop
 2592              	.L159:
2262:..\..\FreeRTOS_Source/queue.c **** 			}
2263:..\..\FreeRTOS_Source/queue.c **** 		}
2264:..\..\FreeRTOS_Source/queue.c **** 
2265:..\..\FreeRTOS_Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 2593              		.loc 1 2265 0
 2594 0090 7B68     		ldr	r3, [r7, #4]
 2595 0092 FF22     		movs	r2, #255
 2596 0094 83F84420 		strb	r2, [r3, #68]
 2597              	.LBE49:
2266:..\..\FreeRTOS_Source/queue.c **** 	}
2267:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2598              		.loc 1 2267 0
 2599 0098 FFF7FEFF 		bl	vPortExitCritical
2268:..\..\FreeRTOS_Source/queue.c **** }
 2600              		.loc 1 2268 0
 2601 009c 00BF     		nop
 2602 009e 1037     		adds	r7, r7, #16
 2603              		.cfi_def_cfa_offset 8
 2604 00a0 BD46     		mov	sp, r7
 2605              		.cfi_def_cfa_register 13
 2606              		@ sp needed
 2607 00a2 80BD     		pop	{r7, pc}
 2608              		.cfi_endproc
 2609              	.LFE91:
 2610              		.size	prvUnlockQueue, .-prvUnlockQueue
 2611              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 2612              		.align	2
 2613              		.thumb
 2614              		.thumb_func
 2615              		.type	prvIsQueueEmpty, %function
 2616              	prvIsQueueEmpty:
 2617              	.LFB92:
2269:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2270:..\..\FreeRTOS_Source/queue.c **** 
2271:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2272:..\..\FreeRTOS_Source/queue.c **** {
 2618              		.loc 1 2272 0
 2619              		.cfi_startproc
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 91
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 91
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 91
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 91
>>>>>>> parent of cb49844... test


 2620              		@ args = 0, pretend = 0, frame = 16
 2621              		@ frame_needed = 1, uses_anonymous_args = 0
 2622 0000 80B5     		push	{r7, lr}
 2623              		.cfi_def_cfa_offset 8
 2624              		.cfi_offset 7, -8
 2625              		.cfi_offset 14, -4
 2626 0002 84B0     		sub	sp, sp, #16
 2627              		.cfi_def_cfa_offset 24
 2628 0004 00AF     		add	r7, sp, #0
 2629              		.cfi_def_cfa_register 7
 2630 0006 7860     		str	r0, [r7, #4]
2273:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
2274:..\..\FreeRTOS_Source/queue.c **** 
2275:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2631              		.loc 1 2275 0
 2632 0008 FFF7FEFF 		bl	vPortEnterCritical
2276:..\..\FreeRTOS_Source/queue.c **** 	{
2277:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 2633              		.loc 1 2277 0
 2634 000c 7B68     		ldr	r3, [r7, #4]
 2635 000e 9B6B     		ldr	r3, [r3, #56]
 2636 0010 002B     		cmp	r3, #0
 2637 0012 02D1     		bne	.L164
2278:..\..\FreeRTOS_Source/queue.c **** 		{
2279:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdTRUE;
 2638              		.loc 1 2279 0
 2639 0014 0123     		movs	r3, #1
 2640 0016 FB60     		str	r3, [r7, #12]
 2641 0018 01E0     		b	.L165
 2642              	.L164:
2280:..\..\FreeRTOS_Source/queue.c **** 		}
2281:..\..\FreeRTOS_Source/queue.c **** 		else
2282:..\..\FreeRTOS_Source/queue.c **** 		{
2283:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFALSE;
 2643              		.loc 1 2283 0
 2644 001a 0023     		movs	r3, #0
 2645 001c FB60     		str	r3, [r7, #12]
 2646              	.L165:
2284:..\..\FreeRTOS_Source/queue.c **** 		}
2285:..\..\FreeRTOS_Source/queue.c **** 	}
2286:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2647              		.loc 1 2286 0
 2648 001e FFF7FEFF 		bl	vPortExitCritical
2287:..\..\FreeRTOS_Source/queue.c **** 
2288:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2649              		.loc 1 2288 0
 2650 0022 FB68     		ldr	r3, [r7, #12]
2289:..\..\FreeRTOS_Source/queue.c **** }
 2651              		.loc 1 2289 0
 2652 0024 1846     		mov	r0, r3
 2653 0026 1037     		adds	r7, r7, #16
 2654              		.cfi_def_cfa_offset 8
 2655 0028 BD46     		mov	sp, r7
 2656              		.cfi_def_cfa_register 13
 2657              		@ sp needed
 2658 002a 80BD     		pop	{r7, pc}
 2659              		.cfi_endproc
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 92
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 92
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 92
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 92
>>>>>>> parent of cb49844... test


 2660              	.LFE92:
 2661              		.size	prvIsQueueEmpty, .-prvIsQueueEmpty
 2662              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 2663              		.align	2
 2664              		.global	xQueueIsQueueEmptyFromISR
 2665              		.thumb
 2666              		.thumb_func
 2667              		.type	xQueueIsQueueEmptyFromISR, %function
 2668              	xQueueIsQueueEmptyFromISR:
 2669              	.LFB93:
2290:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2291:..\..\FreeRTOS_Source/queue.c **** 
2292:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2293:..\..\FreeRTOS_Source/queue.c **** {
 2670              		.loc 1 2293 0
 2671              		.cfi_startproc
 2672              		@ args = 0, pretend = 0, frame = 16
 2673              		@ frame_needed = 1, uses_anonymous_args = 0
 2674              		@ link register save eliminated.
 2675 0000 80B4     		push	{r7}
 2676              		.cfi_def_cfa_offset 4
 2677              		.cfi_offset 7, -4
 2678 0002 85B0     		sub	sp, sp, #20
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              		.cfi_def_cfa_register 7
 2682 0006 7860     		str	r0, [r7, #4]
2294:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
2295:..\..\FreeRTOS_Source/queue.c **** 
2296:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
2297:..\..\FreeRTOS_Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 2683              		.loc 1 2297 0
 2684 0008 7B68     		ldr	r3, [r7, #4]
 2685 000a 9B6B     		ldr	r3, [r3, #56]
 2686 000c 002B     		cmp	r3, #0
 2687 000e 02D1     		bne	.L168
2298:..\..\FreeRTOS_Source/queue.c **** 	{
2299:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdTRUE;
 2688              		.loc 1 2299 0
 2689 0010 0123     		movs	r3, #1
 2690 0012 FB60     		str	r3, [r7, #12]
 2691 0014 01E0     		b	.L169
 2692              	.L168:
2300:..\..\FreeRTOS_Source/queue.c **** 	}
2301:..\..\FreeRTOS_Source/queue.c **** 	else
2302:..\..\FreeRTOS_Source/queue.c **** 	{
2303:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdFALSE;
 2693              		.loc 1 2303 0
 2694 0016 0023     		movs	r3, #0
 2695 0018 FB60     		str	r3, [r7, #12]
 2696              	.L169:
2304:..\..\FreeRTOS_Source/queue.c **** 	}
2305:..\..\FreeRTOS_Source/queue.c **** 
2306:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2697              		.loc 1 2306 0
 2698 001a FB68     		ldr	r3, [r7, #12]
2307:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 93
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 93
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 93
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 93
>>>>>>> parent of cb49844... test


 2699              		.loc 1 2307 0
 2700 001c 1846     		mov	r0, r3
 2701 001e 1437     		adds	r7, r7, #20
 2702              		.cfi_def_cfa_offset 4
 2703 0020 BD46     		mov	sp, r7
 2704              		.cfi_def_cfa_register 13
 2705              		@ sp needed
 2706 0022 80BC     		pop	{r7}
 2707              		.cfi_restore 7
 2708              		.cfi_def_cfa_offset 0
 2709 0024 7047     		bx	lr
 2710              		.cfi_endproc
 2711              	.LFE93:
 2712              		.size	xQueueIsQueueEmptyFromISR, .-xQueueIsQueueEmptyFromISR
 2713 0026 00BF     		.section	.text.prvIsQueueFull,"ax",%progbits
 2714              		.align	2
 2715              		.thumb
 2716              		.thumb_func
 2717              		.type	prvIsQueueFull, %function
 2718              	prvIsQueueFull:
 2719              	.LFB94:
2308:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2309:..\..\FreeRTOS_Source/queue.c **** 
2310:..\..\FreeRTOS_Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2311:..\..\FreeRTOS_Source/queue.c **** {
 2720              		.loc 1 2311 0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 16
 2723              		@ frame_needed = 1, uses_anonymous_args = 0
 2724 0000 80B5     		push	{r7, lr}
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 7, -8
 2727              		.cfi_offset 14, -4
 2728 0002 84B0     		sub	sp, sp, #16
 2729              		.cfi_def_cfa_offset 24
 2730 0004 00AF     		add	r7, sp, #0
 2731              		.cfi_def_cfa_register 7
 2732 0006 7860     		str	r0, [r7, #4]
2312:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
2313:..\..\FreeRTOS_Source/queue.c **** 
2314:..\..\FreeRTOS_Source/queue.c **** 	taskENTER_CRITICAL();
 2733              		.loc 1 2314 0
 2734 0008 FFF7FEFF 		bl	vPortEnterCritical
2315:..\..\FreeRTOS_Source/queue.c **** 	{
2316:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 2735              		.loc 1 2316 0
 2736 000c 7B68     		ldr	r3, [r7, #4]
 2737 000e 9A6B     		ldr	r2, [r3, #56]
 2738 0010 7B68     		ldr	r3, [r7, #4]
 2739 0012 DB6B     		ldr	r3, [r3, #60]
 2740 0014 9A42     		cmp	r2, r3
 2741 0016 02D1     		bne	.L172
2317:..\..\FreeRTOS_Source/queue.c **** 		{
2318:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdTRUE;
 2742              		.loc 1 2318 0
 2743 0018 0123     		movs	r3, #1
 2744 001a FB60     		str	r3, [r7, #12]
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 94
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 94
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 94
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 94
>>>>>>> parent of cb49844... test


 2745 001c 01E0     		b	.L173
 2746              	.L172:
2319:..\..\FreeRTOS_Source/queue.c **** 		}
2320:..\..\FreeRTOS_Source/queue.c **** 		else
2321:..\..\FreeRTOS_Source/queue.c **** 		{
2322:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFALSE;
 2747              		.loc 1 2322 0
 2748 001e 0023     		movs	r3, #0
 2749 0020 FB60     		str	r3, [r7, #12]
 2750              	.L173:
2323:..\..\FreeRTOS_Source/queue.c **** 		}
2324:..\..\FreeRTOS_Source/queue.c **** 	}
2325:..\..\FreeRTOS_Source/queue.c **** 	taskEXIT_CRITICAL();
 2751              		.loc 1 2325 0
 2752 0022 FFF7FEFF 		bl	vPortExitCritical
2326:..\..\FreeRTOS_Source/queue.c **** 
2327:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2753              		.loc 1 2327 0
 2754 0026 FB68     		ldr	r3, [r7, #12]
2328:..\..\FreeRTOS_Source/queue.c **** }
 2755              		.loc 1 2328 0
 2756 0028 1846     		mov	r0, r3
 2757 002a 1037     		adds	r7, r7, #16
 2758              		.cfi_def_cfa_offset 8
 2759 002c BD46     		mov	sp, r7
 2760              		.cfi_def_cfa_register 13
 2761              		@ sp needed
 2762 002e 80BD     		pop	{r7, pc}
 2763              		.cfi_endproc
 2764              	.LFE94:
 2765              		.size	prvIsQueueFull, .-prvIsQueueFull
 2766              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 2767              		.align	2
 2768              		.global	xQueueIsQueueFullFromISR
 2769              		.thumb
 2770              		.thumb_func
 2771              		.type	xQueueIsQueueFullFromISR, %function
 2772              	xQueueIsQueueFullFromISR:
 2773              	.LFB95:
2329:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2330:..\..\FreeRTOS_Source/queue.c **** 
2331:..\..\FreeRTOS_Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2332:..\..\FreeRTOS_Source/queue.c **** {
 2774              		.loc 1 2332 0
 2775              		.cfi_startproc
 2776              		@ args = 0, pretend = 0, frame = 16
 2777              		@ frame_needed = 1, uses_anonymous_args = 0
 2778              		@ link register save eliminated.
 2779 0000 80B4     		push	{r7}
 2780              		.cfi_def_cfa_offset 4
 2781              		.cfi_offset 7, -4
 2782 0002 85B0     		sub	sp, sp, #20
 2783              		.cfi_def_cfa_offset 24
 2784 0004 00AF     		add	r7, sp, #0
 2785              		.cfi_def_cfa_register 7
 2786 0006 7860     		str	r0, [r7, #4]
2333:..\..\FreeRTOS_Source/queue.c **** BaseType_t xReturn;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 95
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 95
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 95
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 95
>>>>>>> parent of cb49844... test


2334:..\..\FreeRTOS_Source/queue.c **** 
2335:..\..\FreeRTOS_Source/queue.c **** 	configASSERT( xQueue );
2336:..\..\FreeRTOS_Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 2787              		.loc 1 2336 0
 2788 0008 7B68     		ldr	r3, [r7, #4]
 2789 000a 9A6B     		ldr	r2, [r3, #56]
 2790 000c 7B68     		ldr	r3, [r7, #4]
 2791 000e DB6B     		ldr	r3, [r3, #60]
 2792 0010 9A42     		cmp	r2, r3
 2793 0012 02D1     		bne	.L176
2337:..\..\FreeRTOS_Source/queue.c **** 	{
2338:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdTRUE;
 2794              		.loc 1 2338 0
 2795 0014 0123     		movs	r3, #1
 2796 0016 FB60     		str	r3, [r7, #12]
 2797 0018 01E0     		b	.L177
 2798              	.L176:
2339:..\..\FreeRTOS_Source/queue.c **** 	}
2340:..\..\FreeRTOS_Source/queue.c **** 	else
2341:..\..\FreeRTOS_Source/queue.c **** 	{
2342:..\..\FreeRTOS_Source/queue.c **** 		xReturn = pdFALSE;
 2799              		.loc 1 2342 0
 2800 001a 0023     		movs	r3, #0
 2801 001c FB60     		str	r3, [r7, #12]
 2802              	.L177:
2343:..\..\FreeRTOS_Source/queue.c **** 	}
2344:..\..\FreeRTOS_Source/queue.c **** 
2345:..\..\FreeRTOS_Source/queue.c **** 	return xReturn;
 2803              		.loc 1 2345 0
 2804 001e FB68     		ldr	r3, [r7, #12]
2346:..\..\FreeRTOS_Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 2805              		.loc 1 2346 0
 2806 0020 1846     		mov	r0, r3
 2807 0022 1437     		adds	r7, r7, #20
 2808              		.cfi_def_cfa_offset 4
 2809 0024 BD46     		mov	sp, r7
 2810              		.cfi_def_cfa_register 13
 2811              		@ sp needed
 2812 0026 80BC     		pop	{r7}
 2813              		.cfi_restore 7
 2814              		.cfi_def_cfa_offset 0
 2815 0028 7047     		bx	lr
 2816              		.cfi_endproc
 2817              	.LFE95:
 2818              		.size	xQueueIsQueueFullFromISR, .-xQueueIsQueueFullFromISR
 2819 002a 00BF     		.section	.text.vQueueAddToRegistry,"ax",%progbits
 2820              		.align	2
 2821              		.global	vQueueAddToRegistry
 2822              		.thumb
 2823              		.thumb_func
 2824              		.type	vQueueAddToRegistry, %function
 2825              	vQueueAddToRegistry:
 2826              	.LFB96:
2347:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2348:..\..\FreeRTOS_Source/queue.c **** 
2349:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2350:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 96
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 96
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 96
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 96
>>>>>>> parent of cb49844... test


2351:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2352:..\..\FreeRTOS_Source/queue.c **** 	{
2353:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
2354:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2355:..\..\FreeRTOS_Source/queue.c **** 
2356:..\..\FreeRTOS_Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2357:..\..\FreeRTOS_Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2358:..\..\FreeRTOS_Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2359:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2360:..\..\FreeRTOS_Source/queue.c **** 		{
2361:..\..\FreeRTOS_Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2362:..\..\FreeRTOS_Source/queue.c **** 			{
2363:..\..\FreeRTOS_Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2364:..\..\FreeRTOS_Source/queue.c **** 				posting? */
2365:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2366:..\..\FreeRTOS_Source/queue.c **** 				{
2367:..\..\FreeRTOS_Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2368:..\..\FreeRTOS_Source/queue.c **** 					return indicating that we need to block. */
2369:..\..\FreeRTOS_Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2370:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2371:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_BLOCKED;
2372:..\..\FreeRTOS_Source/queue.c **** 				}
2373:..\..\FreeRTOS_Source/queue.c **** 				else
2374:..\..\FreeRTOS_Source/queue.c **** 				{
2375:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2376:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_FULL;
2377:..\..\FreeRTOS_Source/queue.c **** 				}
2378:..\..\FreeRTOS_Source/queue.c **** 			}
2379:..\..\FreeRTOS_Source/queue.c **** 		}
2380:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2381:..\..\FreeRTOS_Source/queue.c **** 
2382:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2383:..\..\FreeRTOS_Source/queue.c **** 		{
2384:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2385:..\..\FreeRTOS_Source/queue.c **** 			{
2386:..\..\FreeRTOS_Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2387:..\..\FreeRTOS_Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2388:..\..\FreeRTOS_Source/queue.c **** 				xReturn = pdPASS;
2389:..\..\FreeRTOS_Source/queue.c **** 
2390:..\..\FreeRTOS_Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2391:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2392:..\..\FreeRTOS_Source/queue.c **** 				{
2393:..\..\FreeRTOS_Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2394:..\..\FreeRTOS_Source/queue.c **** 					into the ready list as we are within a critical section.
2395:..\..\FreeRTOS_Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2396:..\..\FreeRTOS_Source/queue.c **** 					the event were caused from within an interrupt. */
2397:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2398:..\..\FreeRTOS_Source/queue.c **** 					{
2399:..\..\FreeRTOS_Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2400:..\..\FreeRTOS_Source/queue.c **** 						that a yield might be appropriate. */
2401:..\..\FreeRTOS_Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2402:..\..\FreeRTOS_Source/queue.c **** 					}
2403:..\..\FreeRTOS_Source/queue.c **** 					else
2404:..\..\FreeRTOS_Source/queue.c **** 					{
2405:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2406:..\..\FreeRTOS_Source/queue.c **** 					}
2407:..\..\FreeRTOS_Source/queue.c **** 				}
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 97
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 97
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 97
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 97
>>>>>>> parent of cb49844... test


2408:..\..\FreeRTOS_Source/queue.c **** 				else
2409:..\..\FreeRTOS_Source/queue.c **** 				{
2410:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2411:..\..\FreeRTOS_Source/queue.c **** 				}
2412:..\..\FreeRTOS_Source/queue.c **** 			}
2413:..\..\FreeRTOS_Source/queue.c **** 			else
2414:..\..\FreeRTOS_Source/queue.c **** 			{
2415:..\..\FreeRTOS_Source/queue.c **** 				xReturn = errQUEUE_FULL;
2416:..\..\FreeRTOS_Source/queue.c **** 			}
2417:..\..\FreeRTOS_Source/queue.c **** 		}
2418:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2419:..\..\FreeRTOS_Source/queue.c **** 
2420:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
2421:..\..\FreeRTOS_Source/queue.c **** 	}
2422:..\..\FreeRTOS_Source/queue.c **** 
2423:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2424:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2425:..\..\FreeRTOS_Source/queue.c **** 
2426:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2427:..\..\FreeRTOS_Source/queue.c **** 
2428:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2429:..\..\FreeRTOS_Source/queue.c **** 	{
2430:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
2431:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2432:..\..\FreeRTOS_Source/queue.c **** 
2433:..\..\FreeRTOS_Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2434:..\..\FreeRTOS_Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2435:..\..\FreeRTOS_Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2436:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2437:..\..\FreeRTOS_Source/queue.c **** 		{
2438:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2439:..\..\FreeRTOS_Source/queue.c **** 			{
2440:..\..\FreeRTOS_Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2441:..\..\FreeRTOS_Source/queue.c **** 				leave with nothing? */
2442:..\..\FreeRTOS_Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2443:..\..\FreeRTOS_Source/queue.c **** 				{
2444:..\..\FreeRTOS_Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2445:..\..\FreeRTOS_Source/queue.c **** 					indicating that we need to block. */
2446:..\..\FreeRTOS_Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2447:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2448:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_BLOCKED;
2449:..\..\FreeRTOS_Source/queue.c **** 				}
2450:..\..\FreeRTOS_Source/queue.c **** 				else
2451:..\..\FreeRTOS_Source/queue.c **** 				{
2452:..\..\FreeRTOS_Source/queue.c **** 					portENABLE_INTERRUPTS();
2453:..\..\FreeRTOS_Source/queue.c **** 					return errQUEUE_FULL;
2454:..\..\FreeRTOS_Source/queue.c **** 				}
2455:..\..\FreeRTOS_Source/queue.c **** 			}
2456:..\..\FreeRTOS_Source/queue.c **** 			else
2457:..\..\FreeRTOS_Source/queue.c **** 			{
2458:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2459:..\..\FreeRTOS_Source/queue.c **** 			}
2460:..\..\FreeRTOS_Source/queue.c **** 		}
2461:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2462:..\..\FreeRTOS_Source/queue.c **** 
2463:..\..\FreeRTOS_Source/queue.c **** 		portDISABLE_INTERRUPTS();
2464:..\..\FreeRTOS_Source/queue.c **** 		{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 98
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 98
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 98
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 98
>>>>>>> parent of cb49844... test


2465:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2466:..\..\FreeRTOS_Source/queue.c **** 			{
2467:..\..\FreeRTOS_Source/queue.c **** 				/* Data is available from the queue. */
2468:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2469:..\..\FreeRTOS_Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2470:..\..\FreeRTOS_Source/queue.c **** 				{
2471:..\..\FreeRTOS_Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2472:..\..\FreeRTOS_Source/queue.c **** 				}
2473:..\..\FreeRTOS_Source/queue.c **** 				else
2474:..\..\FreeRTOS_Source/queue.c **** 				{
2475:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2476:..\..\FreeRTOS_Source/queue.c **** 				}
2477:..\..\FreeRTOS_Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2478:..\..\FreeRTOS_Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2479:..\..\FreeRTOS_Source/queue.c **** 
2480:..\..\FreeRTOS_Source/queue.c **** 				xReturn = pdPASS;
2481:..\..\FreeRTOS_Source/queue.c **** 
2482:..\..\FreeRTOS_Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2483:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2484:..\..\FreeRTOS_Source/queue.c **** 				{
2485:..\..\FreeRTOS_Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2486:..\..\FreeRTOS_Source/queue.c **** 					into the ready list as we are within a critical section.
2487:..\..\FreeRTOS_Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2488:..\..\FreeRTOS_Source/queue.c **** 					the event were caused from within an interrupt. */
2489:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2490:..\..\FreeRTOS_Source/queue.c **** 					{
2491:..\..\FreeRTOS_Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2492:..\..\FreeRTOS_Source/queue.c **** 					}
2493:..\..\FreeRTOS_Source/queue.c **** 					else
2494:..\..\FreeRTOS_Source/queue.c **** 					{
2495:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2496:..\..\FreeRTOS_Source/queue.c **** 					}
2497:..\..\FreeRTOS_Source/queue.c **** 				}
2498:..\..\FreeRTOS_Source/queue.c **** 				else
2499:..\..\FreeRTOS_Source/queue.c **** 				{
2500:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2501:..\..\FreeRTOS_Source/queue.c **** 				}
2502:..\..\FreeRTOS_Source/queue.c **** 			}
2503:..\..\FreeRTOS_Source/queue.c **** 			else
2504:..\..\FreeRTOS_Source/queue.c **** 			{
2505:..\..\FreeRTOS_Source/queue.c **** 				xReturn = pdFAIL;
2506:..\..\FreeRTOS_Source/queue.c **** 			}
2507:..\..\FreeRTOS_Source/queue.c **** 		}
2508:..\..\FreeRTOS_Source/queue.c **** 		portENABLE_INTERRUPTS();
2509:..\..\FreeRTOS_Source/queue.c **** 
2510:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
2511:..\..\FreeRTOS_Source/queue.c **** 	}
2512:..\..\FreeRTOS_Source/queue.c **** 
2513:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2514:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2515:..\..\FreeRTOS_Source/queue.c **** 
2516:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2517:..\..\FreeRTOS_Source/queue.c **** 
2518:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2519:..\..\FreeRTOS_Source/queue.c **** 	{
2520:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2521:..\..\FreeRTOS_Source/queue.c **** 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 99
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 99
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 99
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 99
>>>>>>> parent of cb49844... test


2522:..\..\FreeRTOS_Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2523:..\..\FreeRTOS_Source/queue.c **** 		exit without doing anything. */
2524:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2525:..\..\FreeRTOS_Source/queue.c **** 		{
2526:..\..\FreeRTOS_Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2527:..\..\FreeRTOS_Source/queue.c **** 
2528:..\..\FreeRTOS_Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2529:..\..\FreeRTOS_Source/queue.c **** 			co-routine has not already been woken. */
2530:..\..\FreeRTOS_Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2531:..\..\FreeRTOS_Source/queue.c **** 			{
2532:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2533:..\..\FreeRTOS_Source/queue.c **** 				{
2534:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2535:..\..\FreeRTOS_Source/queue.c **** 					{
2536:..\..\FreeRTOS_Source/queue.c **** 						return pdTRUE;
2537:..\..\FreeRTOS_Source/queue.c **** 					}
2538:..\..\FreeRTOS_Source/queue.c **** 					else
2539:..\..\FreeRTOS_Source/queue.c **** 					{
2540:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2541:..\..\FreeRTOS_Source/queue.c **** 					}
2542:..\..\FreeRTOS_Source/queue.c **** 				}
2543:..\..\FreeRTOS_Source/queue.c **** 				else
2544:..\..\FreeRTOS_Source/queue.c **** 				{
2545:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2546:..\..\FreeRTOS_Source/queue.c **** 				}
2547:..\..\FreeRTOS_Source/queue.c **** 			}
2548:..\..\FreeRTOS_Source/queue.c **** 			else
2549:..\..\FreeRTOS_Source/queue.c **** 			{
2550:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2551:..\..\FreeRTOS_Source/queue.c **** 			}
2552:..\..\FreeRTOS_Source/queue.c **** 		}
2553:..\..\FreeRTOS_Source/queue.c **** 		else
2554:..\..\FreeRTOS_Source/queue.c **** 		{
2555:..\..\FreeRTOS_Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2556:..\..\FreeRTOS_Source/queue.c **** 		}
2557:..\..\FreeRTOS_Source/queue.c **** 
2558:..\..\FreeRTOS_Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2559:..\..\FreeRTOS_Source/queue.c **** 	}
2560:..\..\FreeRTOS_Source/queue.c **** 
2561:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2562:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2563:..\..\FreeRTOS_Source/queue.c **** 
2564:..\..\FreeRTOS_Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2565:..\..\FreeRTOS_Source/queue.c **** 
2566:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2567:..\..\FreeRTOS_Source/queue.c **** 	{
2568:..\..\FreeRTOS_Source/queue.c **** 	BaseType_t xReturn;
2569:..\..\FreeRTOS_Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2570:..\..\FreeRTOS_Source/queue.c **** 
2571:..\..\FreeRTOS_Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2572:..\..\FreeRTOS_Source/queue.c **** 		not then just leave without doing anything. */
2573:..\..\FreeRTOS_Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2574:..\..\FreeRTOS_Source/queue.c **** 		{
2575:..\..\FreeRTOS_Source/queue.c **** 			/* Copy the data from the queue. */
2576:..\..\FreeRTOS_Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2577:..\..\FreeRTOS_Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2578:..\..\FreeRTOS_Source/queue.c **** 			{
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 100
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 100
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 100
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 100
>>>>>>> parent of cb49844... test


2579:..\..\FreeRTOS_Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2580:..\..\FreeRTOS_Source/queue.c **** 			}
2581:..\..\FreeRTOS_Source/queue.c **** 			else
2582:..\..\FreeRTOS_Source/queue.c **** 			{
2583:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2584:..\..\FreeRTOS_Source/queue.c **** 			}
2585:..\..\FreeRTOS_Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2586:..\..\FreeRTOS_Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2587:..\..\FreeRTOS_Source/queue.c **** 
2588:..\..\FreeRTOS_Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2589:..\..\FreeRTOS_Source/queue.c **** 			{
2590:..\..\FreeRTOS_Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2591:..\..\FreeRTOS_Source/queue.c **** 				{
2592:..\..\FreeRTOS_Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2593:..\..\FreeRTOS_Source/queue.c **** 					{
2594:..\..\FreeRTOS_Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2595:..\..\FreeRTOS_Source/queue.c **** 					}
2596:..\..\FreeRTOS_Source/queue.c **** 					else
2597:..\..\FreeRTOS_Source/queue.c **** 					{
2598:..\..\FreeRTOS_Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2599:..\..\FreeRTOS_Source/queue.c **** 					}
2600:..\..\FreeRTOS_Source/queue.c **** 				}
2601:..\..\FreeRTOS_Source/queue.c **** 				else
2602:..\..\FreeRTOS_Source/queue.c **** 				{
2603:..\..\FreeRTOS_Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2604:..\..\FreeRTOS_Source/queue.c **** 				}
2605:..\..\FreeRTOS_Source/queue.c **** 			}
2606:..\..\FreeRTOS_Source/queue.c **** 			else
2607:..\..\FreeRTOS_Source/queue.c **** 			{
2608:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2609:..\..\FreeRTOS_Source/queue.c **** 			}
2610:..\..\FreeRTOS_Source/queue.c **** 
2611:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdPASS;
2612:..\..\FreeRTOS_Source/queue.c **** 		}
2613:..\..\FreeRTOS_Source/queue.c **** 		else
2614:..\..\FreeRTOS_Source/queue.c **** 		{
2615:..\..\FreeRTOS_Source/queue.c **** 			xReturn = pdFAIL;
2616:..\..\FreeRTOS_Source/queue.c **** 		}
2617:..\..\FreeRTOS_Source/queue.c **** 
2618:..\..\FreeRTOS_Source/queue.c **** 		return xReturn;
2619:..\..\FreeRTOS_Source/queue.c **** 	}
2620:..\..\FreeRTOS_Source/queue.c **** 
2621:..\..\FreeRTOS_Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2622:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2623:..\..\FreeRTOS_Source/queue.c **** 
2624:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2625:..\..\FreeRTOS_Source/queue.c **** 
2626:..\..\FreeRTOS_Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2627:..\..\FreeRTOS_Source/queue.c **** 	{
 2827              		.loc 1 2627 0
 2828              		.cfi_startproc
 2829              		@ args = 0, pretend = 0, frame = 16
 2830              		@ frame_needed = 1, uses_anonymous_args = 0
 2831              		@ link register save eliminated.
 2832 0000 80B4     		push	{r7}
 2833              		.cfi_def_cfa_offset 4
 2834              		.cfi_offset 7, -4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 101
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 101
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 101
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 101
>>>>>>> parent of cb49844... test


 2835 0002 85B0     		sub	sp, sp, #20
 2836              		.cfi_def_cfa_offset 24
 2837 0004 00AF     		add	r7, sp, #0
 2838              		.cfi_def_cfa_register 7
 2839 0006 7860     		str	r0, [r7, #4]
 2840 0008 3960     		str	r1, [r7]
2628:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t ux;
2629:..\..\FreeRTOS_Source/queue.c **** 
2630:..\..\FreeRTOS_Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2631:..\..\FreeRTOS_Source/queue.c **** 		a free slot. */
2632:..\..\FreeRTOS_Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2841              		.loc 1 2632 0
 2842 000a 0023     		movs	r3, #0
 2843 000c FB60     		str	r3, [r7, #12]
 2844 000e 14E0     		b	.L180
 2845              	.L183:
2633:..\..\FreeRTOS_Source/queue.c **** 		{
2634:..\..\FreeRTOS_Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 2846              		.loc 1 2634 0
 2847 0010 0E4A     		ldr	r2, .L184
 2848 0012 FB68     		ldr	r3, [r7, #12]
 2849 0014 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2850 0018 002B     		cmp	r3, #0
 2851 001a 0BD1     		bne	.L181
2635:..\..\FreeRTOS_Source/queue.c **** 			{
2636:..\..\FreeRTOS_Source/queue.c **** 				/* Store the information on this queue. */
2637:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 2852              		.loc 1 2637 0
 2853 001c 0B49     		ldr	r1, .L184
 2854 001e FB68     		ldr	r3, [r7, #12]
 2855 0020 3A68     		ldr	r2, [r7]
 2856 0022 41F83320 		str	r2, [r1, r3, lsl #3]
2638:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 2857              		.loc 1 2638 0
 2858 0026 094A     		ldr	r2, .L184
 2859 0028 FB68     		ldr	r3, [r7, #12]
 2860 002a DB00     		lsls	r3, r3, #3
 2861 002c 1344     		add	r3, r3, r2
 2862 002e 7A68     		ldr	r2, [r7, #4]
 2863 0030 5A60     		str	r2, [r3, #4]
2639:..\..\FreeRTOS_Source/queue.c **** 
2640:..\..\FreeRTOS_Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2641:..\..\FreeRTOS_Source/queue.c **** 				break;
 2864              		.loc 1 2641 0
 2865 0032 05E0     		b	.L182
 2866              	.L181:
2632:..\..\FreeRTOS_Source/queue.c **** 		{
 2867              		.loc 1 2632 0 discriminator 2
 2868 0034 FB68     		ldr	r3, [r7, #12]
 2869 0036 0133     		adds	r3, r3, #1
 2870 0038 FB60     		str	r3, [r7, #12]
 2871              	.L180:
2632:..\..\FreeRTOS_Source/queue.c **** 		{
 2872              		.loc 1 2632 0 is_stmt 0 discriminator 1
 2873 003a FB68     		ldr	r3, [r7, #12]
 2874 003c 092B     		cmp	r3, #9
 2875 003e E7D9     		bls	.L183
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 102
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 102
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 102
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 102
>>>>>>> parent of cb49844... test


 2876              	.L182:
2642:..\..\FreeRTOS_Source/queue.c **** 			}
2643:..\..\FreeRTOS_Source/queue.c **** 			else
2644:..\..\FreeRTOS_Source/queue.c **** 			{
2645:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2646:..\..\FreeRTOS_Source/queue.c **** 			}
2647:..\..\FreeRTOS_Source/queue.c **** 		}
2648:..\..\FreeRTOS_Source/queue.c **** 	}
 2877              		.loc 1 2648 0 is_stmt 1
 2878 0040 00BF     		nop
 2879 0042 1437     		adds	r7, r7, #20
 2880              		.cfi_def_cfa_offset 4
 2881 0044 BD46     		mov	sp, r7
 2882              		.cfi_def_cfa_register 13
 2883              		@ sp needed
 2884 0046 80BC     		pop	{r7}
 2885              		.cfi_restore 7
 2886              		.cfi_def_cfa_offset 0
 2887 0048 7047     		bx	lr
 2888              	.L185:
 2889 004a 00BF     		.align	2
 2890              	.L184:
 2891 004c 00000000 		.word	xQueueRegistry
 2892              		.cfi_endproc
 2893              	.LFE96:
 2894              		.size	vQueueAddToRegistry, .-vQueueAddToRegistry
 2895              		.section	.text.pcQueueGetName,"ax",%progbits
 2896              		.align	2
 2897              		.global	pcQueueGetName
 2898              		.thumb
 2899              		.thumb_func
 2900              		.type	pcQueueGetName, %function
 2901              	pcQueueGetName:
 2902              	.LFB97:
2649:..\..\FreeRTOS_Source/queue.c **** 
2650:..\..\FreeRTOS_Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2651:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2652:..\..\FreeRTOS_Source/queue.c **** 
2653:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2654:..\..\FreeRTOS_Source/queue.c **** 
2655:..\..\FreeRTOS_Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2656:..\..\FreeRTOS_Source/queue.c **** 	{
 2903              		.loc 1 2656 0
 2904              		.cfi_startproc
 2905              		@ args = 0, pretend = 0, frame = 16
 2906              		@ frame_needed = 1, uses_anonymous_args = 0
 2907              		@ link register save eliminated.
 2908 0000 80B4     		push	{r7}
 2909              		.cfi_def_cfa_offset 4
 2910              		.cfi_offset 7, -4
 2911 0002 85B0     		sub	sp, sp, #20
 2912              		.cfi_def_cfa_offset 24
 2913 0004 00AF     		add	r7, sp, #0
 2914              		.cfi_def_cfa_register 7
 2915 0006 7860     		str	r0, [r7, #4]
2657:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t ux;
2658:..\..\FreeRTOS_Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 103
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 103
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 103
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 103
>>>>>>> parent of cb49844... test


 2916              		.loc 1 2658 0
 2917 0008 0023     		movs	r3, #0
 2918 000a BB60     		str	r3, [r7, #8]
2659:..\..\FreeRTOS_Source/queue.c **** 
2660:..\..\FreeRTOS_Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2661:..\..\FreeRTOS_Source/queue.c **** 		removing entries from the registry while it is being searched. */
2662:..\..\FreeRTOS_Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2919              		.loc 1 2662 0
 2920 000c 0023     		movs	r3, #0
 2921 000e FB60     		str	r3, [r7, #12]
 2922 0010 10E0     		b	.L187
 2923              	.L190:
2663:..\..\FreeRTOS_Source/queue.c **** 		{
2664:..\..\FreeRTOS_Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2924              		.loc 1 2664 0
 2925 0012 0D4A     		ldr	r2, .L192
 2926 0014 FB68     		ldr	r3, [r7, #12]
 2927 0016 DB00     		lsls	r3, r3, #3
 2928 0018 1344     		add	r3, r3, r2
 2929 001a 5A68     		ldr	r2, [r3, #4]
 2930 001c 7B68     		ldr	r3, [r7, #4]
 2931 001e 9A42     		cmp	r2, r3
 2932 0020 05D1     		bne	.L188
2665:..\..\FreeRTOS_Source/queue.c **** 			{
2666:..\..\FreeRTOS_Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 2933              		.loc 1 2666 0
 2934 0022 094A     		ldr	r2, .L192
 2935 0024 FB68     		ldr	r3, [r7, #12]
 2936 0026 52F83330 		ldr	r3, [r2, r3, lsl #3]
 2937 002a BB60     		str	r3, [r7, #8]
2667:..\..\FreeRTOS_Source/queue.c **** 				break;
 2938              		.loc 1 2667 0
 2939 002c 05E0     		b	.L189
 2940              	.L188:
2662:..\..\FreeRTOS_Source/queue.c **** 		{
 2941              		.loc 1 2662 0 discriminator 2
 2942 002e FB68     		ldr	r3, [r7, #12]
 2943 0030 0133     		adds	r3, r3, #1
 2944 0032 FB60     		str	r3, [r7, #12]
 2945              	.L187:
2662:..\..\FreeRTOS_Source/queue.c **** 		{
 2946              		.loc 1 2662 0 is_stmt 0 discriminator 1
 2947 0034 FB68     		ldr	r3, [r7, #12]
 2948 0036 092B     		cmp	r3, #9
 2949 0038 EBD9     		bls	.L190
 2950              	.L189:
2668:..\..\FreeRTOS_Source/queue.c **** 			}
2669:..\..\FreeRTOS_Source/queue.c **** 			else
2670:..\..\FreeRTOS_Source/queue.c **** 			{
2671:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2672:..\..\FreeRTOS_Source/queue.c **** 			}
2673:..\..\FreeRTOS_Source/queue.c **** 		}
2674:..\..\FreeRTOS_Source/queue.c **** 
2675:..\..\FreeRTOS_Source/queue.c **** 		return pcReturn;
 2951              		.loc 1 2675 0 is_stmt 1
 2952 003a BB68     		ldr	r3, [r7, #8]
2676:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 104
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 104
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 104
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 104
>>>>>>> parent of cb49844... test


 2953              		.loc 1 2676 0
 2954 003c 1846     		mov	r0, r3
 2955 003e 1437     		adds	r7, r7, #20
 2956              		.cfi_def_cfa_offset 4
 2957 0040 BD46     		mov	sp, r7
 2958              		.cfi_def_cfa_register 13
 2959              		@ sp needed
 2960 0042 80BC     		pop	{r7}
 2961              		.cfi_restore 7
 2962              		.cfi_def_cfa_offset 0
 2963 0044 7047     		bx	lr
 2964              	.L193:
 2965 0046 00BF     		.align	2
 2966              	.L192:
 2967 0048 00000000 		.word	xQueueRegistry
 2968              		.cfi_endproc
 2969              	.LFE97:
 2970              		.size	pcQueueGetName, .-pcQueueGetName
 2971              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 2972              		.align	2
 2973              		.global	vQueueUnregisterQueue
 2974              		.thumb
 2975              		.thumb_func
 2976              		.type	vQueueUnregisterQueue, %function
 2977              	vQueueUnregisterQueue:
 2978              	.LFB98:
2677:..\..\FreeRTOS_Source/queue.c **** 
2678:..\..\FreeRTOS_Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2679:..\..\FreeRTOS_Source/queue.c **** /*-----------------------------------------------------------*/
2680:..\..\FreeRTOS_Source/queue.c **** 
2681:..\..\FreeRTOS_Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2682:..\..\FreeRTOS_Source/queue.c **** 
2683:..\..\FreeRTOS_Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2684:..\..\FreeRTOS_Source/queue.c **** 	{
 2979              		.loc 1 2684 0
 2980              		.cfi_startproc
 2981              		@ args = 0, pretend = 0, frame = 16
 2982              		@ frame_needed = 1, uses_anonymous_args = 0
 2983              		@ link register save eliminated.
 2984 0000 80B4     		push	{r7}
 2985              		.cfi_def_cfa_offset 4
 2986              		.cfi_offset 7, -4
 2987 0002 85B0     		sub	sp, sp, #20
 2988              		.cfi_def_cfa_offset 24
 2989 0004 00AF     		add	r7, sp, #0
 2990              		.cfi_def_cfa_register 7
 2991 0006 7860     		str	r0, [r7, #4]
2685:..\..\FreeRTOS_Source/queue.c **** 	UBaseType_t ux;
2686:..\..\FreeRTOS_Source/queue.c **** 
2687:..\..\FreeRTOS_Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2688:..\..\FreeRTOS_Source/queue.c **** 		registry. */
2689:..\..\FreeRTOS_Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 2992              		.loc 1 2689 0
 2993 0008 0023     		movs	r3, #0
 2994 000a FB60     		str	r3, [r7, #12]
 2995 000c 16E0     		b	.L195
 2996              	.L198:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 105
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 105
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 105
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 105
>>>>>>> parent of cb49844... test


2690:..\..\FreeRTOS_Source/queue.c **** 		{
2691:..\..\FreeRTOS_Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 2997              		.loc 1 2691 0
 2998 000e 0F4A     		ldr	r2, .L199
 2999 0010 FB68     		ldr	r3, [r7, #12]
 3000 0012 DB00     		lsls	r3, r3, #3
 3001 0014 1344     		add	r3, r3, r2
 3002 0016 5A68     		ldr	r2, [r3, #4]
 3003 0018 7B68     		ldr	r3, [r7, #4]
 3004 001a 9A42     		cmp	r2, r3
 3005 001c 0BD1     		bne	.L196
2692:..\..\FreeRTOS_Source/queue.c **** 			{
2693:..\..\FreeRTOS_Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2694:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3006              		.loc 1 2694 0
 3007 001e 0B4A     		ldr	r2, .L199
 3008 0020 FB68     		ldr	r3, [r7, #12]
 3009 0022 0021     		movs	r1, #0
 3010 0024 42F83310 		str	r1, [r2, r3, lsl #3]
2695:..\..\FreeRTOS_Source/queue.c **** 
2696:..\..\FreeRTOS_Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2697:..\..\FreeRTOS_Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2698:..\..\FreeRTOS_Source/queue.c **** 				added again. */
2699:..\..\FreeRTOS_Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3011              		.loc 1 2699 0
 3012 0028 084A     		ldr	r2, .L199
 3013 002a FB68     		ldr	r3, [r7, #12]
 3014 002c DB00     		lsls	r3, r3, #3
 3015 002e 1344     		add	r3, r3, r2
 3016 0030 0022     		movs	r2, #0
 3017 0032 5A60     		str	r2, [r3, #4]
2700:..\..\FreeRTOS_Source/queue.c **** 				break;
 3018              		.loc 1 2700 0
 3019 0034 05E0     		b	.L197
 3020              	.L196:
2689:..\..\FreeRTOS_Source/queue.c **** 		{
 3021              		.loc 1 2689 0 discriminator 2
 3022 0036 FB68     		ldr	r3, [r7, #12]
 3023 0038 0133     		adds	r3, r3, #1
 3024 003a FB60     		str	r3, [r7, #12]
 3025              	.L195:
2689:..\..\FreeRTOS_Source/queue.c **** 		{
 3026              		.loc 1 2689 0 is_stmt 0 discriminator 1
 3027 003c FB68     		ldr	r3, [r7, #12]
 3028 003e 092B     		cmp	r3, #9
 3029 0040 E5D9     		bls	.L198
 3030              	.L197:
2701:..\..\FreeRTOS_Source/queue.c **** 			}
2702:..\..\FreeRTOS_Source/queue.c **** 			else
2703:..\..\FreeRTOS_Source/queue.c **** 			{
2704:..\..\FreeRTOS_Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2705:..\..\FreeRTOS_Source/queue.c **** 			}
2706:..\..\FreeRTOS_Source/queue.c **** 		}
2707:..\..\FreeRTOS_Source/queue.c **** 
2708:..\..\FreeRTOS_Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3031              		.loc 1 2708 0 is_stmt 1
 3032 0042 00BF     		nop
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 106
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 106
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 106
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 106
>>>>>>> parent of cb49844... test


 3033 0044 1437     		adds	r7, r7, #20
 3034              		.cfi_def_cfa_offset 4
 3035 0046 BD46     		mov	sp, r7
 3036              		.cfi_def_cfa_register 13
 3037              		@ sp needed
 3038 0048 80BC     		pop	{r7}
 3039              		.cfi_restore 7
 3040              		.cfi_def_cfa_offset 0
 3041 004a 7047     		bx	lr
 3042              	.L200:
 3043              		.align	2
 3044              	.L199:
 3045 004c 00000000 		.word	xQueueRegistry
 3046              		.cfi_endproc
 3047              	.LFE98:
 3048              		.size	vQueueUnregisterQueue, .-vQueueUnregisterQueue
 3049              		.text
 3050              	.Letext0:
 3051              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 3052              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 3053              		.file 5 "c:\\program files (x86)\\cypress\\psoc creator\\4.1\\psoc creator\\import\\gnu\\arm\\5.4.
 3054              		.file 6 "..\\..\\FreeRTOS_Source\\include/list.h"
 3055              		.file 7 "..\\..\\FreeRTOS_Source\\include/task.h"
 3056              		.file 8 "..\\..\\FreeRTOS_Source\\include/queue.h"
 3057              		.file 9 "Generated_Source\\PSoC5/core_cm3.h"
 3058              		.section	.debug_info,"",%progbits
 3059              	.Ldebug_info0:
 3060 0000 31100000 		.4byte	0x1031
 3061 0004 0400     		.2byte	0x4
 3062 0006 00000000 		.4byte	.Ldebug_abbrev0
 3063 000a 04       		.byte	0x4
 3064 000b 01       		.uleb128 0x1
 3065 000c D3000000 		.4byte	.LASF132
 3066 0010 0C       		.byte	0xc
 3067 0011 B7040000 		.4byte	.LASF133
 3068 0015 EB010000 		.4byte	.LASF134
 3069 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3070 001d 00000000 		.4byte	0
 3071 0021 00000000 		.4byte	.Ldebug_line0
 3072 0025 02       		.uleb128 0x2
 3073 0026 AE030000 		.4byte	.LASF3
 3074 002a 03       		.byte	0x3
 3075 002b D8       		.byte	0xd8
 3076 002c 30000000 		.4byte	0x30
 3077 0030 03       		.uleb128 0x3
 3078 0031 04       		.byte	0x4
 3079 0032 07       		.byte	0x7
 3080 0033 80000000 		.4byte	.LASF0
 3081 0037 04       		.uleb128 0x4
 3082 0038 04       		.byte	0x4
 3083 0039 05       		.byte	0x5
 3084 003a 696E7400 		.ascii	"int\000"
 3085 003e 03       		.uleb128 0x3
 3086 003f 08       		.byte	0x8
 3087 0040 05       		.byte	0x5
 3088 0041 6D050000 		.4byte	.LASF1
 3089 0045 03       		.uleb128 0x3
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 107
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 107
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 107
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 107
>>>>>>> parent of cb49844... test


 3090 0046 08       		.byte	0x8
 3091 0047 04       		.byte	0x4
 3092 0048 90060000 		.4byte	.LASF2
 3093 004c 02       		.uleb128 0x2
 3094 004d 79060000 		.4byte	.LASF4
 3095 0051 04       		.byte	0x4
 3096 0052 1B       		.byte	0x1b
 3097 0053 57000000 		.4byte	0x57
 3098 0057 03       		.uleb128 0x3
 3099 0058 01       		.byte	0x1
 3100 0059 06       		.byte	0x6
 3101 005a 80080000 		.4byte	.LASF5
 3102 005e 02       		.uleb128 0x2
 3103 005f 6D070000 		.4byte	.LASF6
 3104 0063 04       		.byte	0x4
 3105 0064 1D       		.byte	0x1d
 3106 0065 69000000 		.4byte	0x69
 3107 0069 03       		.uleb128 0x3
 3108 006a 01       		.byte	0x1
 3109 006b 08       		.byte	0x8
 3110 006c E1070000 		.4byte	.LASF7
 3111 0070 03       		.uleb128 0x3
 3112 0071 02       		.byte	0x2
 3113 0072 05       		.byte	0x5
 3114 0073 EB060000 		.4byte	.LASF8
 3115 0077 03       		.uleb128 0x3
 3116 0078 02       		.byte	0x2
 3117 0079 07       		.byte	0x7
 3118 007a 8C080000 		.4byte	.LASF9
 3119 007e 02       		.uleb128 0x2
 3120 007f AA000000 		.4byte	.LASF10
 3121 0083 04       		.byte	0x4
 3122 0084 3F       		.byte	0x3f
 3123 0085 89000000 		.4byte	0x89
 3124 0089 03       		.uleb128 0x3
 3125 008a 04       		.byte	0x4
 3126 008b 05       		.byte	0x5
 3127 008c 00070000 		.4byte	.LASF11
 3128 0090 02       		.uleb128 0x2
 3129 0091 EF070000 		.4byte	.LASF12
 3130 0095 04       		.byte	0x4
 3131 0096 41       		.byte	0x41
 3132 0097 9B000000 		.4byte	0x9b
 3133 009b 03       		.uleb128 0x3
 3134 009c 04       		.byte	0x4
 3135 009d 07       		.byte	0x7
 3136 009e 90070000 		.4byte	.LASF13
 3137 00a2 03       		.uleb128 0x3
 3138 00a3 08       		.byte	0x8
 3139 00a4 07       		.byte	0x7
 3140 00a5 23030000 		.4byte	.LASF14
 3141 00a9 03       		.uleb128 0x3
 3142 00aa 04       		.byte	0x4
 3143 00ab 07       		.byte	0x7
 3144 00ac 87070000 		.4byte	.LASF15
 3145 00b0 05       		.uleb128 0x5
 3146 00b1 04       		.byte	0x4
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 108
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 108
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 108
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 108
>>>>>>> parent of cb49844... test


 3147 00b2 03       		.uleb128 0x3
 3148 00b3 01       		.byte	0x1
 3149 00b4 08       		.byte	0x8
 3150 00b5 5E040000 		.4byte	.LASF16
 3151 00b9 06       		.uleb128 0x6
 3152 00ba 04       		.byte	0x4
 3153 00bb BF000000 		.4byte	0xbf
 3154 00bf 07       		.uleb128 0x7
 3155 00c0 B2000000 		.4byte	0xb2
 3156 00c4 06       		.uleb128 0x6
 3157 00c5 04       		.byte	0x4
 3158 00c6 CA000000 		.4byte	0xca
 3159 00ca 08       		.uleb128 0x8
 3160 00cb 02       		.uleb128 0x2
 3161 00cc D2020000 		.4byte	.LASF17
 3162 00d0 05       		.byte	0x5
 3163 00d1 14       		.byte	0x14
 3164 00d2 4C000000 		.4byte	0x4c
 3165 00d6 02       		.uleb128 0x2
 3166 00d7 19050000 		.4byte	.LASF18
 3167 00db 05       		.byte	0x5
 3168 00dc 18       		.byte	0x18
 3169 00dd 5E000000 		.4byte	0x5e
 3170 00e1 02       		.uleb128 0x2
 3171 00e2 A2070000 		.4byte	.LASF19
 3172 00e6 05       		.byte	0x5
 3173 00e7 2C       		.byte	0x2c
 3174 00e8 7E000000 		.4byte	0x7e
 3175 00ec 02       		.uleb128 0x2
 3176 00ed C9020000 		.4byte	.LASF20
 3177 00f1 05       		.byte	0x5
 3178 00f2 30       		.byte	0x30
 3179 00f3 90000000 		.4byte	0x90
 3180 00f7 03       		.uleb128 0x3
 3181 00f8 04       		.byte	0x4
 3182 00f9 04       		.byte	0x4
 3183 00fa 0D030000 		.4byte	.LASF21
 3184 00fe 03       		.uleb128 0x3
 3185 00ff 08       		.byte	0x8
 3186 0100 04       		.byte	0x4
 3187 0101 A6080000 		.4byte	.LASF22
 3188 0105 02       		.uleb128 0x2
 3189 0106 8E050000 		.4byte	.LASF23
 3190 010a 02       		.byte	0x2
 3191 010b 38       		.byte	0x38
 3192 010c 89000000 		.4byte	0x89
 3193 0110 02       		.uleb128 0x2
 3194 0111 8A040000 		.4byte	.LASF24
 3195 0115 02       		.byte	0x2
 3196 0116 39       		.byte	0x39
 3197 0117 9B000000 		.4byte	0x9b
 3198 011b 02       		.uleb128 0x2
 3199 011c 6E060000 		.4byte	.LASF25
 3200 0120 02       		.byte	0x2
 3201 0121 3F       		.byte	0x3f
 3202 0122 EC000000 		.4byte	0xec
 3203 0126 06       		.uleb128 0x6
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 109
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 109
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 109
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 109
>>>>>>> parent of cb49844... test


 3204 0127 04       		.byte	0x4
 3205 0128 D6000000 		.4byte	0xd6
 3206 012c 09       		.uleb128 0x9
 3207 012d B4000000 		.4byte	.LASF31
 3208 0131 14       		.byte	0x14
 3209 0132 06       		.byte	0x6
 3210 0133 8C       		.byte	0x8c
 3211 0134 75010000 		.4byte	0x175
 3212 0138 0A       		.uleb128 0xa
 3213 0139 F5060000 		.4byte	.LASF26
 3214 013d 06       		.byte	0x6
 3215 013e 8F       		.byte	0x8f
 3216 013f 1B010000 		.4byte	0x11b
 3217 0143 00       		.byte	0
 3218 0144 0A       		.uleb128 0xa
 3219 0145 D4050000 		.4byte	.LASF27
 3220 0149 06       		.byte	0x6
 3221 014a 90       		.byte	0x90
 3222 014b 75010000 		.4byte	0x175
 3223 014f 04       		.byte	0x4
 3224 0150 0A       		.uleb128 0xa
 3225 0151 78030000 		.4byte	.LASF28
 3226 0155 06       		.byte	0x6
 3227 0156 91       		.byte	0x91
 3228 0157 75010000 		.4byte	0x175
 3229 015b 08       		.byte	0x8
 3230 015c 0A       		.uleb128 0xa
 3231 015d 1C080000 		.4byte	.LASF29
 3232 0161 06       		.byte	0x6
 3233 0162 92       		.byte	0x92
 3234 0163 B0000000 		.4byte	0xb0
 3235 0167 0C       		.byte	0xc
 3236 0168 0A       		.uleb128 0xa
 3237 0169 BC070000 		.4byte	.LASF30
 3238 016d 06       		.byte	0x6
 3239 016e 93       		.byte	0x93
 3240 016f AC010000 		.4byte	0x1ac
 3241 0173 10       		.byte	0x10
 3242 0174 00       		.byte	0
 3243 0175 06       		.uleb128 0x6
 3244 0176 04       		.byte	0x4
 3245 0177 2C010000 		.4byte	0x12c
 3246 017b 09       		.uleb128 0x9
 3247 017c E2030000 		.4byte	.LASF32
 3248 0180 14       		.byte	0x14
 3249 0181 06       		.byte	0x6
 3250 0182 A4       		.byte	0xa4
 3251 0183 AC010000 		.4byte	0x1ac
 3252 0187 0A       		.uleb128 0xa
 3253 0188 00000000 		.4byte	.LASF33
 3254 018c 06       		.byte	0x6
 3255 018d A7       		.byte	0xa7
 3256 018e F9010000 		.4byte	0x1f9
 3257 0192 00       		.byte	0
 3258 0193 0A       		.uleb128 0xa
 3259 0194 8D000000 		.4byte	.LASF34
 3260 0198 06       		.byte	0x6
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 110
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 110
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 110
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 110
>>>>>>> parent of cb49844... test


 3261 0199 A8       		.byte	0xa8
 3262 019a FE010000 		.4byte	0x1fe
 3263 019e 04       		.byte	0x4
 3264 019f 0A       		.uleb128 0xa
 3265 01a0 E3040000 		.4byte	.LASF35
 3266 01a4 06       		.byte	0x6
 3267 01a5 A9       		.byte	0xa9
 3268 01a6 EE010000 		.4byte	0x1ee
 3269 01aa 08       		.byte	0x8
 3270 01ab 00       		.byte	0
 3271 01ac 06       		.uleb128 0x6
 3272 01ad 04       		.byte	0x4
 3273 01ae 7B010000 		.4byte	0x17b
 3274 01b2 02       		.uleb128 0x2
 3275 01b3 63040000 		.4byte	.LASF36
 3276 01b7 06       		.byte	0x6
 3277 01b8 96       		.byte	0x96
 3278 01b9 2C010000 		.4byte	0x12c
 3279 01bd 09       		.uleb128 0x9
 3280 01be D2030000 		.4byte	.LASF37
 3281 01c2 0C       		.byte	0xc
 3282 01c3 06       		.byte	0x6
 3283 01c4 98       		.byte	0x98
 3284 01c5 EE010000 		.4byte	0x1ee
 3285 01c9 0A       		.uleb128 0xa
 3286 01ca F5060000 		.4byte	.LASF26
 3287 01ce 06       		.byte	0x6
 3288 01cf 9B       		.byte	0x9b
 3289 01d0 1B010000 		.4byte	0x11b
 3290 01d4 00       		.byte	0
 3291 01d5 0A       		.uleb128 0xa
 3292 01d6 D4050000 		.4byte	.LASF27
 3293 01da 06       		.byte	0x6
 3294 01db 9C       		.byte	0x9c
 3295 01dc 75010000 		.4byte	0x175
 3296 01e0 04       		.byte	0x4
 3297 01e1 0A       		.uleb128 0xa
 3298 01e2 78030000 		.4byte	.LASF28
 3299 01e6 06       		.byte	0x6
 3300 01e7 9D       		.byte	0x9d
 3301 01e8 75010000 		.4byte	0x175
 3302 01ec 08       		.byte	0x8
 3303 01ed 00       		.byte	0
 3304 01ee 02       		.uleb128 0x2
 3305 01ef 0A050000 		.4byte	.LASF38
 3306 01f3 06       		.byte	0x6
 3307 01f4 9F       		.byte	0x9f
 3308 01f5 BD010000 		.4byte	0x1bd
 3309 01f9 0B       		.uleb128 0xb
 3310 01fa 10010000 		.4byte	0x110
 3311 01fe 06       		.uleb128 0x6
 3312 01ff 04       		.byte	0x4
 3313 0200 B2010000 		.4byte	0x1b2
 3314 0204 02       		.uleb128 0x2
 3315 0205 4C060000 		.4byte	.LASF39
 3316 0209 06       		.byte	0x6
 3317 020a AB       		.byte	0xab
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 111
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 111
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 111
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 111
>>>>>>> parent of cb49844... test


 3318 020b 7B010000 		.4byte	0x17b
 3319 020f 09       		.uleb128 0x9
 3320 0210 95000000 		.4byte	.LASF40
 3321 0214 08       		.byte	0x8
 3322 0215 07       		.byte	0x7
 3323 0216 5E       		.byte	0x5e
 3324 0217 34020000 		.4byte	0x234
 3325 021b 0A       		.uleb128 0xa
 3326 021c 94010000 		.4byte	.LASF41
 3327 0220 07       		.byte	0x7
 3328 0221 60       		.byte	0x60
 3329 0222 05010000 		.4byte	0x105
 3330 0226 00       		.byte	0
 3331 0227 0A       		.uleb128 0xa
 3332 0228 B0050000 		.4byte	.LASF42
 3333 022c 07       		.byte	0x7
 3334 022d 61       		.byte	0x61
 3335 022e 1B010000 		.4byte	0x11b
 3336 0232 04       		.byte	0x4
 3337 0233 00       		.byte	0
 3338 0234 02       		.uleb128 0x2
 3339 0235 F0050000 		.4byte	.LASF43
 3340 0239 07       		.byte	0x7
 3341 023a 62       		.byte	0x62
 3342 023b 0F020000 		.4byte	0x20f
 3343 023f 02       		.uleb128 0x2
 3344 0240 D5040000 		.4byte	.LASF44
 3345 0244 08       		.byte	0x8
 3346 0245 2E       		.byte	0x2e
 3347 0246 B0000000 		.4byte	0xb0
 3348 024a 0C       		.uleb128 0xc
 3349 024b 04       		.byte	0x4
 3350 024c 01       		.byte	0x1
 3351 024d 5E       		.byte	0x5e
 3352 024e 69020000 		.4byte	0x269
 3353 0252 0D       		.uleb128 0xd
 3354 0253 7B020000 		.4byte	.LASF45
 3355 0257 01       		.byte	0x1
 3356 0258 60       		.byte	0x60
 3357 0259 69020000 		.4byte	0x269
 3358 025d 0D       		.uleb128 0xd
 3359 025e A3010000 		.4byte	.LASF46
 3360 0262 01       		.byte	0x1
 3361 0263 61       		.byte	0x61
 3362 0264 10010000 		.4byte	0x110
 3363 0268 00       		.byte	0
 3364 0269 06       		.uleb128 0x6
 3365 026a 04       		.byte	0x4
 3366 026b CB000000 		.4byte	0xcb
 3367 026f 09       		.uleb128 0x9
 3368 0270 13030000 		.4byte	.LASF47
 3369 0274 48       		.byte	0x48
 3370 0275 01       		.byte	0x1
 3371 0276 58       		.byte	0x58
 3372 0277 FE020000 		.4byte	0x2fe
 3373 027b 0A       		.uleb128 0xa
<<<<<<< HEAD
 3374 027c 39080000 		.4byte	.LASF48
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 112
=======
 3374 027c 24080000 		.4byte	.LASF48
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 112
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 112
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 112
>>>>>>> parent of cb49844... test


 3375 0280 01       		.byte	0x1
 3376 0281 5A       		.byte	0x5a
 3377 0282 69020000 		.4byte	0x269
 3378 0286 00       		.byte	0
 3379 0287 0A       		.uleb128 0xa
 3380 0288 66070000 		.4byte	.LASF49
 3381 028c 01       		.byte	0x1
 3382 028d 5B       		.byte	0x5b
 3383 028e 69020000 		.4byte	0x269
 3384 0292 04       		.byte	0x4
 3385 0293 0A       		.uleb128 0xa
 3386 0294 64060000 		.4byte	.LASF50
 3387 0298 01       		.byte	0x1
 3388 0299 5C       		.byte	0x5c
 3389 029a 69020000 		.4byte	0x269
 3390 029e 08       		.byte	0x8
 3391 029f 0E       		.uleb128 0xe
 3392 02a0 7500     		.ascii	"u\000"
 3393 02a2 01       		.byte	0x1
 3394 02a3 62       		.byte	0x62
 3395 02a4 4A020000 		.4byte	0x24a
 3396 02a8 0C       		.byte	0xc
 3397 02a9 0A       		.uleb128 0xa
 3398 02aa 61010000 		.4byte	.LASF51
 3399 02ae 01       		.byte	0x1
 3400 02af 64       		.byte	0x64
 3401 02b0 04020000 		.4byte	0x204
 3402 02b4 10       		.byte	0x10
 3403 02b5 0A       		.uleb128 0xa
 3404 02b6 33000000 		.4byte	.LASF52
 3405 02ba 01       		.byte	0x1
 3406 02bb 65       		.byte	0x65
 3407 02bc 04020000 		.4byte	0x204
 3408 02c0 24       		.byte	0x24
 3409 02c1 0A       		.uleb128 0xa
 3410 02c2 83030000 		.4byte	.LASF53
 3411 02c6 01       		.byte	0x1
 3412 02c7 67       		.byte	0x67
 3413 02c8 F9010000 		.4byte	0x1f9
 3414 02cc 38       		.byte	0x38
 3415 02cd 0A       		.uleb128 0xa
 3416 02ce E2060000 		.4byte	.LASF54
 3417 02d2 01       		.byte	0x1
 3418 02d3 68       		.byte	0x68
 3419 02d4 10010000 		.4byte	0x110
 3420 02d8 3C       		.byte	0x3c
 3421 02d9 0A       		.uleb128 0xa
 3422 02da 36040000 		.4byte	.LASF55
 3423 02de 01       		.byte	0x1
 3424 02df 69       		.byte	0x69
 3425 02e0 10010000 		.4byte	0x110
 3426 02e4 40       		.byte	0x40
 3427 02e5 0A       		.uleb128 0xa
 3428 02e6 B7080000 		.4byte	.LASF56
 3429 02ea 01       		.byte	0x1
 3430 02eb 6B       		.byte	0x6b
 3431 02ec FE020000 		.4byte	0x2fe
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 113
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 113
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 113
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 113
>>>>>>> parent of cb49844... test


 3432 02f0 44       		.byte	0x44
 3433 02f1 0A       		.uleb128 0xa
 3434 02f2 8C010000 		.4byte	.LASF57
 3435 02f6 01       		.byte	0x1
 3436 02f7 6C       		.byte	0x6c
 3437 02f8 FE020000 		.4byte	0x2fe
 3438 02fc 45       		.byte	0x45
 3439 02fd 00       		.byte	0
 3440 02fe 0B       		.uleb128 0xb
 3441 02ff CB000000 		.4byte	0xcb
 3442 0303 02       		.uleb128 0x2
 3443 0304 9F080000 		.4byte	.LASF58
 3444 0308 01       		.byte	0x1
 3445 0309 7B       		.byte	0x7b
 3446 030a 6F020000 		.4byte	0x26f
 3447 030e 02       		.uleb128 0x2
 3448 030f B8010000 		.4byte	.LASF59
 3449 0313 01       		.byte	0x1
 3450 0314 7F       		.byte	0x7f
 3451 0315 03030000 		.4byte	0x303
 3452 0319 09       		.uleb128 0x9
 3453 031a BF000000 		.4byte	.LASF60
 3454 031e 08       		.byte	0x8
 3455 031f 01       		.byte	0x1
 3456 0320 8C       		.byte	0x8c
 3457 0321 3E030000 		.4byte	0x33e
 3458 0325 0A       		.uleb128 0xa
 3459 0326 C6030000 		.4byte	.LASF61
 3460 032a 01       		.byte	0x1
 3461 032b 8E       		.byte	0x8e
 3462 032c B9000000 		.4byte	0xb9
 3463 0330 00       		.byte	0
 3464 0331 0A       		.uleb128 0xa
 3465 0332 BE030000 		.4byte	.LASF62
 3466 0336 01       		.byte	0x1
 3467 0337 8F       		.byte	0x8f
 3468 0338 3F020000 		.4byte	0x23f
 3469 033c 04       		.byte	0x4
 3470 033d 00       		.byte	0
 3471 033e 02       		.uleb128 0x2
 3472 033f 21050000 		.4byte	.LASF63
 3473 0343 01       		.byte	0x1
 3474 0344 90       		.byte	0x90
 3475 0345 19030000 		.4byte	0x319
 3476 0349 02       		.uleb128 0x2
 3477 034a D7010000 		.4byte	.LASF64
 3478 034e 01       		.byte	0x1
 3479 034f 95       		.byte	0x95
 3480 0350 3E030000 		.4byte	0x33e
 3481 0354 0F       		.uleb128 0xf
 3482 0355 5A050000 		.4byte	.LASF135
 3483 0359 02       		.byte	0x2
 3484 035a CF       		.byte	0xcf
 3485 035b EC000000 		.4byte	0xec
 3486 035f 03       		.byte	0x3
 3487 0360 7B030000 		.4byte	0x37b
 3488 0364 10       		.uleb128 0x10
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 114
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 114
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 114
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 114
>>>>>>> parent of cb49844... test


 3489 0365 F4020000 		.4byte	.LASF65
 3490 0369 02       		.byte	0x2
 3491 036a D1       		.byte	0xd1
 3492 036b EC000000 		.4byte	0xec
 3493 036f 10       		.uleb128 0x10
 3494 0370 7D040000 		.4byte	.LASF66
 3495 0374 02       		.byte	0x2
 3496 0375 D1       		.byte	0xd1
 3497 0376 EC000000 		.4byte	0xec
 3498 037a 00       		.byte	0
 3499 037b 11       		.uleb128 0x11
 3500 037c 01040000 		.4byte	.LASF136
 3501 0380 02       		.byte	0x2
 3502 0381 E3       		.byte	0xe3
 3503 0382 03       		.byte	0x3
 3504 0383 93030000 		.4byte	0x393
 3505 0387 12       		.uleb128 0x12
 3506 0388 31060000 		.4byte	.LASF137
 3507 038c 02       		.byte	0x2
 3508 038d E3       		.byte	0xe3
 3509 038e EC000000 		.4byte	0xec
 3510 0392 00       		.byte	0
 3511 0393 13       		.uleb128 0x13
 3512 0394 53080000 		.4byte	.LASF69
 3513 0398 01       		.byte	0x1
 3514 0399 F7       		.byte	0xf7
 3515 039a 05010000 		.4byte	0x105
 3516 039e 00000000 		.4byte	.LFB68
 3517 03a2 B4000000 		.4byte	.LFE68-.LFB68
 3518 03a6 01       		.uleb128 0x1
 3519 03a7 9C       		.byte	0x9c
 3520 03a8 D7030000 		.4byte	0x3d7
 3521 03ac 14       		.uleb128 0x14
 3522 03ad 06030000 		.4byte	.LASF67
 3523 03b1 01       		.byte	0x1
 3524 03b2 F7       		.byte	0xf7
 3525 03b3 3F020000 		.4byte	0x23f
 3526 03b7 02       		.uleb128 0x2
 3527 03b8 91       		.byte	0x91
 3528 03b9 6C       		.sleb128 -20
 3529 03ba 14       		.uleb128 0x14
 3530 03bb DB050000 		.4byte	.LASF68
 3531 03bf 01       		.byte	0x1
 3532 03c0 F7       		.byte	0xf7
 3533 03c1 05010000 		.4byte	0x105
 3534 03c5 02       		.uleb128 0x2
 3535 03c6 91       		.byte	0x91
 3536 03c7 68       		.sleb128 -24
 3537 03c8 15       		.uleb128 0x15
 3538 03c9 77070000 		.4byte	.LASF73
 3539 03cd 01       		.byte	0x1
 3540 03ce F9       		.byte	0xf9
 3541 03cf DD030000 		.4byte	0x3dd
 3542 03d3 02       		.uleb128 0x2
 3543 03d4 91       		.byte	0x91
 3544 03d5 74       		.sleb128 -12
 3545 03d6 00       		.byte	0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 115
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 115
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 115
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 115
>>>>>>> parent of cb49844... test


 3546 03d7 06       		.uleb128 0x6
 3547 03d8 04       		.byte	0x4
 3548 03d9 0E030000 		.4byte	0x30e
 3549 03dd 07       		.uleb128 0x7
 3550 03de D7030000 		.4byte	0x3d7
 3551 03e2 16       		.uleb128 0x16
 3552 03e3 34050000 		.4byte	.LASF70
 3553 03e7 01       		.byte	0x1
 3554 03e8 6701     		.2byte	0x167
 3555 03ea 3F020000 		.4byte	0x23f
 3556 03ee 00000000 		.4byte	.LFB69
 3557 03f2 58000000 		.4byte	.LFE69-.LFB69
 3558 03f6 01       		.uleb128 0x1
 3559 03f7 9C       		.byte	0x9c
 3560 03f8 57040000 		.4byte	0x457
 3561 03fc 17       		.uleb128 0x17
 3562 03fd 82060000 		.4byte	.LASF71
 3563 0401 01       		.byte	0x1
 3564 0402 6701     		.2byte	0x167
 3565 0404 57040000 		.4byte	0x457
 3566 0408 02       		.uleb128 0x2
 3567 0409 91       		.byte	0x91
 3568 040a 64       		.sleb128 -28
 3569 040b 17       		.uleb128 0x17
 3570 040c 36040000 		.4byte	.LASF55
 3571 0410 01       		.byte	0x1
 3572 0411 6701     		.2byte	0x167
 3573 0413 57040000 		.4byte	0x457
 3574 0417 02       		.uleb128 0x2
 3575 0418 91       		.byte	0x91
 3576 0419 60       		.sleb128 -32
 3577 041a 17       		.uleb128 0x17
 3578 041b 40060000 		.4byte	.LASF72
 3579 041f 01       		.byte	0x1
 3580 0420 6701     		.2byte	0x167
 3581 0422 5C040000 		.4byte	0x45c
 3582 0426 02       		.uleb128 0x2
 3583 0427 91       		.byte	0x91
 3584 0428 5F       		.sleb128 -33
 3585 0429 18       		.uleb128 0x18
 3586 042a 9F000000 		.4byte	.LASF74
 3587 042e 01       		.byte	0x1
 3588 042f 6901     		.2byte	0x169
 3589 0431 D7030000 		.4byte	0x3d7
 3590 0435 02       		.uleb128 0x2
 3591 0436 91       		.byte	0x91
 3592 0437 70       		.sleb128 -16
 3593 0438 18       		.uleb128 0x18
 3594 0439 16070000 		.4byte	.LASF75
 3595 043d 01       		.byte	0x1
 3596 043e 6A01     		.2byte	0x16a
 3597 0440 25000000 		.4byte	0x25
 3598 0444 02       		.uleb128 0x2
 3599 0445 91       		.byte	0x91
 3600 0446 74       		.sleb128 -12
 3601 0447 18       		.uleb128 0x18
<<<<<<< HEAD
 3602 0448 16050000 		.4byte	.LASF76
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 116
=======
 3602 0448 99050000 		.4byte	.LASF76
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 116
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 116
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 116
>>>>>>> parent of cb49844... test


 3603 044c 01       		.byte	0x1
 3604 044d 6B01     		.2byte	0x16b
 3605 044f 26010000 		.4byte	0x126
 3606 0453 02       		.uleb128 0x2
 3607 0454 91       		.byte	0x91
 3608 0455 6C       		.sleb128 -20
 3609 0456 00       		.byte	0
 3610 0457 07       		.uleb128 0x7
 3611 0458 10010000 		.4byte	0x110
 3612 045c 07       		.uleb128 0x7
 3613 045d D6000000 		.4byte	0xd6
 3614 0461 19       		.uleb128 0x19
 3615 0462 B3020000 		.4byte	.LASF77
 3616 0466 01       		.byte	0x1
 3617 0467 9A01     		.2byte	0x19a
 3618 0469 00000000 		.4byte	.LFB70
 3619 046d 3E000000 		.4byte	.LFE70-.LFB70
 3620 0471 01       		.uleb128 0x1
 3621 0472 9C       		.byte	0x9c
 3622 0473 C3040000 		.4byte	0x4c3
 3623 0477 17       		.uleb128 0x17
 3624 0478 82060000 		.4byte	.LASF71
 3625 047c 01       		.byte	0x1
 3626 047d 9A01     		.2byte	0x19a
 3627 047f 57040000 		.4byte	0x457
 3628 0483 02       		.uleb128 0x2
 3629 0484 91       		.byte	0x91
 3630 0485 74       		.sleb128 -12
 3631 0486 17       		.uleb128 0x17
 3632 0487 36040000 		.4byte	.LASF55
 3633 048b 01       		.byte	0x1
 3634 048c 9A01     		.2byte	0x19a
 3635 048e 57040000 		.4byte	0x457
 3636 0492 02       		.uleb128 0x2
 3637 0493 91       		.byte	0x91
 3638 0494 70       		.sleb128 -16
 3639 0495 17       		.uleb128 0x17
 3640 0496 99050000 		.4byte	.LASF76
 3641 049a 01       		.byte	0x1
 3642 049b 9A01     		.2byte	0x19a
 3643 049d 26010000 		.4byte	0x126
 3644 04a1 02       		.uleb128 0x2
 3645 04a2 91       		.byte	0x91
 3646 04a3 6C       		.sleb128 -20
 3647 04a4 17       		.uleb128 0x17
 3648 04a5 40060000 		.4byte	.LASF72
 3649 04a9 01       		.byte	0x1
 3650 04aa 9A01     		.2byte	0x19a
 3651 04ac 5C040000 		.4byte	0x45c
 3652 04b0 02       		.uleb128 0x2
 3653 04b1 91       		.byte	0x91
 3654 04b2 6B       		.sleb128 -21
 3655 04b3 17       		.uleb128 0x17
 3656 04b4 9F000000 		.4byte	.LASF74
 3657 04b8 01       		.byte	0x1
 3658 04b9 9A01     		.2byte	0x19a
 3659 04bb D7030000 		.4byte	0x3d7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 117
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 117
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 117
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 117
>>>>>>> parent of cb49844... test


 3660 04bf 02       		.uleb128 0x2
 3661 04c0 91       		.byte	0x91
 3662 04c1 00       		.sleb128 0
 3663 04c2 00       		.byte	0
 3664 04c3 19       		.uleb128 0x19
 3665 04c4 7B050000 		.4byte	.LASF78
 3666 04c8 01       		.byte	0x1
 3667 04c9 C601     		.2byte	0x1c6
 3668 04cb 00000000 		.4byte	.LFB71
 3669 04cf 34000000 		.4byte	.LFE71-.LFB71
 3670 04d3 01       		.uleb128 0x1
 3671 04d4 9C       		.byte	0x9c
 3672 04d5 E9040000 		.4byte	0x4e9
 3673 04d9 17       		.uleb128 0x17
 3674 04da 9F000000 		.4byte	.LASF74
 3675 04de 01       		.byte	0x1
 3676 04df C601     		.2byte	0x1c6
 3677 04e1 D7030000 		.4byte	0x3d7
 3678 04e5 02       		.uleb128 0x2
 3679 04e6 91       		.byte	0x91
 3680 04e7 74       		.sleb128 -12
 3681 04e8 00       		.byte	0
 3682 04e9 16       		.uleb128 0x16
 3683 04ea 48050000 		.4byte	.LASF79
 3684 04ee 01       		.byte	0x1
 3685 04ef E401     		.2byte	0x1e4
 3686 04f1 3F020000 		.4byte	0x23f
 3687 04f5 00000000 		.4byte	.LFB72
 3688 04f9 30000000 		.4byte	.LFE72-.LFB72
 3689 04fd 01       		.uleb128 0x1
 3690 04fe 9C       		.byte	0x9c
 3691 04ff 40050000 		.4byte	0x540
 3692 0503 17       		.uleb128 0x17
 3693 0504 40060000 		.4byte	.LASF72
 3694 0508 01       		.byte	0x1
 3695 0509 E401     		.2byte	0x1e4
 3696 050b 5C040000 		.4byte	0x45c
 3697 050f 02       		.uleb128 0x2
 3698 0510 91       		.byte	0x91
 3699 0511 67       		.sleb128 -25
 3700 0512 18       		.uleb128 0x18
 3701 0513 9F000000 		.4byte	.LASF74
 3702 0517 01       		.byte	0x1
 3703 0518 E601     		.2byte	0x1e6
 3704 051a D7030000 		.4byte	0x3d7
 3705 051e 02       		.uleb128 0x2
 3706 051f 91       		.byte	0x91
 3707 0520 6C       		.sleb128 -20
 3708 0521 18       		.uleb128 0x18
 3709 0522 50040000 		.4byte	.LASF80
 3710 0526 01       		.byte	0x1
 3711 0527 E701     		.2byte	0x1e7
 3712 0529 57040000 		.4byte	0x457
 3713 052d 02       		.uleb128 0x2
 3714 052e 91       		.byte	0x91
 3715 052f 74       		.sleb128 -12
 3716 0530 18       		.uleb128 0x18
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 118
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 118
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 118
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 118
>>>>>>> parent of cb49844... test


 3717 0531 D9020000 		.4byte	.LASF81
 3718 0535 01       		.byte	0x1
 3719 0536 E701     		.2byte	0x1e7
 3720 0538 57040000 		.4byte	0x457
 3721 053c 02       		.uleb128 0x2
 3722 053d 91       		.byte	0x91
 3723 053e 70       		.sleb128 -16
 3724 053f 00       		.byte	0
 3725 0540 16       		.uleb128 0x16
 3726 0541 2B080000 		.4byte	.LASF82
 3727 0545 01       		.byte	0x1
 3728 0546 4002     		.2byte	0x240
 3729 0548 05010000 		.4byte	0x105
 3730 054c 00000000 		.4byte	.LFB73
 3731 0550 4C000000 		.4byte	.LFE73-.LFB73
 3732 0554 01       		.uleb128 0x1
 3733 0555 9C       		.byte	0x9c
 3734 0556 88050000 		.4byte	0x588
 3735 055a 17       		.uleb128 0x17
 3736 055b A9050000 		.4byte	.LASF83
 3737 055f 01       		.byte	0x1
 3738 0560 4002     		.2byte	0x240
 3739 0562 3F020000 		.4byte	0x23f
 3740 0566 02       		.uleb128 0x2
 3741 0567 91       		.byte	0x91
 3742 0568 64       		.sleb128 -28
 3743 0569 18       		.uleb128 0x18
 3744 056a 7F070000 		.4byte	.LASF84
 3745 056e 01       		.byte	0x1
 3746 056f 4202     		.2byte	0x242
 3747 0571 05010000 		.4byte	0x105
 3748 0575 02       		.uleb128 0x2
 3749 0576 91       		.byte	0x91
 3750 0577 6C       		.sleb128 -20
 3751 0578 18       		.uleb128 0x18
 3752 0579 64000000 		.4byte	.LASF85
 3753 057d 01       		.byte	0x1
 3754 057e 4302     		.2byte	0x243
 3755 0580 DD030000 		.4byte	0x3dd
 3756 0584 02       		.uleb128 0x2
 3757 0585 91       		.byte	0x91
 3758 0586 68       		.sleb128 -24
 3759 0587 00       		.byte	0
 3760 0588 16       		.uleb128 0x16
 3761 0589 B1060000 		.4byte	.LASF86
 3762 058d 01       		.byte	0x1
 3763 058e 7702     		.2byte	0x277
 3764 0590 05010000 		.4byte	0x105
 3765 0594 00000000 		.4byte	.LFB74
 3766 0598 50000000 		.4byte	.LFE74-.LFB74
 3767 059c 01       		.uleb128 0x1
 3768 059d 9C       		.byte	0x9c
 3769 059e DF050000 		.4byte	0x5df
 3770 05a2 17       		.uleb128 0x17
 3771 05a3 A9050000 		.4byte	.LASF83
 3772 05a7 01       		.byte	0x1
 3773 05a8 7702     		.2byte	0x277
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 119
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 119
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 119
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 119
>>>>>>> parent of cb49844... test


 3774 05aa 3F020000 		.4byte	0x23f
 3775 05ae 02       		.uleb128 0x2
 3776 05af 91       		.byte	0x91
 3777 05b0 64       		.sleb128 -28
 3778 05b1 17       		.uleb128 0x17
 3779 05b2 0F080000 		.4byte	.LASF87
 3780 05b6 01       		.byte	0x1
 3781 05b7 7702     		.2byte	0x277
 3782 05b9 1B010000 		.4byte	0x11b
 3783 05bd 02       		.uleb128 0x2
 3784 05be 91       		.byte	0x91
 3785 05bf 60       		.sleb128 -32
 3786 05c0 18       		.uleb128 0x18
 3787 05c1 7F070000 		.4byte	.LASF84
 3788 05c5 01       		.byte	0x1
 3789 05c6 7902     		.2byte	0x279
 3790 05c8 05010000 		.4byte	0x105
 3791 05cc 02       		.uleb128 0x2
 3792 05cd 91       		.byte	0x91
 3793 05ce 6C       		.sleb128 -20
 3794 05cf 18       		.uleb128 0x18
 3795 05d0 64000000 		.4byte	.LASF85
 3796 05d4 01       		.byte	0x1
 3797 05d5 7A02     		.2byte	0x27a
 3798 05d7 DD030000 		.4byte	0x3dd
 3799 05db 02       		.uleb128 0x2
 3800 05dc 91       		.byte	0x91
 3801 05dd 68       		.sleb128 -24
 3802 05de 00       		.byte	0
 3803 05df 16       		.uleb128 0x16
 3804 05e0 BF080000 		.4byte	.LASF88
 3805 05e4 01       		.byte	0x1
 3806 05e5 BD02     		.2byte	0x2bd
 3807 05e7 3F020000 		.4byte	0x23f
 3808 05eb 00000000 		.4byte	.LFB75
 3809 05ef 2C000000 		.4byte	.LFE75-.LFB75
 3810 05f3 01       		.uleb128 0x1
 3811 05f4 9C       		.byte	0x9c
 3812 05f5 27060000 		.4byte	0x627
 3813 05f9 17       		.uleb128 0x17
 3814 05fa E5050000 		.4byte	.LASF89
 3815 05fe 01       		.byte	0x1
 3816 05ff BD02     		.2byte	0x2bd
 3817 0601 57040000 		.4byte	0x457
 3818 0605 02       		.uleb128 0x2
 3819 0606 91       		.byte	0x91
 3820 0607 6C       		.sleb128 -20
 3821 0608 17       		.uleb128 0x17
 3822 0609 41040000 		.4byte	.LASF90
 3823 060d 01       		.byte	0x1
 3824 060e BD02     		.2byte	0x2bd
 3825 0610 57040000 		.4byte	0x457
 3826 0614 02       		.uleb128 0x2
 3827 0615 91       		.byte	0x91
 3828 0616 68       		.sleb128 -24
 3829 0617 18       		.uleb128 0x18
<<<<<<< HEAD
 3830 0618 3B030000 		.4byte	.LASF62
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 120
=======
 3830 0618 BE030000 		.4byte	.LASF62
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 120
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 120
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 120
>>>>>>> parent of cb49844... test


 3831 061c 01       		.byte	0x1
 3832 061d BF02     		.2byte	0x2bf
 3833 061f 3F020000 		.4byte	0x23f
 3834 0623 02       		.uleb128 0x2
 3835 0624 91       		.byte	0x91
 3836 0625 74       		.sleb128 -12
 3837 0626 00       		.byte	0
 3838 0627 16       		.uleb128 0x16
 3839 0628 24040000 		.4byte	.LASF91
 3840 062c 01       		.byte	0x1
 3841 062d D702     		.2byte	0x2d7
 3842 062f 05010000 		.4byte	0x105
 3843 0633 00000000 		.4byte	.LFB76
 3844 0637 54010000 		.4byte	.LFE76-.LFB76
 3845 063b 01       		.uleb128 0x1
 3846 063c 9C       		.byte	0x9c
 3847 063d BA060000 		.4byte	0x6ba
 3848 0641 17       		.uleb128 0x17
 3849 0642 06030000 		.4byte	.LASF67
 3850 0646 01       		.byte	0x1
 3851 0647 D702     		.2byte	0x2d7
 3852 0649 3F020000 		.4byte	0x23f
 3853 064d 02       		.uleb128 0x2
 3854 064e 91       		.byte	0x91
 3855 064f 5C       		.sleb128 -36
 3856 0650 17       		.uleb128 0x17
 3857 0651 28070000 		.4byte	.LASF92
 3858 0655 01       		.byte	0x1
 3859 0656 D702     		.2byte	0x2d7
 3860 0658 BA060000 		.4byte	0x6ba
 3861 065c 02       		.uleb128 0x2
 3862 065d 91       		.byte	0x91
 3863 065e 58       		.sleb128 -40
 3864 065f 17       		.uleb128 0x17
 3865 0660 0F080000 		.4byte	.LASF87
 3866 0664 01       		.byte	0x1
 3867 0665 D702     		.2byte	0x2d7
 3868 0667 1B010000 		.4byte	0x11b
 3869 066b 02       		.uleb128 0x2
 3870 066c 91       		.byte	0x91
 3871 066d 54       		.sleb128 -44
 3872 066e 17       		.uleb128 0x17
 3873 066f C0010000 		.4byte	.LASF93
 3874 0673 01       		.byte	0x1
 3875 0674 D702     		.2byte	0x2d7
 3876 0676 BF060000 		.4byte	0x6bf
 3877 067a 02       		.uleb128 0x2
 3878 067b 91       		.byte	0x91
 3879 067c 50       		.sleb128 -48
 3880 067d 18       		.uleb128 0x18
 3881 067e A0030000 		.4byte	.LASF94
 3882 0682 01       		.byte	0x1
 3883 0683 D902     		.2byte	0x2d9
 3884 0685 05010000 		.4byte	0x105
 3885 0689 02       		.uleb128 0x2
 3886 068a 91       		.byte	0x91
 3887 068b 74       		.sleb128 -12
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 121
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 121
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 121
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 121
>>>>>>> parent of cb49844... test


 3888 068c 18       		.uleb128 0x18
 3889 068d E5020000 		.4byte	.LASF95
 3890 0691 01       		.byte	0x1
 3891 0692 D902     		.2byte	0x2d9
 3892 0694 05010000 		.4byte	0x105
 3893 0698 02       		.uleb128 0x2
 3894 0699 91       		.byte	0x91
 3895 069a 6C       		.sleb128 -20
 3896 069b 18       		.uleb128 0x18
 3897 069c B5030000 		.4byte	.LASF96
 3898 06a0 01       		.byte	0x1
 3899 06a1 DA02     		.2byte	0x2da
 3900 06a3 34020000 		.4byte	0x234
 3901 06a7 02       		.uleb128 0x2
 3902 06a8 91       		.byte	0x91
 3903 06a9 64       		.sleb128 -28
 3904 06aa 18       		.uleb128 0x18
 3905 06ab 77070000 		.4byte	.LASF73
 3906 06af 01       		.byte	0x1
 3907 06b0 DB02     		.2byte	0x2db
 3908 06b2 DD030000 		.4byte	0x3dd
 3909 06b6 02       		.uleb128 0x2
 3910 06b7 91       		.byte	0x91
 3911 06b8 70       		.sleb128 -16
 3912 06b9 00       		.byte	0
 3913 06ba 07       		.uleb128 0x7
 3914 06bb C4000000 		.4byte	0xc4
 3915 06bf 07       		.uleb128 0x7
 3916 06c0 05010000 		.4byte	0x105
 3917 06c4 16       		.uleb128 0x16
 3918 06c5 E8030000 		.4byte	.LASF97
 3919 06c9 01       		.byte	0x1
 3920 06ca A903     		.2byte	0x3a9
 3921 06cc 05010000 		.4byte	0x105
 3922 06d0 00000000 		.4byte	.LFB77
 3923 06d4 AE000000 		.4byte	.LFE77-.LFB77
 3924 06d8 01       		.uleb128 0x1
 3925 06d9 9C       		.byte	0x9c
 3926 06da AD070000 		.4byte	0x7ad
 3927 06de 17       		.uleb128 0x17
 3928 06df 06030000 		.4byte	.LASF67
 3929 06e3 01       		.byte	0x1
 3930 06e4 A903     		.2byte	0x3a9
 3931 06e6 3F020000 		.4byte	0x23f
 3932 06ea 02       		.uleb128 0x2
 3933 06eb 91       		.byte	0x91
 3934 06ec 54       		.sleb128 -44
 3935 06ed 17       		.uleb128 0x17
 3936 06ee 28070000 		.4byte	.LASF92
 3937 06f2 01       		.byte	0x1
 3938 06f3 A903     		.2byte	0x3a9
 3939 06f5 BA060000 		.4byte	0x6ba
 3940 06f9 02       		.uleb128 0x2
 3941 06fa 91       		.byte	0x91
 3942 06fb 50       		.sleb128 -48
 3943 06fc 17       		.uleb128 0x17
 3944 06fd 4A000000 		.4byte	.LASF98
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 122
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 122
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 122
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 122
>>>>>>> parent of cb49844... test


 3945 0701 01       		.byte	0x1
 3946 0702 A903     		.2byte	0x3a9
 3947 0704 B3070000 		.4byte	0x7b3
 3948 0708 02       		.uleb128 0x2
 3949 0709 91       		.byte	0x91
 3950 070a 4C       		.sleb128 -52
 3951 070b 17       		.uleb128 0x17
 3952 070c C0010000 		.4byte	.LASF93
 3953 0710 01       		.byte	0x1
 3954 0711 A903     		.2byte	0x3a9
 3955 0713 BF060000 		.4byte	0x6bf
 3956 0717 02       		.uleb128 0x2
 3957 0718 91       		.byte	0x91
 3958 0719 48       		.sleb128 -56
 3959 071a 18       		.uleb128 0x18
 3960 071b 7F070000 		.4byte	.LASF84
 3961 071f 01       		.byte	0x1
 3962 0720 AB03     		.2byte	0x3ab
 3963 0722 05010000 		.4byte	0x105
 3964 0726 02       		.uleb128 0x2
 3965 0727 91       		.byte	0x91
 3966 0728 74       		.sleb128 -12
 3967 0729 18       		.uleb128 0x18
 3968 072a 9C020000 		.4byte	.LASF99
 3969 072e 01       		.byte	0x1
 3970 072f AC03     		.2byte	0x3ac
 3971 0731 10010000 		.4byte	0x110
 3972 0735 02       		.uleb128 0x2
 3973 0736 91       		.byte	0x91
 3974 0737 68       		.sleb128 -24
 3975 0738 18       		.uleb128 0x18
 3976 0739 77070000 		.4byte	.LASF73
 3977 073d 01       		.byte	0x1
 3978 073e AD03     		.2byte	0x3ad
 3979 0740 DD030000 		.4byte	0x3dd
 3980 0744 02       		.uleb128 0x2
 3981 0745 91       		.byte	0x91
 3982 0746 70       		.sleb128 -16
 3983 0747 1A       		.uleb128 0x1a
 3984 0748 54030000 		.4byte	0x354
 3985 074c 12000000 		.4byte	.LBB23
 3986 0750 1A000000 		.4byte	.LBE23-.LBB23
 3987 0754 01       		.byte	0x1
 3988 0755 C803     		.2byte	0x3c8
 3989 0757 76070000 		.4byte	0x776
 3990 075b 1B       		.uleb128 0x1b
 3991 075c 12000000 		.4byte	.LBB24
 3992 0760 1A000000 		.4byte	.LBE24-.LBB24
 3993 0764 1C       		.uleb128 0x1c
 3994 0765 64030000 		.4byte	0x364
 3995 0769 02       		.uleb128 0x2
 3996 076a 91       		.byte	0x91
 3997 076b 60       		.sleb128 -32
 3998 076c 1C       		.uleb128 0x1c
 3999 076d 6F030000 		.4byte	0x36f
 4000 0771 02       		.uleb128 0x2
 4001 0772 91       		.byte	0x91
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 123
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 123
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 123
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 123
>>>>>>> parent of cb49844... test


 4002 0773 5C       		.sleb128 -36
 4003 0774 00       		.byte	0
 4004 0775 00       		.byte	0
 4005 0776 1D       		.uleb128 0x1d
 4006 0777 40000000 		.4byte	.LBB25
 4007 077b 54000000 		.4byte	.LBE25-.LBB25
 4008 077f 93070000 		.4byte	0x793
 4009 0783 18       		.uleb128 0x18
 4010 0784 8C010000 		.4byte	.LASF57
 4011 0788 01       		.byte	0x1
 4012 0789 CC03     		.2byte	0x3cc
 4013 078b B8070000 		.4byte	0x7b8
 4014 078f 02       		.uleb128 0x2
 4015 0790 91       		.byte	0x91
 4016 0791 67       		.sleb128 -25
 4017 0792 00       		.byte	0
 4018 0793 1E       		.uleb128 0x1e
 4019 0794 7B030000 		.4byte	0x37b
 4020 0798 9E000000 		.4byte	.LBB26
 4021 079c 06000000 		.4byte	.LBE26-.LBB26
 4022 07a0 01       		.byte	0x1
 4023 07a1 3A04     		.2byte	0x43a
 4024 07a3 1F       		.uleb128 0x1f
 4025 07a4 87030000 		.4byte	0x387
 4026 07a8 02       		.uleb128 0x2
 4027 07a9 91       		.byte	0x91
 4028 07aa 6C       		.sleb128 -20
 4029 07ab 00       		.byte	0
 4030 07ac 00       		.byte	0
 4031 07ad 06       		.uleb128 0x6
 4032 07ae 04       		.byte	0x4
 4033 07af 05010000 		.4byte	0x105
 4034 07b3 07       		.uleb128 0x7
 4035 07b4 AD070000 		.4byte	0x7ad
 4036 07b8 07       		.uleb128 0x7
 4037 07b9 CB000000 		.4byte	0xcb
 4038 07bd 16       		.uleb128 0x16
 4039 07be 96040000 		.4byte	.LASF100
 4040 07c2 01       		.byte	0x1
 4041 07c3 4004     		.2byte	0x440
 4042 07c5 05010000 		.4byte	0x105
 4043 07c9 00000000 		.4byte	.LFB78
 4044 07cd A6000000 		.4byte	.LFE78-.LFB78
 4045 07d1 01       		.uleb128 0x1
 4046 07d2 9C       		.byte	0x9c
 4047 07d3 A1080000 		.4byte	0x8a1
 4048 07d7 17       		.uleb128 0x17
 4049 07d8 06030000 		.4byte	.LASF67
 4050 07dc 01       		.byte	0x1
 4051 07dd 4004     		.2byte	0x440
 4052 07df 3F020000 		.4byte	0x23f
 4053 07e3 02       		.uleb128 0x2
 4054 07e4 91       		.byte	0x91
 4055 07e5 54       		.sleb128 -44
 4056 07e6 17       		.uleb128 0x17
 4057 07e7 4A000000 		.4byte	.LASF98
 4058 07eb 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 124
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 124
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 124
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 124
>>>>>>> parent of cb49844... test


 4059 07ec 4004     		.2byte	0x440
 4060 07ee B3070000 		.4byte	0x7b3
 4061 07f2 02       		.uleb128 0x2
 4062 07f3 91       		.byte	0x91
 4063 07f4 50       		.sleb128 -48
 4064 07f5 18       		.uleb128 0x18
 4065 07f6 7F070000 		.4byte	.LASF84
 4066 07fa 01       		.byte	0x1
 4067 07fb 4204     		.2byte	0x442
 4068 07fd 05010000 		.4byte	0x105
 4069 0801 02       		.uleb128 0x2
 4070 0802 91       		.byte	0x91
 4071 0803 74       		.sleb128 -12
 4072 0804 18       		.uleb128 0x18
 4073 0805 9C020000 		.4byte	.LASF99
 4074 0809 01       		.byte	0x1
 4075 080a 4304     		.2byte	0x443
 4076 080c 10010000 		.4byte	0x110
 4077 0810 02       		.uleb128 0x2
 4078 0811 91       		.byte	0x91
 4079 0812 68       		.sleb128 -24
 4080 0813 18       		.uleb128 0x18
 4081 0814 77070000 		.4byte	.LASF73
 4082 0818 01       		.byte	0x1
 4083 0819 4404     		.2byte	0x444
 4084 081b DD030000 		.4byte	0x3dd
 4085 081f 02       		.uleb128 0x2
 4086 0820 91       		.byte	0x91
 4087 0821 70       		.sleb128 -16
 4088 0822 1A       		.uleb128 0x1a
 4089 0823 54030000 		.4byte	0x354
 4090 0827 0E000000 		.4byte	.LBB28
 4091 082b 1A000000 		.4byte	.LBE28-.LBB28
 4092 082f 01       		.byte	0x1
 4093 0830 6704     		.2byte	0x467
 4094 0832 51080000 		.4byte	0x851
 4095 0836 1B       		.uleb128 0x1b
 4096 0837 0E000000 		.4byte	.LBB29
 4097 083b 1A000000 		.4byte	.LBE29-.LBB29
 4098 083f 1C       		.uleb128 0x1c
 4099 0840 64030000 		.4byte	0x364
 4100 0844 02       		.uleb128 0x2
 4101 0845 91       		.byte	0x91
 4102 0846 5C       		.sleb128 -36
 4103 0847 1C       		.uleb128 0x1c
 4104 0848 6F030000 		.4byte	0x36f
 4105 084c 02       		.uleb128 0x2
 4106 084d 91       		.byte	0x91
 4107 084e 58       		.sleb128 -40
 4108 084f 00       		.byte	0
 4109 0850 00       		.byte	0
 4110 0851 1D       		.uleb128 0x1d
 4111 0852 2A000000 		.4byte	.LBB30
 4112 0856 6C000000 		.4byte	.LBE30-.LBB30
 4113 085a 87080000 		.4byte	0x887
 4114 085e 18       		.uleb128 0x18
<<<<<<< HEAD
 4115 085f 00030000 		.4byte	.LASF53
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 125
=======
 4115 085f 83030000 		.4byte	.LASF53
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 125
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 125
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 125
>>>>>>> parent of cb49844... test


 4116 0863 01       		.byte	0x1
 4117 0864 6904     		.2byte	0x469
 4118 0866 57040000 		.4byte	0x457
 4119 086a 02       		.uleb128 0x2
 4120 086b 91       		.byte	0x91
 4121 086c 64       		.sleb128 -28
 4122 086d 1B       		.uleb128 0x1b
 4123 086e 3A000000 		.4byte	.LBB31
 4124 0872 52000000 		.4byte	.LBE31-.LBB31
 4125 0876 18       		.uleb128 0x18
 4126 0877 8C010000 		.4byte	.LASF57
 4127 087b 01       		.byte	0x1
 4128 087c 7004     		.2byte	0x470
 4129 087e B8070000 		.4byte	0x7b8
 4130 0882 02       		.uleb128 0x2
 4131 0883 91       		.byte	0x91
 4132 0884 63       		.sleb128 -29
 4133 0885 00       		.byte	0
 4134 0886 00       		.byte	0
 4135 0887 1E       		.uleb128 0x1e
 4136 0888 7B030000 		.4byte	0x37b
 4137 088c 96000000 		.4byte	.LBB32
 4138 0890 06000000 		.4byte	.LBE32-.LBB32
 4139 0894 01       		.byte	0x1
 4140 0895 DF04     		.2byte	0x4df
 4141 0897 1F       		.uleb128 0x1f
 4142 0898 87030000 		.4byte	0x387
 4143 089c 02       		.uleb128 0x2
 4144 089d 91       		.byte	0x91
 4145 089e 6C       		.sleb128 -20
 4146 089f 00       		.byte	0
 4147 08a0 00       		.byte	0
 4148 08a1 16       		.uleb128 0x16
 4149 08a2 10000000 		.4byte	.LASF101
 4150 08a6 01       		.byte	0x1
 4151 08a7 E504     		.2byte	0x4e5
 4152 08a9 05010000 		.4byte	0x105
 4153 08ad 00000000 		.4byte	.LFB79
 4154 08b1 44010000 		.4byte	.LFE79-.LFB79
 4155 08b5 01       		.uleb128 0x1
 4156 08b6 9C       		.byte	0x9c
 4157 08b7 2F090000 		.4byte	0x92f
 4158 08bb 17       		.uleb128 0x17
 4159 08bc 06030000 		.4byte	.LASF67
 4160 08c0 01       		.byte	0x1
 4161 08c1 E504     		.2byte	0x4e5
 4162 08c3 3F020000 		.4byte	0x23f
 4163 08c7 02       		.uleb128 0x2
 4164 08c8 91       		.byte	0x91
 4165 08c9 5C       		.sleb128 -36
 4166 08ca 17       		.uleb128 0x17
 4167 08cb 4A030000 		.4byte	.LASF102
 4168 08cf 01       		.byte	0x1
 4169 08d0 E504     		.2byte	0x4e5
 4170 08d2 2F090000 		.4byte	0x92f
 4171 08d6 02       		.uleb128 0x2
 4172 08d7 91       		.byte	0x91
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 126
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 126
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 126
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 126
>>>>>>> parent of cb49844... test


 4173 08d8 58       		.sleb128 -40
 4174 08d9 17       		.uleb128 0x17
 4175 08da 0F080000 		.4byte	.LASF87
 4176 08de 01       		.byte	0x1
 4177 08df E504     		.2byte	0x4e5
 4178 08e1 1B010000 		.4byte	0x11b
 4179 08e5 02       		.uleb128 0x2
 4180 08e6 91       		.byte	0x91
 4181 08e7 54       		.sleb128 -44
 4182 08e8 18       		.uleb128 0x18
 4183 08e9 A0030000 		.4byte	.LASF94
 4184 08ed 01       		.byte	0x1
 4185 08ee E704     		.2byte	0x4e7
 4186 08f0 05010000 		.4byte	0x105
 4187 08f4 02       		.uleb128 0x2
 4188 08f5 91       		.byte	0x91
 4189 08f6 74       		.sleb128 -12
 4190 08f7 18       		.uleb128 0x18
 4191 08f8 B5030000 		.4byte	.LASF96
 4192 08fc 01       		.byte	0x1
 4193 08fd E804     		.2byte	0x4e8
 4194 08ff 34020000 		.4byte	0x234
 4195 0903 02       		.uleb128 0x2
 4196 0904 91       		.byte	0x91
 4197 0905 64       		.sleb128 -28
 4198 0906 18       		.uleb128 0x18
 4199 0907 77070000 		.4byte	.LASF73
 4200 090b 01       		.byte	0x1
 4201 090c E904     		.2byte	0x4e9
 4202 090e DD030000 		.4byte	0x3dd
 4203 0912 02       		.uleb128 0x2
 4204 0913 91       		.byte	0x91
 4205 0914 70       		.sleb128 -16
 4206 0915 1B       		.uleb128 0x1b
 4207 0916 18000000 		.4byte	.LBB34
 4208 091a 6E000000 		.4byte	.LBE34-.LBB34
 4209 091e 18       		.uleb128 0x18
 4210 091f 83030000 		.4byte	.LASF53
 4211 0923 01       		.byte	0x1
 4212 0924 0205     		.2byte	0x502
 4213 0926 57040000 		.4byte	0x457
 4214 092a 02       		.uleb128 0x2
 4215 092b 91       		.byte	0x91
 4216 092c 6C       		.sleb128 -20
 4217 092d 00       		.byte	0
 4218 092e 00       		.byte	0
 4219 092f 07       		.uleb128 0x7
 4220 0930 B0000000 		.4byte	0xb0
 4221 0934 16       		.uleb128 0x16
 4222 0935 6C000000 		.4byte	.LASF103
 4223 0939 01       		.byte	0x1
 4224 093a 7305     		.2byte	0x573
 4225 093c 05010000 		.4byte	0x105
 4226 0940 00000000 		.4byte	.LFB80
 4227 0944 90010000 		.4byte	.LFE80-.LFB80
 4228 0948 01       		.uleb128 0x1
 4229 0949 9C       		.byte	0x9c
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 127
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 127
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 127
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 127
>>>>>>> parent of cb49844... test


 4230 094a DF090000 		.4byte	0x9df
 4231 094e 17       		.uleb128 0x17
 4232 094f 06030000 		.4byte	.LASF67
 4233 0953 01       		.byte	0x1
 4234 0954 7305     		.2byte	0x573
 4235 0956 3F020000 		.4byte	0x23f
 4236 095a 02       		.uleb128 0x2
 4237 095b 91       		.byte	0x91
 4238 095c 54       		.sleb128 -44
 4239 095d 17       		.uleb128 0x17
 4240 095e 0F080000 		.4byte	.LASF87
 4241 0962 01       		.byte	0x1
 4242 0963 7305     		.2byte	0x573
 4243 0965 1B010000 		.4byte	0x11b
 4244 0969 02       		.uleb128 0x2
 4245 096a 91       		.byte	0x91
 4246 096b 50       		.sleb128 -48
 4247 096c 18       		.uleb128 0x18
 4248 096d A0030000 		.4byte	.LASF94
 4249 0971 01       		.byte	0x1
 4250 0972 7505     		.2byte	0x575
 4251 0974 05010000 		.4byte	0x105
 4252 0978 02       		.uleb128 0x2
 4253 0979 91       		.byte	0x91
 4254 097a 74       		.sleb128 -12
 4255 097b 18       		.uleb128 0x18
 4256 097c B5030000 		.4byte	.LASF96
 4257 0980 01       		.byte	0x1
 4258 0981 7605     		.2byte	0x576
 4259 0983 34020000 		.4byte	0x234
 4260 0987 02       		.uleb128 0x2
 4261 0988 91       		.byte	0x91
 4262 0989 5C       		.sleb128 -36
 4263 098a 18       		.uleb128 0x18
 4264 098b 77070000 		.4byte	.LASF73
 4265 098f 01       		.byte	0x1
 4266 0990 7705     		.2byte	0x577
 4267 0992 DD030000 		.4byte	0x3dd
 4268 0996 02       		.uleb128 0x2
 4269 0997 91       		.byte	0x91
 4270 0998 6C       		.sleb128 -20
 4271 0999 18       		.uleb128 0x18
 4272 099a 9C060000 		.4byte	.LASF104
 4273 099e 01       		.byte	0x1
 4274 099f 7A05     		.2byte	0x57a
 4275 09a1 05010000 		.4byte	0x105
 4276 09a5 02       		.uleb128 0x2
 4277 09a6 91       		.byte	0x91
 4278 09a7 70       		.sleb128 -16
 4279 09a8 1D       		.uleb128 0x1d
 4280 09a9 1A000000 		.4byte	.LBB35
 4281 09ad 78000000 		.4byte	.LBE35-.LBB35
 4282 09b1 C5090000 		.4byte	0x9c5
 4283 09b5 18       		.uleb128 0x18
 4284 09b6 53060000 		.4byte	.LASF105
 4285 09ba 01       		.byte	0x1
 4286 09bb 9605     		.2byte	0x596
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 128
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 128
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 128
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 128
>>>>>>> parent of cb49844... test


 4287 09bd 57040000 		.4byte	0x457
 4288 09c1 02       		.uleb128 0x2
 4289 09c2 91       		.byte	0x91
 4290 09c3 68       		.sleb128 -24
 4291 09c4 00       		.byte	0
 4292 09c5 1B       		.uleb128 0x1b
 4293 09c6 6A010000 		.4byte	.LBB36
 4294 09ca 14000000 		.4byte	.LBE36-.LBB36
 4295 09ce 18       		.uleb128 0x18
 4296 09cf C8070000 		.4byte	.LASF106
 4297 09d3 01       		.byte	0x1
 4298 09d4 3306     		.2byte	0x633
 4299 09d6 10010000 		.4byte	0x110
 4300 09da 02       		.uleb128 0x2
 4301 09db 91       		.byte	0x91
 4302 09dc 64       		.sleb128 -28
 4303 09dd 00       		.byte	0
 4304 09de 00       		.byte	0
 4305 09df 16       		.uleb128 0x16
 4306 09e0 95030000 		.4byte	.LASF107
 4307 09e4 01       		.byte	0x1
 4308 09e5 4E06     		.2byte	0x64e
 4309 09e7 05010000 		.4byte	0x105
 4310 09eb 00000000 		.4byte	.LFB81
 4311 09ef 48010000 		.4byte	.LFE81-.LFB81
 4312 09f3 01       		.uleb128 0x1
 4313 09f4 9C       		.byte	0x9c
 4314 09f5 7C0A0000 		.4byte	0xa7c
 4315 09f9 17       		.uleb128 0x17
 4316 09fa 06030000 		.4byte	.LASF67
 4317 09fe 01       		.byte	0x1
 4318 09ff 4E06     		.2byte	0x64e
 4319 0a01 3F020000 		.4byte	0x23f
 4320 0a05 02       		.uleb128 0x2
 4321 0a06 91       		.byte	0x91
 4322 0a07 5C       		.sleb128 -36
 4323 0a08 17       		.uleb128 0x17
 4324 0a09 4A030000 		.4byte	.LASF102
 4325 0a0d 01       		.byte	0x1
 4326 0a0e 4E06     		.2byte	0x64e
 4327 0a10 2F090000 		.4byte	0x92f
 4328 0a14 02       		.uleb128 0x2
 4329 0a15 91       		.byte	0x91
 4330 0a16 58       		.sleb128 -40
 4331 0a17 17       		.uleb128 0x17
 4332 0a18 0F080000 		.4byte	.LASF87
 4333 0a1c 01       		.byte	0x1
 4334 0a1d 4E06     		.2byte	0x64e
 4335 0a1f 1B010000 		.4byte	0x11b
 4336 0a23 02       		.uleb128 0x2
 4337 0a24 91       		.byte	0x91
 4338 0a25 54       		.sleb128 -44
 4339 0a26 18       		.uleb128 0x18
 4340 0a27 A0030000 		.4byte	.LASF94
 4341 0a2b 01       		.byte	0x1
 4342 0a2c 5006     		.2byte	0x650
 4343 0a2e 05010000 		.4byte	0x105
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 129
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 129
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 129
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 129
>>>>>>> parent of cb49844... test


 4344 0a32 02       		.uleb128 0x2
 4345 0a33 91       		.byte	0x91
 4346 0a34 74       		.sleb128 -12
 4347 0a35 18       		.uleb128 0x18
 4348 0a36 B5030000 		.4byte	.LASF96
 4349 0a3a 01       		.byte	0x1
 4350 0a3b 5106     		.2byte	0x651
 4351 0a3d 34020000 		.4byte	0x234
 4352 0a41 02       		.uleb128 0x2
 4353 0a42 91       		.byte	0x91
 4354 0a43 60       		.sleb128 -32
 4355 0a44 18       		.uleb128 0x18
 4356 0a45 FA050000 		.4byte	.LASF108
 4357 0a49 01       		.byte	0x1
 4358 0a4a 5206     		.2byte	0x652
 4359 0a4c 69020000 		.4byte	0x269
 4360 0a50 02       		.uleb128 0x2
 4361 0a51 91       		.byte	0x91
 4362 0a52 68       		.sleb128 -24
 4363 0a53 18       		.uleb128 0x18
 4364 0a54 77070000 		.4byte	.LASF73
 4365 0a58 01       		.byte	0x1
 4366 0a59 5306     		.2byte	0x653
 4367 0a5b DD030000 		.4byte	0x3dd
 4368 0a5f 02       		.uleb128 0x2
 4369 0a60 91       		.byte	0x91
 4370 0a61 70       		.sleb128 -16
 4371 0a62 1B       		.uleb128 0x1b
 4372 0a63 18000000 		.4byte	.LBB37
 4373 0a67 72000000 		.4byte	.LBE37-.LBB37
 4374 0a6b 18       		.uleb128 0x18
 4375 0a6c 83030000 		.4byte	.LASF53
 4376 0a70 01       		.byte	0x1
 4377 0a71 6C06     		.2byte	0x66c
 4378 0a73 57040000 		.4byte	0x457
 4379 0a77 02       		.uleb128 0x2
 4380 0a78 91       		.byte	0x91
 4381 0a79 6C       		.sleb128 -20
 4382 0a7a 00       		.byte	0
 4383 0a7b 00       		.byte	0
 4384 0a7c 16       		.uleb128 0x16
 4385 0a7d 1E000000 		.4byte	.LASF109
 4386 0a81 01       		.byte	0x1
 4387 0a82 E406     		.2byte	0x6e4
 4388 0a84 05010000 		.4byte	0x105
 4389 0a88 00000000 		.4byte	.LFB82
 4390 0a8c AC000000 		.4byte	.LFE82-.LFB82
 4391 0a90 01       		.uleb128 0x1
 4392 0a91 9C       		.byte	0x9c
 4393 0a92 6F0B0000 		.4byte	0xb6f
 4394 0a96 17       		.uleb128 0x17
 4395 0a97 06030000 		.4byte	.LASF67
 4396 0a9b 01       		.byte	0x1
 4397 0a9c E406     		.2byte	0x6e4
 4398 0a9e 3F020000 		.4byte	0x23f
 4399 0aa2 02       		.uleb128 0x2
 4400 0aa3 91       		.byte	0x91
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 130
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 130
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 130
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 130
>>>>>>> parent of cb49844... test


 4401 0aa4 54       		.sleb128 -44
 4402 0aa5 17       		.uleb128 0x17
 4403 0aa6 4A030000 		.4byte	.LASF102
 4404 0aaa 01       		.byte	0x1
 4405 0aab E406     		.2byte	0x6e4
 4406 0aad 2F090000 		.4byte	0x92f
 4407 0ab1 02       		.uleb128 0x2
 4408 0ab2 91       		.byte	0x91
 4409 0ab3 50       		.sleb128 -48
 4410 0ab4 17       		.uleb128 0x17
 4411 0ab5 4A000000 		.4byte	.LASF98
 4412 0ab9 01       		.byte	0x1
 4413 0aba E406     		.2byte	0x6e4
 4414 0abc B3070000 		.4byte	0x7b3
 4415 0ac0 02       		.uleb128 0x2
 4416 0ac1 91       		.byte	0x91
 4417 0ac2 4C       		.sleb128 -52
 4418 0ac3 18       		.uleb128 0x18
 4419 0ac4 7F070000 		.4byte	.LASF84
 4420 0ac8 01       		.byte	0x1
 4421 0ac9 E606     		.2byte	0x6e6
 4422 0acb 05010000 		.4byte	0x105
 4423 0acf 02       		.uleb128 0x2
 4424 0ad0 91       		.byte	0x91
 4425 0ad1 74       		.sleb128 -12
 4426 0ad2 18       		.uleb128 0x18
 4427 0ad3 9C020000 		.4byte	.LASF99
 4428 0ad7 01       		.byte	0x1
 4429 0ad8 E706     		.2byte	0x6e7
 4430 0ada 10010000 		.4byte	0x110
 4431 0ade 02       		.uleb128 0x2
 4432 0adf 91       		.byte	0x91
 4433 0ae0 68       		.sleb128 -24
 4434 0ae1 18       		.uleb128 0x18
 4435 0ae2 77070000 		.4byte	.LASF73
 4436 0ae6 01       		.byte	0x1
 4437 0ae7 E806     		.2byte	0x6e8
 4438 0ae9 DD030000 		.4byte	0x3dd
 4439 0aed 02       		.uleb128 0x2
 4440 0aee 91       		.byte	0x91
 4441 0aef 70       		.sleb128 -16
 4442 0af0 1A       		.uleb128 0x1a
 4443 0af1 54030000 		.4byte	0x354
 4444 0af5 10000000 		.4byte	.LBB38
 4445 0af9 1A000000 		.4byte	.LBE38-.LBB38
 4446 0afd 01       		.byte	0x1
 4447 0afe FD06     		.2byte	0x6fd
 4448 0b00 1F0B0000 		.4byte	0xb1f
 4449 0b04 1B       		.uleb128 0x1b
 4450 0b05 10000000 		.4byte	.LBB39
 4451 0b09 1A000000 		.4byte	.LBE39-.LBB39
 4452 0b0d 1C       		.uleb128 0x1c
 4453 0b0e 64030000 		.4byte	0x364
 4454 0b12 02       		.uleb128 0x2
 4455 0b13 91       		.byte	0x91
 4456 0b14 5C       		.sleb128 -36
 4457 0b15 1C       		.uleb128 0x1c
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 131
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 131
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 131
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 131
>>>>>>> parent of cb49844... test


 4458 0b16 6F030000 		.4byte	0x36f
 4459 0b1a 02       		.uleb128 0x2
 4460 0b1b 91       		.byte	0x91
 4461 0b1c 58       		.sleb128 -40
 4462 0b1d 00       		.byte	0
 4463 0b1e 00       		.byte	0
 4464 0b1f 1D       		.uleb128 0x1d
 4465 0b20 2C000000 		.4byte	.LBB40
 4466 0b24 70000000 		.4byte	.LBE40-.LBB40
 4467 0b28 550B0000 		.4byte	0xb55
 4468 0b2c 18       		.uleb128 0x18
 4469 0b2d 83030000 		.4byte	.LASF53
 4470 0b31 01       		.byte	0x1
 4471 0b32 FF06     		.2byte	0x6ff
 4472 0b34 57040000 		.4byte	0x457
 4473 0b38 02       		.uleb128 0x2
 4474 0b39 91       		.byte	0x91
 4475 0b3a 64       		.sleb128 -28
 4476 0b3b 1B       		.uleb128 0x1b
 4477 0b3c 38000000 		.4byte	.LBB41
 4478 0b40 5A000000 		.4byte	.LBE41-.LBB41
 4479 0b44 18       		.uleb128 0x18
 4480 0b45 B7080000 		.4byte	.LASF56
 4481 0b49 01       		.byte	0x1
 4482 0b4a 0407     		.2byte	0x704
 4483 0b4c B8070000 		.4byte	0x7b8
 4484 0b50 02       		.uleb128 0x2
 4485 0b51 91       		.byte	0x91
 4486 0b52 63       		.sleb128 -29
 4487 0b53 00       		.byte	0
 4488 0b54 00       		.byte	0
 4489 0b55 1E       		.uleb128 0x1e
 4490 0b56 7B030000 		.4byte	0x37b
 4491 0b5a 9C000000 		.4byte	.LBB42
 4492 0b5e 06000000 		.4byte	.LBE42-.LBB42
 4493 0b62 01       		.byte	0x1
 4494 0b63 3907     		.2byte	0x739
 4495 0b65 1F       		.uleb128 0x1f
 4496 0b66 87030000 		.4byte	0x387
 4497 0b6a 02       		.uleb128 0x2
 4498 0b6b 91       		.byte	0x91
 4499 0b6c 6C       		.sleb128 -20
 4500 0b6d 00       		.byte	0
 4501 0b6e 00       		.byte	0
 4502 0b6f 16       		.uleb128 0x16
 4503 0b70 AA070000 		.4byte	.LASF110
 4504 0b74 01       		.byte	0x1
 4505 0b75 3F07     		.2byte	0x73f
 4506 0b77 05010000 		.4byte	0x105
 4507 0b7b 00000000 		.4byte	.LFB83
 4508 0b7f 64000000 		.4byte	.LFE83-.LFB83
 4509 0b83 01       		.uleb128 0x1
 4510 0b84 9C       		.byte	0x9c
 4511 0b85 2C0C0000 		.4byte	0xc2c
 4512 0b89 17       		.uleb128 0x17
 4513 0b8a 06030000 		.4byte	.LASF67
 4514 0b8e 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 132
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 132
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 132
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 132
>>>>>>> parent of cb49844... test


 4515 0b8f 3F07     		.2byte	0x73f
 4516 0b91 3F020000 		.4byte	0x23f
 4517 0b95 02       		.uleb128 0x2
 4518 0b96 91       		.byte	0x91
 4519 0b97 54       		.sleb128 -44
 4520 0b98 17       		.uleb128 0x17
 4521 0b99 4A030000 		.4byte	.LASF102
 4522 0b9d 01       		.byte	0x1
 4523 0b9e 3F07     		.2byte	0x73f
 4524 0ba0 2F090000 		.4byte	0x92f
 4525 0ba4 02       		.uleb128 0x2
 4526 0ba5 91       		.byte	0x91
 4527 0ba6 50       		.sleb128 -48
 4528 0ba7 18       		.uleb128 0x18
 4529 0ba8 7F070000 		.4byte	.LASF84
 4530 0bac 01       		.byte	0x1
 4531 0bad 4107     		.2byte	0x741
 4532 0baf 05010000 		.4byte	0x105
 4533 0bb3 02       		.uleb128 0x2
 4534 0bb4 91       		.byte	0x91
 4535 0bb5 74       		.sleb128 -12
 4536 0bb6 18       		.uleb128 0x18
 4537 0bb7 9C020000 		.4byte	.LASF99
 4538 0bbb 01       		.byte	0x1
 4539 0bbc 4207     		.2byte	0x742
 4540 0bbe 10010000 		.4byte	0x110
 4541 0bc2 02       		.uleb128 0x2
 4542 0bc3 91       		.byte	0x91
 4543 0bc4 68       		.sleb128 -24
 4544 0bc5 18       		.uleb128 0x18
 4545 0bc6 FA050000 		.4byte	.LASF108
 4546 0bca 01       		.byte	0x1
 4547 0bcb 4307     		.2byte	0x743
 4548 0bcd 69020000 		.4byte	0x269
 4549 0bd1 02       		.uleb128 0x2
 4550 0bd2 91       		.byte	0x91
 4551 0bd3 64       		.sleb128 -28
 4552 0bd4 18       		.uleb128 0x18
 4553 0bd5 77070000 		.4byte	.LASF73
 4554 0bd9 01       		.byte	0x1
 4555 0bda 4407     		.2byte	0x744
 4556 0bdc DD030000 		.4byte	0x3dd
 4557 0be0 02       		.uleb128 0x2
 4558 0be1 91       		.byte	0x91
 4559 0be2 70       		.sleb128 -16
 4560 0be3 1A       		.uleb128 0x1a
 4561 0be4 54030000 		.4byte	0x354
 4562 0be8 0E000000 		.4byte	.LBB44
 4563 0bec 1A000000 		.4byte	.LBE44-.LBB44
 4564 0bf0 01       		.byte	0x1
 4565 0bf1 5A07     		.2byte	0x75a
 4566 0bf3 120C0000 		.4byte	0xc12
 4567 0bf7 1B       		.uleb128 0x1b
 4568 0bf8 0E000000 		.4byte	.LBB45
 4569 0bfc 1A000000 		.4byte	.LBE45-.LBB45
 4570 0c00 1C       		.uleb128 0x1c
 4571 0c01 64030000 		.4byte	0x364
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 133
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 133
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 133
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 133
>>>>>>> parent of cb49844... test


 4572 0c05 02       		.uleb128 0x2
 4573 0c06 91       		.byte	0x91
 4574 0c07 60       		.sleb128 -32
 4575 0c08 1C       		.uleb128 0x1c
 4576 0c09 6F030000 		.4byte	0x36f
 4577 0c0d 02       		.uleb128 0x2
 4578 0c0e 91       		.byte	0x91
 4579 0c0f 5C       		.sleb128 -36
 4580 0c10 00       		.byte	0
 4581 0c11 00       		.byte	0
 4582 0c12 1E       		.uleb128 0x1e
 4583 0c13 7B030000 		.4byte	0x37b
 4584 0c17 54000000 		.4byte	.LBB46
 4585 0c1b 06000000 		.4byte	.LBE46-.LBB46
 4586 0c1f 01       		.byte	0x1
 4587 0c20 6F07     		.2byte	0x76f
 4588 0c22 1F       		.uleb128 0x1f
 4589 0c23 87030000 		.4byte	0x387
 4590 0c27 02       		.uleb128 0x2
 4591 0c28 91       		.byte	0x91
 4592 0c29 6C       		.sleb128 -20
 4593 0c2a 00       		.byte	0
 4594 0c2b 00       		.byte	0
 4595 0c2c 16       		.uleb128 0x16
 4596 0c2d 4F070000 		.4byte	.LASF111
 4597 0c31 01       		.byte	0x1
 4598 0c32 7507     		.2byte	0x775
 4599 0c34 10010000 		.4byte	0x110
 4600 0c38 00000000 		.4byte	.LFB84
 4601 0c3c 20000000 		.4byte	.LFE84-.LFB84
 4602 0c40 01       		.uleb128 0x1
 4603 0c41 9C       		.byte	0x9c
 4604 0c42 650C0000 		.4byte	0xc65
 4605 0c46 17       		.uleb128 0x17
 4606 0c47 06030000 		.4byte	.LASF67
 4607 0c4b 01       		.byte	0x1
 4608 0c4c 7507     		.2byte	0x775
 4609 0c4e 650C0000 		.4byte	0xc65
 4610 0c52 02       		.uleb128 0x2
 4611 0c53 91       		.byte	0x91
 4612 0c54 6C       		.sleb128 -20
 4613 0c55 18       		.uleb128 0x18
 4614 0c56 CE010000 		.4byte	.LASF112
 4615 0c5a 01       		.byte	0x1
 4616 0c5b 7707     		.2byte	0x777
 4617 0c5d 10010000 		.4byte	0x110
 4618 0c61 02       		.uleb128 0x2
 4619 0c62 91       		.byte	0x91
 4620 0c63 74       		.sleb128 -12
 4621 0c64 00       		.byte	0
 4622 0c65 07       		.uleb128 0x7
 4623 0c66 3F020000 		.4byte	0x23f
 4624 0c6a 16       		.uleb128 0x16
 4625 0c6b 75010000 		.4byte	.LASF113
 4626 0c6f 01       		.byte	0x1
 4627 0c70 8507     		.2byte	0x785
 4628 0c72 10010000 		.4byte	0x110
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 134
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 134
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 134
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 134
>>>>>>> parent of cb49844... test


 4629 0c76 00000000 		.4byte	.LFB85
 4630 0c7a 2A000000 		.4byte	.LFE85-.LFB85
 4631 0c7e 01       		.uleb128 0x1
 4632 0c7f 9C       		.byte	0x9c
 4633 0c80 B20C0000 		.4byte	0xcb2
 4634 0c84 17       		.uleb128 0x17
 4635 0c85 06030000 		.4byte	.LASF67
 4636 0c89 01       		.byte	0x1
 4637 0c8a 8507     		.2byte	0x785
 4638 0c8c 650C0000 		.4byte	0xc65
 4639 0c90 02       		.uleb128 0x2
 4640 0c91 91       		.byte	0x91
 4641 0c92 6C       		.sleb128 -20
 4642 0c93 18       		.uleb128 0x18
 4643 0c94 CE010000 		.4byte	.LASF112
 4644 0c98 01       		.byte	0x1
 4645 0c99 8707     		.2byte	0x787
 4646 0c9b 10010000 		.4byte	0x110
 4647 0c9f 02       		.uleb128 0x2
 4648 0ca0 91       		.byte	0x91
 4649 0ca1 70       		.sleb128 -16
 4650 0ca2 18       		.uleb128 0x18
 4651 0ca3 77070000 		.4byte	.LASF73
 4652 0ca7 01       		.byte	0x1
 4653 0ca8 8807     		.2byte	0x788
 4654 0caa D7030000 		.4byte	0x3d7
 4655 0cae 02       		.uleb128 0x2
 4656 0caf 91       		.byte	0x91
 4657 0cb0 74       		.sleb128 -12
 4658 0cb1 00       		.byte	0
 4659 0cb2 20       		.uleb128 0x20
 4660 0cb3 EC040000 		.4byte	.LASF114
 4661 0cb7 01       		.byte	0x1
 4662 0cb8 9707     		.2byte	0x797
 4663 0cba 10010000 		.4byte	0x110
 4664 0cbe 00000000 		.4byte	.LFB86
 4665 0cc2 1A000000 		.4byte	.LFE86-.LFB86
 4666 0cc6 01       		.uleb128 0x1
 4667 0cc7 9C       		.byte	0x9c
 4668 0cc8 EB0C0000 		.4byte	0xceb
 4669 0ccc 17       		.uleb128 0x17
 4670 0ccd 06030000 		.4byte	.LASF67
 4671 0cd1 01       		.byte	0x1
 4672 0cd2 9707     		.2byte	0x797
 4673 0cd4 650C0000 		.4byte	0xc65
 4674 0cd8 02       		.uleb128 0x2
 4675 0cd9 91       		.byte	0x91
 4676 0cda 6C       		.sleb128 -20
 4677 0cdb 18       		.uleb128 0x18
 4678 0cdc CE010000 		.4byte	.LASF112
 4679 0ce0 01       		.byte	0x1
 4680 0ce1 9907     		.2byte	0x799
 4681 0ce3 10010000 		.4byte	0x110
 4682 0ce7 02       		.uleb128 0x2
 4683 0ce8 91       		.byte	0x91
 4684 0ce9 74       		.sleb128 -12
 4685 0cea 00       		.byte	0
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 135
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 135
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 135
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 135
>>>>>>> parent of cb49844... test


 4686 0ceb 21       		.uleb128 0x21
 4687 0cec 6E020000 		.4byte	.LASF125
 4688 0cf0 01       		.byte	0x1
 4689 0cf1 A307     		.2byte	0x7a3
 4690 0cf3 00000000 		.4byte	.LFB87
 4691 0cf7 20000000 		.4byte	.LFE87-.LFB87
 4692 0cfb 01       		.uleb128 0x1
 4693 0cfc 9C       		.byte	0x9c
 4694 0cfd 200D0000 		.4byte	0xd20
 4695 0d01 17       		.uleb128 0x17
 4696 0d02 06030000 		.4byte	.LASF67
 4697 0d06 01       		.byte	0x1
 4698 0d07 A307     		.2byte	0x7a3
 4699 0d09 3F020000 		.4byte	0x23f
 4700 0d0d 02       		.uleb128 0x2
 4701 0d0e 91       		.byte	0x91
 4702 0d0f 6C       		.sleb128 -20
 4703 0d10 18       		.uleb128 0x18
 4704 0d11 77070000 		.4byte	.LASF73
 4705 0d15 01       		.byte	0x1
 4706 0d16 A507     		.2byte	0x7a5
 4707 0d18 DD030000 		.4byte	0x3dd
 4708 0d1c 02       		.uleb128 0x2
 4709 0d1d 91       		.byte	0x91
 4710 0d1e 74       		.sleb128 -12
 4711 0d1f 00       		.byte	0
 4712 0d20 22       		.uleb128 0x22
 4713 0d21 53030000 		.4byte	.LASF116
 4714 0d25 01       		.byte	0x1
 4715 0d26 ED07     		.2byte	0x7ed
 4716 0d28 10010000 		.4byte	0x110
 4717 0d2c 00000000 		.4byte	.LFB88
 4718 0d30 2E000000 		.4byte	.LFE88-.LFB88
 4719 0d34 01       		.uleb128 0x1
 4720 0d35 9C       		.byte	0x9c
 4721 0d36 590D0000 		.4byte	0xd59
 4722 0d3a 17       		.uleb128 0x17
 4723 0d3b 77070000 		.4byte	.LASF73
 4724 0d3f 01       		.byte	0x1
 4725 0d40 ED07     		.2byte	0x7ed
 4726 0d42 640D0000 		.4byte	0xd64
 4727 0d46 02       		.uleb128 0x2
 4728 0d47 91       		.byte	0x91
 4729 0d48 6C       		.sleb128 -20
 4730 0d49 18       		.uleb128 0x18
 4731 0d4a 11060000 		.4byte	.LASF115
 4732 0d4e 01       		.byte	0x1
 4733 0d4f EF07     		.2byte	0x7ef
 4734 0d51 10010000 		.4byte	0x110
 4735 0d55 02       		.uleb128 0x2
 4736 0d56 91       		.byte	0x91
 4737 0d57 74       		.sleb128 -12
 4738 0d58 00       		.byte	0
 4739 0d59 06       		.uleb128 0x6
 4740 0d5a 04       		.byte	0x4
 4741 0d5b 5F0D0000 		.4byte	0xd5f
 4742 0d5f 07       		.uleb128 0x7
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 136
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 136
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 136
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 136
>>>>>>> parent of cb49844... test


 4743 0d60 0E030000 		.4byte	0x30e
 4744 0d64 07       		.uleb128 0x7
 4745 0d65 590D0000 		.4byte	0xd59
 4746 0d69 23       		.uleb128 0x23
 4747 0d6a 11040000 		.4byte	.LASF117
 4748 0d6e 01       		.byte	0x1
 4749 0d6f 0608     		.2byte	0x806
 4750 0d71 05010000 		.4byte	0x105
 4751 0d75 00000000 		.4byte	.LFB89
 4752 0d79 D4000000 		.4byte	.LFE89-.LFB89
 4753 0d7d 01       		.uleb128 0x1
 4754 0d7e 9C       		.byte	0x9c
 4755 0d7f CF0D0000 		.4byte	0xdcf
 4756 0d83 17       		.uleb128 0x17
 4757 0d84 77070000 		.4byte	.LASF73
 4758 0d88 01       		.byte	0x1
 4759 0d89 0608     		.2byte	0x806
 4760 0d8b DD030000 		.4byte	0x3dd
 4761 0d8f 02       		.uleb128 0x2
 4762 0d90 91       		.byte	0x91
 4763 0d91 6C       		.sleb128 -20
 4764 0d92 17       		.uleb128 0x17
 4765 0d93 28070000 		.4byte	.LASF92
 4766 0d97 01       		.byte	0x1
 4767 0d98 0608     		.2byte	0x806
 4768 0d9a C4000000 		.4byte	0xc4
 4769 0d9e 02       		.uleb128 0x2
 4770 0d9f 91       		.byte	0x91
 4771 0da0 68       		.sleb128 -24
 4772 0da1 17       		.uleb128 0x17
 4773 0da2 AD080000 		.4byte	.LASF118
 4774 0da6 01       		.byte	0x1
 4775 0da7 0608     		.2byte	0x806
 4776 0da9 BF060000 		.4byte	0x6bf
 4777 0dad 02       		.uleb128 0x2
 4778 0dae 91       		.byte	0x91
 4779 0daf 64       		.sleb128 -28
 4780 0db0 18       		.uleb128 0x18
 4781 0db1 7F070000 		.4byte	.LASF84
 4782 0db5 01       		.byte	0x1
 4783 0db6 0808     		.2byte	0x808
 4784 0db8 05010000 		.4byte	0x105
 4785 0dbc 02       		.uleb128 0x2
 4786 0dbd 91       		.byte	0x91
 4787 0dbe 74       		.sleb128 -12
 4788 0dbf 18       		.uleb128 0x18
 4789 0dc0 83030000 		.4byte	.LASF53
 4790 0dc4 01       		.byte	0x1
 4791 0dc5 0908     		.2byte	0x809
 4792 0dc7 10010000 		.4byte	0x110
 4793 0dcb 02       		.uleb128 0x2
 4794 0dcc 91       		.byte	0x91
 4795 0dcd 70       		.sleb128 -16
 4796 0dce 00       		.byte	0
 4797 0dcf 19       		.uleb128 0x19
 4798 0dd0 FA070000 		.4byte	.LASF119
 4799 0dd4 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 137
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 137
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 137
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 137
>>>>>>> parent of cb49844... test


 4800 0dd5 5508     		.2byte	0x855
 4801 0dd7 00000000 		.4byte	.LFB90
 4802 0ddb 4C000000 		.4byte	.LFE90-.LFB90
 4803 0ddf 01       		.uleb128 0x1
 4804 0de0 9C       		.byte	0x9c
 4805 0de1 040E0000 		.4byte	0xe04
 4806 0de5 17       		.uleb128 0x17
 4807 0de6 77070000 		.4byte	.LASF73
 4808 0dea 01       		.byte	0x1
 4809 0deb 5508     		.2byte	0x855
 4810 0ded DD030000 		.4byte	0x3dd
 4811 0df1 02       		.uleb128 0x2
 4812 0df2 91       		.byte	0x91
 4813 0df3 74       		.sleb128 -12
 4814 0df4 17       		.uleb128 0x17
 4815 0df5 4A030000 		.4byte	.LASF102
 4816 0df9 01       		.byte	0x1
 4817 0dfa 5508     		.2byte	0x855
 4818 0dfc 2F090000 		.4byte	0x92f
 4819 0e00 02       		.uleb128 0x2
 4820 0e01 91       		.byte	0x91
 4821 0e02 70       		.sleb128 -16
 4822 0e03 00       		.byte	0
 4823 0e04 19       		.uleb128 0x19
 4824 0e05 44080000 		.4byte	.LASF120
 4825 0e09 01       		.byte	0x1
 4826 0e0a 6708     		.2byte	0x867
 4827 0e0c 00000000 		.4byte	.LFB91
 4828 0e10 A4000000 		.4byte	.LFE91-.LFB91
 4829 0e14 01       		.uleb128 0x1
 4830 0e15 9C       		.byte	0x9c
 4831 0e16 600E0000 		.4byte	0xe60
 4832 0e1a 17       		.uleb128 0x17
 4833 0e1b 77070000 		.4byte	.LASF73
 4834 0e1f 01       		.byte	0x1
 4835 0e20 6708     		.2byte	0x867
 4836 0e22 DD030000 		.4byte	0x3dd
 4837 0e26 02       		.uleb128 0x2
 4838 0e27 91       		.byte	0x91
 4839 0e28 6C       		.sleb128 -20
 4840 0e29 1D       		.uleb128 0x1d
 4841 0e2a 0C000000 		.4byte	.LBB48
 4842 0e2e 42000000 		.4byte	.LBE48-.LBB48
 4843 0e32 460E0000 		.4byte	0xe46
 4844 0e36 18       		.uleb128 0x18
 4845 0e37 8C010000 		.4byte	.LASF57
 4846 0e3b 01       		.byte	0x1
 4847 0e3c 7108     		.2byte	0x871
 4848 0e3e CB000000 		.4byte	0xcb
 4849 0e42 02       		.uleb128 0x2
 4850 0e43 91       		.byte	0x91
 4851 0e44 77       		.sleb128 -9
 4852 0e45 00       		.byte	0
 4853 0e46 1B       		.uleb128 0x1b
 4854 0e47 56000000 		.4byte	.LBB49
 4855 0e4b 42000000 		.4byte	.LBE49-.LBB49
 4856 0e4f 18       		.uleb128 0x18
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 138
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 138
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 138
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 138
>>>>>>> parent of cb49844... test


 4857 0e50 B7080000 		.4byte	.LASF56
 4858 0e54 01       		.byte	0x1
 4859 0e55 C208     		.2byte	0x8c2
 4860 0e57 CB000000 		.4byte	0xcb
 4861 0e5b 02       		.uleb128 0x2
 4862 0e5c 91       		.byte	0x91
 4863 0e5d 76       		.sleb128 -10
 4864 0e5e 00       		.byte	0
 4865 0e5f 00       		.byte	0
 4866 0e60 23       		.uleb128 0x23
 4867 0e61 3A030000 		.4byte	.LASF121
 4868 0e65 01       		.byte	0x1
 4869 0e66 DF08     		.2byte	0x8df
 4870 0e68 05010000 		.4byte	0x105
 4871 0e6c 00000000 		.4byte	.LFB92
 4872 0e70 2C000000 		.4byte	.LFE92-.LFB92
 4873 0e74 01       		.uleb128 0x1
 4874 0e75 9C       		.byte	0x9c
 4875 0e76 990E0000 		.4byte	0xe99
 4876 0e7a 17       		.uleb128 0x17
 4877 0e7b 77070000 		.4byte	.LASF73
 4878 0e7f 01       		.byte	0x1
 4879 0e80 DF08     		.2byte	0x8df
 4880 0e82 590D0000 		.4byte	0xd59
 4881 0e86 02       		.uleb128 0x2
 4882 0e87 91       		.byte	0x91
 4883 0e88 6C       		.sleb128 -20
 4884 0e89 18       		.uleb128 0x18
 4885 0e8a 7F070000 		.4byte	.LASF84
 4886 0e8e 01       		.byte	0x1
 4887 0e8f E108     		.2byte	0x8e1
 4888 0e91 05010000 		.4byte	0x105
 4889 0e95 02       		.uleb128 0x2
 4890 0e96 91       		.byte	0x91
 4891 0e97 74       		.sleb128 -12
 4892 0e98 00       		.byte	0
 4893 0e99 20       		.uleb128 0x20
 4894 0e9a 66080000 		.4byte	.LASF122
 4895 0e9e 01       		.byte	0x1
 4896 0e9f F408     		.2byte	0x8f4
 4897 0ea1 05010000 		.4byte	0x105
 4898 0ea5 00000000 		.4byte	.LFB93
 4899 0ea9 26000000 		.4byte	.LFE93-.LFB93
 4900 0ead 01       		.uleb128 0x1
 4901 0eae 9C       		.byte	0x9c
 4902 0eaf D20E0000 		.4byte	0xed2
 4903 0eb3 17       		.uleb128 0x17
 4904 0eb4 06030000 		.4byte	.LASF67
 4905 0eb8 01       		.byte	0x1
 4906 0eb9 F408     		.2byte	0x8f4
 4907 0ebb 650C0000 		.4byte	0xc65
 4908 0ebf 02       		.uleb128 0x2
 4909 0ec0 91       		.byte	0x91
 4910 0ec1 6C       		.sleb128 -20
 4911 0ec2 18       		.uleb128 0x18
 4912 0ec3 7F070000 		.4byte	.LASF84
 4913 0ec7 01       		.byte	0x1
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 139
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 139
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 139
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 139
>>>>>>> parent of cb49844... test


 4914 0ec8 F608     		.2byte	0x8f6
 4915 0eca 05010000 		.4byte	0x105
 4916 0ece 02       		.uleb128 0x2
 4917 0ecf 91       		.byte	0x91
 4918 0ed0 74       		.sleb128 -12
 4919 0ed1 00       		.byte	0
 4920 0ed2 23       		.uleb128 0x23
 4921 0ed3 6E040000 		.4byte	.LASF123
 4922 0ed7 01       		.byte	0x1
 4923 0ed8 0609     		.2byte	0x906
 4924 0eda 05010000 		.4byte	0x105
 4925 0ede 00000000 		.4byte	.LFB94
 4926 0ee2 30000000 		.4byte	.LFE94-.LFB94
 4927 0ee6 01       		.uleb128 0x1
 4928 0ee7 9C       		.byte	0x9c
 4929 0ee8 0B0F0000 		.4byte	0xf0b
 4930 0eec 17       		.uleb128 0x17
 4931 0eed 77070000 		.4byte	.LASF73
 4932 0ef1 01       		.byte	0x1
 4933 0ef2 0609     		.2byte	0x906
 4934 0ef4 590D0000 		.4byte	0xd59
 4935 0ef8 02       		.uleb128 0x2
 4936 0ef9 91       		.byte	0x91
 4937 0efa 6C       		.sleb128 -20
 4938 0efb 18       		.uleb128 0x18
 4939 0efc 7F070000 		.4byte	.LASF84
 4940 0f00 01       		.byte	0x1
 4941 0f01 0809     		.2byte	0x908
 4942 0f03 05010000 		.4byte	0x105
 4943 0f07 02       		.uleb128 0x2
 4944 0f08 91       		.byte	0x91
 4945 0f09 74       		.sleb128 -12
 4946 0f0a 00       		.byte	0
 4947 0f0b 20       		.uleb128 0x20
 4948 0f0c 36070000 		.4byte	.LASF124
 4949 0f10 01       		.byte	0x1
 4950 0f11 1B09     		.2byte	0x91b
 4951 0f13 05010000 		.4byte	0x105
 4952 0f17 00000000 		.4byte	.LFB95
 4953 0f1b 2A000000 		.4byte	.LFE95-.LFB95
 4954 0f1f 01       		.uleb128 0x1
 4955 0f20 9C       		.byte	0x9c
 4956 0f21 440F0000 		.4byte	0xf44
 4957 0f25 17       		.uleb128 0x17
 4958 0f26 06030000 		.4byte	.LASF67
 4959 0f2a 01       		.byte	0x1
 4960 0f2b 1B09     		.2byte	0x91b
 4961 0f2d 650C0000 		.4byte	0xc65
 4962 0f31 02       		.uleb128 0x2
 4963 0f32 91       		.byte	0x91
 4964 0f33 6C       		.sleb128 -20
 4965 0f34 18       		.uleb128 0x18
 4966 0f35 7F070000 		.4byte	.LASF84
 4967 0f39 01       		.byte	0x1
 4968 0f3a 1D09     		.2byte	0x91d
 4969 0f3c 05010000 		.4byte	0x105
 4970 0f40 02       		.uleb128 0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 140
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 140
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 140
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 140
>>>>>>> parent of cb49844... test


 4971 0f41 91       		.byte	0x91
 4972 0f42 74       		.sleb128 -12
 4973 0f43 00       		.byte	0
 4974 0f44 24       		.uleb128 0x24
 4975 0f45 C0050000 		.4byte	.LASF126
 4976 0f49 01       		.byte	0x1
 4977 0f4a 420A     		.2byte	0xa42
 4978 0f4c 00000000 		.4byte	.LFB96
 4979 0f50 50000000 		.4byte	.LFE96-.LFB96
 4980 0f54 01       		.uleb128 0x1
 4981 0f55 9C       		.byte	0x9c
 4982 0f56 870F0000 		.4byte	0xf87
 4983 0f5a 17       		.uleb128 0x17
 4984 0f5b 06030000 		.4byte	.LASF67
 4985 0f5f 01       		.byte	0x1
 4986 0f60 420A     		.2byte	0xa42
 4987 0f62 3F020000 		.4byte	0x23f
 4988 0f66 02       		.uleb128 0x2
 4989 0f67 91       		.byte	0x91
 4990 0f68 6C       		.sleb128 -20
 4991 0f69 17       		.uleb128 0x17
 4992 0f6a C6030000 		.4byte	.LASF61
 4993 0f6e 01       		.byte	0x1
 4994 0f6f 420A     		.2byte	0xa42
 4995 0f71 B9000000 		.4byte	0xb9
 4996 0f75 02       		.uleb128 0x2
 4997 0f76 91       		.byte	0x91
 4998 0f77 68       		.sleb128 -24
 4999 0f78 25       		.uleb128 0x25
 5000 0f79 757800   		.ascii	"ux\000"
 5001 0f7c 01       		.byte	0x1
 5002 0f7d 440A     		.2byte	0xa44
 5003 0f7f 10010000 		.4byte	0x110
 5004 0f83 02       		.uleb128 0x2
 5005 0f84 91       		.byte	0x91
 5006 0f85 74       		.sleb128 -12
 5007 0f86 00       		.byte	0
 5008 0f87 20       		.uleb128 0x20
 5009 0f88 CA060000 		.4byte	.LASF127
 5010 0f8c 01       		.byte	0x1
 5011 0f8d 5F0A     		.2byte	0xa5f
 5012 0f8f B9000000 		.4byte	0xb9
 5013 0f93 00000000 		.4byte	.LFB97
 5014 0f97 4C000000 		.4byte	.LFE97-.LFB97
 5015 0f9b 01       		.uleb128 0x1
 5016 0f9c 9C       		.byte	0x9c
 5017 0f9d CE0F0000 		.4byte	0xfce
 5018 0fa1 17       		.uleb128 0x17
 5019 0fa2 06030000 		.4byte	.LASF67
 5020 0fa6 01       		.byte	0x1
 5021 0fa7 5F0A     		.2byte	0xa5f
 5022 0fa9 3F020000 		.4byte	0x23f
 5023 0fad 02       		.uleb128 0x2
 5024 0fae 91       		.byte	0x91
 5025 0faf 6C       		.sleb128 -20
 5026 0fb0 25       		.uleb128 0x25
 5027 0fb1 757800   		.ascii	"ux\000"
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 141
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 141
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 141
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 141
>>>>>>> parent of cb49844... test


 5028 0fb4 01       		.byte	0x1
 5029 0fb5 610A     		.2byte	0xa61
 5030 0fb7 10010000 		.4byte	0x110
 5031 0fbb 02       		.uleb128 0x2
 5032 0fbc 91       		.byte	0x91
 5033 0fbd 74       		.sleb128 -12
 5034 0fbe 18       		.uleb128 0x18
 5035 0fbf D9060000 		.4byte	.LASF128
 5036 0fc3 01       		.byte	0x1
 5037 0fc4 620A     		.2byte	0xa62
 5038 0fc6 B9000000 		.4byte	0xb9
 5039 0fca 02       		.uleb128 0x2
 5040 0fcb 91       		.byte	0x91
 5041 0fcc 70       		.sleb128 -16
 5042 0fcd 00       		.byte	0
 5043 0fce 24       		.uleb128 0x24
 5044 0fcf 86020000 		.4byte	.LASF129
 5045 0fd3 01       		.byte	0x1
 5046 0fd4 7B0A     		.2byte	0xa7b
 5047 0fd6 00000000 		.4byte	.LFB98
 5048 0fda 50000000 		.4byte	.LFE98-.LFB98
 5049 0fde 01       		.uleb128 0x1
 5050 0fdf 9C       		.byte	0x9c
 5051 0fe0 02100000 		.4byte	0x1002
 5052 0fe4 17       		.uleb128 0x17
 5053 0fe5 06030000 		.4byte	.LASF67
 5054 0fe9 01       		.byte	0x1
 5055 0fea 7B0A     		.2byte	0xa7b
 5056 0fec 3F020000 		.4byte	0x23f
 5057 0ff0 02       		.uleb128 0x2
 5058 0ff1 91       		.byte	0x91
 5059 0ff2 6C       		.sleb128 -20
 5060 0ff3 25       		.uleb128 0x25
 5061 0ff4 757800   		.ascii	"ux\000"
 5062 0ff7 01       		.byte	0x1
 5063 0ff8 7D0A     		.2byte	0xa7d
 5064 0ffa 10010000 		.4byte	0x110
 5065 0ffe 02       		.uleb128 0x2
 5066 0fff 91       		.byte	0x91
 5067 1000 74       		.sleb128 -12
 5068 1001 00       		.byte	0
 5069 1002 26       		.uleb128 0x26
 5070 1003 09070000 		.4byte	.LASF130
 5071 1007 09       		.byte	0x9
 5072 1008 9606     		.2byte	0x696
 5073 100a 0E100000 		.4byte	0x100e
 5074 100e 0B       		.uleb128 0xb
 5075 100f E1000000 		.4byte	0xe1
 5076 1013 27       		.uleb128 0x27
 5077 1014 49030000 		.4byte	0x349
 5078 1018 23100000 		.4byte	0x1023
 5079 101c 28       		.uleb128 0x28
 5080 101d A9000000 		.4byte	0xa9
 5081 1021 09       		.byte	0x9
 5082 1022 00       		.byte	0
 5083 1023 29       		.uleb128 0x29
<<<<<<< HEAD
 5084 1024 25040000 		.4byte	.LASF131
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 142
=======
 5084 1024 A8040000 		.4byte	.LASF131
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 142
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 142
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 142
>>>>>>> parent of cb49844... test


 5085 1028 01       		.byte	0x1
 5086 1029 9A       		.byte	0x9a
 5087 102a 13100000 		.4byte	0x1013
 5088 102e 05       		.uleb128 0x5
 5089 102f 03       		.byte	0x3
 5090 1030 00000000 		.4byte	xQueueRegistry
 5091 1034 00       		.byte	0
 5092              		.section	.debug_abbrev,"",%progbits
 5093              	.Ldebug_abbrev0:
 5094 0000 01       		.uleb128 0x1
 5095 0001 11       		.uleb128 0x11
 5096 0002 01       		.byte	0x1
 5097 0003 25       		.uleb128 0x25
 5098 0004 0E       		.uleb128 0xe
 5099 0005 13       		.uleb128 0x13
 5100 0006 0B       		.uleb128 0xb
 5101 0007 03       		.uleb128 0x3
 5102 0008 0E       		.uleb128 0xe
 5103 0009 1B       		.uleb128 0x1b
 5104 000a 0E       		.uleb128 0xe
 5105 000b 55       		.uleb128 0x55
 5106 000c 17       		.uleb128 0x17
 5107 000d 11       		.uleb128 0x11
 5108 000e 01       		.uleb128 0x1
 5109 000f 10       		.uleb128 0x10
 5110 0010 17       		.uleb128 0x17
 5111 0011 00       		.byte	0
 5112 0012 00       		.byte	0
 5113 0013 02       		.uleb128 0x2
 5114 0014 16       		.uleb128 0x16
 5115 0015 00       		.byte	0
 5116 0016 03       		.uleb128 0x3
 5117 0017 0E       		.uleb128 0xe
 5118 0018 3A       		.uleb128 0x3a
 5119 0019 0B       		.uleb128 0xb
 5120 001a 3B       		.uleb128 0x3b
 5121 001b 0B       		.uleb128 0xb
 5122 001c 49       		.uleb128 0x49
 5123 001d 13       		.uleb128 0x13
 5124 001e 00       		.byte	0
 5125 001f 00       		.byte	0
 5126 0020 03       		.uleb128 0x3
 5127 0021 24       		.uleb128 0x24
 5128 0022 00       		.byte	0
 5129 0023 0B       		.uleb128 0xb
 5130 0024 0B       		.uleb128 0xb
 5131 0025 3E       		.uleb128 0x3e
 5132 0026 0B       		.uleb128 0xb
 5133 0027 03       		.uleb128 0x3
 5134 0028 0E       		.uleb128 0xe
 5135 0029 00       		.byte	0
 5136 002a 00       		.byte	0
 5137 002b 04       		.uleb128 0x4
 5138 002c 24       		.uleb128 0x24
 5139 002d 00       		.byte	0
 5140 002e 0B       		.uleb128 0xb
 5141 002f 0B       		.uleb128 0xb
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 143
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 143
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 143
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 143
>>>>>>> parent of cb49844... test


 5142 0030 3E       		.uleb128 0x3e
 5143 0031 0B       		.uleb128 0xb
 5144 0032 03       		.uleb128 0x3
 5145 0033 08       		.uleb128 0x8
 5146 0034 00       		.byte	0
 5147 0035 00       		.byte	0
 5148 0036 05       		.uleb128 0x5
 5149 0037 0F       		.uleb128 0xf
 5150 0038 00       		.byte	0
 5151 0039 0B       		.uleb128 0xb
 5152 003a 0B       		.uleb128 0xb
 5153 003b 00       		.byte	0
 5154 003c 00       		.byte	0
 5155 003d 06       		.uleb128 0x6
 5156 003e 0F       		.uleb128 0xf
 5157 003f 00       		.byte	0
 5158 0040 0B       		.uleb128 0xb
 5159 0041 0B       		.uleb128 0xb
 5160 0042 49       		.uleb128 0x49
 5161 0043 13       		.uleb128 0x13
 5162 0044 00       		.byte	0
 5163 0045 00       		.byte	0
 5164 0046 07       		.uleb128 0x7
 5165 0047 26       		.uleb128 0x26
 5166 0048 00       		.byte	0
 5167 0049 49       		.uleb128 0x49
 5168 004a 13       		.uleb128 0x13
 5169 004b 00       		.byte	0
 5170 004c 00       		.byte	0
 5171 004d 08       		.uleb128 0x8
 5172 004e 26       		.uleb128 0x26
 5173 004f 00       		.byte	0
 5174 0050 00       		.byte	0
 5175 0051 00       		.byte	0
 5176 0052 09       		.uleb128 0x9
 5177 0053 13       		.uleb128 0x13
 5178 0054 01       		.byte	0x1
 5179 0055 03       		.uleb128 0x3
 5180 0056 0E       		.uleb128 0xe
 5181 0057 0B       		.uleb128 0xb
 5182 0058 0B       		.uleb128 0xb
 5183 0059 3A       		.uleb128 0x3a
 5184 005a 0B       		.uleb128 0xb
 5185 005b 3B       		.uleb128 0x3b
 5186 005c 0B       		.uleb128 0xb
 5187 005d 01       		.uleb128 0x1
 5188 005e 13       		.uleb128 0x13
 5189 005f 00       		.byte	0
 5190 0060 00       		.byte	0
 5191 0061 0A       		.uleb128 0xa
 5192 0062 0D       		.uleb128 0xd
 5193 0063 00       		.byte	0
 5194 0064 03       		.uleb128 0x3
 5195 0065 0E       		.uleb128 0xe
 5196 0066 3A       		.uleb128 0x3a
 5197 0067 0B       		.uleb128 0xb
 5198 0068 3B       		.uleb128 0x3b
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 144
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 144
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 144
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 144
>>>>>>> parent of cb49844... test


 5199 0069 0B       		.uleb128 0xb
 5200 006a 49       		.uleb128 0x49
 5201 006b 13       		.uleb128 0x13
 5202 006c 38       		.uleb128 0x38
 5203 006d 0B       		.uleb128 0xb
 5204 006e 00       		.byte	0
 5205 006f 00       		.byte	0
 5206 0070 0B       		.uleb128 0xb
 5207 0071 35       		.uleb128 0x35
 5208 0072 00       		.byte	0
 5209 0073 49       		.uleb128 0x49
 5210 0074 13       		.uleb128 0x13
 5211 0075 00       		.byte	0
 5212 0076 00       		.byte	0
 5213 0077 0C       		.uleb128 0xc
 5214 0078 17       		.uleb128 0x17
 5215 0079 01       		.byte	0x1
 5216 007a 0B       		.uleb128 0xb
 5217 007b 0B       		.uleb128 0xb
 5218 007c 3A       		.uleb128 0x3a
 5219 007d 0B       		.uleb128 0xb
 5220 007e 3B       		.uleb128 0x3b
 5221 007f 0B       		.uleb128 0xb
 5222 0080 01       		.uleb128 0x1
 5223 0081 13       		.uleb128 0x13
 5224 0082 00       		.byte	0
 5225 0083 00       		.byte	0
 5226 0084 0D       		.uleb128 0xd
 5227 0085 0D       		.uleb128 0xd
 5228 0086 00       		.byte	0
 5229 0087 03       		.uleb128 0x3
 5230 0088 0E       		.uleb128 0xe
 5231 0089 3A       		.uleb128 0x3a
 5232 008a 0B       		.uleb128 0xb
 5233 008b 3B       		.uleb128 0x3b
 5234 008c 0B       		.uleb128 0xb
 5235 008d 49       		.uleb128 0x49
 5236 008e 13       		.uleb128 0x13
 5237 008f 00       		.byte	0
 5238 0090 00       		.byte	0
 5239 0091 0E       		.uleb128 0xe
 5240 0092 0D       		.uleb128 0xd
 5241 0093 00       		.byte	0
 5242 0094 03       		.uleb128 0x3
 5243 0095 08       		.uleb128 0x8
 5244 0096 3A       		.uleb128 0x3a
 5245 0097 0B       		.uleb128 0xb
 5246 0098 3B       		.uleb128 0x3b
 5247 0099 0B       		.uleb128 0xb
 5248 009a 49       		.uleb128 0x49
 5249 009b 13       		.uleb128 0x13
 5250 009c 38       		.uleb128 0x38
 5251 009d 0B       		.uleb128 0xb
 5252 009e 00       		.byte	0
 5253 009f 00       		.byte	0
 5254 00a0 0F       		.uleb128 0xf
 5255 00a1 2E       		.uleb128 0x2e
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 145
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 145
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 145
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 145
>>>>>>> parent of cb49844... test


 5256 00a2 01       		.byte	0x1
 5257 00a3 03       		.uleb128 0x3
 5258 00a4 0E       		.uleb128 0xe
 5259 00a5 3A       		.uleb128 0x3a
 5260 00a6 0B       		.uleb128 0xb
 5261 00a7 3B       		.uleb128 0x3b
 5262 00a8 0B       		.uleb128 0xb
 5263 00a9 27       		.uleb128 0x27
 5264 00aa 19       		.uleb128 0x19
 5265 00ab 49       		.uleb128 0x49
 5266 00ac 13       		.uleb128 0x13
 5267 00ad 20       		.uleb128 0x20
 5268 00ae 0B       		.uleb128 0xb
 5269 00af 01       		.uleb128 0x1
 5270 00b0 13       		.uleb128 0x13
 5271 00b1 00       		.byte	0
 5272 00b2 00       		.byte	0
 5273 00b3 10       		.uleb128 0x10
 5274 00b4 34       		.uleb128 0x34
 5275 00b5 00       		.byte	0
 5276 00b6 03       		.uleb128 0x3
 5277 00b7 0E       		.uleb128 0xe
 5278 00b8 3A       		.uleb128 0x3a
 5279 00b9 0B       		.uleb128 0xb
 5280 00ba 3B       		.uleb128 0x3b
 5281 00bb 0B       		.uleb128 0xb
 5282 00bc 49       		.uleb128 0x49
 5283 00bd 13       		.uleb128 0x13
 5284 00be 00       		.byte	0
 5285 00bf 00       		.byte	0
 5286 00c0 11       		.uleb128 0x11
 5287 00c1 2E       		.uleb128 0x2e
 5288 00c2 01       		.byte	0x1
 5289 00c3 03       		.uleb128 0x3
 5290 00c4 0E       		.uleb128 0xe
 5291 00c5 3A       		.uleb128 0x3a
 5292 00c6 0B       		.uleb128 0xb
 5293 00c7 3B       		.uleb128 0x3b
 5294 00c8 0B       		.uleb128 0xb
 5295 00c9 27       		.uleb128 0x27
 5296 00ca 19       		.uleb128 0x19
 5297 00cb 20       		.uleb128 0x20
 5298 00cc 0B       		.uleb128 0xb
 5299 00cd 01       		.uleb128 0x1
 5300 00ce 13       		.uleb128 0x13
 5301 00cf 00       		.byte	0
 5302 00d0 00       		.byte	0
 5303 00d1 12       		.uleb128 0x12
 5304 00d2 05       		.uleb128 0x5
 5305 00d3 00       		.byte	0
 5306 00d4 03       		.uleb128 0x3
 5307 00d5 0E       		.uleb128 0xe
 5308 00d6 3A       		.uleb128 0x3a
 5309 00d7 0B       		.uleb128 0xb
 5310 00d8 3B       		.uleb128 0x3b
 5311 00d9 0B       		.uleb128 0xb
 5312 00da 49       		.uleb128 0x49
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 146
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 146
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 146
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 146
>>>>>>> parent of cb49844... test


 5313 00db 13       		.uleb128 0x13
 5314 00dc 00       		.byte	0
 5315 00dd 00       		.byte	0
 5316 00de 13       		.uleb128 0x13
 5317 00df 2E       		.uleb128 0x2e
 5318 00e0 01       		.byte	0x1
 5319 00e1 3F       		.uleb128 0x3f
 5320 00e2 19       		.uleb128 0x19
 5321 00e3 03       		.uleb128 0x3
 5322 00e4 0E       		.uleb128 0xe
 5323 00e5 3A       		.uleb128 0x3a
 5324 00e6 0B       		.uleb128 0xb
 5325 00e7 3B       		.uleb128 0x3b
 5326 00e8 0B       		.uleb128 0xb
 5327 00e9 27       		.uleb128 0x27
 5328 00ea 19       		.uleb128 0x19
 5329 00eb 49       		.uleb128 0x49
 5330 00ec 13       		.uleb128 0x13
 5331 00ed 11       		.uleb128 0x11
 5332 00ee 01       		.uleb128 0x1
 5333 00ef 12       		.uleb128 0x12
 5334 00f0 06       		.uleb128 0x6
 5335 00f1 40       		.uleb128 0x40
 5336 00f2 18       		.uleb128 0x18
 5337 00f3 9642     		.uleb128 0x2116
 5338 00f5 19       		.uleb128 0x19
 5339 00f6 01       		.uleb128 0x1
 5340 00f7 13       		.uleb128 0x13
 5341 00f8 00       		.byte	0
 5342 00f9 00       		.byte	0
 5343 00fa 14       		.uleb128 0x14
 5344 00fb 05       		.uleb128 0x5
 5345 00fc 00       		.byte	0
 5346 00fd 03       		.uleb128 0x3
 5347 00fe 0E       		.uleb128 0xe
 5348 00ff 3A       		.uleb128 0x3a
 5349 0100 0B       		.uleb128 0xb
 5350 0101 3B       		.uleb128 0x3b
 5351 0102 0B       		.uleb128 0xb
 5352 0103 49       		.uleb128 0x49
 5353 0104 13       		.uleb128 0x13
 5354 0105 02       		.uleb128 0x2
 5355 0106 18       		.uleb128 0x18
 5356 0107 00       		.byte	0
 5357 0108 00       		.byte	0
 5358 0109 15       		.uleb128 0x15
 5359 010a 34       		.uleb128 0x34
 5360 010b 00       		.byte	0
 5361 010c 03       		.uleb128 0x3
 5362 010d 0E       		.uleb128 0xe
 5363 010e 3A       		.uleb128 0x3a
 5364 010f 0B       		.uleb128 0xb
 5365 0110 3B       		.uleb128 0x3b
 5366 0111 0B       		.uleb128 0xb
 5367 0112 49       		.uleb128 0x49
 5368 0113 13       		.uleb128 0x13
 5369 0114 02       		.uleb128 0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 147
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 147
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 147
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 147
>>>>>>> parent of cb49844... test


 5370 0115 18       		.uleb128 0x18
 5371 0116 00       		.byte	0
 5372 0117 00       		.byte	0
 5373 0118 16       		.uleb128 0x16
 5374 0119 2E       		.uleb128 0x2e
 5375 011a 01       		.byte	0x1
 5376 011b 3F       		.uleb128 0x3f
 5377 011c 19       		.uleb128 0x19
 5378 011d 03       		.uleb128 0x3
 5379 011e 0E       		.uleb128 0xe
 5380 011f 3A       		.uleb128 0x3a
 5381 0120 0B       		.uleb128 0xb
 5382 0121 3B       		.uleb128 0x3b
 5383 0122 05       		.uleb128 0x5
 5384 0123 27       		.uleb128 0x27
 5385 0124 19       		.uleb128 0x19
 5386 0125 49       		.uleb128 0x49
 5387 0126 13       		.uleb128 0x13
 5388 0127 11       		.uleb128 0x11
 5389 0128 01       		.uleb128 0x1
 5390 0129 12       		.uleb128 0x12
 5391 012a 06       		.uleb128 0x6
 5392 012b 40       		.uleb128 0x40
 5393 012c 18       		.uleb128 0x18
 5394 012d 9642     		.uleb128 0x2116
 5395 012f 19       		.uleb128 0x19
 5396 0130 01       		.uleb128 0x1
 5397 0131 13       		.uleb128 0x13
 5398 0132 00       		.byte	0
 5399 0133 00       		.byte	0
 5400 0134 17       		.uleb128 0x17
 5401 0135 05       		.uleb128 0x5
 5402 0136 00       		.byte	0
 5403 0137 03       		.uleb128 0x3
 5404 0138 0E       		.uleb128 0xe
 5405 0139 3A       		.uleb128 0x3a
 5406 013a 0B       		.uleb128 0xb
 5407 013b 3B       		.uleb128 0x3b
 5408 013c 05       		.uleb128 0x5
 5409 013d 49       		.uleb128 0x49
 5410 013e 13       		.uleb128 0x13
 5411 013f 02       		.uleb128 0x2
 5412 0140 18       		.uleb128 0x18
 5413 0141 00       		.byte	0
 5414 0142 00       		.byte	0
 5415 0143 18       		.uleb128 0x18
 5416 0144 34       		.uleb128 0x34
 5417 0145 00       		.byte	0
 5418 0146 03       		.uleb128 0x3
 5419 0147 0E       		.uleb128 0xe
 5420 0148 3A       		.uleb128 0x3a
 5421 0149 0B       		.uleb128 0xb
 5422 014a 3B       		.uleb128 0x3b
 5423 014b 05       		.uleb128 0x5
 5424 014c 49       		.uleb128 0x49
 5425 014d 13       		.uleb128 0x13
 5426 014e 02       		.uleb128 0x2
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 148
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 148
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 148
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 148
>>>>>>> parent of cb49844... test


 5427 014f 18       		.uleb128 0x18
 5428 0150 00       		.byte	0
 5429 0151 00       		.byte	0
 5430 0152 19       		.uleb128 0x19
 5431 0153 2E       		.uleb128 0x2e
 5432 0154 01       		.byte	0x1
 5433 0155 03       		.uleb128 0x3
 5434 0156 0E       		.uleb128 0xe
 5435 0157 3A       		.uleb128 0x3a
 5436 0158 0B       		.uleb128 0xb
 5437 0159 3B       		.uleb128 0x3b
 5438 015a 05       		.uleb128 0x5
 5439 015b 27       		.uleb128 0x27
 5440 015c 19       		.uleb128 0x19
 5441 015d 11       		.uleb128 0x11
 5442 015e 01       		.uleb128 0x1
 5443 015f 12       		.uleb128 0x12
 5444 0160 06       		.uleb128 0x6
 5445 0161 40       		.uleb128 0x40
 5446 0162 18       		.uleb128 0x18
 5447 0163 9642     		.uleb128 0x2116
 5448 0165 19       		.uleb128 0x19
 5449 0166 01       		.uleb128 0x1
 5450 0167 13       		.uleb128 0x13
 5451 0168 00       		.byte	0
 5452 0169 00       		.byte	0
 5453 016a 1A       		.uleb128 0x1a
 5454 016b 1D       		.uleb128 0x1d
 5455 016c 01       		.byte	0x1
 5456 016d 31       		.uleb128 0x31
 5457 016e 13       		.uleb128 0x13
 5458 016f 11       		.uleb128 0x11
 5459 0170 01       		.uleb128 0x1
 5460 0171 12       		.uleb128 0x12
 5461 0172 06       		.uleb128 0x6
 5462 0173 58       		.uleb128 0x58
 5463 0174 0B       		.uleb128 0xb
 5464 0175 59       		.uleb128 0x59
 5465 0176 05       		.uleb128 0x5
 5466 0177 01       		.uleb128 0x1
 5467 0178 13       		.uleb128 0x13
 5468 0179 00       		.byte	0
 5469 017a 00       		.byte	0
 5470 017b 1B       		.uleb128 0x1b
 5471 017c 0B       		.uleb128 0xb
 5472 017d 01       		.byte	0x1
 5473 017e 11       		.uleb128 0x11
 5474 017f 01       		.uleb128 0x1
 5475 0180 12       		.uleb128 0x12
 5476 0181 06       		.uleb128 0x6
 5477 0182 00       		.byte	0
 5478 0183 00       		.byte	0
 5479 0184 1C       		.uleb128 0x1c
 5480 0185 34       		.uleb128 0x34
 5481 0186 00       		.byte	0
 5482 0187 31       		.uleb128 0x31
 5483 0188 13       		.uleb128 0x13
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 149
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 149
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 149
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 149
>>>>>>> parent of cb49844... test


 5484 0189 02       		.uleb128 0x2
 5485 018a 18       		.uleb128 0x18
 5486 018b 00       		.byte	0
 5487 018c 00       		.byte	0
 5488 018d 1D       		.uleb128 0x1d
 5489 018e 0B       		.uleb128 0xb
 5490 018f 01       		.byte	0x1
 5491 0190 11       		.uleb128 0x11
 5492 0191 01       		.uleb128 0x1
 5493 0192 12       		.uleb128 0x12
 5494 0193 06       		.uleb128 0x6
 5495 0194 01       		.uleb128 0x1
 5496 0195 13       		.uleb128 0x13
 5497 0196 00       		.byte	0
 5498 0197 00       		.byte	0
 5499 0198 1E       		.uleb128 0x1e
 5500 0199 1D       		.uleb128 0x1d
 5501 019a 01       		.byte	0x1
 5502 019b 31       		.uleb128 0x31
 5503 019c 13       		.uleb128 0x13
 5504 019d 11       		.uleb128 0x11
 5505 019e 01       		.uleb128 0x1
 5506 019f 12       		.uleb128 0x12
 5507 01a0 06       		.uleb128 0x6
 5508 01a1 58       		.uleb128 0x58
 5509 01a2 0B       		.uleb128 0xb
 5510 01a3 59       		.uleb128 0x59
 5511 01a4 05       		.uleb128 0x5
 5512 01a5 00       		.byte	0
 5513 01a6 00       		.byte	0
 5514 01a7 1F       		.uleb128 0x1f
 5515 01a8 05       		.uleb128 0x5
 5516 01a9 00       		.byte	0
 5517 01aa 31       		.uleb128 0x31
 5518 01ab 13       		.uleb128 0x13
 5519 01ac 02       		.uleb128 0x2
 5520 01ad 18       		.uleb128 0x18
 5521 01ae 00       		.byte	0
 5522 01af 00       		.byte	0
 5523 01b0 20       		.uleb128 0x20
 5524 01b1 2E       		.uleb128 0x2e
 5525 01b2 01       		.byte	0x1
 5526 01b3 3F       		.uleb128 0x3f
 5527 01b4 19       		.uleb128 0x19
 5528 01b5 03       		.uleb128 0x3
 5529 01b6 0E       		.uleb128 0xe
 5530 01b7 3A       		.uleb128 0x3a
 5531 01b8 0B       		.uleb128 0xb
 5532 01b9 3B       		.uleb128 0x3b
 5533 01ba 05       		.uleb128 0x5
 5534 01bb 27       		.uleb128 0x27
 5535 01bc 19       		.uleb128 0x19
 5536 01bd 49       		.uleb128 0x49
 5537 01be 13       		.uleb128 0x13
 5538 01bf 11       		.uleb128 0x11
 5539 01c0 01       		.uleb128 0x1
 5540 01c1 12       		.uleb128 0x12
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 150
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 150
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 150
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 150
>>>>>>> parent of cb49844... test


 5541 01c2 06       		.uleb128 0x6
 5542 01c3 40       		.uleb128 0x40
 5543 01c4 18       		.uleb128 0x18
 5544 01c5 9742     		.uleb128 0x2117
 5545 01c7 19       		.uleb128 0x19
 5546 01c8 01       		.uleb128 0x1
 5547 01c9 13       		.uleb128 0x13
 5548 01ca 00       		.byte	0
 5549 01cb 00       		.byte	0
 5550 01cc 21       		.uleb128 0x21
 5551 01cd 2E       		.uleb128 0x2e
 5552 01ce 01       		.byte	0x1
 5553 01cf 3F       		.uleb128 0x3f
 5554 01d0 19       		.uleb128 0x19
 5555 01d1 03       		.uleb128 0x3
 5556 01d2 0E       		.uleb128 0xe
 5557 01d3 3A       		.uleb128 0x3a
 5558 01d4 0B       		.uleb128 0xb
 5559 01d5 3B       		.uleb128 0x3b
 5560 01d6 05       		.uleb128 0x5
 5561 01d7 27       		.uleb128 0x27
 5562 01d8 19       		.uleb128 0x19
 5563 01d9 11       		.uleb128 0x11
 5564 01da 01       		.uleb128 0x1
 5565 01db 12       		.uleb128 0x12
 5566 01dc 06       		.uleb128 0x6
 5567 01dd 40       		.uleb128 0x40
 5568 01de 18       		.uleb128 0x18
 5569 01df 9642     		.uleb128 0x2116
 5570 01e1 19       		.uleb128 0x19
 5571 01e2 01       		.uleb128 0x1
 5572 01e3 13       		.uleb128 0x13
 5573 01e4 00       		.byte	0
 5574 01e5 00       		.byte	0
 5575 01e6 22       		.uleb128 0x22
 5576 01e7 2E       		.uleb128 0x2e
 5577 01e8 01       		.byte	0x1
 5578 01e9 03       		.uleb128 0x3
 5579 01ea 0E       		.uleb128 0xe
 5580 01eb 3A       		.uleb128 0x3a
 5581 01ec 0B       		.uleb128 0xb
 5582 01ed 3B       		.uleb128 0x3b
 5583 01ee 05       		.uleb128 0x5
 5584 01ef 27       		.uleb128 0x27
 5585 01f0 19       		.uleb128 0x19
 5586 01f1 49       		.uleb128 0x49
 5587 01f2 13       		.uleb128 0x13
 5588 01f3 11       		.uleb128 0x11
 5589 01f4 01       		.uleb128 0x1
 5590 01f5 12       		.uleb128 0x12
 5591 01f6 06       		.uleb128 0x6
 5592 01f7 40       		.uleb128 0x40
 5593 01f8 18       		.uleb128 0x18
 5594 01f9 9742     		.uleb128 0x2117
 5595 01fb 19       		.uleb128 0x19
 5596 01fc 01       		.uleb128 0x1
 5597 01fd 13       		.uleb128 0x13
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 151
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 151
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 151
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 151
>>>>>>> parent of cb49844... test


 5598 01fe 00       		.byte	0
 5599 01ff 00       		.byte	0
 5600 0200 23       		.uleb128 0x23
 5601 0201 2E       		.uleb128 0x2e
 5602 0202 01       		.byte	0x1
 5603 0203 03       		.uleb128 0x3
 5604 0204 0E       		.uleb128 0xe
 5605 0205 3A       		.uleb128 0x3a
 5606 0206 0B       		.uleb128 0xb
 5607 0207 3B       		.uleb128 0x3b
 5608 0208 05       		.uleb128 0x5
 5609 0209 27       		.uleb128 0x27
 5610 020a 19       		.uleb128 0x19
 5611 020b 49       		.uleb128 0x49
 5612 020c 13       		.uleb128 0x13
 5613 020d 11       		.uleb128 0x11
 5614 020e 01       		.uleb128 0x1
 5615 020f 12       		.uleb128 0x12
 5616 0210 06       		.uleb128 0x6
 5617 0211 40       		.uleb128 0x40
 5618 0212 18       		.uleb128 0x18
 5619 0213 9642     		.uleb128 0x2116
 5620 0215 19       		.uleb128 0x19
 5621 0216 01       		.uleb128 0x1
 5622 0217 13       		.uleb128 0x13
 5623 0218 00       		.byte	0
 5624 0219 00       		.byte	0
 5625 021a 24       		.uleb128 0x24
 5626 021b 2E       		.uleb128 0x2e
 5627 021c 01       		.byte	0x1
 5628 021d 3F       		.uleb128 0x3f
 5629 021e 19       		.uleb128 0x19
 5630 021f 03       		.uleb128 0x3
 5631 0220 0E       		.uleb128 0xe
 5632 0221 3A       		.uleb128 0x3a
 5633 0222 0B       		.uleb128 0xb
 5634 0223 3B       		.uleb128 0x3b
 5635 0224 05       		.uleb128 0x5
 5636 0225 27       		.uleb128 0x27
 5637 0226 19       		.uleb128 0x19
 5638 0227 11       		.uleb128 0x11
 5639 0228 01       		.uleb128 0x1
 5640 0229 12       		.uleb128 0x12
 5641 022a 06       		.uleb128 0x6
 5642 022b 40       		.uleb128 0x40
 5643 022c 18       		.uleb128 0x18
 5644 022d 9742     		.uleb128 0x2117
 5645 022f 19       		.uleb128 0x19
 5646 0230 01       		.uleb128 0x1
 5647 0231 13       		.uleb128 0x13
 5648 0232 00       		.byte	0
 5649 0233 00       		.byte	0
 5650 0234 25       		.uleb128 0x25
 5651 0235 34       		.uleb128 0x34
 5652 0236 00       		.byte	0
 5653 0237 03       		.uleb128 0x3
 5654 0238 08       		.uleb128 0x8
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 152
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 152
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 152
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 152
>>>>>>> parent of cb49844... test


 5655 0239 3A       		.uleb128 0x3a
 5656 023a 0B       		.uleb128 0xb
 5657 023b 3B       		.uleb128 0x3b
 5658 023c 05       		.uleb128 0x5
 5659 023d 49       		.uleb128 0x49
 5660 023e 13       		.uleb128 0x13
 5661 023f 02       		.uleb128 0x2
 5662 0240 18       		.uleb128 0x18
 5663 0241 00       		.byte	0
 5664 0242 00       		.byte	0
 5665 0243 26       		.uleb128 0x26
 5666 0244 34       		.uleb128 0x34
 5667 0245 00       		.byte	0
 5668 0246 03       		.uleb128 0x3
 5669 0247 0E       		.uleb128 0xe
 5670 0248 3A       		.uleb128 0x3a
 5671 0249 0B       		.uleb128 0xb
 5672 024a 3B       		.uleb128 0x3b
 5673 024b 05       		.uleb128 0x5
 5674 024c 49       		.uleb128 0x49
 5675 024d 13       		.uleb128 0x13
 5676 024e 3F       		.uleb128 0x3f
 5677 024f 19       		.uleb128 0x19
 5678 0250 3C       		.uleb128 0x3c
 5679 0251 19       		.uleb128 0x19
 5680 0252 00       		.byte	0
 5681 0253 00       		.byte	0
 5682 0254 27       		.uleb128 0x27
 5683 0255 01       		.uleb128 0x1
 5684 0256 01       		.byte	0x1
 5685 0257 49       		.uleb128 0x49
 5686 0258 13       		.uleb128 0x13
 5687 0259 01       		.uleb128 0x1
 5688 025a 13       		.uleb128 0x13
 5689 025b 00       		.byte	0
 5690 025c 00       		.byte	0
 5691 025d 28       		.uleb128 0x28
 5692 025e 21       		.uleb128 0x21
 5693 025f 00       		.byte	0
 5694 0260 49       		.uleb128 0x49
 5695 0261 13       		.uleb128 0x13
 5696 0262 2F       		.uleb128 0x2f
 5697 0263 0B       		.uleb128 0xb
 5698 0264 00       		.byte	0
 5699 0265 00       		.byte	0
 5700 0266 29       		.uleb128 0x29
 5701 0267 34       		.uleb128 0x34
 5702 0268 00       		.byte	0
 5703 0269 03       		.uleb128 0x3
 5704 026a 0E       		.uleb128 0xe
 5705 026b 3A       		.uleb128 0x3a
 5706 026c 0B       		.uleb128 0xb
 5707 026d 3B       		.uleb128 0x3b
 5708 026e 0B       		.uleb128 0xb
 5709 026f 49       		.uleb128 0x49
 5710 0270 13       		.uleb128 0x13
 5711 0271 3F       		.uleb128 0x3f
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 153
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 153
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 153
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 153
>>>>>>> parent of cb49844... test


 5712 0272 19       		.uleb128 0x19
 5713 0273 02       		.uleb128 0x2
 5714 0274 18       		.uleb128 0x18
 5715 0275 00       		.byte	0
 5716 0276 00       		.byte	0
 5717 0277 00       		.byte	0
 5718              		.section	.debug_aranges,"",%progbits
 5719 0000 0C010000 		.4byte	0x10c
 5720 0004 0200     		.2byte	0x2
 5721 0006 00000000 		.4byte	.Ldebug_info0
 5722 000a 04       		.byte	0x4
 5723 000b 00       		.byte	0
 5724 000c 0000     		.2byte	0
 5725 000e 0000     		.2byte	0
 5726 0010 00000000 		.4byte	.LFB68
 5727 0014 B4000000 		.4byte	.LFE68-.LFB68
 5728 0018 00000000 		.4byte	.LFB69
 5729 001c 58000000 		.4byte	.LFE69-.LFB69
 5730 0020 00000000 		.4byte	.LFB70
 5731 0024 3E000000 		.4byte	.LFE70-.LFB70
 5732 0028 00000000 		.4byte	.LFB71
 5733 002c 34000000 		.4byte	.LFE71-.LFB71
 5734 0030 00000000 		.4byte	.LFB72
 5735 0034 30000000 		.4byte	.LFE72-.LFB72
 5736 0038 00000000 		.4byte	.LFB73
 5737 003c 4C000000 		.4byte	.LFE73-.LFB73
 5738 0040 00000000 		.4byte	.LFB74
 5739 0044 50000000 		.4byte	.LFE74-.LFB74
 5740 0048 00000000 		.4byte	.LFB75
 5741 004c 2C000000 		.4byte	.LFE75-.LFB75
 5742 0050 00000000 		.4byte	.LFB76
 5743 0054 54010000 		.4byte	.LFE76-.LFB76
 5744 0058 00000000 		.4byte	.LFB77
 5745 005c AE000000 		.4byte	.LFE77-.LFB77
 5746 0060 00000000 		.4byte	.LFB78
 5747 0064 A6000000 		.4byte	.LFE78-.LFB78
 5748 0068 00000000 		.4byte	.LFB79
 5749 006c 44010000 		.4byte	.LFE79-.LFB79
 5750 0070 00000000 		.4byte	.LFB80
 5751 0074 90010000 		.4byte	.LFE80-.LFB80
 5752 0078 00000000 		.4byte	.LFB81
 5753 007c 48010000 		.4byte	.LFE81-.LFB81
 5754 0080 00000000 		.4byte	.LFB82
 5755 0084 AC000000 		.4byte	.LFE82-.LFB82
 5756 0088 00000000 		.4byte	.LFB83
 5757 008c 64000000 		.4byte	.LFE83-.LFB83
 5758 0090 00000000 		.4byte	.LFB84
 5759 0094 20000000 		.4byte	.LFE84-.LFB84
 5760 0098 00000000 		.4byte	.LFB85
 5761 009c 2A000000 		.4byte	.LFE85-.LFB85
 5762 00a0 00000000 		.4byte	.LFB86
 5763 00a4 1A000000 		.4byte	.LFE86-.LFB86
 5764 00a8 00000000 		.4byte	.LFB87
 5765 00ac 20000000 		.4byte	.LFE87-.LFB87
 5766 00b0 00000000 		.4byte	.LFB88
 5767 00b4 2E000000 		.4byte	.LFE88-.LFB88
 5768 00b8 00000000 		.4byte	.LFB89
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 154
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 154
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 154
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 154
>>>>>>> parent of cb49844... test


 5769 00bc D4000000 		.4byte	.LFE89-.LFB89
 5770 00c0 00000000 		.4byte	.LFB90
 5771 00c4 4C000000 		.4byte	.LFE90-.LFB90
 5772 00c8 00000000 		.4byte	.LFB91
 5773 00cc A4000000 		.4byte	.LFE91-.LFB91
 5774 00d0 00000000 		.4byte	.LFB92
 5775 00d4 2C000000 		.4byte	.LFE92-.LFB92
 5776 00d8 00000000 		.4byte	.LFB93
 5777 00dc 26000000 		.4byte	.LFE93-.LFB93
 5778 00e0 00000000 		.4byte	.LFB94
 5779 00e4 30000000 		.4byte	.LFE94-.LFB94
 5780 00e8 00000000 		.4byte	.LFB95
 5781 00ec 2A000000 		.4byte	.LFE95-.LFB95
 5782 00f0 00000000 		.4byte	.LFB96
 5783 00f4 50000000 		.4byte	.LFE96-.LFB96
 5784 00f8 00000000 		.4byte	.LFB97
 5785 00fc 4C000000 		.4byte	.LFE97-.LFB97
 5786 0100 00000000 		.4byte	.LFB98
 5787 0104 50000000 		.4byte	.LFE98-.LFB98
 5788 0108 00000000 		.4byte	0
 5789 010c 00000000 		.4byte	0
 5790              		.section	.debug_ranges,"",%progbits
 5791              	.Ldebug_ranges0:
 5792 0000 00000000 		.4byte	.LFB68
 5793 0004 B4000000 		.4byte	.LFE68
 5794 0008 00000000 		.4byte	.LFB69
 5795 000c 58000000 		.4byte	.LFE69
 5796 0010 00000000 		.4byte	.LFB70
 5797 0014 3E000000 		.4byte	.LFE70
 5798 0018 00000000 		.4byte	.LFB71
 5799 001c 34000000 		.4byte	.LFE71
 5800 0020 00000000 		.4byte	.LFB72
 5801 0024 30000000 		.4byte	.LFE72
 5802 0028 00000000 		.4byte	.LFB73
 5803 002c 4C000000 		.4byte	.LFE73
 5804 0030 00000000 		.4byte	.LFB74
 5805 0034 50000000 		.4byte	.LFE74
 5806 0038 00000000 		.4byte	.LFB75
 5807 003c 2C000000 		.4byte	.LFE75
 5808 0040 00000000 		.4byte	.LFB76
 5809 0044 54010000 		.4byte	.LFE76
 5810 0048 00000000 		.4byte	.LFB77
 5811 004c AE000000 		.4byte	.LFE77
 5812 0050 00000000 		.4byte	.LFB78
 5813 0054 A6000000 		.4byte	.LFE78
 5814 0058 00000000 		.4byte	.LFB79
 5815 005c 44010000 		.4byte	.LFE79
 5816 0060 00000000 		.4byte	.LFB80
 5817 0064 90010000 		.4byte	.LFE80
 5818 0068 00000000 		.4byte	.LFB81
 5819 006c 48010000 		.4byte	.LFE81
 5820 0070 00000000 		.4byte	.LFB82
 5821 0074 AC000000 		.4byte	.LFE82
 5822 0078 00000000 		.4byte	.LFB83
 5823 007c 64000000 		.4byte	.LFE83
 5824 0080 00000000 		.4byte	.LFB84
 5825 0084 20000000 		.4byte	.LFE84
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 155
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 155
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 155
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 155
>>>>>>> parent of cb49844... test


 5826 0088 00000000 		.4byte	.LFB85
 5827 008c 2A000000 		.4byte	.LFE85
 5828 0090 00000000 		.4byte	.LFB86
 5829 0094 1A000000 		.4byte	.LFE86
 5830 0098 00000000 		.4byte	.LFB87
 5831 009c 20000000 		.4byte	.LFE87
 5832 00a0 00000000 		.4byte	.LFB88
 5833 00a4 2E000000 		.4byte	.LFE88
 5834 00a8 00000000 		.4byte	.LFB89
 5835 00ac D4000000 		.4byte	.LFE89
 5836 00b0 00000000 		.4byte	.LFB90
 5837 00b4 4C000000 		.4byte	.LFE90
 5838 00b8 00000000 		.4byte	.LFB91
 5839 00bc A4000000 		.4byte	.LFE91
 5840 00c0 00000000 		.4byte	.LFB92
 5841 00c4 2C000000 		.4byte	.LFE92
 5842 00c8 00000000 		.4byte	.LFB93
 5843 00cc 26000000 		.4byte	.LFE93
 5844 00d0 00000000 		.4byte	.LFB94
 5845 00d4 30000000 		.4byte	.LFE94
 5846 00d8 00000000 		.4byte	.LFB95
 5847 00dc 2A000000 		.4byte	.LFE95
 5848 00e0 00000000 		.4byte	.LFB96
 5849 00e4 50000000 		.4byte	.LFE96
 5850 00e8 00000000 		.4byte	.LFB97
 5851 00ec 4C000000 		.4byte	.LFE97
 5852 00f0 00000000 		.4byte	.LFB98
 5853 00f4 50000000 		.4byte	.LFE98
 5854 00f8 00000000 		.4byte	0
 5855 00fc 00000000 		.4byte	0
 5856              		.section	.debug_line,"",%progbits
 5857              	.Ldebug_line0:
 5858 0000 44070000 		.section	.debug_str,"MS",%progbits,1
 5858      02004F02 
 5858      00000201 
 5858      FB0E0D00 
 5858      01010101 
 5859              	.LASF33:
 5860 0000 75784E75 		.ascii	"uxNumberOfItems\000"
 5860      6D626572 
 5860      4F664974 
 5860      656D7300 
 5861              	.LASF101:
 5862 0010 78517565 		.ascii	"xQueueReceive\000"
 5862      75655265 
 5862      63656976 
 5862      6500
 5863              	.LASF109:
 5864 001e 78517565 		.ascii	"xQueueReceiveFromISR\000"
 5864      75655265 
 5864      63656976 
 5864      6546726F 
 5864      6D495352 
 5865              	.LASF52:
 5866 0033 78546173 		.ascii	"xTasksWaitingToReceive\000"
 5866      6B735761 
 5866      6974696E 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 156
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 156
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 156
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 156
>>>>>>> parent of cb49844... test


 5866      67546F52 
 5866      65636569 
 5867              	.LASF98:
 5868 004a 70784869 		.ascii	"pxHigherPriorityTaskWoken\000"
 5868      67686572 
 5868      5072696F 
 5868      72697479 
 5868      5461736B 
 5869              	.LASF85:
 5870 0064 70784D75 		.ascii	"pxMutex\000"
 5870      74657800 
 5871              	.LASF103:
 5872 006c 78517565 		.ascii	"xQueueSemaphoreTake\000"
 5872      75655365 
 5872      6D617068 
 5872      6F726554 
 5872      616B6500 
 5873              	.LASF0:
 5874 0080 756E7369 		.ascii	"unsigned int\000"
 5874      676E6564 
 5874      20696E74 
 5874      00
 5875              	.LASF34:
 5876 008d 7078496E 		.ascii	"pxIndex\000"
 5876      64657800 
 5877              	.LASF40:
 5878 0095 7854494D 		.ascii	"xTIME_OUT\000"
 5878      455F4F55 
 5878      5400
 5879              	.LASF74:
 5880 009f 70784E65 		.ascii	"pxNewQueue\000"
 5880      77517565 
 5880      756500
 5881              	.LASF10:
 5882 00aa 5F5F696E 		.ascii	"__int32_t\000"
 5882      7433325F 
 5882      7400
 5883              	.LASF31:
 5884 00b4 784C4953 		.ascii	"xLIST_ITEM\000"
 5884      545F4954 
 5884      454D00
 5885              	.LASF60:
 5886 00bf 51554555 		.ascii	"QUEUE_REGISTRY_ITEM\000"
 5886      455F5245 
 5886      47495354 
 5886      52595F49 
 5886      54454D00 
 5887              	.LASF132:
 5888 00d3 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5888      43313120 
 5888      352E342E 
 5888      31203230 
 5888      31363036 
 5889 0106 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5889      20726576 
 5889      6973696F 
 5889      6E203233 
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\cc2cpKe9.s 			page 157
=======
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 157
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 157
>>>>>>> parent of cb49844... test
=======
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 157
>>>>>>> parent of cb49844... test


 5889      37373135 
 5890 0139 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5890      66756E63 
 5890      74696F6E 
 5890      2D736563 
 5890      74696F6E 
 5891              	.LASF51:
 5892 0161 78546173 		.ascii	"xTasksWaitingToSend\000"
 5892      6B735761 
 5892      6974696E 
 5892      67546F53 
 5892      656E6400 
 5893              	.LASF113:
 5894 0175 75785175 		.ascii	"uxQueueSpacesAvailable\000"
 5894      65756553 
 5894      70616365 
 5894      73417661 
 5894      696C6162 
 5895              	.LASF57:
 5896 018c 6354784C 		.ascii	"cTxLock\000"
 5896      6F636B00 
 5897              	.LASF41:
 5898 0194 784F7665 		.ascii	"xOverflowCount\000"
 5898      72666C6F 
 5898      77436F75 
 5898      6E7400
 5899              	.LASF46:
 5900 01a3 75785265 		.ascii	"uxRecursiveCallCount\000"
 5900      63757273 
 5900      69766543 
 5900      616C6C43 
 5900      6F756E74 
 5901              	.LASF59:
 5902 01b8 51756575 		.ascii	"Queue_t\000"
 5902      655F7400 
 5903              	.LASF93:
 5904 01c0 78436F70 		.ascii	"xCopyPosition\000"
 5904      79506F73 
 5904      6974696F 
 5904      6E00
 5905              	.LASF112:
 5906 01ce 75785265 		.ascii	"uxReturn\000"
 5906      7475726E 
 5906      00
 5907              	.LASF64:
 5908 01d7 51756575 		.ascii	"QueueRegistryItem_t\000"
 5908      65526567 
 5908      69737472 
 5908      79497465 
 5908      6D5F7400 
<<<<<<< HEAD
 5909              	.LASF125:
 5910 01eb 76517565 		.ascii	"vQueueDelete\000"
 5910      75654465 
 5910      6C657465 
 5910      00
 5911              	.LASF45:
 5912 01f8 70635265 		.ascii	"pcReadFrom\000"
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 158


 5912      61644672 
 5912      6F6D00
 5913              	.LASF129:
 5914 0203 76517565 		.ascii	"vQueueUnregisterQueue\000"
 5914      7565556E 
 5914      72656769 
 5914      73746572 
 5914      51756575 
 5915              	.LASF99:
 5916 0219 75785361 		.ascii	"uxSavedInterruptStatus\000"
 5916      76656449 
 5916      6E746572 
 5916      72757074 
 5916      53746174 
 5917              	.LASF77:
 5918 0230 70727649 		.ascii	"prvInitialiseNewQueue\000"
 5918      6E697469 
 5918      616C6973 
 5918      654E6577 
 5918      51756575 
 5919              	.LASF20:
 5920 0246 75696E74 		.ascii	"uint32_t\000"
 5920      33325F74 
 5920      00
 5921              	.LASF17:
 5922 024f 696E7438 		.ascii	"int8_t\000"
 5922      5F7400
 5923              	.LASF81:
 5924 0256 75784D75 		.ascii	"uxMutexSize\000"
 5924      74657853 
 5924      697A6500 
 5925              	.LASF95:
 5926 0262 78596965 		.ascii	"xYieldRequired\000"
 5926      6C645265 
 5926      71756972 
 5926      656400
 5927              	.LASF65:
 5928 0271 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 5928      6967696E 
 5928      616C4241 
 5928      53455052 
 5928      4900
 5929              	.LASF67:
 5930 0283 78517565 		.ascii	"xQueue\000"
 5930      756500
 5931              	.LASF21:
 5932 028a 666C6F61 		.ascii	"float\000"
 5932      7400
 5933              	.LASF47:
 5934 0290 51756575 		.ascii	"QueueDefinition\000"
 5934      65446566 
 5934      696E6974 
 5934      696F6E00 
 5935              	.LASF14:
 5936 02a0 6C6F6E67 		.ascii	"long long unsigned int\000"
 5936      206C6F6E 
 5936      6720756E 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 159


 5936      7369676E 
 5936      65642069 
 5937              	.LASF121:
 5938 02b7 70727649 		.ascii	"prvIsQueueEmpty\000"
 5938      73517565 
 5938      7565456D 
 5938      70747900 
 5939              	.LASF102:
 5940 02c7 70764275 		.ascii	"pvBuffer\000"
 5940      66666572 
 5940      00
 5941              	.LASF116:
 5942 02d0 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 5942      65744469 
 5942      73696E68 
 5942      65726974 
 5942      5072696F 
 5943              	.LASF28:
 5944 02f5 70785072 		.ascii	"pxPrevious\000"
 5944      6576696F 
 5944      757300
 5945              	.LASF53:
 5946 0300 75784D65 		.ascii	"uxMessagesWaiting\000"
 5946      73736167 
 5946      65735761 
 5946      6974696E 
 5946      6700
 5947              	.LASF107:
 5948 0312 78517565 		.ascii	"xQueuePeek\000"
 5948      75655065 
 5948      656B00
 5949              	.LASF94:
 5950 031d 78456E74 		.ascii	"xEntryTimeSet\000"
 5950      72795469 
 5950      6D655365 
 5950      7400
 5951              	.LASF3:
 5952 032b 73697A65 		.ascii	"size_t\000"
 5952      5F7400
 5953              	.LASF96:
 5954 0332 7854696D 		.ascii	"xTimeOut\000"
 5954      654F7574 
 5954      00
 5955              	.LASF62:
 5956 033b 7848616E 		.ascii	"xHandle\000"
 5956      646C6500 
 5957              	.LASF61:
 5958 0343 70635175 		.ascii	"pcQueueName\000"
 5958      6575654E 
 5958      616D6500 
 5959              	.LASF37:
 5960 034f 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 5960      495F4C49 
 5960      53545F49 
 5960      54454D00 
 5961              	.LASF32:
 5962 035f 784C4953 		.ascii	"xLIST\000"
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 160


 5962      5400
 5963              	.LASF97:
 5964 0365 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 5964      75654765 
 5964      6E657269 
 5964      6353656E 
 5964      6446726F 
 5965              	.LASF136:
 5966 037e 76506F72 		.ascii	"vPortSetBASEPRI\000"
 5966      74536574 
 5966      42415345 
 5966      50524900 
 5967              	.LASF117:
 5968 038e 70727643 		.ascii	"prvCopyDataToQueue\000"
 5968      6F707944 
 5968      61746154 
 5968      6F517565 
 5968      756500
 5969              	.LASF91:
 5970 03a1 78517565 		.ascii	"xQueueGenericSend\000"
 5970      75654765 
 5970      6E657269 
 5970      6353656E 
 5970      6400
 5971              	.LASF55:
 5972 03b3 75784974 		.ascii	"uxItemSize\000"
 5972      656D5369 
 5972      7A6500
 5973              	.LASF90:
 5974 03be 7578496E 		.ascii	"uxInitialCount\000"
 5974      69746961 
 5974      6C436F75 
 5974      6E7400
 5975              	.LASF80:
 5976 03cd 75784D75 		.ascii	"uxMutexLength\000"
 5976      7465784C 
 5976      656E6774 
 5976      6800
 5977              	.LASF16:
 5978 03db 63686172 		.ascii	"char\000"
 5978      00
 5979              	.LASF36:
 5980 03e0 4C697374 		.ascii	"ListItem_t\000"
 5980      4974656D 
 5980      5F7400
 5981              	.LASF123:
 5982 03eb 70727649 		.ascii	"prvIsQueueFull\000"
 5982      73517565 
 5982      75654675 
 5982      6C6C00
 5983              	.LASF66:
 5984 03fa 756C4E65 		.ascii	"ulNewBASEPRI\000"
 5984      77424153 
 5984      45505249 
 5984      00
 5985              	.LASF24:
 5986 0407 55426173 		.ascii	"UBaseType_t\000"
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 161


 5986      65547970 
 5986      655F7400 
 5987              	.LASF100:
 5988 0413 78517565 		.ascii	"xQueueGiveFromISR\000"
 5988      75654769 
 5988      76654672 
 5988      6F6D4953 
 5988      5200
 5989              	.LASF131:
 5990 0425 78517565 		.ascii	"xQueueRegistry\000"
 5990      75655265 
 5990      67697374 
 5990      727900
 5991              	.LASF133:
 5992 0434 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS_Source\\queue.c\000"
 5992      2E5C4672 
 5992      65655254 
 5992      4F535F53 
 5992      6F757263 
 5993              	.LASF44:
 5994 0452 51756575 		.ascii	"QueueHandle_t\000"
 5994      6548616E 
 5994      646C655F 
 5994      7400
 5995              	.LASF35:
 5996 0460 784C6973 		.ascii	"xListEnd\000"
 5996      74456E64 
 5996      00
 5997              	.LASF114:
 5998 0469 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 5998      6575654D 
 5998      65737361 
 5998      67657357 
 5998      61697469 
 5999              	.LASF38:
 6000 0487 4D696E69 		.ascii	"MiniListItem_t\000"
 6000      4C697374 
 6000      4974656D 
 6000      5F7400
 6001              	.LASF18:
 6002 0496 75696E74 		.ascii	"uint8_t\000"
 6002      385F7400 
 6003              	.LASF63:
 6004 049e 78517565 		.ascii	"xQueueRegistryItem\000"
 6004      75655265 
 6004      67697374 
 6004      72794974 
 6004      656D00
 6005              	.LASF70:
 6006 04b1 78517565 		.ascii	"xQueueGenericCreate\000"
 6006      75654765 
 6006      6E657269 
 6006      63437265 
 6006      61746500 
 6007              	.LASF79:
 6008 04c5 78517565 		.ascii	"xQueueCreateMutex\000"
 6008      75654372 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 162


 6008      65617465 
 6008      4D757465 
 6008      7800
 6009              	.LASF135:
 6010 04d7 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 6010      72745261 
 6010      69736542 
 6010      41534550 
 6010      524900
 6011              	.LASF1:
 6012 04ea 6C6F6E67 		.ascii	"long long int\000"
 6012      206C6F6E 
 6012      6720696E 
 6012      7400
 6013              	.LASF78:
 6014 04f8 70727649 		.ascii	"prvInitialiseMutex\000"
 6014      6E697469 
 6014      616C6973 
 6014      654D7574 
 6014      657800
 6015              	.LASF23:
 6016 050b 42617365 		.ascii	"BaseType_t\000"
 6016      54797065 
 6016      5F7400
 6017              	.LASF76:
 6018 0516 70756351 		.ascii	"pucQueueStorage\000"
 6018      75657565 
 6018      53746F72 
 6018      61676500 
 6019              	.LASF83:
 6020 0526 784D7574 		.ascii	"xMutex\000"
 6020      657800
 6021              	.LASF42:
 6022 052d 7854696D 		.ascii	"xTimeOnEntering\000"
 6022      654F6E45 
 6022      6E746572 
 6022      696E6700 
 6023              	.LASF126:
 6024 053d 76517565 		.ascii	"vQueueAddToRegistry\000"
 6024      75654164 
 6024      64546F52 
 6024      65676973 
 6024      74727900 
 6025              	.LASF27:
 6026 0551 70784E65 		.ascii	"pxNext\000"
 6026      787400
 6027              	.LASF68:
 6028 0558 784E6577 		.ascii	"xNewQueue\000"
 6028      51756575 
 6028      6500
 6029              	.LASF89:
 6030 0562 75784D61 		.ascii	"uxMaxCount\000"
 6030      78436F75 
 6030      6E7400
 6031              	.LASF43:
 6032 056d 54696D65 		.ascii	"TimeOut_t\000"
 6032      4F75745F 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 163


 6032      7400
 6033              	.LASF108:
 6034 0577 70634F72 		.ascii	"pcOriginalReadPosition\000"
 6034      6967696E 
 6034      616C5265 
 6034      6164506F 
 6034      73697469 
 6035              	.LASF134:
 6036 058e 5C5C6164 		.ascii	"\\\\ad.monash.edu\\home\\User041\\sdsir3\\Documents"
 6036      2E6D6F6E 
 6036      6173682E 
 6036      6564755C 
 6036      686F6D65 
 6037 05bb 5C476974 		.ascii	"\\GitHub\\FYP_POSCCreator_Master\\FYP_PSOCCreator_M"
 6037      4875625C 
 6037      4659505F 
 6037      504F5343 
 6037      43726561 
 6038 05eb 61737465 		.ascii	"aster\\CORTEX_CY8C5588_PSoC_Creator_GCC\\FreeRTOS_D"
 6038      725C434F 
 6038      52544558 
 6038      5F435938 
 6038      43353538 
 6039 061c 656D6F2E 		.ascii	"emo.cydsn\000"
 6039      63796473 
 6039      6E00
 6040              	.LASF115:
 6041 0626 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 6041      67686573 
 6041      74507269 
 6041      6F726974 
 6041      794F6657 
 6042              	.LASF137:
 6043 0646 756C4E65 		.ascii	"ulNewMaskValue\000"
 6043      774D6173 
 6043      6B56616C 
 6043      756500
 6044              	.LASF72:
 6045 0655 75635175 		.ascii	"ucQueueType\000"
 6045      65756554 
 6045      79706500 
 6046              	.LASF39:
 6047 0661 4C697374 		.ascii	"List_t\000"
 6047      5F7400
 6048              	.LASF105:
 6049 0668 75785365 		.ascii	"uxSemaphoreCount\000"
 6049      6D617068 
 6049      6F726543 
 6049      6F756E74 
 6049      00
 6050              	.LASF50:
 6051 0679 70635772 		.ascii	"pcWriteTo\000"
 6051      69746554 
 6051      6F00
 6052              	.LASF25:
 6053 0683 5469636B 		.ascii	"TickType_t\000"
 6053      54797065 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 164


 6053      5F7400
 6054              	.LASF4:
 6055 068e 5F5F696E 		.ascii	"__int8_t\000"
 6055      74385F74 
 6055      00
 6056              	.LASF71:
 6057 0697 75785175 		.ascii	"uxQueueLength\000"
 6057      6575654C 
 6057      656E6774 
 6057      6800
 6058              	.LASF2:
 6059 06a5 6C6F6E67 		.ascii	"long double\000"
 6059      20646F75 
 6059      626C6500 
 6060              	.LASF104:
 6061 06b1 78496E68 		.ascii	"xInheritanceOccurred\000"
 6061      65726974 
 6061      616E6365 
 6061      4F636375 
 6061      72726564 
 6062              	.LASF86:
 6063 06c6 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 6063      75655461 
 6063      6B654D75 
 6063      74657852 
 6063      65637572 
 6064              	.LASF127:
 6065 06df 70635175 		.ascii	"pcQueueGetName\000"
 6065      65756547 
 6065      65744E61 
 6065      6D6500
 6066              	.LASF128:
 6067 06ee 70635265 		.ascii	"pcReturn\000"
 6067      7475726E 
 6067      00
 6068              	.LASF54:
 6069 06f7 75784C65 		.ascii	"uxLength\000"
 6069      6E677468 
 6069      00
 6070              	.LASF8:
 6071 0700 73686F72 		.ascii	"short int\000"
 6071      7420696E 
 6071      7400
 6072              	.LASF26:
 6073 070a 78497465 		.ascii	"xItemValue\000"
 6073      6D56616C 
 6073      756500
 6074              	.LASF11:
 6075 0715 6C6F6E67 		.ascii	"long int\000"
 6075      20696E74 
 6075      00
 6076              	.LASF130:
 6077 071e 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6077      52784275 
 6077      66666572 
 6077      00
 6078              	.LASF75:
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 165


 6079 072b 78517565 		.ascii	"xQueueSizeInBytes\000"
 6079      75655369 
 6079      7A65496E 
 6079      42797465 
 6079      7300
 6080              	.LASF92:
 6081 073d 70764974 		.ascii	"pvItemToQueue\000"
 6081      656D546F 
 6081      51756575 
 6081      6500
 6082              	.LASF124:
 6083 074b 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 6083      75654973 
 6083      51756575 
 6083      6546756C 
 6083      6C46726F 
 6084              	.LASF111:
 6085 0764 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 6085      6575654D 
 6085      65737361 
 6085      67657357 
 6085      61697469 
 6086              	.LASF49:
 6087 077b 70635461 		.ascii	"pcTail\000"
 6087      696C00
 6088              	.LASF6:
 6089 0782 5F5F7569 		.ascii	"__uint8_t\000"
 6089      6E74385F 
 6089      7400
 6090              	.LASF73:
 6091 078c 70785175 		.ascii	"pxQueue\000"
 6091      65756500 
 6092              	.LASF84:
 6093 0794 78526574 		.ascii	"xReturn\000"
 6093      75726E00 
 6094              	.LASF15:
 6095 079c 73697A65 		.ascii	"sizetype\000"
 6095      74797065 
 6095      00
 6096              	.LASF13:
 6097 07a5 6C6F6E67 		.ascii	"long unsigned int\000"
 6097      20756E73 
 6097      69676E65 
 6097      6420696E 
 6097      7400
 6098              	.LASF19:
 6099 07b7 696E7433 		.ascii	"int32_t\000"
 6099      325F7400 
 6100              	.LASF110:
 6101 07bf 78517565 		.ascii	"xQueuePeekFromISR\000"
 6101      75655065 
 6101      656B4672 
 6101      6F6D4953 
 6101      5200
 6102              	.LASF30:
 6103 07d1 7078436F 		.ascii	"pxContainer\000"
 6103      6E746169 
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 166


 6103      6E657200 
 6104              	.LASF106:
 6105 07dd 75784869 		.ascii	"uxHighestWaitingPriority\000"
 6105      67686573 
 6105      74576169 
 6105      74696E67 
 6105      5072696F 
 6106              	.LASF7:
 6107 07f6 756E7369 		.ascii	"unsigned char\000"
 6107      676E6564 
 6107      20636861 
 6107      7200
 6108              	.LASF12:
 6109 0804 5F5F7569 		.ascii	"__uint32_t\000"
 6109      6E743332 
 6109      5F7400
 6110              	.LASF119:
 6111 080f 70727643 		.ascii	"prvCopyDataFromQueue\000"
 6111      6F707944 
 6111      61746146 
 6111      726F6D51 
 6111      75657565 
 6112              	.LASF87:
 6113 0824 78546963 		.ascii	"xTicksToWait\000"
 6113      6B73546F 
 6113      57616974 
 6113      00
 6114              	.LASF29:
 6115 0831 70764F77 		.ascii	"pvOwner\000"
 6115      6E657200 
 6116              	.LASF48:
 6117 0839 70634865 		.ascii	"pcHead\000"
 6117      616400
 6118              	.LASF82:
 6119 0840 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 6119      75654769 
 6119      76654D75 
 6119      74657852 
 6119      65637572 
 6120              	.LASF120:
 6121 0859 70727655 		.ascii	"prvUnlockQueue\000"
 6121      6E6C6F63 
 6121      6B517565 
 6121      756500
 6122              	.LASF69:
 6123 0868 78517565 		.ascii	"xQueueGenericReset\000"
 6123      75654765 
 6123      6E657269 
 6123      63526573 
 6123      657400
 6124              	.LASF122:
 6125 087b 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 6125      75654973 
 6125      51756575 
 6125      65456D70 
 6125      74794672 
 6126              	.LASF5:
ARM GAS  C:\Users\sdsir3\AppData\Local\Temp\ccNONyUg.s 			page 167


 6127 0895 7369676E 		.ascii	"signed char\000"
 6127      65642063 
 6127      68617200 
 6128              	.LASF9:
 6129 08a1 73686F72 		.ascii	"short unsigned int\000"
 6129      7420756E 
 6129      7369676E 
 6129      65642069 
 6129      6E7400
 6130              	.LASF58:
 6131 08b4 78515545 		.ascii	"xQUEUE\000"
 6131      554500
 6132              	.LASF22:
 6133 08bb 646F7562 		.ascii	"double\000"
 6133      6C6500
 6134              	.LASF118:
 6135 08c2 78506F73 		.ascii	"xPosition\000"
 6135      6974696F 
 6135      6E00
 6136              	.LASF56:
 6137 08cc 6352784C 		.ascii	"cRxLock\000"
 6137      6F636B00 
 6138              	.LASF88:
 6139 08d4 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 6139      75654372 
 6139      65617465 
 6139      436F756E 
 6139      74696E67 
 6140              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
=======
 5909              	.LASF134:
 5910 01eb 433A5C55 		.ascii	"C:\\Users\\shevi\\Documents\\GitHub\\FYP_POSCCreato"
 5910      73657273 
 5910      5C736865 
 5910      76695C44 
 5910      6F63756D 
 5911 0219 725F4D61 		.ascii	"r_Master\\FYP_PSOCCreator_Master\\CORTEX_CY8C5588_P"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 158


 5911      73746572 
 5911      5C465950 
 5911      5F50534F 
 5911      43437265 
 5912 024a 536F435F 		.ascii	"SoC_Creator_GCC\\FreeRTOS_Demo.cydsn\000"
 5912      43726561 
 5912      746F725F 
 5912      4743435C 
 5912      46726565 
 5913              	.LASF125:
 5914 026e 76517565 		.ascii	"vQueueDelete\000"
 5914      75654465 
 5914      6C657465 
 5914      00
 5915              	.LASF45:
 5916 027b 70635265 		.ascii	"pcReadFrom\000"
 5916      61644672 
 5916      6F6D00
 5917              	.LASF129:
 5918 0286 76517565 		.ascii	"vQueueUnregisterQueue\000"
 5918      7565556E 
 5918      72656769 
 5918      73746572 
 5918      51756575 
 5919              	.LASF99:
 5920 029c 75785361 		.ascii	"uxSavedInterruptStatus\000"
 5920      76656449 
 5920      6E746572 
 5920      72757074 
 5920      53746174 
 5921              	.LASF77:
 5922 02b3 70727649 		.ascii	"prvInitialiseNewQueue\000"
 5922      6E697469 
 5922      616C6973 
 5922      654E6577 
 5922      51756575 
 5923              	.LASF20:
 5924 02c9 75696E74 		.ascii	"uint32_t\000"
 5924      33325F74 
 5924      00
 5925              	.LASF17:
 5926 02d2 696E7438 		.ascii	"int8_t\000"
 5926      5F7400
 5927              	.LASF81:
 5928 02d9 75784D75 		.ascii	"uxMutexSize\000"
 5928      74657853 
 5928      697A6500 
 5929              	.LASF95:
 5930 02e5 78596965 		.ascii	"xYieldRequired\000"
 5930      6C645265 
 5930      71756972 
 5930      656400
 5931              	.LASF65:
 5932 02f4 756C4F72 		.ascii	"ulOriginalBASEPRI\000"
 5932      6967696E 
 5932      616C4241 
 5932      53455052 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 159


 5932      4900
 5933              	.LASF67:
 5934 0306 78517565 		.ascii	"xQueue\000"
 5934      756500
 5935              	.LASF21:
 5936 030d 666C6F61 		.ascii	"float\000"
 5936      7400
 5937              	.LASF47:
 5938 0313 51756575 		.ascii	"QueueDefinition\000"
 5938      65446566 
 5938      696E6974 
 5938      696F6E00 
 5939              	.LASF14:
 5940 0323 6C6F6E67 		.ascii	"long long unsigned int\000"
 5940      206C6F6E 
 5940      6720756E 
 5940      7369676E 
 5940      65642069 
 5941              	.LASF121:
 5942 033a 70727649 		.ascii	"prvIsQueueEmpty\000"
 5942      73517565 
 5942      7565456D 
 5942      70747900 
 5943              	.LASF102:
 5944 034a 70764275 		.ascii	"pvBuffer\000"
 5944      66666572 
 5944      00
 5945              	.LASF116:
 5946 0353 70727647 		.ascii	"prvGetDisinheritPriorityAfterTimeout\000"
 5946      65744469 
 5946      73696E68 
 5946      65726974 
 5946      5072696F 
 5947              	.LASF28:
 5948 0378 70785072 		.ascii	"pxPrevious\000"
 5948      6576696F 
 5948      757300
 5949              	.LASF53:
 5950 0383 75784D65 		.ascii	"uxMessagesWaiting\000"
 5950      73736167 
 5950      65735761 
 5950      6974696E 
 5950      6700
 5951              	.LASF107:
 5952 0395 78517565 		.ascii	"xQueuePeek\000"
 5952      75655065 
 5952      656B00
 5953              	.LASF94:
 5954 03a0 78456E74 		.ascii	"xEntryTimeSet\000"
 5954      72795469 
 5954      6D655365 
 5954      7400
 5955              	.LASF3:
 5956 03ae 73697A65 		.ascii	"size_t\000"
 5956      5F7400
 5957              	.LASF96:
 5958 03b5 7854696D 		.ascii	"xTimeOut\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 160


 5958      654F7574 
 5958      00
 5959              	.LASF62:
 5960 03be 7848616E 		.ascii	"xHandle\000"
 5960      646C6500 
 5961              	.LASF61:
 5962 03c6 70635175 		.ascii	"pcQueueName\000"
 5962      6575654E 
 5962      616D6500 
 5963              	.LASF37:
 5964 03d2 784D494E 		.ascii	"xMINI_LIST_ITEM\000"
 5964      495F4C49 
 5964      53545F49 
 5964      54454D00 
 5965              	.LASF32:
 5966 03e2 784C4953 		.ascii	"xLIST\000"
 5966      5400
 5967              	.LASF97:
 5968 03e8 78517565 		.ascii	"xQueueGenericSendFromISR\000"
 5968      75654765 
 5968      6E657269 
 5968      6353656E 
 5968      6446726F 
 5969              	.LASF136:
 5970 0401 76506F72 		.ascii	"vPortSetBASEPRI\000"
 5970      74536574 
 5970      42415345 
 5970      50524900 
 5971              	.LASF117:
 5972 0411 70727643 		.ascii	"prvCopyDataToQueue\000"
 5972      6F707944 
 5972      61746154 
 5972      6F517565 
 5972      756500
 5973              	.LASF91:
 5974 0424 78517565 		.ascii	"xQueueGenericSend\000"
 5974      75654765 
 5974      6E657269 
 5974      6353656E 
 5974      6400
 5975              	.LASF55:
 5976 0436 75784974 		.ascii	"uxItemSize\000"
 5976      656D5369 
 5976      7A6500
 5977              	.LASF90:
 5978 0441 7578496E 		.ascii	"uxInitialCount\000"
 5978      69746961 
 5978      6C436F75 
 5978      6E7400
 5979              	.LASF80:
 5980 0450 75784D75 		.ascii	"uxMutexLength\000"
 5980      7465784C 
 5980      656E6774 
 5980      6800
 5981              	.LASF16:
 5982 045e 63686172 		.ascii	"char\000"
 5982      00
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 161


 5983              	.LASF36:
 5984 0463 4C697374 		.ascii	"ListItem_t\000"
 5984      4974656D 
 5984      5F7400
 5985              	.LASF123:
 5986 046e 70727649 		.ascii	"prvIsQueueFull\000"
 5986      73517565 
 5986      75654675 
 5986      6C6C00
 5987              	.LASF66:
 5988 047d 756C4E65 		.ascii	"ulNewBASEPRI\000"
 5988      77424153 
 5988      45505249 
 5988      00
 5989              	.LASF24:
 5990 048a 55426173 		.ascii	"UBaseType_t\000"
 5990      65547970 
 5990      655F7400 
 5991              	.LASF100:
 5992 0496 78517565 		.ascii	"xQueueGiveFromISR\000"
 5992      75654769 
 5992      76654672 
 5992      6F6D4953 
 5992      5200
 5993              	.LASF131:
 5994 04a8 78517565 		.ascii	"xQueueRegistry\000"
 5994      75655265 
 5994      67697374 
 5994      727900
 5995              	.LASF133:
 5996 04b7 2E2E5C2E 		.ascii	"..\\..\\FreeRTOS_Source\\queue.c\000"
 5996      2E5C4672 
 5996      65655254 
 5996      4F535F53 
 5996      6F757263 
 5997              	.LASF44:
 5998 04d5 51756575 		.ascii	"QueueHandle_t\000"
 5998      6548616E 
 5998      646C655F 
 5998      7400
 5999              	.LASF35:
 6000 04e3 784C6973 		.ascii	"xListEnd\000"
 6000      74456E64 
 6000      00
 6001              	.LASF114:
 6002 04ec 75785175 		.ascii	"uxQueueMessagesWaitingFromISR\000"
 6002      6575654D 
 6002      65737361 
 6002      67657357 
 6002      61697469 
 6003              	.LASF38:
 6004 050a 4D696E69 		.ascii	"MiniListItem_t\000"
 6004      4C697374 
 6004      4974656D 
 6004      5F7400
 6005              	.LASF18:
 6006 0519 75696E74 		.ascii	"uint8_t\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 162


 6006      385F7400 
 6007              	.LASF63:
 6008 0521 78517565 		.ascii	"xQueueRegistryItem\000"
 6008      75655265 
 6008      67697374 
 6008      72794974 
 6008      656D00
 6009              	.LASF70:
 6010 0534 78517565 		.ascii	"xQueueGenericCreate\000"
 6010      75654765 
 6010      6E657269 
 6010      63437265 
 6010      61746500 
 6011              	.LASF79:
 6012 0548 78517565 		.ascii	"xQueueCreateMutex\000"
 6012      75654372 
 6012      65617465 
 6012      4D757465 
 6012      7800
 6013              	.LASF135:
 6014 055a 756C506F 		.ascii	"ulPortRaiseBASEPRI\000"
 6014      72745261 
 6014      69736542 
 6014      41534550 
 6014      524900
 6015              	.LASF1:
 6016 056d 6C6F6E67 		.ascii	"long long int\000"
 6016      206C6F6E 
 6016      6720696E 
 6016      7400
 6017              	.LASF78:
 6018 057b 70727649 		.ascii	"prvInitialiseMutex\000"
 6018      6E697469 
 6018      616C6973 
 6018      654D7574 
 6018      657800
 6019              	.LASF23:
 6020 058e 42617365 		.ascii	"BaseType_t\000"
 6020      54797065 
 6020      5F7400
 6021              	.LASF76:
 6022 0599 70756351 		.ascii	"pucQueueStorage\000"
 6022      75657565 
 6022      53746F72 
 6022      61676500 
 6023              	.LASF83:
 6024 05a9 784D7574 		.ascii	"xMutex\000"
 6024      657800
 6025              	.LASF42:
 6026 05b0 7854696D 		.ascii	"xTimeOnEntering\000"
 6026      654F6E45 
 6026      6E746572 
 6026      696E6700 
 6027              	.LASF126:
 6028 05c0 76517565 		.ascii	"vQueueAddToRegistry\000"
 6028      75654164 
 6028      64546F52 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 163


 6028      65676973 
 6028      74727900 
 6029              	.LASF27:
 6030 05d4 70784E65 		.ascii	"pxNext\000"
 6030      787400
 6031              	.LASF68:
 6032 05db 784E6577 		.ascii	"xNewQueue\000"
 6032      51756575 
 6032      6500
 6033              	.LASF89:
 6034 05e5 75784D61 		.ascii	"uxMaxCount\000"
 6034      78436F75 
 6034      6E7400
 6035              	.LASF43:
 6036 05f0 54696D65 		.ascii	"TimeOut_t\000"
 6036      4F75745F 
 6036      7400
 6037              	.LASF108:
 6038 05fa 70634F72 		.ascii	"pcOriginalReadPosition\000"
 6038      6967696E 
 6038      616C5265 
 6038      6164506F 
 6038      73697469 
 6039              	.LASF115:
 6040 0611 75784869 		.ascii	"uxHighestPriorityOfWaitingTasks\000"
 6040      67686573 
 6040      74507269 
 6040      6F726974 
 6040      794F6657 
 6041              	.LASF137:
 6042 0631 756C4E65 		.ascii	"ulNewMaskValue\000"
 6042      774D6173 
 6042      6B56616C 
 6042      756500
 6043              	.LASF72:
 6044 0640 75635175 		.ascii	"ucQueueType\000"
 6044      65756554 
 6044      79706500 
 6045              	.LASF39:
 6046 064c 4C697374 		.ascii	"List_t\000"
 6046      5F7400
 6047              	.LASF105:
 6048 0653 75785365 		.ascii	"uxSemaphoreCount\000"
 6048      6D617068 
 6048      6F726543 
 6048      6F756E74 
 6048      00
 6049              	.LASF50:
 6050 0664 70635772 		.ascii	"pcWriteTo\000"
 6050      69746554 
 6050      6F00
 6051              	.LASF25:
 6052 066e 5469636B 		.ascii	"TickType_t\000"
 6052      54797065 
 6052      5F7400
 6053              	.LASF4:
 6054 0679 5F5F696E 		.ascii	"__int8_t\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 164


 6054      74385F74 
 6054      00
 6055              	.LASF71:
 6056 0682 75785175 		.ascii	"uxQueueLength\000"
 6056      6575654C 
 6056      656E6774 
 6056      6800
 6057              	.LASF2:
 6058 0690 6C6F6E67 		.ascii	"long double\000"
 6058      20646F75 
 6058      626C6500 
 6059              	.LASF104:
 6060 069c 78496E68 		.ascii	"xInheritanceOccurred\000"
 6060      65726974 
 6060      616E6365 
 6060      4F636375 
 6060      72726564 
 6061              	.LASF86:
 6062 06b1 78517565 		.ascii	"xQueueTakeMutexRecursive\000"
 6062      75655461 
 6062      6B654D75 
 6062      74657852 
 6062      65637572 
 6063              	.LASF127:
 6064 06ca 70635175 		.ascii	"pcQueueGetName\000"
 6064      65756547 
 6064      65744E61 
 6064      6D6500
 6065              	.LASF128:
 6066 06d9 70635265 		.ascii	"pcReturn\000"
 6066      7475726E 
 6066      00
 6067              	.LASF54:
 6068 06e2 75784C65 		.ascii	"uxLength\000"
 6068      6E677468 
 6068      00
 6069              	.LASF8:
 6070 06eb 73686F72 		.ascii	"short int\000"
 6070      7420696E 
 6070      7400
 6071              	.LASF26:
 6072 06f5 78497465 		.ascii	"xItemValue\000"
 6072      6D56616C 
 6072      756500
 6073              	.LASF11:
 6074 0700 6C6F6E67 		.ascii	"long int\000"
 6074      20696E74 
 6074      00
 6075              	.LASF130:
 6076 0709 49544D5F 		.ascii	"ITM_RxBuffer\000"
 6076      52784275 
 6076      66666572 
 6076      00
 6077              	.LASF75:
 6078 0716 78517565 		.ascii	"xQueueSizeInBytes\000"
 6078      75655369 
 6078      7A65496E 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 165


 6078      42797465 
 6078      7300
 6079              	.LASF92:
 6080 0728 70764974 		.ascii	"pvItemToQueue\000"
 6080      656D546F 
 6080      51756575 
 6080      6500
 6081              	.LASF124:
 6082 0736 78517565 		.ascii	"xQueueIsQueueFullFromISR\000"
 6082      75654973 
 6082      51756575 
 6082      6546756C 
 6082      6C46726F 
 6083              	.LASF111:
 6084 074f 75785175 		.ascii	"uxQueueMessagesWaiting\000"
 6084      6575654D 
 6084      65737361 
 6084      67657357 
 6084      61697469 
 6085              	.LASF49:
 6086 0766 70635461 		.ascii	"pcTail\000"
 6086      696C00
 6087              	.LASF6:
 6088 076d 5F5F7569 		.ascii	"__uint8_t\000"
 6088      6E74385F 
 6088      7400
 6089              	.LASF73:
 6090 0777 70785175 		.ascii	"pxQueue\000"
 6090      65756500 
 6091              	.LASF84:
 6092 077f 78526574 		.ascii	"xReturn\000"
 6092      75726E00 
 6093              	.LASF15:
 6094 0787 73697A65 		.ascii	"sizetype\000"
 6094      74797065 
 6094      00
 6095              	.LASF13:
 6096 0790 6C6F6E67 		.ascii	"long unsigned int\000"
 6096      20756E73 
 6096      69676E65 
 6096      6420696E 
 6096      7400
 6097              	.LASF19:
 6098 07a2 696E7433 		.ascii	"int32_t\000"
 6098      325F7400 
 6099              	.LASF110:
 6100 07aa 78517565 		.ascii	"xQueuePeekFromISR\000"
 6100      75655065 
 6100      656B4672 
 6100      6F6D4953 
 6100      5200
 6101              	.LASF30:
 6102 07bc 7078436F 		.ascii	"pxContainer\000"
 6102      6E746169 
 6102      6E657200 
 6103              	.LASF106:
 6104 07c8 75784869 		.ascii	"uxHighestWaitingPriority\000"
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 166


 6104      67686573 
 6104      74576169 
 6104      74696E67 
 6104      5072696F 
 6105              	.LASF7:
 6106 07e1 756E7369 		.ascii	"unsigned char\000"
 6106      676E6564 
 6106      20636861 
 6106      7200
 6107              	.LASF12:
 6108 07ef 5F5F7569 		.ascii	"__uint32_t\000"
 6108      6E743332 
 6108      5F7400
 6109              	.LASF119:
 6110 07fa 70727643 		.ascii	"prvCopyDataFromQueue\000"
 6110      6F707944 
 6110      61746146 
 6110      726F6D51 
 6110      75657565 
 6111              	.LASF87:
 6112 080f 78546963 		.ascii	"xTicksToWait\000"
 6112      6B73546F 
 6112      57616974 
 6112      00
 6113              	.LASF29:
 6114 081c 70764F77 		.ascii	"pvOwner\000"
 6114      6E657200 
 6115              	.LASF48:
 6116 0824 70634865 		.ascii	"pcHead\000"
 6116      616400
 6117              	.LASF82:
 6118 082b 78517565 		.ascii	"xQueueGiveMutexRecursive\000"
 6118      75654769 
 6118      76654D75 
 6118      74657852 
 6118      65637572 
 6119              	.LASF120:
 6120 0844 70727655 		.ascii	"prvUnlockQueue\000"
 6120      6E6C6F63 
 6120      6B517565 
 6120      756500
 6121              	.LASF69:
 6122 0853 78517565 		.ascii	"xQueueGenericReset\000"
 6122      75654765 
 6122      6E657269 
 6122      63526573 
 6122      657400
 6123              	.LASF122:
 6124 0866 78517565 		.ascii	"xQueueIsQueueEmptyFromISR\000"
 6124      75654973 
 6124      51756575 
 6124      65456D70 
 6124      74794672 
 6125              	.LASF5:
 6126 0880 7369676E 		.ascii	"signed char\000"
 6126      65642063 
 6126      68617200 
ARM GAS  C:\Users\shevi\AppData\Local\Temp\ccFMDtdE.s 			page 167


 6127              	.LASF9:
 6128 088c 73686F72 		.ascii	"short unsigned int\000"
 6128      7420756E 
 6128      7369676E 
 6128      65642069 
 6128      6E7400
 6129              	.LASF58:
 6130 089f 78515545 		.ascii	"xQUEUE\000"
 6130      554500
 6131              	.LASF22:
 6132 08a6 646F7562 		.ascii	"double\000"
 6132      6C6500
 6133              	.LASF118:
 6134 08ad 78506F73 		.ascii	"xPosition\000"
 6134      6974696F 
 6134      6E00
 6135              	.LASF56:
 6136 08b7 6352784C 		.ascii	"cRxLock\000"
 6136      6F636B00 
 6137              	.LASF88:
 6138 08bf 78517565 		.ascii	"xQueueCreateCountingSemaphore\000"
 6138      75654372 
 6138      65617465 
 6138      436F756E 
 6138      74696E67 
 6139              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
>>>>>>> c9b510a773d88c725b10924e41e3b58e459a6304
